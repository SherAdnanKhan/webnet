/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@shopify/draggable/lib/draggable.bundle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/draggable.bundle.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_571__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_571__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_571__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_571__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_571__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_571__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_571__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_571__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_571__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_571__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_571__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_571__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_571__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_571__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_571__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_571__(__nested_webpack_require_571__.s = 72);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4119__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_4119__(66);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_4550__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_4550__(70);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_4977__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_4977__(57);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_4977__(55);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_4977__(53);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_4977__(51);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_6101__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_6101__(46);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6568__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_6568__(49);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sensor2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6967__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_6967__(14);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_6967__(13);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Plugins = __nested_webpack_require_6967__(12);\r\n\r\nObject.keys(_Plugins).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Plugins[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sensors = __nested_webpack_require_6967__(6);\r\n\r\nObject.keys(_Sensors).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Sensors[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Draggable = __nested_webpack_require_6967__(39);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Draggable2.default;\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_8552__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_8552__(4);\r\n\r\nObject.defineProperty(exports, 'Sensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sensor).default;\r\n  }\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_8552__(48);\r\n\r\nObject.defineProperty(exports, 'MouseSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_MouseSensor).default;\r\n  }\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_8552__(45);\r\n\r\nObject.defineProperty(exports, 'TouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_TouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_8552__(43);\r\n\r\nObject.defineProperty(exports, 'DragSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_DragSensor).default;\r\n  }\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_8552__(41);\r\n\r\nObject.defineProperty(exports, 'ForceTouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ForceTouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_8552__(3);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_10158__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_10158__(20);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_10634__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_10634__(25);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_11113__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SortableEvent = __nested_webpack_require_11113__(29);\r\n\r\nObject.keys(_SortableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SortableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __nested_webpack_require_11587__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SwappableEvent = __nested_webpack_require_11587__(32);\r\n\r\nObject.keys(_SwappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SwappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_12064__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DroppableEvent = __nested_webpack_require_12064__(35);\r\n\r\nObject.keys(_DroppableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DroppableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_12541__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Announcement = __nested_webpack_require_12541__(68);\r\n\r\nObject.defineProperty(exports, 'Announcement', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Announcement).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultAnnouncementOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Announcement.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_12541__(65);\r\n\r\nObject.defineProperty(exports, 'Focusable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Focusable).default;\r\n  }\r\n});\r\n\r\nvar _Mirror = __nested_webpack_require_12541__(63);\r\n\r\nObject.defineProperty(exports, 'Mirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Mirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Mirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Scrollable = __nested_webpack_require_12541__(59);\r\n\r\nObject.defineProperty(exports, 'Scrollable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Scrollable).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultScrollableOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Scrollable.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_14085__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_14085__(69);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_14562__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_14562__(71);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_15024__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_15024__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\nconst onSortableSort = Symbol('onSortableSort');\r\n\r\n/**\r\n * SortAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out'\r\n};\r\n\r\n/**\r\n * SortAnimation plugin adds sort animation for sortable\r\n * @class SortAnimation\r\n * @module SortAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SortAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SortAnimation constructor.\r\n   * @constructs SortAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SortAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n    this.lastElements = [];\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n    this[onSortableSort] = this[onSortableSort].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sort', this[onSortableSort]);\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sort', this[onSortableSort]);\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.sortAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sort handler\r\n   * @param {SortableSortEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSort]({ dragEvent }) {\r\n    const { sourceContainer } = dragEvent;\r\n    const elements = this.draggable.getDraggableElementsForContainer(sourceContainer);\r\n    this.lastElements = Array.from(elements).map(el => {\r\n      return {\r\n        domEl: el,\r\n        offsetTop: el.offsetTop,\r\n        offsetLeft: el.offsetLeft\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex }) {\r\n    if (oldIndex === newIndex) {\r\n      return;\r\n    }\r\n\r\n    const effectedElements = [];\r\n    let start;\r\n    let end;\r\n    let num;\r\n    if (oldIndex > newIndex) {\r\n      start = newIndex;\r\n      end = oldIndex - 1;\r\n      num = 1;\r\n    } else {\r\n      start = oldIndex + 1;\r\n      end = newIndex;\r\n      num = -1;\r\n    }\r\n\r\n    for (let i = start; i <= end; i++) {\r\n      const from = this.lastElements[i];\r\n      const to = this.lastElements[i + num];\r\n      effectedElements.push({ from, to });\r\n    }\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      effectedElements.forEach(element => animate(element, this.options));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SortAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {Object} element\r\n                                  * @param {Object} element.from\r\n                                  * @param {Object} element.to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate({ from, to }, { duration, easingFunction }) {\r\n  const domEl = from.domEl;\r\n  const x = from.offsetLeft - to.offsetLeft;\r\n  const y = from.offsetTop - to.offsetTop;\r\n\r\n  domEl.style.pointerEvents = 'none';\r\n  domEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n\r\n  requestAnimationFrame(() => {\r\n    domEl.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n    domEl.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n    domEl.style.transform = '';\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_20494__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SortAnimation = __nested_webpack_require_20494__(15);\r\n\r\nvar _SortAnimation2 = _interopRequireDefault(_SortAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SortAnimation2.default;\r\nexports.defaultOptions = _SortAnimation.defaultOptions;\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_21016__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_21016__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\n\r\n/**\r\n * SwapAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @property {Boolean} defaultOptions.horizontal\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out',\r\n  horizontal: false\r\n};\r\n\r\n/**\r\n * SwapAnimation plugin adds swap animations for sortable\r\n * @class SwapAnimation\r\n * @module SwapAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SwapAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SwapAnimation constructor.\r\n   * @constructs SwapAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SwapAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.swapAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex, dragEvent }) {\r\n    const { source, over } = dragEvent;\r\n\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      if (oldIndex >= newIndex) {\r\n        animate(source, over, this.options);\r\n      } else {\r\n        animate(over, source, this.options);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SwapAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {HTMLElement} from\r\n                                  * @param {HTMLElement} to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @param {String} options.horizontal\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate(from, to, { duration, easingFunction, horizontal }) {\r\n  for (const element of [from, to]) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n\r\n  if (horizontal) {\r\n    const width = from.offsetWidth;\r\n    from.style.transform = `translate3d(${width}px, 0, 0)`;\r\n    to.style.transform = `translate3d(-${width}px, 0, 0)`;\r\n  } else {\r\n    const height = from.offsetHeight;\r\n    from.style.transform = `translate3d(0, ${height}px, 0)`;\r\n    to.style.transform = `translate3d(0, -${height}px, 0)`;\r\n  }\r\n\r\n  requestAnimationFrame(() => {\r\n    for (const element of [from, to]) {\r\n      element.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n      element.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n      element.style.transform = '';\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_25750__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SwapAnimation = __nested_webpack_require_25750__(17);\r\n\r\nvar _SwapAnimation2 = _interopRequireDefault(_SwapAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SwapAnimation2.default;\r\nexports.defaultOptions = _SwapAnimation.defaultOptions;\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_26272__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_26272__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _SnappableEvent = __nested_webpack_require_26272__(7);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragOut = Symbol('onDragOut');\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\n\r\n/**\r\n * Snappable plugin which snaps draggable elements into place\r\n * @class Snappable\r\n * @module Snappable\r\n * @extends AbstractPlugin\r\n */\r\nclass Snappable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Snappable constructor.\r\n   * @constructs Snappable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of the first source element\r\n     * @property {HTMLElement|null} firstSource\r\n     */\r\n    this.firstSource = null;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragOut] = this[onDragOut].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:stop', this[onDragStop]).on('drag:over', this[onDragOver]).on('drag:out', this[onDragOut]).on('droppable:over', this[onDragOver]).on('droppable:out', this[onDragOut]).on('mirror:created', this[onMirrorCreated]).on('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:stop', this[onDragStop]).off('drag:over', this[onDragOver]).off('drag:out', this[onDragOut]).off('droppable:over', this[onDragOver]).off('droppable:out', this[onDragOut]).off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.firstSource = event.source;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop]() {\r\n    this.firstSource = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent|DroppableOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    if (source === this.firstSource) {\r\n      this.firstSource = null;\r\n      return;\r\n    }\r\n\r\n    const snapInEvent = new _SnappableEvent.SnapInEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapInEvent);\r\n\r\n    if (snapInEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = 'none';\r\n    }\r\n\r\n    source.classList.remove(...this.draggable.getClassNamesFor('source:dragging'));\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:placed'));\r\n\r\n    // Need to cancel this in drag out\r\n    setTimeout(() => {\r\n      source.classList.remove(...this.draggable.getClassNamesFor('source:placed'));\r\n    }, this.draggable.options.placedTimeout);\r\n  }\r\n\r\n  /**\r\n   * Drag out handler\r\n   * @private\r\n   * @param {DragOutEvent|DroppableOutEvent} event - Drag out event\r\n   */\r\n  [onDragOut](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    const snapOutEvent = new _SnappableEvent.SnapOutEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapOutEvent);\r\n\r\n    if (snapOutEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = '';\r\n    }\r\n\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:dragging'));\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n}\r\nexports.default = Snappable;\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __nested_webpack_require_31258__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SnapOutEvent = exports.SnapInEvent = exports.SnapEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_31258__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base snap event\r\n * @class SnapEvent\r\n * @module SnapEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SnapEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this snap event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Snappable element\r\n   * @property snappable\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get snappable() {\r\n    return this.data.snappable;\r\n  }\r\n}\r\n\r\nexports.SnapEvent = SnapEvent; /**\r\n                                * Snap in event\r\n                                * @class SnapInEvent\r\n                                * @module SnapInEvent\r\n                                * @extends SnapEvent\r\n                                */\r\n\r\nSnapEvent.type = 'snap';\r\nclass SnapInEvent extends SnapEvent {}\r\n\r\nexports.SnapInEvent = SnapInEvent; /**\r\n                                    * Snap out event\r\n                                    * @class SnapOutEvent\r\n                                    * @module SnapOutEvent\r\n                                    * @extends SnapEvent\r\n                                    */\r\n\r\nSnapInEvent.type = 'snap:in';\r\nSnapInEvent.cancelable = true;\r\nclass SnapOutEvent extends SnapEvent {}\r\nexports.SnapOutEvent = SnapOutEvent;\r\nSnapOutEvent.type = 'snap:out';\r\nSnapOutEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __nested_webpack_require_33105__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_33105__(7);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_33105__(19);\r\n\r\nvar _Snappable2 = _interopRequireDefault(_Snappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Snappable2.default;\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __nested_webpack_require_33824__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_33824__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_33824__(2);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst resize = Symbol('resize');\r\n\r\n/**\r\n * ResizeMirror default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {};\r\n\r\n/**\r\n * The ResizeMirror plugin resizes the mirror element to the dimensions of the draggable element that the mirror is hovering over\r\n * @class ResizeMirror\r\n * @module ResizeMirror\r\n * @extends AbstractPlugin\r\n */\r\nclass ResizeMirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * ResizeMirror constructor.\r\n   * @constructs ResizeMirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * ResizeMirror options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * ResizeMirror remembers the last width when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastWidth\r\n     */\r\n    this.lastWidth = 0;\r\n\r\n    /**\r\n     * ResizeMirror remembers the last height when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastHeight\r\n     */\r\n    this.lastHeight = 0;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('mirror:created', this[onMirrorCreated]).on('drag:over', this[onDragOver]).on('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]).off('drag:over', this[onDragOver]).off('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.resizeMirror || {};\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [onDragOver](dragEvent) {\r\n    this[resize](dragEvent);\r\n  }\r\n\r\n  /**\r\n   * Resize function for\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [resize]({ overContainer, over }) {\r\n    requestAnimationFrame(() => {\r\n      if (!this.mirror.parentNode) {\r\n        return;\r\n      }\r\n\r\n      if (this.mirror.parentNode !== overContainer) {\r\n        overContainer.appendChild(this.mirror);\r\n      }\r\n\r\n      const overElement = over || this.draggable.getDraggableElementsForContainer(overContainer)[0];\r\n\r\n      if (!overElement) {\r\n        return;\r\n      }\r\n\r\n      (0, _utils.requestNextAnimationFrame)(() => {\r\n        const overRect = overElement.getBoundingClientRect();\r\n\r\n        if (this.lastHeight === overRect.height && this.lastWidth === overRect.width) {\r\n          return;\r\n        }\r\n\r\n        this.mirror.style.width = `${overRect.width}px`;\r\n        this.mirror.style.height = `${overRect.height}px`;\r\n\r\n        this.lastWidth = overRect.width;\r\n        this.lastHeight = overRect.height;\r\n      });\r\n    });\r\n  }\r\n}\r\nexports.default = ResizeMirror;\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __nested_webpack_require_38425__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _ResizeMirror = __nested_webpack_require_38425__(22);\r\n\r\nvar _ResizeMirror2 = _interopRequireDefault(_ResizeMirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ResizeMirror2.default;\r\nexports.defaultOptions = _ResizeMirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_38942__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_38942__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_38942__(2);\r\n\r\nvar _CollidableEvent = __nested_webpack_require_38942__(8);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onRequestAnimationFrame = Symbol('onRequestAnimationFrame');\r\n\r\n/**\r\n * Collidable plugin which detects colliding elements while dragging\r\n * @class Collidable\r\n * @module Collidable\r\n * @extends AbstractPlugin\r\n */\r\nclass Collidable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Collidable constructor.\r\n   * @constructs Collidable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} currentlyCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.currentlyCollidingElement = null;\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} lastCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.lastCollidingElement = null;\r\n\r\n    /**\r\n     * Animation frame for finding colliding elements\r\n     * @property {Number|null} currentAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.currentAnimationFrame = null;\r\n\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onRequestAnimationFrame] = this[onRequestAnimationFrame].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns current collidables based on `collidables` option\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getCollidables() {\r\n    const collidables = this.draggable.options.collidables;\r\n\r\n    if (typeof collidables === 'string') {\r\n      return Array.prototype.slice.call(document.querySelectorAll(collidables));\r\n    } else if (collidables instanceof NodeList || collidables instanceof Array) {\r\n      return Array.prototype.slice.call(collidables);\r\n    } else if (collidables instanceof HTMLElement) {\r\n      return [collidables];\r\n    } else if (typeof collidables === 'function') {\r\n      return collidables();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    const target = event.sensorEvent.target;\r\n\r\n    this.currentAnimationFrame = requestAnimationFrame(this[onRequestAnimationFrame](target));\r\n\r\n    if (this.currentlyCollidingElement) {\r\n      event.cancel();\r\n    }\r\n\r\n    const collidableInEvent = new _CollidableEvent.CollidableInEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.currentlyCollidingElement\r\n    });\r\n\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.lastCollidingElement\r\n    });\r\n\r\n    const enteringCollidable = Boolean(this.currentlyCollidingElement && this.lastCollidingElement !== this.currentlyCollidingElement);\r\n    const leavingCollidable = Boolean(!this.currentlyCollidingElement && this.lastCollidingElement);\r\n\r\n    if (enteringCollidable) {\r\n      if (this.lastCollidingElement) {\r\n        this.draggable.trigger(collidableOutEvent);\r\n      }\r\n\r\n      this.draggable.trigger(collidableInEvent);\r\n    } else if (leavingCollidable) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = this.currentlyCollidingElement;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const lastCollidingElement = this.currentlyCollidingElement || this.lastCollidingElement;\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: lastCollidingElement\r\n    });\r\n\r\n    if (lastCollidingElement) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = null;\r\n    this.currentlyCollidingElement = null;\r\n  }\r\n\r\n  /**\r\n   * Animation frame function\r\n   * @private\r\n   * @param {HTMLElement} target - Current move target\r\n   * @return {Function}\r\n   */\r\n  [onRequestAnimationFrame](target) {\r\n    return () => {\r\n      const collidables = this.getCollidables();\r\n      this.currentlyCollidingElement = (0, _utils.closest)(target, element => collidables.includes(element));\r\n    };\r\n  }\r\n}\r\nexports.default = Collidable;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_44004__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.CollidableOutEvent = exports.CollidableInEvent = exports.CollidableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_44004__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base collidable event\r\n * @class CollidableEvent\r\n * @module CollidableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass CollidableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this colliable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.CollidableEvent = CollidableEvent; /**\r\n                                            * Collidable in event\r\n                                            * @class CollidableInEvent\r\n                                            * @module CollidableInEvent\r\n                                            * @extends CollidableEvent\r\n                                            */\r\n\r\nCollidableEvent.type = 'collidable';\r\nclass CollidableInEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you are currently colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\n\r\nexports.CollidableInEvent = CollidableInEvent; /**\r\n                                                * Collidable out event\r\n                                                * @class CollidableOutEvent\r\n                                                * @module CollidableOutEvent\r\n                                                * @extends CollidableEvent\r\n                                                */\r\n\r\nCollidableInEvent.type = 'collidable:in';\r\nclass CollidableOutEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you were previously colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\nexports.CollidableOutEvent = CollidableOutEvent;\r\nCollidableOutEvent.type = 'collidable:out';\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __nested_webpack_require_46358__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_46358__(8);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_46358__(24);\r\n\r\nvar _Collidable2 = _interopRequireDefault(_Collidable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Collidable2.default;\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_47084__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_47084__(26);\r\n\r\nObject.defineProperty(exports, 'Collidable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Collidable).default;\r\n  }\r\n});\r\n\r\nvar _ResizeMirror = __nested_webpack_require_47084__(23);\r\n\r\nObject.defineProperty(exports, 'ResizeMirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ResizeMirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultResizeMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _ResizeMirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_47084__(21);\r\n\r\nObject.defineProperty(exports, 'Snappable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Snappable).default;\r\n  }\r\n});\r\n\r\nvar _SwapAnimation = __nested_webpack_require_47084__(18);\r\n\r\nObject.defineProperty(exports, 'SwapAnimation', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_SwapAnimation).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultSwapAnimationOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _SwapAnimation.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _SortAnimation = __nested_webpack_require_47084__(16);\r\n\r\nObject.defineProperty(exports, 'SortAnimation', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_SortAnimation).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultSortAnimationOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _SortAnimation.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __nested_webpack_require_48884__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _Draggable = __nested_webpack_require_48884__(5);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _SortableEvent = __nested_webpack_require_48884__(9);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOverContainer = Symbol('onDragOverContainer');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragStop = Symbol('onDragStop');\r\n\r\n/**\r\n * Returns announcement message when a Draggable element has been sorted with another Draggable element\r\n * or moved into a new container\r\n * @param {SortableSortedEvent} sortableEvent\r\n * @return {String}\r\n */\r\nfunction onSortableSortedDefaultAnnouncement({ dragEvent }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'sortable element';\r\n\r\n  if (dragEvent.over) {\r\n    const overText = dragEvent.over.textContent.trim() || dragEvent.over.id || 'sortable element';\r\n    const isFollowing = dragEvent.source.compareDocumentPosition(dragEvent.over) & Node.DOCUMENT_POSITION_FOLLOWING;\r\n\r\n    if (isFollowing) {\r\n      return `Placed ${sourceText} after ${overText}`;\r\n    } else {\r\n      return `Placed ${sourceText} before ${overText}`;\r\n    }\r\n  } else {\r\n    // need to figure out how to compute container name\r\n    return `Placed ${sourceText} into a different container`;\r\n  }\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['sortable:sorted']\r\n */\r\nconst defaultAnnouncements = {\r\n  'sortable:sorted': onSortableSortedDefaultAnnouncement\r\n};\r\n\r\n/**\r\n * Sortable is built on top of Draggable and allows sorting of draggable elements. Sortable will keep\r\n * track of the original index and emits the new index as you drag over draggable elements.\r\n * @class Sortable\r\n * @module Sortable\r\n * @extends Draggable\r\n */\r\nclass Sortable extends _Draggable2.default {\r\n  /**\r\n   * Sortable constructor.\r\n   * @constructs Sortable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Sortable containers\r\n   * @param {Object} options - Options for Sortable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, options, {\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * start index of source on drag start\r\n     * @property startIndex\r\n     * @type {Number}\r\n     */\r\n    this.startIndex = null;\r\n\r\n    /**\r\n     * start container on drag start\r\n     * @property startContainer\r\n     * @type {HTMLElement}\r\n     * @default null\r\n     */\r\n    this.startContainer = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOverContainer] = this[onDragOverContainer].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:over:container', this[onDragOverContainer]).on('drag:over', this[onDragOver]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Sortable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this[onDragStart]).off('drag:over:container', this[onDragOverContainer]).off('drag:over', this[onDragOver]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns true index of element within its container during drag operation, i.e. excluding mirror and original source\r\n   * @param {HTMLElement} element - An element\r\n   * @return {Number}\r\n   */\r\n  index(element) {\r\n    return this.getSortableElementsForContainer(element.parentNode).indexOf(element);\r\n  }\r\n\r\n  /**\r\n   * Returns sortable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getSortableElementsForContainer(container) {\r\n    const allSortableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allSortableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror && childElement.parentNode === container;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    this.startContainer = event.source.parentNode;\r\n    this.startIndex = this.index(event.source);\r\n\r\n    const sortableStartEvent = new _SortableEvent.SortableStartEvent({\r\n      dragEvent: event,\r\n      startIndex: this.startIndex,\r\n      startContainer: this.startContainer\r\n    });\r\n\r\n    this.trigger(sortableStartEvent);\r\n\r\n    if (sortableStartEvent.canceled()) {\r\n      event.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag over container handler\r\n   * @private\r\n   * @param {DragOverContainerEvent} event - Drag over container event\r\n   */\r\n  [onDragOverContainer](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, over, overContainer } = event;\r\n    const oldIndex = this.index(source);\r\n\r\n    const sortableSortEvent = new _SortableEvent.SortableSortEvent({\r\n      dragEvent: event,\r\n      currentIndex: oldIndex,\r\n      source,\r\n      over\r\n    });\r\n\r\n    this.trigger(sortableSortEvent);\r\n\r\n    if (sortableSortEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const children = this.getSortableElementsForContainer(overContainer);\r\n    const moves = move({ source, over, overContainer, children });\r\n\r\n    if (!moves) {\r\n      return;\r\n    }\r\n\r\n    const { oldContainer, newContainer } = moves;\r\n    const newIndex = this.index(event.source);\r\n\r\n    const sortableSortedEvent = new _SortableEvent.SortableSortedEvent({\r\n      dragEvent: event,\r\n      oldIndex,\r\n      newIndex,\r\n      oldContainer,\r\n      newContainer\r\n    });\r\n\r\n    this.trigger(sortableSortedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.over === event.originalSource || event.over === event.source) {\r\n      return;\r\n    }\r\n\r\n    const { source, over, overContainer } = event;\r\n    const oldIndex = this.index(source);\r\n\r\n    const sortableSortEvent = new _SortableEvent.SortableSortEvent({\r\n      dragEvent: event,\r\n      currentIndex: oldIndex,\r\n      source,\r\n      over\r\n    });\r\n\r\n    this.trigger(sortableSortEvent);\r\n\r\n    if (sortableSortEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const children = this.getDraggableElementsForContainer(overContainer);\r\n    const moves = move({ source, over, overContainer, children });\r\n\r\n    if (!moves) {\r\n      return;\r\n    }\r\n\r\n    const { oldContainer, newContainer } = moves;\r\n    const newIndex = this.index(source);\r\n\r\n    const sortableSortedEvent = new _SortableEvent.SortableSortedEvent({\r\n      dragEvent: event,\r\n      oldIndex,\r\n      newIndex,\r\n      oldContainer,\r\n      newContainer\r\n    });\r\n\r\n    this.trigger(sortableSortedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const sortableStopEvent = new _SortableEvent.SortableStopEvent({\r\n      dragEvent: event,\r\n      oldIndex: this.startIndex,\r\n      newIndex: this.index(event.source),\r\n      oldContainer: this.startContainer,\r\n      newContainer: event.source.parentNode\r\n    });\r\n\r\n    this.trigger(sortableStopEvent);\r\n\r\n    this.startIndex = null;\r\n    this.startContainer = null;\r\n  }\r\n}\r\n\r\nexports.default = Sortable;\r\nfunction index(element) {\r\n  return Array.prototype.indexOf.call(element.parentNode.children, element);\r\n}\r\n\r\nfunction move({ source, over, overContainer, children }) {\r\n  const emptyOverContainer = !children.length;\r\n  const differentContainer = source.parentNode !== overContainer;\r\n  const sameContainer = over && source.parentNode === over.parentNode;\r\n\r\n  if (emptyOverContainer) {\r\n    return moveInsideEmptyContainer(source, overContainer);\r\n  } else if (sameContainer) {\r\n    return moveWithinContainer(source, over);\r\n  } else if (differentContainer) {\r\n    return moveOutsideContainer(source, over, overContainer);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction moveInsideEmptyContainer(source, overContainer) {\r\n  const oldContainer = source.parentNode;\r\n\r\n  overContainer.appendChild(source);\r\n\r\n  return { oldContainer, newContainer: overContainer };\r\n}\r\n\r\nfunction moveWithinContainer(source, over) {\r\n  const oldIndex = index(source);\r\n  const newIndex = index(over);\r\n\r\n  if (oldIndex < newIndex) {\r\n    source.parentNode.insertBefore(source, over.nextElementSibling);\r\n  } else {\r\n    source.parentNode.insertBefore(source, over);\r\n  }\r\n\r\n  return { oldContainer: source.parentNode, newContainer: source.parentNode };\r\n}\r\n\r\nfunction moveOutsideContainer(source, over, overContainer) {\r\n  const oldContainer = source.parentNode;\r\n\r\n  if (over) {\r\n    over.parentNode.insertBefore(source, over);\r\n  } else {\r\n    // need to figure out proper position\r\n    overContainer.appendChild(source);\r\n  }\r\n\r\n  return { oldContainer, newContainer: source.parentNode };\r\n}\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __nested_webpack_require_58354__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SortableStopEvent = exports.SortableSortedEvent = exports.SortableSortEvent = exports.SortableStartEvent = exports.SortableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_58354__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sortable event\r\n * @class SortableEvent\r\n * @module SortableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SortableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this sortable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.SortableEvent = SortableEvent; /**\r\n                                        * Sortable start event\r\n                                        * @class SortableStartEvent\r\n                                        * @module SortableStartEvent\r\n                                        * @extends SortableEvent\r\n                                        */\r\n\r\nSortableEvent.type = 'sortable';\r\nclass SortableStartEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Start index of source on sortable start\r\n   * @property startIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get startIndex() {\r\n    return this.data.startIndex;\r\n  }\r\n\r\n  /**\r\n   * Start container on sortable start\r\n   * @property startContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get startContainer() {\r\n    return this.data.startContainer;\r\n  }\r\n}\r\n\r\nexports.SortableStartEvent = SortableStartEvent; /**\r\n                                                  * Sortable sort event\r\n                                                  * @class SortableSortEvent\r\n                                                  * @module SortableSortEvent\r\n                                                  * @extends SortableEvent\r\n                                                  */\r\n\r\nSortableStartEvent.type = 'sortable:start';\r\nSortableStartEvent.cancelable = true;\r\nclass SortableSortEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Index of current draggable element\r\n   * @property currentIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get currentIndex() {\r\n    return this.data.currentIndex;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are hovering over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n\r\n  /**\r\n   * Draggable container element you are hovering over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.dragEvent.overContainer;\r\n  }\r\n}\r\n\r\nexports.SortableSortEvent = SortableSortEvent; /**\r\n                                                * Sortable sorted event\r\n                                                * @class SortableSortedEvent\r\n                                                * @module SortableSortedEvent\r\n                                                * @extends SortableEvent\r\n                                                */\r\n\r\nSortableSortEvent.type = 'sortable:sort';\r\nSortableSortEvent.cancelable = true;\r\nclass SortableSortedEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Index of last sorted event\r\n   * @property oldIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get oldIndex() {\r\n    return this.data.oldIndex;\r\n  }\r\n\r\n  /**\r\n   * New index of this sorted event\r\n   * @property newIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get newIndex() {\r\n    return this.data.newIndex;\r\n  }\r\n\r\n  /**\r\n   * Old container of draggable element\r\n   * @property oldContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get oldContainer() {\r\n    return this.data.oldContainer;\r\n  }\r\n\r\n  /**\r\n   * New container of draggable element\r\n   * @property newContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get newContainer() {\r\n    return this.data.newContainer;\r\n  }\r\n}\r\n\r\nexports.SortableSortedEvent = SortableSortedEvent; /**\r\n                                                    * Sortable stop event\r\n                                                    * @class SortableStopEvent\r\n                                                    * @module SortableStopEvent\r\n                                                    * @extends SortableEvent\r\n                                                    */\r\n\r\nSortableSortedEvent.type = 'sortable:sorted';\r\nclass SortableStopEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Original index on sortable start\r\n   * @property oldIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get oldIndex() {\r\n    return this.data.oldIndex;\r\n  }\r\n\r\n  /**\r\n   * New index of draggable element\r\n   * @property newIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get newIndex() {\r\n    return this.data.newIndex;\r\n  }\r\n\r\n  /**\r\n   * Original container of draggable element\r\n   * @property oldContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get oldContainer() {\r\n    return this.data.oldContainer;\r\n  }\r\n\r\n  /**\r\n   * New container of draggable element\r\n   * @property newContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get newContainer() {\r\n    return this.data.newContainer;\r\n  }\r\n}\r\nexports.SortableStopEvent = SortableStopEvent;\r\nSortableStopEvent.type = 'sortable:stop';\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_63860__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SortableEvent = __nested_webpack_require_63860__(9);\r\n\r\nObject.keys(_SortableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SortableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sortable = __nested_webpack_require_63860__(28);\r\n\r\nvar _Sortable2 = _interopRequireDefault(_Sortable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sortable2.default;\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __nested_webpack_require_64572__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _Draggable = __nested_webpack_require_64572__(5);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _SwappableEvent = __nested_webpack_require_64572__(10);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragStop = Symbol('onDragStop');\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element is swapped with another draggable element\r\n * @param {SwappableSwappedEvent} swappableEvent\r\n * @return {String}\r\n */\r\nfunction onSwappableSwappedDefaultAnnouncement({ dragEvent, swappedElement }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'swappable element';\r\n  const overText = swappedElement.textContent.trim() || swappedElement.id || 'swappable element';\r\n\r\n  return `Swapped ${sourceText} with ${overText}`;\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['swappabled:swapped']\r\n */\r\nconst defaultAnnouncements = {\r\n  'swappabled:swapped': onSwappableSwappedDefaultAnnouncement\r\n};\r\n\r\n/**\r\n * Swappable is built on top of Draggable and allows swapping of draggable elements.\r\n * Order is irrelevant to Swappable.\r\n * @class Swappable\r\n * @module Swappable\r\n * @extends Draggable\r\n */\r\nclass Swappable extends _Draggable2.default {\r\n  /**\r\n   * Swappable constructor.\r\n   * @constructs Swappable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Swappable containers\r\n   * @param {Object} options - Options for Swappable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, options, {\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * Last draggable element that was dragged over\r\n     * @property lastOver\r\n     * @type {HTMLElement}\r\n     */\r\n    this.lastOver = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:over', this[onDragOver]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Swappable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this._onDragStart).off('drag:over', this._onDragOver).off('drag:stop', this._onDragStop);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    const swappableStartEvent = new _SwappableEvent.SwappableStartEvent({\r\n      dragEvent: event\r\n    });\r\n\r\n    this.trigger(swappableStartEvent);\r\n\r\n    if (swappableStartEvent.canceled()) {\r\n      event.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.over === event.originalSource || event.over === event.source || event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const swappableSwapEvent = new _SwappableEvent.SwappableSwapEvent({\r\n      dragEvent: event,\r\n      over: event.over,\r\n      overContainer: event.overContainer\r\n    });\r\n\r\n    this.trigger(swappableSwapEvent);\r\n\r\n    if (swappableSwapEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    // swap originally swapped element back\r\n    if (this.lastOver && this.lastOver !== event.over) {\r\n      swap(this.lastOver, event.source);\r\n    }\r\n\r\n    if (this.lastOver === event.over) {\r\n      this.lastOver = null;\r\n    } else {\r\n      this.lastOver = event.over;\r\n    }\r\n\r\n    swap(event.source, event.over);\r\n\r\n    const swappableSwappedEvent = new _SwappableEvent.SwappableSwappedEvent({\r\n      dragEvent: event,\r\n      swappedElement: event.over\r\n    });\r\n\r\n    this.trigger(swappableSwappedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const swappableStopEvent = new _SwappableEvent.SwappableStopEvent({\r\n      dragEvent: event\r\n    });\r\n\r\n    this.trigger(swappableStopEvent);\r\n    this.lastOver = null;\r\n  }\r\n}\r\n\r\nexports.default = Swappable;\r\nfunction withTempElement(callback) {\r\n  const tmpElement = document.createElement('div');\r\n  callback(tmpElement);\r\n  tmpElement.parentNode.removeChild(tmpElement);\r\n}\r\n\r\nfunction swap(source, over) {\r\n  const overParent = over.parentNode;\r\n  const sourceParent = source.parentNode;\r\n\r\n  withTempElement(tmpElement => {\r\n    sourceParent.insertBefore(tmpElement, source);\r\n    overParent.insertBefore(source, over);\r\n    sourceParent.insertBefore(over, tmpElement);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __nested_webpack_require_69678__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SwappableStopEvent = exports.SwappableSwappedEvent = exports.SwappableSwapEvent = exports.SwappableStartEvent = exports.SwappableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_69678__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base swappable event\r\n * @class SwappableEvent\r\n * @module SwappableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SwappableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this swappable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.SwappableEvent = SwappableEvent; /**\r\n                                          * Swappable start event\r\n                                          * @class SwappableStartEvent\r\n                                          * @module SwappableStartEvent\r\n                                          * @extends SwappableEvent\r\n                                          */\r\n\r\nSwappableEvent.type = 'swappable';\r\nclass SwappableStartEvent extends SwappableEvent {}\r\n\r\nexports.SwappableStartEvent = SwappableStartEvent; /**\r\n                                                    * Swappable swap event\r\n                                                    * @class SwappableSwapEvent\r\n                                                    * @module SwappableSwapEvent\r\n                                                    * @extends SwappableEvent\r\n                                                    */\r\n\r\nSwappableStartEvent.type = 'swappable:start';\r\nSwappableStartEvent.cancelable = true;\r\nclass SwappableSwapEvent extends SwappableEvent {\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.SwappableSwapEvent = SwappableSwapEvent; /**\r\n                                                  * Swappable swapped event\r\n                                                  * @class SwappableSwappedEvent\r\n                                                  * @module SwappableSwappedEvent\r\n                                                  * @extends SwappableEvent\r\n                                                  */\r\n\r\nSwappableSwapEvent.type = 'swappable:swap';\r\nSwappableSwapEvent.cancelable = true;\r\nclass SwappableSwappedEvent extends SwappableEvent {\r\n\r\n  /**\r\n   * The draggable element that you swapped with\r\n   * @property swappedElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get swappedElement() {\r\n    return this.data.swappedElement;\r\n  }\r\n}\r\n\r\nexports.SwappableSwappedEvent = SwappableSwappedEvent; /**\r\n                                                        * Swappable stop event\r\n                                                        * @class SwappableStopEvent\r\n                                                        * @module SwappableStopEvent\r\n                                                        * @extends SwappableEvent\r\n                                                        */\r\n\r\nSwappableSwappedEvent.type = 'swappable:swapped';\r\nclass SwappableStopEvent extends SwappableEvent {}\r\nexports.SwappableStopEvent = SwappableStopEvent;\r\nSwappableStopEvent.type = 'swappable:stop';\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_73431__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SwappableEvent = __nested_webpack_require_73431__(10);\r\n\r\nObject.keys(_SwappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SwappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Swappable = __nested_webpack_require_73431__(31);\r\n\r\nvar _Swappable2 = _interopRequireDefault(_Swappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Swappable2.default;\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __nested_webpack_require_74151__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_74151__(2);\r\n\r\nvar _Draggable = __nested_webpack_require_74151__(5);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _DroppableEvent = __nested_webpack_require_74151__(11);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst dropInDropzone = Symbol('dropInDropZone');\r\nconst returnToOriginalDropzone = Symbol('returnToOriginalDropzone');\r\nconst closestDropzone = Symbol('closestDropzone');\r\nconst getDropzones = Symbol('getDropzones');\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element is dropped into a dropzone element\r\n * @param {DroppableDroppedEvent} droppableEvent\r\n * @return {String}\r\n */\r\nfunction onDroppableDroppedDefaultAnnouncement({ dragEvent, dropzone }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';\r\n  const dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';\r\n\r\n  return `Dropped ${sourceText} into ${dropzoneText}`;\r\n}\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element has returned to its original dropzone element\r\n * @param {DroppableReturnedEvent} droppableEvent\r\n * @return {String}\r\n */\r\nfunction onDroppableReturnedDefaultAnnouncement({ dragEvent, dropzone }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';\r\n  const dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';\r\n\r\n  return `Returned ${sourceText} from ${dropzoneText}`;\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['droppable:dropped']\r\n * @const {Function} defaultAnnouncements['droppable:returned']\r\n */\r\nconst defaultAnnouncements = {\r\n  'droppable:dropped': onDroppableDroppedDefaultAnnouncement,\r\n  'droppable:returned': onDroppableReturnedDefaultAnnouncement\r\n};\r\n\r\nconst defaultClasses = {\r\n  'droppable:active': 'draggable-dropzone--active',\r\n  'droppable:occupied': 'draggable-dropzone--occupied'\r\n};\r\n\r\nconst defaultOptions = {\r\n  dropzone: '.draggable-droppable'\r\n};\r\n\r\n/**\r\n * Droppable is built on top of Draggable and allows dropping draggable elements\r\n * into dropzone element\r\n * @class Droppable\r\n * @module Droppable\r\n * @extends Draggable\r\n */\r\nclass Droppable extends _Draggable2.default {\r\n  /**\r\n   * Droppable constructor.\r\n   * @constructs Droppable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Droppable containers\r\n   * @param {Object} options - Options for Droppable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * All dropzone elements on drag start\r\n     * @property dropzones\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.dropzones = null;\r\n\r\n    /**\r\n     * Last dropzone element that the source was dropped into\r\n     * @property lastDropzone\r\n     * @type {HTMLElement}\r\n     */\r\n    this.lastDropzone = null;\r\n\r\n    /**\r\n     * Initial dropzone element that the source was drag from\r\n     * @property initialDropzone\r\n     * @type {HTMLElement}\r\n     */\r\n    this.initialDropzone = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Droppable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.dropzones = [...this[getDropzones]()];\r\n    const dropzone = (0, _utils.closest)(event.sensorEvent.target, this.options.dropzone);\r\n\r\n    if (!dropzone) {\r\n      event.cancel();\r\n      return;\r\n    }\r\n\r\n    const droppableStartEvent = new _DroppableEvent.DroppableStartEvent({\r\n      dragEvent: event,\r\n      dropzone\r\n    });\r\n\r\n    this.trigger(droppableStartEvent);\r\n\r\n    if (droppableStartEvent.canceled()) {\r\n      event.cancel();\r\n      return;\r\n    }\r\n\r\n    this.initialDropzone = dropzone;\r\n\r\n    for (const dropzoneElement of this.dropzones) {\r\n      if (dropzoneElement.classList.contains(this.getClassNameFor('droppable:occupied'))) {\r\n        continue;\r\n      }\r\n\r\n      dropzoneElement.classList.add(...this.getClassNamesFor('droppable:active'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const dropzone = this[closestDropzone](event.sensorEvent.target);\r\n    const overEmptyDropzone = dropzone && !dropzone.classList.contains(this.getClassNameFor('droppable:occupied'));\r\n\r\n    if (overEmptyDropzone && this[dropInDropzone](event, dropzone)) {\r\n      this.lastDropzone = dropzone;\r\n    } else if ((!dropzone || dropzone === this.initialDropzone) && this.lastDropzone) {\r\n      this[returnToOriginalDropzone](event);\r\n      this.lastDropzone = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const droppableStopEvent = new _DroppableEvent.DroppableStopEvent({\r\n      dragEvent: event,\r\n      dropzone: this.lastDropzone || this.initialDropzone\r\n    });\r\n\r\n    this.trigger(droppableStopEvent);\r\n\r\n    const occupiedClasses = this.getClassNamesFor('droppable:occupied');\r\n\r\n    for (const dropzone of this.dropzones) {\r\n      dropzone.classList.remove(...this.getClassNamesFor('droppable:active'));\r\n    }\r\n\r\n    if (this.lastDropzone && this.lastDropzone !== this.initialDropzone) {\r\n      this.initialDropzone.classList.remove(...occupiedClasses);\r\n    }\r\n\r\n    this.dropzones = null;\r\n    this.lastDropzone = null;\r\n    this.initialDropzone = null;\r\n  }\r\n\r\n  /**\r\n   * Drops a draggable element into a dropzone element\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   * @param {HTMLElement} dropzone - Dropzone element to drop draggable into\r\n   */\r\n  [dropInDropzone](event, dropzone) {\r\n    const droppableDroppedEvent = new _DroppableEvent.DroppableDroppedEvent({\r\n      dragEvent: event,\r\n      dropzone\r\n    });\r\n\r\n    this.trigger(droppableDroppedEvent);\r\n\r\n    if (droppableDroppedEvent.canceled()) {\r\n      return false;\r\n    }\r\n\r\n    const occupiedClasses = this.getClassNamesFor('droppable:occupied');\r\n\r\n    if (this.lastDropzone) {\r\n      this.lastDropzone.classList.remove(...occupiedClasses);\r\n    }\r\n\r\n    dropzone.appendChild(event.source);\r\n    dropzone.classList.add(...occupiedClasses);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Moves the previously dropped element back into its original dropzone\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [returnToOriginalDropzone](event) {\r\n    const droppableReturnedEvent = new _DroppableEvent.DroppableReturnedEvent({\r\n      dragEvent: event,\r\n      dropzone: this.lastDropzone\r\n    });\r\n\r\n    this.trigger(droppableReturnedEvent);\r\n\r\n    if (droppableReturnedEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.initialDropzone.appendChild(event.source);\r\n    this.lastDropzone.classList.remove(...this.getClassNamesFor('droppable:occupied'));\r\n  }\r\n\r\n  /**\r\n   * Returns closest dropzone element for even target\r\n   * @private\r\n   * @param {HTMLElement} target - Event target\r\n   * @return {HTMLElement|null}\r\n   */\r\n  [closestDropzone](target) {\r\n    if (!this.dropzones) {\r\n      return null;\r\n    }\r\n\r\n    return (0, _utils.closest)(target, this.dropzones);\r\n  }\r\n\r\n  /**\r\n   * Returns all current dropzone elements for this draggable instance\r\n   * @private\r\n   * @return {NodeList|HTMLElement[]|Array}\r\n   */\r\n  [getDropzones]() {\r\n    const dropzone = this.options.dropzone;\r\n\r\n    if (typeof dropzone === 'string') {\r\n      return document.querySelectorAll(dropzone);\r\n    } else if (dropzone instanceof NodeList || dropzone instanceof Array) {\r\n      return dropzone;\r\n    } else if (typeof dropzone === 'function') {\r\n      return dropzone();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}\r\nexports.default = Droppable;\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __nested_webpack_require_83263__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DroppableStopEvent = exports.DroppableReturnedEvent = exports.DroppableDroppedEvent = exports.DroppableStartEvent = exports.DroppableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_83263__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base droppable event\r\n * @class DroppableEvent\r\n * @module DroppableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DroppableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this droppable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.DroppableEvent = DroppableEvent; /**\r\n                                          * Droppable start event\r\n                                          * @class DroppableStartEvent\r\n                                          * @module DroppableStartEvent\r\n                                          * @extends DroppableEvent\r\n                                          */\r\n\r\nDroppableEvent.type = 'droppable';\r\nclass DroppableStartEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The initial dropzone element of the currently dragging draggable element\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableStartEvent = DroppableStartEvent; /**\r\n                                                    * Droppable dropped event\r\n                                                    * @class DroppableDroppedEvent\r\n                                                    * @module DroppableDroppedEvent\r\n                                                    * @extends DroppableEvent\r\n                                                    */\r\n\r\nDroppableStartEvent.type = 'droppable:start';\r\nDroppableStartEvent.cancelable = true;\r\nclass DroppableDroppedEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The dropzone element you dropped the draggable element into\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableDroppedEvent = DroppableDroppedEvent; /**\r\n                                                        * Droppable returned event\r\n                                                        * @class DroppableReturnedEvent\r\n                                                        * @module DroppableReturnedEvent\r\n                                                        * @extends DroppableEvent\r\n                                                        */\r\n\r\nDroppableDroppedEvent.type = 'droppable:dropped';\r\nDroppableDroppedEvent.cancelable = true;\r\nclass DroppableReturnedEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The dropzone element you dragged away from\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableReturnedEvent = DroppableReturnedEvent; /**\r\n                                                          * Droppable stop event\r\n                                                          * @class DroppableStopEvent\r\n                                                          * @module DroppableStopEvent\r\n                                                          * @extends DroppableEvent\r\n                                                          */\r\n\r\nDroppableReturnedEvent.type = 'droppable:returned';\r\nDroppableReturnedEvent.cancelable = true;\r\nclass DroppableStopEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The final dropzone element of the draggable element\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\nexports.DroppableStopEvent = DroppableStopEvent;\r\nDroppableStopEvent.type = 'droppable:stop';\r\nDroppableStopEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_87426__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DroppableEvent = __nested_webpack_require_87426__(11);\r\n\r\nObject.keys(_DroppableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DroppableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Droppable = __nested_webpack_require_87426__(34);\r\n\r\nvar _Droppable2 = _interopRequireDefault(_Droppable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Droppable2.default;\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods\r\n * @class Emitter\r\n * @module Emitter\r\n */\r\nclass Emitter {\r\n  constructor() {\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks by event name\r\n   * @param {String} type\r\n   * @param {...Function} callbacks\r\n   */\r\n  on(type, ...callbacks) {\r\n    if (!this.callbacks[type]) {\r\n      this.callbacks[type] = [];\r\n    }\r\n\r\n    this.callbacks[type].push(...callbacks);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters callbacks by event name\r\n   * @param {String} type\r\n   * @param {Function} callback\r\n   */\r\n  off(type, callback) {\r\n    if (!this.callbacks[type]) {\r\n      return null;\r\n    }\r\n\r\n    const copy = this.callbacks[type].slice(0);\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n      if (callback === copy[i]) {\r\n        this.callbacks[type].splice(i, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers event callbacks by event object\r\n   * @param {AbstractEvent} event\r\n   */\r\n  trigger(event) {\r\n    if (!this.callbacks[event.type]) {\r\n      return null;\r\n    }\r\n\r\n    const callbacks = [...this.callbacks[event.type]];\r\n    const caughtErrors = [];\r\n\r\n    for (let i = callbacks.length - 1; i >= 0; i--) {\r\n      const callback = callbacks[i];\r\n\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        caughtErrors.push(error);\r\n      }\r\n    }\r\n\r\n    if (caughtErrors.length) {\r\n      /* eslint-disable no-console */\r\n      console.error(`Draggable caught errors while triggering '${event.type}'`, caughtErrors);\r\n      /* eslint-disable no-console */\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\nexports.default = Emitter;\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __nested_webpack_require_90010__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Emitter = __nested_webpack_require_90010__(37);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Emitter2.default;\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __nested_webpack_require_90414__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_90414__(2);\r\n\r\nvar _Plugins = __nested_webpack_require_90414__(12);\r\n\r\nvar _Emitter = __nested_webpack_require_90414__(38);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nvar _Sensors = __nested_webpack_require_90414__(6);\r\n\r\nvar _DraggableEvent = __nested_webpack_require_90414__(13);\r\n\r\nvar _DragEvent = __nested_webpack_require_90414__(14);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragPressure = Symbol('onDragPressure');\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['drag:start']\r\n * @const {Function} defaultAnnouncements['drag:stop']\r\n */\r\nconst defaultAnnouncements = {\r\n  'drag:start': event => `Picked up ${event.source.textContent.trim() || event.source.id || 'draggable element'}`,\r\n  'drag:stop': event => `Released ${event.source.textContent.trim() || event.source.id || 'draggable element'}`\r\n};\r\n\r\nconst defaultClasses = {\r\n  'container:dragging': 'draggable-container--is-dragging',\r\n  'source:dragging': 'draggable-source--is-dragging',\r\n  'source:placed': 'draggable-source--placed',\r\n  'container:placed': 'draggable-container--placed',\r\n  'body:dragging': 'draggable--is-dragging',\r\n  'draggable:over': 'draggable--over',\r\n  'container:over': 'draggable-container--over',\r\n  'source:original': 'draggable--original',\r\n  mirror: 'draggable-mirror'\r\n};\r\n\r\nconst defaultOptions = exports.defaultOptions = {\r\n  draggable: '.draggable-source',\r\n  handle: null,\r\n  delay: {},\r\n  distance: 0,\r\n  placedTimeout: 800,\r\n  plugins: [],\r\n  sensors: [],\r\n  exclude: {\r\n    plugins: [],\r\n    sensors: []\r\n  }\r\n};\r\n\r\n/**\r\n * This is the core draggable library that does the heavy lifting\r\n * @class Draggable\r\n * @module Draggable\r\n */\r\nclass Draggable {\r\n\r\n  /**\r\n   * Draggable constructor.\r\n   * @constructs Draggable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers\r\n   * @param {Object} options - Options for draggable\r\n   */\r\n\r\n  /**\r\n   * Default plugins draggable uses\r\n   * @static\r\n   * @property {Object} Plugins\r\n   * @property {Announcement} Plugins.Announcement\r\n   * @property {Focusable} Plugins.Focusable\r\n   * @property {Mirror} Plugins.Mirror\r\n   * @property {Scrollable} Plugins.Scrollable\r\n   * @type {Object}\r\n   */\r\n  constructor(containers = [document.body], options = {}) {\r\n    /**\r\n     * Draggable containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    if (containers instanceof NodeList || containers instanceof Array) {\r\n      this.containers = [...containers];\r\n    } else if (containers instanceof HTMLElement) {\r\n      this.containers = [containers];\r\n    } else {\r\n      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');\r\n    }\r\n\r\n    this.options = _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {}),\r\n      exclude: {\r\n        plugins: options.exclude && options.exclude.plugins || [],\r\n        sensors: options.exclude && options.exclude.sensors || []\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Draggables event emitter\r\n     * @property emitter\r\n     * @type {Emitter}\r\n     */\r\n    this.emitter = new _Emitter2.default();\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Active plugins\r\n     * @property plugins\r\n     * @type {Plugin[]}\r\n     */\r\n    this.plugins = [];\r\n\r\n    /**\r\n     * Active sensors\r\n     * @property sensors\r\n     * @type {Sensor[]}\r\n     */\r\n    this.sensors = [];\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragPressure] = this[onDragPressure].bind(this);\r\n\r\n    document.addEventListener('drag:start', this[onDragStart], true);\r\n    document.addEventListener('drag:move', this[onDragMove], true);\r\n    document.addEventListener('drag:stop', this[onDragStop], true);\r\n    document.addEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const defaultPlugins = Object.values(Draggable.Plugins).filter(Plugin => !this.options.exclude.plugins.includes(Plugin));\r\n    const defaultSensors = Object.values(Draggable.Sensors).filter(sensor => !this.options.exclude.sensors.includes(sensor));\r\n\r\n    this.addPlugin(...[...defaultPlugins, ...this.options.plugins]);\r\n    this.addSensor(...[...defaultSensors, ...this.options.sensors]);\r\n\r\n    const draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.on('mirror:created', ({ mirror }) => this.mirror = mirror);\r\n    this.on('mirror:destroy', () => this.mirror = null);\r\n\r\n    this.trigger(draggableInitializedEvent);\r\n  }\r\n\r\n  /**\r\n   * Destroys Draggable instance. This removes all internal event listeners and\r\n   * deactivates sensors and plugins\r\n   */\r\n\r\n\r\n  /**\r\n   * Default sensors draggable uses\r\n   * @static\r\n   * @property {Object} Sensors\r\n   * @property {MouseSensor} Sensors.MouseSensor\r\n   * @property {TouchSensor} Sensors.TouchSensor\r\n   * @type {Object}\r\n   */\r\n  destroy() {\r\n    document.removeEventListener('drag:start', this[onDragStart], true);\r\n    document.removeEventListener('drag:move', this[onDragMove], true);\r\n    document.removeEventListener('drag:stop', this[onDragStop], true);\r\n    document.removeEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.trigger(draggableDestroyEvent);\r\n\r\n    this.removePlugin(...this.plugins.map(plugin => plugin.constructor));\r\n    this.removeSensor(...this.sensors.map(sensor => sensor.constructor));\r\n  }\r\n\r\n  /**\r\n   * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)\r\n   */\r\n  addPlugin(...plugins) {\r\n    const activePlugins = plugins.map(Plugin => new Plugin(this));\r\n\r\n    activePlugins.forEach(plugin => plugin.attach());\r\n    this.plugins = [...this.plugins, ...activePlugins];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes plugins that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)\r\n   */\r\n  removePlugin(...plugins) {\r\n    const removedPlugins = this.plugins.filter(plugin => plugins.includes(plugin.constructor));\r\n\r\n    removedPlugins.forEach(plugin => plugin.detach());\r\n    this.plugins = this.plugins.filter(plugin => !plugins.includes(plugin.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addSensor(ForceTouchSensor, CustomSensor)\r\n   */\r\n  addSensor(...sensors) {\r\n    const activeSensors = sensors.map(Sensor => new Sensor(this.containers, this.options));\r\n\r\n    activeSensors.forEach(sensor => sensor.attach());\r\n    this.sensors = [...this.sensors, ...activeSensors];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes sensors that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeSensor(TouchSensor, DragSensor)\r\n   */\r\n  removeSensor(...sensors) {\r\n    const removedSensors = this.sensors.filter(sensor => sensors.includes(sensor.constructor));\r\n\r\n    removedSensors.forEach(sensor => sensor.detach());\r\n    this.sensors = this.sensors.filter(sensor => !sensors.includes(sensor.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n    this.sensors.forEach(sensor => sensor.addContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes container from this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n    this.sensors.forEach(sensor => sensor.removeContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds listener for draggable events\r\n   * @param {String} type - Event name\r\n   * @param {...Function} callbacks - Event callbacks\r\n   * @return {Draggable}\r\n   * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());\r\n   */\r\n  on(type, ...callbacks) {\r\n    this.emitter.on(type, ...callbacks);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes listener from draggable\r\n   * @param {String} type - Event name\r\n   * @param {Function} callback - Event callback\r\n   * @return {Draggable}\r\n   * @example draggable.off('drag:start', handlerFunction);\r\n   */\r\n  off(type, callback) {\r\n    this.emitter.off(type, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers draggable event\r\n   * @param {AbstractEvent} event - Event instance\r\n   * @return {Draggable}\r\n   * @example draggable.trigger(event);\r\n   */\r\n  trigger(event) {\r\n    this.emitter.trigger(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns class name for class identifier\r\n   * @param {String} name - Name of class identifier\r\n   * @return {String|null}\r\n   */\r\n  getClassNameFor(name) {\r\n    return this.getClassNamesFor(name)[0];\r\n  }\r\n\r\n  /**\r\n   * Returns class names for class identifier\r\n   * @return {String[]}\r\n   */\r\n  getClassNamesFor(name) {\r\n    const classNames = this.options.classes[name];\r\n\r\n    if (classNames instanceof Array) {\r\n      return classNames;\r\n    } else if (typeof classNames === 'string' || classNames instanceof String) {\r\n      return [classNames];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if this draggable instance is currently dragging\r\n   * @return {Boolean}\r\n   */\r\n  isDragging() {\r\n    return Boolean(this.dragging);\r\n  }\r\n\r\n  /**\r\n   * Returns all draggable elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElements() {\r\n    return this.containers.reduce((current, container) => {\r\n      return [...current, ...this.getDraggableElementsForContainer(container)];\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Returns draggable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElementsForContainer(container) {\r\n    const allDraggableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allDraggableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStart](event) {\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { target, container } = sensorEvent;\r\n\r\n    if (!this.containers.includes(container)) {\r\n      return;\r\n    }\r\n\r\n    if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    // Find draggable source element\r\n    this.originalSource = (0, _utils.closest)(target, this.options.draggable);\r\n    this.sourceContainer = container;\r\n\r\n    if (!this.originalSource) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    if (this.lastPlacedSource && this.lastPlacedContainer) {\r\n      clearTimeout(this.placedTimeoutID);\r\n      this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n    }\r\n\r\n    this.source = this.originalSource.cloneNode(true);\r\n    this.originalSource.parentNode.insertBefore(this.source, this.originalSource);\r\n    this.originalSource.style.display = 'none';\r\n\r\n    const dragEvent = new _DragEvent.DragStartEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragEvent);\r\n\r\n    this.dragging = !dragEvent.canceled();\r\n\r\n    if (dragEvent.canceled()) {\r\n      this.source.parentNode.removeChild(this.source);\r\n      this.originalSource.style.display = null;\r\n      return;\r\n    }\r\n\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:original'));\r\n    this.source.classList.add(...this.getClassNamesFor('source:dragging'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.add(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, 'none');\r\n\r\n    requestAnimationFrame(() => {\r\n      const oldSensorEvent = getSensorEvent(event);\r\n      const newSensorEvent = oldSensorEvent.clone({ target: this.source });\r\n\r\n      this[onDragMove](_extends({}, event, {\r\n        detail: newSensorEvent\r\n      }));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { container } = sensorEvent;\r\n    let target = sensorEvent.target;\r\n\r\n    const dragMoveEvent = new _DragEvent.DragMoveEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragMoveEvent);\r\n\r\n    if (dragMoveEvent.canceled()) {\r\n      sensorEvent.cancel();\r\n    }\r\n\r\n    target = (0, _utils.closest)(target, this.options.draggable);\r\n    const withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);\r\n    const overContainer = sensorEvent.overContainer || withinCorrectContainer;\r\n    const isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;\r\n    const isLeavingDraggable = this.currentOver && target !== this.currentOver;\r\n    const isOverContainer = overContainer && this.currentOverContainer !== overContainer;\r\n    const isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;\r\n\r\n    if (isLeavingDraggable) {\r\n      const dragOutEvent = new _DragEvent.DragOutEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        over: this.currentOver,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n      this.currentOver = null;\r\n\r\n      this.trigger(dragOutEvent);\r\n    }\r\n\r\n    if (isLeavingContainer) {\r\n      const dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n      this.currentOverContainer = null;\r\n\r\n      this.trigger(dragOutContainerEvent);\r\n    }\r\n\r\n    if (isOverContainer) {\r\n      overContainer.classList.add(...this.getClassNamesFor('container:over'));\r\n\r\n      const dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer\r\n      });\r\n\r\n      this.currentOverContainer = overContainer;\r\n\r\n      this.trigger(dragOverContainerEvent);\r\n    }\r\n\r\n    if (isOverDraggable) {\r\n      target.classList.add(...this.getClassNamesFor('draggable:over'));\r\n\r\n      const dragOverEvent = new _DragEvent.DragOverEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer,\r\n        over: target\r\n      });\r\n\r\n      this.currentOver = target;\r\n\r\n      this.trigger(dragOverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStop](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.dragging = false;\r\n\r\n    const dragStopEvent = new _DragEvent.DragStopEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStopEvent);\r\n\r\n    this.source.parentNode.insertBefore(this.originalSource, this.source);\r\n    this.source.parentNode.removeChild(this.source);\r\n    this.originalSource.style.display = '';\r\n\r\n    this.source.classList.remove(...this.getClassNamesFor('source:dragging'));\r\n    this.originalSource.classList.remove(...this.getClassNamesFor('source:original'));\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:placed'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:placed'));\r\n    this.sourceContainer.classList.remove(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.remove(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, '');\r\n\r\n    if (this.currentOver) {\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n    }\r\n\r\n    if (this.currentOverContainer) {\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n    }\r\n\r\n    this.lastPlacedSource = this.originalSource;\r\n    this.lastPlacedContainer = this.sourceContainer;\r\n\r\n    this.placedTimeoutID = setTimeout(() => {\r\n      if (this.lastPlacedSource) {\r\n        this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      }\r\n\r\n      if (this.lastPlacedContainer) {\r\n        this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n      }\r\n\r\n      this.lastPlacedSource = null;\r\n      this.lastPlacedContainer = null;\r\n    }, this.options.placedTimeout);\r\n\r\n    const dragStoppedEvent = new _DragEvent.DragStoppedEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStoppedEvent);\r\n\r\n    this.source = null;\r\n    this.originalSource = null;\r\n    this.currentOverContainer = null;\r\n    this.currentOver = null;\r\n    this.sourceContainer = null;\r\n  }\r\n\r\n  /**\r\n   * Drag pressure handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragPressure](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);\r\n\r\n    const dragPressureEvent = new _DragEvent.DragPressureEvent({\r\n      sensorEvent,\r\n      source,\r\n      pressure: sensorEvent.pressure\r\n    });\r\n\r\n    this.trigger(dragPressureEvent);\r\n  }\r\n}\r\n\r\nexports.default = Draggable;\r\nDraggable.Plugins = { Announcement: _Plugins.Announcement, Focusable: _Plugins.Focusable, Mirror: _Plugins.Mirror, Scrollable: _Plugins.Scrollable };\r\nDraggable.Sensors = { MouseSensor: _Sensors.MouseSensor, TouchSensor: _Sensors.TouchSensor };\r\nfunction getSensorEvent(event) {\r\n  return event.detail;\r\n}\r\n\r\nfunction applyUserSelect(element, value) {\r\n  element.style.webkitUserSelect = value;\r\n  element.style.mozUserSelect = value;\r\n  element.style.msUserSelect = value;\r\n  element.style.oUserSelect = value;\r\n  element.style.userSelect = value;\r\n}\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __nested_webpack_require_111550__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_111550__(4);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_111550__(3);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseForceWillBegin = Symbol('onMouseForceWillBegin');\r\nconst onMouseForceDown = Symbol('onMouseForceDown');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseForceChange = Symbol('onMouseForceChange');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');\r\n\r\n/**\r\n * This sensor picks up native force touch events and dictates drag operations\r\n * @class ForceTouchSensor\r\n * @module ForceTouchSensor\r\n * @extends Sensor\r\n */\r\nclass ForceTouchSensor extends _Sensor2.default {\r\n  /**\r\n   * ForceTouchSensor constructor.\r\n   * @constructs ForceTouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property mightDrag\r\n     * @type {Boolean}\r\n     */\r\n    this.mightDrag = false;\r\n\r\n    this[onMouseForceWillBegin] = this[onMouseForceWillBegin].bind(this);\r\n    this[onMouseForceDown] = this[onMouseForceDown].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseForceChange] = this[onMouseForceChange].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    for (const container of this.containers) {\r\n      container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.addEventListener('mousedown', this[onMouseDown], true);\r\n      container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.addEventListener('mousemove', this[onMouseMove]);\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    for (const container of this.containers) {\r\n      container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.removeEventListener('mousedown', this[onMouseDown], true);\r\n      container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Mouse force will begin handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseForceWillBegin](event) {\r\n    event.preventDefault();\r\n    this.mightDrag = true;\r\n  }\r\n\r\n  /**\r\n   * Mouse force down handler\r\n   * @private\r\n   * @param {Event} event - Mouse force down event\r\n   */\r\n  [onMouseForceDown](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = event.currentTarget;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStartEvent);\r\n\r\n    this.currentContainer = container;\r\n    this.dragging = !dragStartEvent.canceled();\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target: null,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (!this.mightDrag) {\r\n      return;\r\n    }\r\n\r\n    // Need workaround for real click\r\n    // Cancel potential drag events\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force change event\r\n   */\r\n  [onMouseForceChange](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n    const container = event.currentTarget;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragPressureEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force global change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force global change event\r\n   */\r\n  [onMouseForceGlobalChange](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragPressureEvent);\r\n  }\r\n}\r\nexports.default = ForceTouchSensor;\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __nested_webpack_require_118290__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_118290__(40);\r\n\r\nvar _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ForceTouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __nested_webpack_require_118730__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_118730__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_118730__(4);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_118730__(3);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragEnd = Symbol('onDragEnd');\r\nconst onDrop = Symbol('onDrop');\r\nconst reset = Symbol('reset');\r\n\r\n/**\r\n * This sensor picks up native browser drag events and dictates drag operations\r\n * @class DragSensor\r\n * @module DragSensor\r\n * @extends Sensor\r\n */\r\nclass DragSensor extends _Sensor2.default {\r\n  /**\r\n   * DragSensor constructor.\r\n   * @constructs DragSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up setting the draggable attribute, unless canceled\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property draggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.draggableElement = null;\r\n\r\n    /**\r\n     * Native draggable element could be links or images, their draggable state will be disabled during drag operation\r\n     * @property nativeDraggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.nativeDraggableElement = null;\r\n\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragEnd] = this[onDragEnd].bind(this);\r\n    this[onDrop] = this[onDrop].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    // Need for firefox. \"text\" key is needed for IE\r\n    event.dataTransfer.setData('text', '');\r\n    event.dataTransfer.effectAllowed = this.options.type;\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    this.currentContainer = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    // Workaround\r\n    setTimeout(() => {\r\n      this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n      if (dragStartEvent.canceled()) {\r\n        this.dragging = false;\r\n      } else {\r\n        this.dragging = true;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {Event} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragMoveEvent);\r\n\r\n    if (!dragMoveEvent.canceled()) {\r\n      event.preventDefault();\r\n      event.dataTransfer.dropEffect = this.options.type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag end handler\r\n   * @private\r\n   * @param {Event} event - Drag end event\r\n   */\r\n  [onDragEnd](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStopEvent);\r\n\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Drop handler\r\n   * @private\r\n   * @param {Event} event - Drop event\r\n   */\r\n  [onDrop](event) {\r\n    // eslint-disable-line class-methods-use-this\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071\r\n    if (event.target && (event.target.form || event.target.contenteditable)) {\r\n      return;\r\n    }\r\n\r\n    const nativeDraggableElement = (0, _utils.closest)(event.target, element => element.draggable);\r\n\r\n    if (nativeDraggableElement) {\r\n      nativeDraggableElement.draggable = false;\r\n      this.nativeDraggableElement = nativeDraggableElement;\r\n    }\r\n\r\n    document.addEventListener('mouseup', this[onMouseUp], true);\r\n    document.addEventListener('dragstart', this[onDragStart], false);\r\n    document.addEventListener('dragover', this[onDragOver], false);\r\n    document.addEventListener('dragend', this[onDragEnd], false);\r\n    document.addEventListener('drop', this[onDrop], false);\r\n\r\n    const target = (0, _utils.closest)(event.target, this.options.draggable);\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.startEvent = event;\r\n\r\n    this.mouseDownTimeout = setTimeout(() => {\r\n      target.draggable = true;\r\n      this.draggableElement = target;\r\n    }, this.delay.drag);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp]() {\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [reset]() {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n    document.removeEventListener('dragstart', this[onDragStart], false);\r\n    document.removeEventListener('dragover', this[onDragOver], false);\r\n    document.removeEventListener('dragend', this[onDragEnd], false);\r\n    document.removeEventListener('drop', this[onDrop], false);\r\n\r\n    if (this.nativeDraggableElement) {\r\n      this.nativeDraggableElement.draggable = true;\r\n      this.nativeDraggableElement = null;\r\n    }\r\n\r\n    if (this.draggableElement) {\r\n      this.draggableElement.draggable = false;\r\n      this.draggableElement = null;\r\n    }\r\n  }\r\n}\r\nexports.default = DragSensor;\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __nested_webpack_require_126003__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_126003__(42);\r\n\r\nvar _DragSensor2 = _interopRequireDefault(_DragSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _DragSensor2.default;\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_126419__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_126419__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_126419__(4);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_126419__(3);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onTouchStart = Symbol('onTouchStart');\r\nconst onTouchEnd = Symbol('onTouchEnd');\r\nconst onTouchMove = Symbol('onTouchMove');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * Prevents scrolling when set to true\r\n * @var {Boolean} preventScrolling\r\n */\r\nlet preventScrolling = false;\r\n\r\n// WebKit requires cancelable `touchmove` events to be added as early as possible\r\nwindow.addEventListener('touchmove', event => {\r\n  if (!preventScrolling) {\r\n    return;\r\n  }\r\n\r\n  // Prevent scrolling\r\n  event.preventDefault();\r\n}, { passive: false });\r\n\r\n/**\r\n * This sensor picks up native browser touch events and dictates drag operations\r\n * @class TouchSensor\r\n * @module TouchSensor\r\n * @extends Sensor\r\n */\r\nclass TouchSensor extends _Sensor2.default {\r\n  /**\r\n   * TouchSensor constructor.\r\n   * @constructs TouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Closest scrollable container so accidental scroll can cancel long touch\r\n     * @property currentScrollableParent\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentScrollableParent = null;\r\n\r\n    /**\r\n     * TimeoutID for managing delay\r\n     * @property tapTimeout\r\n     * @type {Number}\r\n     */\r\n    this.tapTimeout = null;\r\n\r\n    /**\r\n     * touchMoved indicates if touch has moved during tapTimeout\r\n     * @property touchMoved\r\n     * @type {Boolean}\r\n     */\r\n    this.touchMoved = false;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onTouchStart] = this[onTouchStart].bind(this);\r\n    this[onTouchEnd] = this[onTouchEnd].bind(this);\r\n    this[onTouchMove] = this[onTouchMove].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Touch start handler\r\n   * @private\r\n   * @param {Event} event - Touch start event\r\n   */\r\n  [onTouchStart](event) {\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n    const { distance = 0 } = this.options;\r\n    const { delay } = this;\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onTouchStartAt = Date.now();\r\n    this.startEvent = event;\r\n    this.currentContainer = container;\r\n\r\n    document.addEventListener('touchend', this[onTouchEnd]);\r\n    document.addEventListener('touchcancel', this[onTouchEnd]);\r\n    document.addEventListener('touchmove', this[onDistanceChange]);\r\n    container.addEventListener('contextmenu', onContextMenu);\r\n\r\n    if (distance) {\r\n      preventScrolling = true;\r\n    }\r\n\r\n    this.tapTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ touches: [{ pageX: this.pageX, pageY: this.pageY }] });\r\n    }, delay.touch);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n    const touch = (0, _utils.touchCoords)(startEvent);\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: touch.pageX,\r\n      clientY: touch.pageY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('touchmove', this[onTouchMove]);\r\n    }\r\n    preventScrolling = this.dragging;\r\n  }\r\n\r\n  /**\r\n   * Touch move handler prior to drag start.\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n    const start = (0, _utils.touchCoords)(startEvent);\r\n    const current = (0, _utils.touchCoords)(event);\r\n    const timeElapsed = Date.now() - this.onTouchStartAt;\r\n    const distanceTravelled = (0, _utils.distance)(start.pageX, start.pageY, current.pageX, current.pageY);\r\n\r\n    Object.assign(this, current);\r\n\r\n    clearTimeout(this.tapTimeout);\r\n\r\n    if (timeElapsed < delay.touch) {\r\n      // moved during delay\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler while dragging\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onTouchMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Touch end handler\r\n   * @private\r\n   * @param {Event} event - Touch end event\r\n   */\r\n  [onTouchEnd](event) {\r\n    clearTimeout(this.tapTimeout);\r\n    preventScrolling = false;\r\n\r\n    document.removeEventListener('touchend', this[onTouchEnd]);\r\n    document.removeEventListener('touchcancel', this[onTouchEnd]);\r\n    document.removeEventListener('touchmove', this[onDistanceChange]);\r\n\r\n    if (this.currentContainer) {\r\n      this.currentContainer.removeEventListener('contextmenu', onContextMenu);\r\n    }\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('touchmove', this[onTouchMove]);\r\n\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    event.preventDefault();\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n}\r\n\r\nexports.default = TouchSensor;\r\nfunction onContextMenu(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __nested_webpack_require_133899__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_133899__(44);\r\n\r\nvar _TouchSensor2 = _interopRequireDefault(_TouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _TouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports, __nested_webpack_require_134319__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_134319__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sensor event\r\n * @class SensorEvent\r\n * @module SensorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SensorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Original browser event that triggered a sensor\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    return this.data.originalEvent;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientX for both touch and mouse events\r\n   * @property clientX\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientX() {\r\n    return this.data.clientX;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientY for both touch and mouse events\r\n   * @property clientY\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientY() {\r\n    return this.data.clientY;\r\n  }\r\n\r\n  /**\r\n   * Normalized target for both touch and mouse events\r\n   * Returns the element that is behind cursor or touch pointer\r\n   * @property target\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get target() {\r\n    return this.data.target;\r\n  }\r\n\r\n  /**\r\n   * Container that initiated the sensor\r\n   * @property container\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get container() {\r\n    return this.data.container;\r\n  }\r\n\r\n  /**\r\n   * Trackpad pressure\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.SensorEvent = SensorEvent; /**\r\n                                    * Drag start sensor event\r\n                                    * @class DragStartSensorEvent\r\n                                    * @module DragStartSensorEvent\r\n                                    * @extends SensorEvent\r\n                                    */\r\n\r\nclass DragStartSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStartSensorEvent = DragStartSensorEvent; /**\r\n                                                      * Drag move sensor event\r\n                                                      * @class DragMoveSensorEvent\r\n                                                      * @module DragMoveSensorEvent\r\n                                                      * @extends SensorEvent\r\n                                                      */\r\n\r\nDragStartSensorEvent.type = 'drag:start';\r\nclass DragMoveSensorEvent extends SensorEvent {}\r\n\r\nexports.DragMoveSensorEvent = DragMoveSensorEvent; /**\r\n                                                    * Drag stop sensor event\r\n                                                    * @class DragStopSensorEvent\r\n                                                    * @module DragStopSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragMoveSensorEvent.type = 'drag:move';\r\nclass DragStopSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStopSensorEvent = DragStopSensorEvent; /**\r\n                                                    * Drag pressure sensor event\r\n                                                    * @class DragPressureSensorEvent\r\n                                                    * @module DragPressureSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragStopSensorEvent.type = 'drag:stop';\r\nclass DragPressureSensorEvent extends SensorEvent {}\r\nexports.DragPressureSensorEvent = DragPressureSensorEvent;\r\nDragPressureSensorEvent.type = 'drag:pressure';\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __nested_webpack_require_138310__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_138310__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_138310__(4);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_138310__(3);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * This sensor picks up native browser mouse events and dictates drag operations\r\n * @class MouseSensor\r\n * @module MouseSensor\r\n * @extends Sensor\r\n */\r\nclass MouseSensor extends _Sensor2.default {\r\n  /**\r\n   * MouseSensor constructor.\r\n   * @constructs MouseSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up triggering the drag start operation\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onContextMenuWhileDragging] = this[onContextMenuWhileDragging].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (event.button !== 0 || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n\r\n    const { delay } = this;\r\n    const { pageX, pageY } = event;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onMouseDownAt = Date.now();\r\n    this.startEvent = event;\r\n\r\n    this.currentContainer = container;\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n    document.addEventListener('dragstart', preventNativeDragStart);\r\n    document.addEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    this.mouseDownTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ pageX: this.pageX, pageY: this.pageY });\r\n    }, delay.mouse);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n      document.addEventListener('mousemove', this[onMouseMove]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect change in distance, starting drag when both\r\n   * delay and distance requirements are met\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { pageX, pageY } = event;\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const timeElapsed = Date.now() - this.onMouseDownAt;\r\n    const distanceTravelled = (0, _utils.distance)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;\r\n\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (timeElapsed < delay.mouse) {\r\n      // moved during delay\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n    document.removeEventListener('dragstart', preventNativeDragStart);\r\n    document.removeEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n\r\n  /**\r\n   * Context menu handler\r\n   * @private\r\n   * @param {Event} event - Context menu event\r\n   */\r\n  [onContextMenuWhileDragging](event) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nexports.default = MouseSensor;\r\nfunction preventNativeDragStart(event) {\r\n  event.preventDefault();\r\n}\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __nested_webpack_require_145182__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_145182__(47);\r\n\r\nvar _MouseSensor2 = _interopRequireDefault(_MouseSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _MouseSensor2.default;\r\n\r\n/***/ }),\r\n/* 49 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst defaultDealy = {\r\n  mouse: 0,\r\n  drag: 0,\r\n  touch: 100\r\n};\r\n\r\n/**\r\n * Base sensor class. Extend from this class to create a new or custom sensor\r\n * @class Sensor\r\n * @module Sensor\r\n */\r\nclass Sensor {\r\n  /**\r\n   * Sensor constructor.\r\n   * @constructs Sensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    /**\r\n     * Current containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.containers = [...containers];\r\n\r\n    /**\r\n     * Current options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, options);\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Current container\r\n     * @property currentContainer\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentContainer = null;\r\n\r\n    /**\r\n     * The event of the initial sensor down\r\n     * @property startEvent\r\n     * @type {Event}\r\n     */\r\n    this.startEvent = null;\r\n\r\n    /**\r\n     * The delay of each sensor\r\n     * @property delay\r\n     * @type {Object}\r\n     */\r\n    this.delay = calcDelay(options.delay);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  attach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  detach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to this sensor\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n  }\r\n\r\n  /**\r\n   * Removes container from this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from this sensor\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n  }\r\n\r\n  /**\r\n   * Triggers event on target element\r\n   * @param {HTMLElement} element - Element to trigger event on\r\n   * @param {SensorEvent} sensorEvent - Sensor event to trigger\r\n   */\r\n  trigger(element, sensorEvent) {\r\n    const event = document.createEvent('Event');\r\n    event.detail = sensorEvent;\r\n    event.initEvent(sensorEvent.type, true, true);\r\n    element.dispatchEvent(event);\r\n    this.lastEvent = sensorEvent;\r\n\r\n    return sensorEvent;\r\n  }\r\n}\r\n\r\nexports.default = Sensor; /**\r\n                           * Calculate the delay of each sensor through the delay in the options\r\n                           * @param {undefined|Number|Object} optionsDelay - the delay in the options\r\n                           * @return {Object}\r\n                           */\r\n\r\nfunction calcDelay(optionsDelay) {\r\n  const delay = {};\r\n\r\n  if (optionsDelay === undefined) {\r\n    return _extends({}, defaultDealy);\r\n  }\r\n\r\n  if (typeof optionsDelay === 'number') {\r\n    for (const key in defaultDealy) {\r\n      if (defaultDealy.hasOwnProperty(key)) {\r\n        delay[key] = optionsDelay;\r\n      }\r\n    }\r\n    return delay;\r\n  }\r\n\r\n  for (const key in defaultDealy) {\r\n    if (defaultDealy.hasOwnProperty(key)) {\r\n      if (optionsDelay[key] === undefined) {\r\n        delay[key] = defaultDealy[key];\r\n      } else {\r\n        delay[key] = optionsDelay[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return delay;\r\n}\r\n\r\n/***/ }),\r\n/* 50 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 51 */\r\n/***/ (function(module, exports, __nested_webpack_require_150139__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_150139__(50);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 52 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 53 */\r\n/***/ (function(module, exports, __nested_webpack_require_151160__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_151160__(52);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 54 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 55 */\r\n/***/ (function(module, exports, __nested_webpack_require_151919__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_151919__(54);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 56 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 57 */\r\n/***/ (function(module, exports, __nested_webpack_require_154349__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_154349__(56);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 58 */\r\n/***/ (function(module, exports, __nested_webpack_require_154753__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_154753__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_154753__(2);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst scroll = exports.scroll = Symbol('scroll');\r\n\r\n/**\r\n * Scrollable default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.speed\r\n * @property {Number} defaultOptions.sensitivity\r\n * @property {HTMLElement[]} defaultOptions.scrollableElements\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  speed: 6,\r\n  sensitivity: 50,\r\n  scrollableElements: []\r\n};\r\n\r\n/**\r\n * Scrollable plugin which scrolls the closest scrollable parent\r\n * @class Scrollable\r\n * @module Scrollable\r\n * @extends AbstractPlugin\r\n */\r\nclass Scrollable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Scrollable constructor.\r\n   * @constructs Scrollable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Scrollable options\r\n     * @property {Object} options\r\n     * @property {Number} options.speed\r\n     * @property {Number} options.sensitivity\r\n     * @property {HTMLElement[]} options.scrollableElements\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Keeps current mouse position\r\n     * @property {Object} currentMousePosition\r\n     * @property {Number} currentMousePosition.clientX\r\n     * @property {Number} currentMousePosition.clientY\r\n     * @type {Object|null}\r\n     */\r\n    this.currentMousePosition = null;\r\n\r\n    /**\r\n     * Scroll animation frame\r\n     * @property scrollAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.scrollAnimationFrame = null;\r\n\r\n    /**\r\n     * Closest scrollable element\r\n     * @property scrollableElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.scrollableElement = null;\r\n\r\n    /**\r\n     * Animation frame looking for the closest scrollable element\r\n     * @property findScrollableElementFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.findScrollableElementFrame = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[scroll] = this[scroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.scrollable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns closest scrollable elements by element\r\n   * @param {HTMLElement} target\r\n   * @return {HTMLElement}\r\n   */\r\n  getScrollableElement(target) {\r\n    if (this.hasDefinedScrollableElements()) {\r\n      return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;\r\n    } else {\r\n      return closestScrollableElement(target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if at least one scrollable element have been defined via options\r\n   * @param {HTMLElement} target\r\n   * @return {Boolean}\r\n   */\r\n  hasDefinedScrollableElements() {\r\n    return Boolean(this.options.scrollableElements.length !== 0);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler. Finds closest scrollable parent in separate frame\r\n   * @param {DragStartEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragStart](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler. Remembers mouse position and initiates scrolling\r\n   * @param {DragMoveEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragMove](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.sensorEvent.target);\r\n    });\r\n\r\n    if (!this.scrollableElement) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = dragEvent.sensorEvent;\r\n    const scrollOffset = { x: 0, y: 0 };\r\n\r\n    if ('ontouchstart' in window) {\r\n      scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n      scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\r\n    }\r\n\r\n    this.currentMousePosition = {\r\n      clientX: sensorEvent.clientX - scrollOffset.x,\r\n      clientY: sensorEvent.clientY - scrollOffset.y\r\n    };\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler. Cancels scroll animations and resets state\r\n   * @private\r\n   */\r\n  [onDragStop]() {\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n    cancelAnimationFrame(this.findScrollableElementFrame);\r\n\r\n    this.scrollableElement = null;\r\n    this.scrollAnimationFrame = null;\r\n    this.findScrollableElementFrame = null;\r\n    this.currentMousePosition = null;\r\n  }\r\n\r\n  /**\r\n   * Scroll function that does the heavylifting\r\n   * @private\r\n   */\r\n  [scroll]() {\r\n    if (!this.scrollableElement || !this.currentMousePosition) {\r\n      return;\r\n    }\r\n\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n\r\n    const { speed, sensitivity } = this.options;\r\n\r\n    const rect = this.scrollableElement.getBoundingClientRect();\r\n    const bottomCutOff = rect.bottom > window.innerHeight;\r\n    const topCutOff = rect.top < 0;\r\n    const cutOff = topCutOff || bottomCutOff;\r\n\r\n    const documentScrollingElement = getDocumentScrollingElement();\r\n    const scrollableElement = this.scrollableElement;\r\n    const clientX = this.currentMousePosition.clientX;\r\n    const clientY = this.currentMousePosition.clientY;\r\n\r\n    if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {\r\n      const { offsetHeight, offsetWidth } = scrollableElement;\r\n\r\n      if (rect.top + offsetHeight - clientY < sensitivity) {\r\n        scrollableElement.scrollTop += speed;\r\n      } else if (clientY - rect.top < sensitivity) {\r\n        scrollableElement.scrollTop -= speed;\r\n      }\r\n\r\n      if (rect.left + offsetWidth - clientX < sensitivity) {\r\n        scrollableElement.scrollLeft += speed;\r\n      } else if (clientX - rect.left < sensitivity) {\r\n        scrollableElement.scrollLeft -= speed;\r\n      }\r\n    } else {\r\n      const { innerHeight, innerWidth } = window;\r\n\r\n      if (clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop -= speed;\r\n      } else if (innerHeight - clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop += speed;\r\n      }\r\n\r\n      if (clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft -= speed;\r\n      } else if (innerWidth - clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft += speed;\r\n      }\r\n    }\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n}\r\n\r\nexports.default = Scrollable; /**\r\n                               * Returns true if the passed element has overflow\r\n                               * @param {HTMLElement} element\r\n                               * @return {Boolean}\r\n                               * @private\r\n                               */\r\n\r\nfunction hasOverflow(element) {\r\n  const overflowRegex = /(auto|scroll)/;\r\n  const computedStyles = getComputedStyle(element, null);\r\n\r\n  const overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');\r\n\r\n  return overflowRegex.test(overflow);\r\n}\r\n\r\n/**\r\n * Returns true if the passed element is statically positioned\r\n * @param {HTMLElement} element\r\n * @return {Boolean}\r\n * @private\r\n */\r\nfunction isStaticallyPositioned(element) {\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  return position === 'static';\r\n}\r\n\r\n/**\r\n * Finds closest scrollable element\r\n * @param {HTMLElement} element\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction closestScrollableElement(element) {\r\n  if (!element) {\r\n    return getDocumentScrollingElement();\r\n  }\r\n\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  const excludeStaticParents = position === 'absolute';\r\n\r\n  const scrollableElement = (0, _utils.closest)(element, parent => {\r\n    if (excludeStaticParents && isStaticallyPositioned(parent)) {\r\n      return false;\r\n    }\r\n    return hasOverflow(parent);\r\n  });\r\n\r\n  if (position === 'fixed' || !scrollableElement) {\r\n    return getDocumentScrollingElement();\r\n  } else {\r\n    return scrollableElement;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns element that scrolls document\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction getDocumentScrollingElement() {\r\n  return document.scrollingElement || document.documentElement;\r\n}\r\n\r\n/***/ }),\r\n/* 59 */\r\n/***/ (function(module, exports, __nested_webpack_require_164675__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Scrollable = __nested_webpack_require_164675__(58);\r\n\r\nvar _Scrollable2 = _interopRequireDefault(_Scrollable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Scrollable2.default;\r\nexports.defaultOptions = _Scrollable.defaultOptions;\r\n\r\n/***/ }),\r\n/* 60 */\r\n/***/ (function(module, exports, __nested_webpack_require_165182__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_165182__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base mirror event\r\n * @class MirrorEvent\r\n * @module MirrorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass MirrorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Drag event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.MirrorEvent = MirrorEvent; /**\r\n                                    * Mirror create event\r\n                                    * @class MirrorCreateEvent\r\n                                    * @module MirrorCreateEvent\r\n                                    * @extends MirrorEvent\r\n                                    */\r\n\r\nclass MirrorCreateEvent extends MirrorEvent {}\r\n\r\nexports.MirrorCreateEvent = MirrorCreateEvent; /**\r\n                                                * Mirror created event\r\n                                                * @class MirrorCreatedEvent\r\n                                                * @module MirrorCreatedEvent\r\n                                                * @extends MirrorEvent\r\n                                                */\r\n\r\nMirrorCreateEvent.type = 'mirror:create';\r\nclass MirrorCreatedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorCreatedEvent = MirrorCreatedEvent; /**\r\n                                                  * Mirror attached event\r\n                                                  * @class MirrorAttachedEvent\r\n                                                  * @module MirrorAttachedEvent\r\n                                                  * @extends MirrorEvent\r\n                                                  */\r\n\r\nMirrorCreatedEvent.type = 'mirror:created';\r\nclass MirrorAttachedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorAttachedEvent = MirrorAttachedEvent; /**\r\n                                                    * Mirror move event\r\n                                                    * @class MirrorMoveEvent\r\n                                                    * @module MirrorMoveEvent\r\n                                                    * @extends MirrorEvent\r\n                                                    */\r\n\r\nMirrorAttachedEvent.type = 'mirror:attached';\r\nclass MirrorMoveEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on x axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshX() {\r\n    return this.data.passedThreshX;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on y axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshY() {\r\n    return this.data.passedThreshY;\r\n  }\r\n}\r\n\r\nexports.MirrorMoveEvent = MirrorMoveEvent; /**\r\n                                            * Mirror destroy event\r\n                                            * @class MirrorDestroyEvent\r\n                                            * @module MirrorDestroyEvent\r\n                                            * @extends MirrorEvent\r\n                                            */\r\n\r\nMirrorMoveEvent.type = 'mirror:move';\r\nMirrorMoveEvent.cancelable = true;\r\nclass MirrorDestroyEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\nexports.MirrorDestroyEvent = MirrorDestroyEvent;\r\nMirrorDestroyEvent.type = 'mirror:destroy';\r\nMirrorDestroyEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 61 */\r\n/***/ (function(module, exports, __nested_webpack_require_170634__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MirrorEvent = __nested_webpack_require_170634__(60);\r\n\r\nObject.keys(_MirrorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _MirrorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 62 */\r\n/***/ (function(module, exports, __nested_webpack_require_171102__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_171102__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _MirrorEvent = __nested_webpack_require_171102__(61);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');\r\nconst onScroll = exports.onScroll = Symbol('onScroll');\r\nconst getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');\r\n\r\n/**\r\n * Mirror default options\r\n * @property {Object} defaultOptions\r\n * @property {Boolean} defaultOptions.constrainDimensions\r\n * @property {Boolean} defaultOptions.xAxis\r\n * @property {Boolean} defaultOptions.yAxis\r\n * @property {null} defaultOptions.cursorOffsetX\r\n * @property {null} defaultOptions.cursorOffsetY\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  constrainDimensions: false,\r\n  xAxis: true,\r\n  yAxis: true,\r\n  cursorOffsetX: null,\r\n  cursorOffsetY: null,\r\n  thresholdX: null,\r\n  thresholdY: null\r\n};\r\n\r\n/**\r\n * Mirror plugin which controls the mirror positioning while dragging\r\n * @class Mirror\r\n * @module Mirror\r\n * @extends AbstractPlugin\r\n */\r\nclass Mirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * Mirror constructor.\r\n   * @constructs Mirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Mirror options\r\n     * @property {Object} options\r\n     * @property {Boolean} options.constrainDimensions\r\n     * @property {Boolean} options.xAxis\r\n     * @property {Boolean} options.yAxis\r\n     * @property {Number|null} options.cursorOffsetX\r\n     * @property {Number|null} options.cursorOffsetY\r\n     * @property {String|HTMLElement|Function} options.appendTo\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Initial scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorMove] = this[onMirrorMove].bind(this);\r\n    this[onScroll] = this[onScroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.mirror || {};\r\n  }\r\n\r\n  [onDragStart](dragEvent) {\r\n    if (dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if ('ontouchstart' in window) {\r\n      document.addEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    // Last sensor position of mirror move\r\n    this.lastMirrorMovedClient = {\r\n      x: sensorEvent.clientX,\r\n      y: sensorEvent.clientY\r\n    };\r\n\r\n    const mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreateEvent);\r\n\r\n    if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const appendableContainer = this[getAppendableContainer](source) || sourceContainer;\r\n    this.mirror = source.cloneNode(true);\r\n\r\n    const mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    const mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreatedEvent);\r\n    appendableContainer.appendChild(this.mirror);\r\n    this.draggable.trigger(mirrorAttachedEvent);\r\n  }\r\n\r\n  [onDragMove](dragEvent) {\r\n    if (!this.mirror || dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    let passedThreshX = true;\r\n    let passedThreshY = true;\r\n\r\n    if (this.options.thresholdX || this.options.thresholdY) {\r\n      const { x: lastX, y: lastY } = this.lastMirrorMovedClient;\r\n\r\n      if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {\r\n        passedThreshX = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.x = sensorEvent.clientX;\r\n      }\r\n\r\n      if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {\r\n        passedThreshY = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.y = sensorEvent.clientY;\r\n      }\r\n\r\n      if (!passedThreshX && !passedThreshY) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror,\r\n      passedThreshX,\r\n      passedThreshY\r\n    });\r\n\r\n    this.draggable.trigger(mirrorMoveEvent);\r\n  }\r\n\r\n  [onDragStop](dragEvent) {\r\n    if ('ontouchstart' in window) {\r\n      document.removeEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = { x: 0, y: 0 };\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    if (!this.mirror) {\r\n      return;\r\n    }\r\n\r\n    const { source, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    const mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({\r\n      source,\r\n      mirror: this.mirror,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorDestroyEvent);\r\n\r\n    if (!mirrorDestroyEvent.canceled()) {\r\n      this.mirror.parentNode.removeChild(this.mirror);\r\n    }\r\n  }\r\n\r\n  [onScroll]() {\r\n    this.scrollOffset = {\r\n      x: window.scrollX - this.initialScrollOffset.x,\r\n      y: window.scrollY - this.initialScrollOffset.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror, source, sensorEvent }) {\r\n    const mirrorClasses = this.draggable.getClassNamesFor('mirror');\r\n\r\n    const setState = (_ref) => {\r\n      let { mirrorOffset, initialX, initialY } = _ref,\r\n          args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);\r\n\r\n      this.mirrorOffset = mirrorOffset;\r\n      this.initialX = initialX;\r\n      this.initialY = initialY;\r\n      this.lastMovedX = initialX;\r\n      this.lastMovedY = initialY;\r\n      return _extends({ mirrorOffset, initialX, initialY }, args);\r\n    };\r\n\r\n    mirror.style.display = 'none';\r\n\r\n    const initialState = {\r\n      mirror,\r\n      source,\r\n      sensorEvent,\r\n      mirrorClasses,\r\n      scrollOffset: this.scrollOffset,\r\n      options: this.options,\r\n      passedThreshX: true,\r\n      passedThreshY: true\r\n    };\r\n\r\n    return Promise.resolve(initialState)\r\n    // Fix reflow here\r\n    .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({ initial: true })).then(removeMirrorID).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Mirror move handler\r\n   * @param {MirrorMoveEvent} mirrorEvent\r\n   * @return {Promise|null}\r\n   * @private\r\n   */\r\n  [onMirrorMove](mirrorEvent) {\r\n    if (mirrorEvent.canceled()) {\r\n      return null;\r\n    }\r\n\r\n    const setState = (_ref2) => {\r\n      let { lastMovedX, lastMovedY } = _ref2,\r\n          args = _objectWithoutProperties(_ref2, ['lastMovedX', 'lastMovedY']);\r\n\r\n      this.lastMovedX = lastMovedX;\r\n      this.lastMovedY = lastMovedY;\r\n\r\n      return _extends({ lastMovedX, lastMovedY }, args);\r\n    };\r\n\r\n    const initialState = {\r\n      mirror: mirrorEvent.mirror,\r\n      sensorEvent: mirrorEvent.sensorEvent,\r\n      mirrorOffset: this.mirrorOffset,\r\n      options: this.options,\r\n      initialX: this.initialX,\r\n      initialY: this.initialY,\r\n      scrollOffset: this.scrollOffset,\r\n      passedThreshX: mirrorEvent.passedThreshX,\r\n      passedThreshY: mirrorEvent.passedThreshY,\r\n      lastMovedX: this.lastMovedX,\r\n      lastMovedY: this.lastMovedY\r\n    };\r\n\r\n    return Promise.resolve(initialState).then(positionMirror({ raf: true })).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Returns appendable container for mirror based on the appendTo option\r\n   * @private\r\n   * @param {Object} options\r\n   * @param {HTMLElement} options.source - Current source\r\n   * @return {HTMLElement}\r\n   */\r\n  [getAppendableContainer](source) {\r\n    const appendTo = this.options.appendTo;\r\n\r\n    if (typeof appendTo === 'string') {\r\n      return document.querySelector(appendTo);\r\n    } else if (appendTo instanceof HTMLElement) {\r\n      return appendTo;\r\n    } else if (typeof appendTo === 'function') {\r\n      return appendTo(source);\r\n    } else {\r\n      return source.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nexports.default = Mirror; /**\r\n                           * Computes mirror dimensions based on the source element\r\n                           * Adds sourceRect to state\r\n                           * @param {Object} state\r\n                           * @param {HTMLElement} state.source\r\n                           * @return {Promise}\r\n                           * @private\r\n                           */\r\n\r\nfunction computeMirrorDimensions(_ref3) {\r\n  let { source } = _ref3,\r\n      args = _objectWithoutProperties(_ref3, ['source']);\r\n\r\n  return withPromise(resolve => {\r\n    const sourceRect = source.getBoundingClientRect();\r\n    resolve(_extends({ source, sourceRect }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Calculates mirror offset\r\n * Adds mirrorOffset to state\r\n * @param {Object} state\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {DOMRect} state.sourceRect\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction calculateMirrorOffset(_ref4) {\r\n  let { sensorEvent, sourceRect, options } = _ref4,\r\n      args = _objectWithoutProperties(_ref4, ['sensorEvent', 'sourceRect', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    const top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;\r\n    const left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;\r\n\r\n    const mirrorOffset = { top, left };\r\n\r\n    resolve(_extends({ sensorEvent, sourceRect, mirrorOffset, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror styles\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {HTMLElement} state.source\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction resetMirror(_ref5) {\r\n  let { mirror, source, options } = _ref5,\r\n      args = _objectWithoutProperties(_ref5, ['mirror', 'source', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    let offsetHeight;\r\n    let offsetWidth;\r\n\r\n    if (options.constrainDimensions) {\r\n      const computedSourceStyles = getComputedStyle(source);\r\n      offsetHeight = computedSourceStyles.getPropertyValue('height');\r\n      offsetWidth = computedSourceStyles.getPropertyValue('width');\r\n    }\r\n\r\n    mirror.style.display = null;\r\n    mirror.style.position = 'fixed';\r\n    mirror.style.pointerEvents = 'none';\r\n    mirror.style.top = 0;\r\n    mirror.style.left = 0;\r\n    mirror.style.margin = 0;\r\n\r\n    if (options.constrainDimensions) {\r\n      mirror.style.height = offsetHeight;\r\n      mirror.style.width = offsetWidth;\r\n    }\r\n\r\n    resolve(_extends({ mirror, source, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror class on mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {String[]} state.mirrorClasses\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction addMirrorClasses(_ref6) {\r\n  let { mirror, mirrorClasses } = _ref6,\r\n      args = _objectWithoutProperties(_ref6, ['mirror', 'mirrorClasses']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.classList.add(...mirrorClasses);\r\n    resolve(_extends({ mirror, mirrorClasses }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Removes source ID from cloned mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction removeMirrorID(_ref7) {\r\n  let { mirror } = _ref7,\r\n      args = _objectWithoutProperties(_ref7, ['mirror']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.removeAttribute('id');\r\n    delete mirror.id;\r\n    resolve(_extends({ mirror }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Positions mirror with translate3d\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {Object} state.mirrorOffset\r\n * @param {Number} state.initialY\r\n * @param {Number} state.initialX\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction positionMirror({ withFrame = false, initial = false } = {}) {\r\n  return (_ref8) => {\r\n    let {\r\n      mirror,\r\n      sensorEvent,\r\n      mirrorOffset,\r\n      initialY,\r\n      initialX,\r\n      scrollOffset,\r\n      options,\r\n      passedThreshX,\r\n      passedThreshY,\r\n      lastMovedX,\r\n      lastMovedY\r\n    } = _ref8,\r\n        args = _objectWithoutProperties(_ref8, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options', 'passedThreshX', 'passedThreshY', 'lastMovedX', 'lastMovedY']);\r\n\r\n    return withPromise(resolve => {\r\n      const result = _extends({\r\n        mirror,\r\n        sensorEvent,\r\n        mirrorOffset,\r\n        options\r\n      }, args);\r\n\r\n      if (mirrorOffset) {\r\n        const x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);\r\n        const y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);\r\n\r\n        if (options.xAxis && options.yAxis || initial) {\r\n          mirror.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n        } else if (options.xAxis && !options.yAxis) {\r\n          mirror.style.transform = `translate3d(${x}px, ${initialY}px, 0)`;\r\n        } else if (options.yAxis && !options.xAxis) {\r\n          mirror.style.transform = `translate3d(${initialX}px, ${y}px, 0)`;\r\n        }\r\n\r\n        if (initial) {\r\n          result.initialX = x;\r\n          result.initialY = y;\r\n        }\r\n\r\n        result.lastMovedX = x;\r\n        result.lastMovedY = y;\r\n      }\r\n\r\n      resolve(result);\r\n    }, { frame: withFrame });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps functions in promise with potential animation frame option\r\n * @param {Function} callback\r\n * @param {Object} options\r\n * @param {Boolean} options.raf\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction withPromise(callback, { raf = false } = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    if (raf) {\r\n      requestAnimationFrame(() => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      callback(resolve, reject);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if the sensor event was triggered by a native browser drag event\r\n * @param {SensorEvent} sensorEvent\r\n */\r\nfunction isNativeDragEvent(sensorEvent) {\r\n  return (/^drag/.test(sensorEvent.originalEvent.type)\r\n  );\r\n}\r\n\r\n/***/ }),\r\n/* 63 */\r\n/***/ (function(module, exports, __nested_webpack_require_188616__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Mirror = __nested_webpack_require_188616__(62);\r\n\r\nvar _Mirror2 = _interopRequireDefault(_Mirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Mirror2.default;\r\nexports.defaultOptions = _Mirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 64 */\r\n/***/ (function(module, exports, __nested_webpack_require_189103__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_189103__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\n\r\n/**\r\n * Focusable default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = {};\r\n\r\n/**\r\n * Focusable plugin\r\n * @class Focusable\r\n * @module Focusable\r\n * @extends AbstractPlugin\r\n */\r\nclass Focusable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Focusable constructor.\r\n   * @constructs Focusable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Focusable options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);\r\n\r\n    // Remove modified elements when detach\r\n    this[onDestroy]();\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.focusable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns draggable containers and elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getElements() {\r\n    return [...this.draggable.containers, ...this.draggable.getDraggableElements()];\r\n  }\r\n\r\n  /**\r\n   * Intialize handler\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => decorateElement(element));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy handler\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => stripElement(element));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = Focusable; /**\r\n                              * Keeps track of all the elements that are missing tabindex attributes\r\n                              * so they can be reset when draggable gets destroyed\r\n                              * @const {HTMLElement[]} elementsWithMissingTabIndex\r\n                              */\r\n\r\nconst elementsWithMissingTabIndex = [];\r\n\r\n/**\r\n * Decorates element with tabindex attributes\r\n * @param {HTMLElement} element\r\n * @return {Object}\r\n * @private\r\n */\r\nfunction decorateElement(element) {\r\n  const hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);\r\n\r\n  if (hasMissingTabIndex) {\r\n    elementsWithMissingTabIndex.push(element);\r\n    element.tabIndex = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Removes elements tabindex attributes\r\n * @param {HTMLElement} element\r\n * @private\r\n */\r\nfunction stripElement(element) {\r\n  const tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);\r\n\r\n  if (tabIndexElementPosition !== -1) {\r\n    element.tabIndex = -1;\r\n    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 65 */\r\n/***/ (function(module, exports, __nested_webpack_require_193015__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_193015__(64);\r\n\r\nvar _Focusable2 = _interopRequireDefault(_Focusable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Focusable2.default;\r\n\r\n/***/ }),\r\n/* 66 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 67 */\r\n/***/ (function(module, exports, __nested_webpack_require_194339__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_194339__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\nconst announceEvent = Symbol('announceEvent');\r\nconst announceMessage = Symbol('announceMessage');\r\n\r\nconst ARIA_RELEVANT = 'aria-relevant';\r\nconst ARIA_ATOMIC = 'aria-atomic';\r\nconst ARIA_LIVE = 'aria-live';\r\nconst ROLE = 'role';\r\n\r\n/**\r\n * Announcement default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.expire\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  expire: 7000\r\n};\r\n\r\n/**\r\n * Announcement plugin\r\n * @class Announcement\r\n * @module Announcement\r\n * @extends AbstractPlugin\r\n */\r\nclass Announcement extends _AbstractPlugin2.default {\r\n  /**\r\n   * Announcement constructor.\r\n   * @constructs Announcement\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Plugin options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Original draggable trigger method. Hack until we have onAll or on('all')\r\n     * @property originalTriggerMethod\r\n     * @type {Function}\r\n     */\r\n    this.originalTriggerMethod = this.draggable.trigger;\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Returns passed in options\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.announcements || {};\r\n  }\r\n\r\n  /**\r\n   * Announces event\r\n   * @private\r\n   * @param {AbstractEvent} event\r\n   */\r\n  [announceEvent](event) {\r\n    const message = this.options[event.type];\r\n\r\n    if (message && typeof message === 'string') {\r\n      this[announceMessage](message);\r\n    }\r\n\r\n    if (message && typeof message === 'function') {\r\n      this[announceMessage](message(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Announces message to screen reader\r\n   * @private\r\n   * @param {String} message\r\n   */\r\n  [announceMessage](message) {\r\n    announce(message, { expire: this.options.expire });\r\n  }\r\n\r\n  /**\r\n   * Initialize hander\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Hack until there is an api for listening for all events\r\n    this.draggable.trigger = event => {\r\n      try {\r\n        this[announceEvent](event);\r\n      } finally {\r\n        // Ensure that original trigger is called\r\n        this.originalTriggerMethod.call(this.draggable, event);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy hander\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    this.draggable.trigger = this.originalTriggerMethod;\r\n  }\r\n}\r\n\r\nexports.default = Announcement; /**\r\n                                 * @const {HTMLElement} liveRegion\r\n                                 */\r\n\r\nconst liveRegion = createRegion();\r\n\r\n/**\r\n * Announces message via live region\r\n * @param {String} message\r\n * @param {Object} options\r\n * @param {Number} options.expire\r\n */\r\nfunction announce(message, { expire }) {\r\n  const element = document.createElement('div');\r\n\r\n  element.textContent = message;\r\n  liveRegion.appendChild(element);\r\n\r\n  return setTimeout(() => {\r\n    liveRegion.removeChild(element);\r\n  }, expire);\r\n}\r\n\r\n/**\r\n * Creates region element\r\n * @return {HTMLElement}\r\n */\r\nfunction createRegion() {\r\n  const element = document.createElement('div');\r\n\r\n  element.setAttribute('id', 'draggable-live-region');\r\n  element.setAttribute(ARIA_RELEVANT, 'additions');\r\n  element.setAttribute(ARIA_ATOMIC, 'true');\r\n  element.setAttribute(ARIA_LIVE, 'assertive');\r\n  element.setAttribute(ROLE, 'log');\r\n\r\n  element.style.position = 'fixed';\r\n  element.style.width = '1px';\r\n  element.style.height = '1px';\r\n  element.style.top = '-1px';\r\n  element.style.overflow = 'hidden';\r\n\r\n  return element;\r\n}\r\n\r\n// Append live region element as early as possible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  document.body.appendChild(liveRegion);\r\n});\r\n\r\n/***/ }),\r\n/* 68 */\r\n/***/ (function(module, exports, __nested_webpack_require_199227__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Announcement = __nested_webpack_require_199227__(67);\r\n\r\nvar _Announcement2 = _interopRequireDefault(_Announcement);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Announcement2.default;\r\nexports.defaultOptions = _Announcement.defaultOptions;\r\n\r\n/***/ }),\r\n/* 69 */\r\n/***/ (function(module, exports, __nested_webpack_require_199744__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_199744__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base draggable event\r\n * @class DraggableEvent\r\n * @module DraggableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DraggableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggable instance\r\n   * @property draggable\r\n   * @type {Draggable}\r\n   * @readonly\r\n   */\r\n  get draggable() {\r\n    return this.data.draggable;\r\n  }\r\n}\r\n\r\nexports.DraggableEvent = DraggableEvent; /**\r\n                                          * Draggable initialized event\r\n                                          * @class DraggableInitializedEvent\r\n                                          * @module DraggableInitializedEvent\r\n                                          * @extends DraggableEvent\r\n                                          */\r\n\r\nDraggableEvent.type = 'draggable';\r\nclass DraggableInitializedEvent extends DraggableEvent {}\r\n\r\nexports.DraggableInitializedEvent = DraggableInitializedEvent; /**\r\n                                                                * Draggable destory event\r\n                                                                * @class DraggableInitializedEvent\r\n                                                                * @module DraggableDestroyEvent\r\n                                                                * @extends DraggableDestroyEvent\r\n                                                                */\r\n\r\nDraggableInitializedEvent.type = 'draggable:initialize';\r\nclass DraggableDestroyEvent extends DraggableEvent {}\r\nexports.DraggableDestroyEvent = DraggableDestroyEvent;\r\nDraggableDestroyEvent.type = 'draggable:destroy';\r\n\r\n/***/ }),\r\n/* 70 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 71 */\r\n/***/ (function(module, exports, __nested_webpack_require_203914__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragStoppedEvent = exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_203914__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base drag event\r\n * @class DragEvent\r\n * @module DragEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DragEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.DragEvent = DragEvent; /**\r\n                                * Drag start event\r\n                                * @class DragStartEvent\r\n                                * @module DragStartEvent\r\n                                * @extends DragEvent\r\n                                */\r\n\r\nDragEvent.type = 'drag';\r\nclass DragStartEvent extends DragEvent {}\r\n\r\nexports.DragStartEvent = DragStartEvent; /**\r\n                                          * Drag move event\r\n                                          * @class DragMoveEvent\r\n                                          * @module DragMoveEvent\r\n                                          * @extends DragEvent\r\n                                          */\r\n\r\nDragStartEvent.type = 'drag:start';\r\nDragStartEvent.cancelable = true;\r\nclass DragMoveEvent extends DragEvent {}\r\n\r\nexports.DragMoveEvent = DragMoveEvent; /**\r\n                                        * Drag over event\r\n                                        * @class DragOverEvent\r\n                                        * @module DragOverEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragMoveEvent.type = 'drag:move';\r\nclass DragOverEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOverEvent = DragOverEvent; /**\r\n                                        * Drag out event\r\n                                        * @class DragOutEvent\r\n                                        * @module DragOutEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragOverEvent.type = 'drag:over';\r\nDragOverEvent.cancelable = true;\r\nclass DragOutEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you left\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOutEvent = DragOutEvent; /**\r\n                                      * Drag over container event\r\n                                      * @class DragOverContainerEvent\r\n                                      * @module DragOverContainerEvent\r\n                                      * @extends DragEvent\r\n                                      */\r\n\r\nDragOutEvent.type = 'drag:out';\r\nclass DragOverContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOverContainerEvent = DragOverContainerEvent; /**\r\n                                                          * Drag out container event\r\n                                                          * @class DragOutContainerEvent\r\n                                                          * @module DragOutContainerEvent\r\n                                                          * @extends DragEvent\r\n                                                          */\r\n\r\nDragOverContainerEvent.type = 'drag:over:container';\r\nclass DragOutContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you left\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOutContainerEvent = DragOutContainerEvent; /**\r\n                                                        * Drag pressure event\r\n                                                        * @class DragPressureEvent\r\n                                                        * @module DragPressureEvent\r\n                                                        * @extends DragEvent\r\n                                                        */\r\n\r\nDragOutContainerEvent.type = 'drag:out:container';\r\nclass DragPressureEvent extends DragEvent {\r\n\r\n  /**\r\n   * Pressure applied on draggable element\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.DragPressureEvent = DragPressureEvent; /**\r\n                                                * Drag stop event\r\n                                                * @class DragStopEvent\r\n                                                * @module DragStopEvent\r\n                                                * @extends DragEvent\r\n                                                */\r\n\r\nDragPressureEvent.type = 'drag:pressure';\r\nclass DragStopEvent extends DragEvent {}\r\n\r\nexports.DragStopEvent = DragStopEvent; /**\r\n                                        * Drag stopped event\r\n                                        * @class DragStoppedEvent\r\n                                        * @module DragStoppedEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragStopEvent.type = 'drag:stop';\r\nclass DragStoppedEvent extends DragEvent {}\r\nexports.DragStoppedEvent = DragStoppedEvent;\r\nDragStoppedEvent.type = 'drag:stopped';\r\n\r\n/***/ }),\r\n/* 72 */\r\n/***/ (function(module, exports, __nested_webpack_require_211439__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.Plugins = exports.Sensors = exports.Sortable = exports.Swappable = exports.Droppable = exports.Draggable = exports.BasePlugin = exports.BaseEvent = undefined;\r\n\r\nvar _Draggable = __nested_webpack_require_211439__(5);\r\n\r\nObject.defineProperty(exports, 'Draggable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Draggable).default;\r\n  }\r\n});\r\n\r\nvar _Droppable = __nested_webpack_require_211439__(36);\r\n\r\nObject.defineProperty(exports, 'Droppable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Droppable).default;\r\n  }\r\n});\r\n\r\nvar _Swappable = __nested_webpack_require_211439__(33);\r\n\r\nObject.defineProperty(exports, 'Swappable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Swappable).default;\r\n  }\r\n});\r\n\r\nvar _Sortable = __nested_webpack_require_211439__(30);\r\n\r\nObject.defineProperty(exports, 'Sortable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sortable).default;\r\n  }\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_211439__(1);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_211439__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _Sensors = __nested_webpack_require_211439__(6);\r\n\r\nvar Sensors = _interopRequireWildcard(_Sensors);\r\n\r\nvar _Plugins = __nested_webpack_require_211439__(27);\r\n\r\nvar Plugins = _interopRequireWildcard(_Plugins);\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.BaseEvent = _AbstractEvent2.default;\r\nexports.BasePlugin = _AbstractPlugin2.default;\r\nexports.Sensors = Sensors;\r\nexports.Plugins = Plugins;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/draggable.bundle.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/draggable.bundle.legacy.js":
/*!************************************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/draggable.bundle.legacy.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_571__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_571__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_571__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_571__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_571__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_571__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_571__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_571__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_571__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_571__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_571__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_571__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_571__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_571__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_571__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_571__(__nested_webpack_require_571__.s = 160);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4120__) {\r\n\r\nvar store = __nested_webpack_require_4120__(36)('wks');\r\nvar uid = __nested_webpack_require_4120__(22);\r\nvar Symbol = __nested_webpack_require_4120__(1).Symbol;\r\nvar USE_SYMBOL = typeof Symbol == 'function';\r\n\r\nvar $exports = module.exports = function (name) {\r\n  return store[name] || (store[name] =\r\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\r\n};\r\n\r\n$exports.store = store;\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports) {\r\n\r\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\r\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\r\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\r\n  // eslint-disable-next-line no-new-func\r\n  : Function('return this')();\r\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\r\n\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports) {\r\n\r\nvar core = module.exports = { version: '2.5.7' };\r\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\r\n\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_5206__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_5206__(117);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_5638__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_5638__(118);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6066__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_6066__(113);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_6066__(111);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_6066__(109);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_6066__(107);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_7194__) {\r\n\r\nvar isObject = __nested_webpack_require_7194__(8);\r\nmodule.exports = function (it) {\r\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\r\n  return it;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_7435__) {\r\n\r\n// to indexed object, toObject with fallback for non-array-like ES3 strings\r\nvar IObject = __nested_webpack_require_7435__(58);\r\nvar defined = __nested_webpack_require_7435__(35);\r\nmodule.exports = function (it) {\r\n  return IObject(defined(it));\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (it) {\r\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_7920__) {\r\n\r\nvar anObject = __nested_webpack_require_7920__(6);\r\nvar IE8_DOM_DEFINE = __nested_webpack_require_7920__(61);\r\nvar toPrimitive = __nested_webpack_require_7920__(37);\r\nvar dP = Object.defineProperty;\r\n\r\nexports.f = __nested_webpack_require_7920__(11) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\r\n  anObject(O);\r\n  P = toPrimitive(P, true);\r\n  anObject(Attributes);\r\n  if (IE8_DOM_DEFINE) try {\r\n    return dP(O, P, Attributes);\r\n  } catch (e) { /* empty */ }\r\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\r\n  if ('value' in Attributes) O[P] = Attributes.value;\r\n  return O;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __nested_webpack_require_8609__) {\r\n\r\nvar dP = __nested_webpack_require_8609__(9);\r\nvar createDesc = __nested_webpack_require_8609__(28);\r\nmodule.exports = __nested_webpack_require_8609__(11) ? function (object, key, value) {\r\n  return dP.f(object, key, createDesc(1, value));\r\n} : function (object, key, value) {\r\n  object[key] = value;\r\n  return object;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_8980__) {\r\n\r\n// Thank's IE8 for his funny defineProperty\r\nmodule.exports = !__nested_webpack_require_8980__(23)(function () {\r\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports) {\r\n\r\nvar hasOwnProperty = {}.hasOwnProperty;\r\nmodule.exports = function (it, key) {\r\n  return hasOwnProperty.call(it, key);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_9443__) {\r\n\r\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\r\nvar $keys = __nested_webpack_require_9443__(59);\r\nvar enumBugKeys = __nested_webpack_require_9443__(32);\r\n\r\nmodule.exports = Object.keys || function keys(O) {\r\n  return $keys(O, enumBugKeys);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_9741__) {\r\n\r\nvar global = __nested_webpack_require_9741__(1);\r\nvar hide = __nested_webpack_require_9741__(10);\r\nvar has = __nested_webpack_require_9741__(12);\r\nvar SRC = __nested_webpack_require_9741__(22)('src');\r\nvar TO_STRING = 'toString';\r\nvar $toString = Function[TO_STRING];\r\nvar TPL = ('' + $toString).split(TO_STRING);\r\n\r\n__nested_webpack_require_9741__(2).inspectSource = function (it) {\r\n  return $toString.call(it);\r\n};\r\n\r\n(module.exports = function (O, key, val, safe) {\r\n  var isFunction = typeof val == 'function';\r\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\r\n  if (O[key] === val) return;\r\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\r\n  if (O === global) {\r\n    O[key] = val;\r\n  } else if (!safe) {\r\n    delete O[key];\r\n    hide(O, key, val);\r\n  } else if (O[key]) {\r\n    O[key] = val;\r\n  } else {\r\n    hide(O, key, val);\r\n  }\r\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\r\n})(Function.prototype, TO_STRING, function toString() {\r\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_10916__) {\r\n\r\nvar global = __nested_webpack_require_10916__(1);\r\nvar core = __nested_webpack_require_10916__(2);\r\nvar hide = __nested_webpack_require_10916__(10);\r\nvar redefine = __nested_webpack_require_10916__(14);\r\nvar ctx = __nested_webpack_require_10916__(27);\r\nvar PROTOTYPE = 'prototype';\r\n\r\nvar $export = function (type, name, source) {\r\n  var IS_FORCED = type & $export.F;\r\n  var IS_GLOBAL = type & $export.G;\r\n  var IS_STATIC = type & $export.S;\r\n  var IS_PROTO = type & $export.P;\r\n  var IS_BIND = type & $export.B;\r\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\r\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\r\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\r\n  var key, own, out, exp;\r\n  if (IS_GLOBAL) source = name;\r\n  for (key in source) {\r\n    // contains in native\r\n    own = !IS_FORCED && target && target[key] !== undefined;\r\n    // export native or passed\r\n    out = (own ? target : source)[key];\r\n    // bind timers to global for call from export context\r\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\r\n    // extend global\r\n    if (target) redefine(target, key, out, type & $export.U);\r\n    // export\r\n    if (exports[key] != out) hide(exports, key, exp);\r\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\r\n  }\r\n};\r\nglobal.core = core;\r\n// type bitmap\r\n$export.F = 1;   // forced\r\n$export.G = 2;   // global\r\n$export.S = 4;   // static\r\n$export.P = 8;   // proto\r\n$export.B = 16;  // bind\r\n$export.W = 32;  // wrap\r\n$export.U = 64;  // safe\r\n$export.R = 128; // real proto method for `library`\r\nmodule.exports = $export;\r\n\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_12662__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_12662__(105);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_13131__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_13131__(116);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sensor2.default;\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = {};\r\n\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports) {\r\n\r\nexports.f = {}.propertyIsEnumerable;\r\n\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports) {\r\n\r\nvar toString = {}.toString;\r\n\r\nmodule.exports = function (it) {\r\n  return toString.call(it).slice(8, -1);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = false;\r\n\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports) {\r\n\r\nvar id = 0;\r\nvar px = Math.random();\r\nmodule.exports = function (key) {\r\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (exec) {\r\n  try {\r\n    return !!exec();\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_14384__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_14384__(44);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_14384__(43);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Plugins = __nested_webpack_require_14384__(42);\r\n\r\nObject.keys(_Plugins).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Plugins[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sensors = __nested_webpack_require_14384__(29);\r\n\r\nObject.keys(_Sensors).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Sensors[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Draggable = __nested_webpack_require_14384__(73);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Draggable2.default;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_15971__) {\r\n\r\nvar def = __nested_webpack_require_15971__(9).f;\r\nvar has = __nested_webpack_require_15971__(12);\r\nvar TAG = __nested_webpack_require_15971__(0)('toStringTag');\r\n\r\nmodule.exports = function (it, tag, stat) {\r\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (it) {\r\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\r\n  return it;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_16526__) {\r\n\r\n// optional / simple context binding\r\nvar aFunction = __nested_webpack_require_16526__(26);\r\nmodule.exports = function (fn, that, length) {\r\n  aFunction(fn);\r\n  if (that === undefined) return fn;\r\n  switch (length) {\r\n    case 1: return function (a) {\r\n      return fn.call(that, a);\r\n    };\r\n    case 2: return function (a, b) {\r\n      return fn.call(that, a, b);\r\n    };\r\n    case 3: return function (a, b, c) {\r\n      return fn.call(that, a, b, c);\r\n    };\r\n  }\r\n  return function (/* ...args */) {\r\n    return fn.apply(that, arguments);\r\n  };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (bitmap, value) {\r\n  return {\r\n    enumerable: !(bitmap & 1),\r\n    configurable: !(bitmap & 2),\r\n    writable: !(bitmap & 4),\r\n    value: value\r\n  };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __nested_webpack_require_17393__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_17393__(17);\r\n\r\nObject.defineProperty(exports, 'Sensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sensor).default;\r\n  }\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_17393__(115);\r\n\r\nObject.defineProperty(exports, 'MouseSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_MouseSensor).default;\r\n  }\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_17393__(104);\r\n\r\nObject.defineProperty(exports, 'TouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_TouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_17393__(102);\r\n\r\nObject.defineProperty(exports, 'DragSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_DragSensor).default;\r\n  }\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_17393__(100);\r\n\r\nObject.defineProperty(exports, 'ForceTouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ForceTouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_17393__(16);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_19006__) {\r\n\r\n// getting tag from 19.1.3.6 Object.prototype.toString()\r\nvar cof = __nested_webpack_require_19006__(20);\r\nvar TAG = __nested_webpack_require_19006__(0)('toStringTag');\r\n// ES3 wrong here\r\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\r\n\r\n// fallback for IE11 Script Access Denied error\r\nvar tryGet = function (it, key) {\r\n  try {\r\n    return it[key];\r\n  } catch (e) { /* empty */ }\r\n};\r\n\r\nmodule.exports = function (it) {\r\n  var O, T, B;\r\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\r\n    // @@toStringTag case\r\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\r\n    // builtinTag case\r\n    : ARG ? cof(O)\r\n    // ES3 arguments fallback\r\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports) {\r\n\r\nexports.f = Object.getOwnPropertySymbols;\r\n\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports) {\r\n\r\n// IE 8- don't enum bug keys\r\nmodule.exports = (\r\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\r\n).split(',');\r\n\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_20175__) {\r\n\r\nvar shared = __nested_webpack_require_20175__(36)('keys');\r\nvar uid = __nested_webpack_require_20175__(22);\r\nmodule.exports = function (key) {\r\n  return shared[key] || (shared[key] = uid(key));\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports) {\r\n\r\n// 7.1.4 ToInteger\r\nvar ceil = Math.ceil;\r\nvar floor = Math.floor;\r\nmodule.exports = function (it) {\r\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports) {\r\n\r\n// 7.2.1 RequireObjectCoercible(argument)\r\nmodule.exports = function (it) {\r\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\r\n  return it;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_20892__) {\r\n\r\nvar core = __nested_webpack_require_20892__(2);\r\nvar global = __nested_webpack_require_20892__(1);\r\nvar SHARED = '__core-js_shared__';\r\nvar store = global[SHARED] || (global[SHARED] = {});\r\n\r\n(module.exports = function (key, value) {\r\n  return store[key] || (store[key] = value !== undefined ? value : {});\r\n})('versions', []).push({\r\n  version: core.version,\r\n  mode: __nested_webpack_require_20892__(21) ? 'pure' : 'global',\r\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __nested_webpack_require_21423__) {\r\n\r\n// 7.1.1 ToPrimitive(input [, PreferredType])\r\nvar isObject = __nested_webpack_require_21423__(8);\r\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\r\n// and the second argument - flag - preferred type is a string\r\nmodule.exports = function (it, S) {\r\n  if (!isObject(it)) return it;\r\n  var fn, val;\r\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\r\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\r\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\r\n  throw TypeError(\"Can't convert object to primitive value\");\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __nested_webpack_require_22173__) {\r\n\r\nvar isObject = __nested_webpack_require_22173__(8);\r\nvar document = __nested_webpack_require_22173__(1).document;\r\n// typeof document.createElement is 'object' in old IE\r\nvar is = isObject(document) && isObject(document.createElement);\r\nmodule.exports = function (it) {\r\n  return is ? document.createElement(it) : {};\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __nested_webpack_require_22554__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SortableEvent = __nested_webpack_require_22554__(63);\r\n\r\nObject.keys(_SortableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SortableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __nested_webpack_require_23028__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SwappableEvent = __nested_webpack_require_23028__(66);\r\n\r\nObject.keys(_SwappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SwappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __nested_webpack_require_23505__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DroppableEvent = __nested_webpack_require_23505__(69);\r\n\r\nObject.keys(_DroppableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DroppableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __nested_webpack_require_23982__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Announcement = __nested_webpack_require_23982__(83);\r\n\r\nObject.defineProperty(exports, 'Announcement', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Announcement).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultAnnouncementOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Announcement.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_23982__(81);\r\n\r\nObject.defineProperty(exports, 'Focusable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Focusable).default;\r\n  }\r\n});\r\n\r\nvar _Mirror = __nested_webpack_require_23982__(79);\r\n\r\nObject.defineProperty(exports, 'Mirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Mirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Mirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Scrollable = __nested_webpack_require_23982__(75);\r\n\r\nObject.defineProperty(exports, 'Scrollable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Scrollable).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultScrollableOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Scrollable.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __nested_webpack_require_25526__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_25526__(84);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_26003__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_26003__(85);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __nested_webpack_require_26465__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_26465__(91);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports, __nested_webpack_require_26942__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_26942__(96);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __nested_webpack_require_27422__) {\r\n\r\n\"use strict\";\r\n\r\n// 25.4.1.5 NewPromiseCapability(C)\r\nvar aFunction = __nested_webpack_require_27422__(26);\r\n\r\nfunction PromiseCapability(C) {\r\n  var resolve, reject;\r\n  this.promise = new C(function ($$resolve, $$reject) {\r\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\r\n    resolve = $$resolve;\r\n    reject = $$reject;\r\n  });\r\n  this.resolve = aFunction(resolve);\r\n  this.reject = aFunction(reject);\r\n}\r\n\r\nmodule.exports.f = function (C) {\r\n  return new PromiseCapability(C);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __nested_webpack_require_28029__) {\r\n\r\nvar ctx = __nested_webpack_require_28029__(27);\r\nvar invoke = __nested_webpack_require_28029__(134);\r\nvar html = __nested_webpack_require_28029__(54);\r\nvar cel = __nested_webpack_require_28029__(38);\r\nvar global = __nested_webpack_require_28029__(1);\r\nvar process = global.process;\r\nvar setTask = global.setImmediate;\r\nvar clearTask = global.clearImmediate;\r\nvar MessageChannel = global.MessageChannel;\r\nvar Dispatch = global.Dispatch;\r\nvar counter = 0;\r\nvar queue = {};\r\nvar ONREADYSTATECHANGE = 'onreadystatechange';\r\nvar defer, channel, port;\r\nvar run = function () {\r\n  var id = +this;\r\n  // eslint-disable-next-line no-prototype-builtins\r\n  if (queue.hasOwnProperty(id)) {\r\n    var fn = queue[id];\r\n    delete queue[id];\r\n    fn();\r\n  }\r\n};\r\nvar listener = function (event) {\r\n  run.call(event.data);\r\n};\r\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\r\nif (!setTask || !clearTask) {\r\n  setTask = function setImmediate(fn) {\r\n    var args = [];\r\n    var i = 1;\r\n    while (arguments.length > i) args.push(arguments[i++]);\r\n    queue[++counter] = function () {\r\n      // eslint-disable-next-line no-new-func\r\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\r\n    };\r\n    defer(counter);\r\n    return counter;\r\n  };\r\n  clearTask = function clearImmediate(id) {\r\n    delete queue[id];\r\n  };\r\n  // Node.js 0.8-\r\n  if (__nested_webpack_require_28029__(20)(process) == 'process') {\r\n    defer = function (id) {\r\n      process.nextTick(ctx(run, id, 1));\r\n    };\r\n  // Sphere (JS game engine) Dispatch API\r\n  } else if (Dispatch && Dispatch.now) {\r\n    defer = function (id) {\r\n      Dispatch.now(ctx(run, id, 1));\r\n    };\r\n  // Browsers with MessageChannel, includes WebWorkers\r\n  } else if (MessageChannel) {\r\n    channel = new MessageChannel();\r\n    port = channel.port2;\r\n    channel.port1.onmessage = listener;\r\n    defer = ctx(port.postMessage, port, 1);\r\n  // Browsers with postMessage, skip WebWorkers\r\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\r\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\r\n    defer = function (id) {\r\n      global.postMessage(id + '', '*');\r\n    };\r\n    global.addEventListener('message', listener, false);\r\n  // IE8-\r\n  } else if (ONREADYSTATECHANGE in cel('script')) {\r\n    defer = function (id) {\r\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\r\n        html.removeChild(this);\r\n        run.call(id);\r\n      };\r\n    };\r\n  // Rest old browsers\r\n  } else {\r\n    defer = function (id) {\r\n      setTimeout(ctx(run, id, 1), 0);\r\n    };\r\n  }\r\n}\r\nmodule.exports = {\r\n  set: setTask,\r\n  clear: clearTask\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 49 */\r\n/***/ (function(module, exports, __nested_webpack_require_30703__) {\r\n\r\n// 22.1.3.31 Array.prototype[@@unscopables]\r\nvar UNSCOPABLES = __nested_webpack_require_30703__(0)('unscopables');\r\nvar ArrayProto = Array.prototype;\r\nif (ArrayProto[UNSCOPABLES] == undefined) __nested_webpack_require_30703__(10)(ArrayProto, UNSCOPABLES, {});\r\nmodule.exports = function (key) {\r\n  ArrayProto[UNSCOPABLES][key] = true;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 50 */\r\n/***/ (function(module, exports, __nested_webpack_require_31101__) {\r\n\r\n// 7.1.13 ToObject(argument)\r\nvar defined = __nested_webpack_require_31101__(35);\r\nmodule.exports = function (it) {\r\n  return Object(defined(it));\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 51 */\r\n/***/ (function(module, exports, __nested_webpack_require_31324__) {\r\n\r\n\"use strict\";\r\n\r\nvar LIBRARY = __nested_webpack_require_31324__(21);\r\nvar $export = __nested_webpack_require_31324__(15);\r\nvar redefine = __nested_webpack_require_31324__(14);\r\nvar hide = __nested_webpack_require_31324__(10);\r\nvar Iterators = __nested_webpack_require_31324__(18);\r\nvar $iterCreate = __nested_webpack_require_31324__(146);\r\nvar setToStringTag = __nested_webpack_require_31324__(25);\r\nvar getPrototypeOf = __nested_webpack_require_31324__(145);\r\nvar ITERATOR = __nested_webpack_require_31324__(0)('iterator');\r\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\r\nvar FF_ITERATOR = '@@iterator';\r\nvar KEYS = 'keys';\r\nvar VALUES = 'values';\r\n\r\nvar returnThis = function () { return this; };\r\n\r\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\r\n  $iterCreate(Constructor, NAME, next);\r\n  var getMethod = function (kind) {\r\n    if (!BUGGY && kind in proto) return proto[kind];\r\n    switch (kind) {\r\n      case KEYS: return function keys() { return new Constructor(this, kind); };\r\n      case VALUES: return function values() { return new Constructor(this, kind); };\r\n    } return function entries() { return new Constructor(this, kind); };\r\n  };\r\n  var TAG = NAME + ' Iterator';\r\n  var DEF_VALUES = DEFAULT == VALUES;\r\n  var VALUES_BUG = false;\r\n  var proto = Base.prototype;\r\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\r\n  var $default = $native || getMethod(DEFAULT);\r\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\r\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\r\n  var methods, key, IteratorPrototype;\r\n  // Fix native\r\n  if ($anyNative) {\r\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\r\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\r\n      // Set @@toStringTag to native iterators\r\n      setToStringTag(IteratorPrototype, TAG, true);\r\n      // fix for some old engines\r\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\r\n    }\r\n  }\r\n  // fix Array#{values, @@iterator}.name in V8 / FF\r\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\r\n    VALUES_BUG = true;\r\n    $default = function values() { return $native.call(this); };\r\n  }\r\n  // Define iterator\r\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\r\n    hide(proto, ITERATOR, $default);\r\n  }\r\n  // Plug for library\r\n  Iterators[NAME] = $default;\r\n  Iterators[TAG] = returnThis;\r\n  if (DEFAULT) {\r\n    methods = {\r\n      values: DEF_VALUES ? $default : getMethod(VALUES),\r\n      keys: IS_SET ? $default : getMethod(KEYS),\r\n      entries: $entries\r\n    };\r\n    if (FORCED) for (key in methods) {\r\n      if (!(key in proto)) redefine(proto, key, methods[key]);\r\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\r\n  }\r\n  return methods;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 52 */\r\n/***/ (function(module, exports, __nested_webpack_require_34265__) {\r\n\r\n\"use strict\";\r\n\r\n// 19.1.3.6 Object.prototype.toString()\r\nvar classof = __nested_webpack_require_34265__(30);\r\nvar test = {};\r\ntest[__nested_webpack_require_34265__(0)('toStringTag')] = 'z';\r\nif (test + '' != '[object z]') {\r\n  __nested_webpack_require_34265__(14)(Object.prototype, 'toString', function toString() {\r\n    return '[object ' + classof(this) + ']';\r\n  }, true);\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 53 */\r\n/***/ (function(module, exports, __nested_webpack_require_34690__) {\r\n\r\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\r\nvar $keys = __nested_webpack_require_34690__(59);\r\nvar hiddenKeys = __nested_webpack_require_34690__(32).concat('length', 'prototype');\r\n\r\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\r\n  return $keys(O, hiddenKeys);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 54 */\r\n/***/ (function(module, exports, __nested_webpack_require_35054__) {\r\n\r\nvar document = __nested_webpack_require_35054__(1).document;\r\nmodule.exports = document && document.documentElement;\r\n\r\n\r\n/***/ }),\r\n/* 55 */\r\n/***/ (function(module, exports, __nested_webpack_require_35243__) {\r\n\r\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r\nvar anObject = __nested_webpack_require_35243__(6);\r\nvar dPs = __nested_webpack_require_35243__(152);\r\nvar enumBugKeys = __nested_webpack_require_35243__(32);\r\nvar IE_PROTO = __nested_webpack_require_35243__(33)('IE_PROTO');\r\nvar Empty = function () { /* empty */ };\r\nvar PROTOTYPE = 'prototype';\r\n\r\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\r\nvar createDict = function () {\r\n  // Thrash, waste and sodomy: IE GC bug\r\n  var iframe = __nested_webpack_require_35243__(38)('iframe');\r\n  var i = enumBugKeys.length;\r\n  var lt = '<';\r\n  var gt = '>';\r\n  var iframeDocument;\r\n  iframe.style.display = 'none';\r\n  __nested_webpack_require_35243__(54).appendChild(iframe);\r\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\r\n  // createDict = iframe.contentWindow.Object;\r\n  // html.removeChild(iframe);\r\n  iframeDocument = iframe.contentWindow.document;\r\n  iframeDocument.open();\r\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\r\n  iframeDocument.close();\r\n  createDict = iframeDocument.F;\r\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\r\n  return createDict();\r\n};\r\n\r\nmodule.exports = Object.create || function create(O, Properties) {\r\n  var result;\r\n  if (O !== null) {\r\n    Empty[PROTOTYPE] = anObject(O);\r\n    result = new Empty();\r\n    Empty[PROTOTYPE] = null;\r\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\r\n    result[IE_PROTO] = O;\r\n  } else result = createDict();\r\n  return Properties === undefined ? result : dPs(result, Properties);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 56 */\r\n/***/ (function(module, exports, __nested_webpack_require_36871__) {\r\n\r\n// 7.1.15 ToLength\r\nvar toInteger = __nested_webpack_require_36871__(34);\r\nvar min = Math.min;\r\nmodule.exports = function (it) {\r\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 57 */\r\n/***/ (function(module, exports, __nested_webpack_require_37175__) {\r\n\r\n// false -> Array#indexOf\r\n// true  -> Array#includes\r\nvar toIObject = __nested_webpack_require_37175__(7);\r\nvar toLength = __nested_webpack_require_37175__(56);\r\nvar toAbsoluteIndex = __nested_webpack_require_37175__(154);\r\nmodule.exports = function (IS_INCLUDES) {\r\n  return function ($this, el, fromIndex) {\r\n    var O = toIObject($this);\r\n    var length = toLength(O.length);\r\n    var index = toAbsoluteIndex(fromIndex, length);\r\n    var value;\r\n    // Array#includes uses SameValueZero equality algorithm\r\n    // eslint-disable-next-line no-self-compare\r\n    if (IS_INCLUDES && el != el) while (length > index) {\r\n      value = O[index++];\r\n      // eslint-disable-next-line no-self-compare\r\n      if (value != value) return true;\r\n    // Array#indexOf ignores holes, Array#includes - not\r\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\r\n      if (O[index] === el) return IS_INCLUDES || index || 0;\r\n    } return !IS_INCLUDES && -1;\r\n  };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 58 */\r\n/***/ (function(module, exports, __nested_webpack_require_38197__) {\r\n\r\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\r\nvar cof = __nested_webpack_require_38197__(20);\r\n// eslint-disable-next-line no-prototype-builtins\r\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\r\n  return cof(it) == 'String' ? it.split('') : Object(it);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 59 */\r\n/***/ (function(module, exports, __nested_webpack_require_38582__) {\r\n\r\nvar has = __nested_webpack_require_38582__(12);\r\nvar toIObject = __nested_webpack_require_38582__(7);\r\nvar arrayIndexOf = __nested_webpack_require_38582__(57)(false);\r\nvar IE_PROTO = __nested_webpack_require_38582__(33)('IE_PROTO');\r\n\r\nmodule.exports = function (object, names) {\r\n  var O = toIObject(object);\r\n  var i = 0;\r\n  var result = [];\r\n  var key;\r\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\r\n  // Don't enum bug & hidden keys\r\n  while (names.length > i) if (has(O, key = names[i++])) {\r\n    ~arrayIndexOf(result, key) || result.push(key);\r\n  }\r\n  return result;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 60 */\r\n/***/ (function(module, exports, __nested_webpack_require_39218__) {\r\n\r\nexports.f = __nested_webpack_require_39218__(0);\r\n\r\n\r\n/***/ }),\r\n/* 61 */\r\n/***/ (function(module, exports, __nested_webpack_require_39339__) {\r\n\r\nmodule.exports = !__nested_webpack_require_39339__(11) && !__nested_webpack_require_39339__(23)(function () {\r\n  return Object.defineProperty(__nested_webpack_require_39339__(38)('div'), 'a', { get: function () { return 7; } }).a != 7;\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 62 */\r\n/***/ (function(module, exports, __nested_webpack_require_39626__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _Draggable = __nested_webpack_require_39626__(24);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _SortableEvent = __nested_webpack_require_39626__(39);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOverContainer = Symbol('onDragOverContainer');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragStop = Symbol('onDragStop');\r\n\r\n/**\r\n * Returns announcement message when a Draggable element has been sorted with another Draggable element\r\n * or moved into a new container\r\n * @param {SortableSortedEvent} sortableEvent\r\n * @return {String}\r\n */\r\nfunction onSortableSortedDefaultAnnouncement({ dragEvent }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'sortable element';\r\n\r\n  if (dragEvent.over) {\r\n    const overText = dragEvent.over.textContent.trim() || dragEvent.over.id || 'sortable element';\r\n    const isFollowing = dragEvent.source.compareDocumentPosition(dragEvent.over) & Node.DOCUMENT_POSITION_FOLLOWING;\r\n\r\n    if (isFollowing) {\r\n      return `Placed ${sourceText} after ${overText}`;\r\n    } else {\r\n      return `Placed ${sourceText} before ${overText}`;\r\n    }\r\n  } else {\r\n    // need to figure out how to compute container name\r\n    return `Placed ${sourceText} into a different container`;\r\n  }\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['sortable:sorted']\r\n */\r\nconst defaultAnnouncements = {\r\n  'sortable:sorted': onSortableSortedDefaultAnnouncement\r\n};\r\n\r\n/**\r\n * Sortable is built on top of Draggable and allows sorting of draggable elements. Sortable will keep\r\n * track of the original index and emits the new index as you drag over draggable elements.\r\n * @class Sortable\r\n * @module Sortable\r\n * @extends Draggable\r\n */\r\nclass Sortable extends _Draggable2.default {\r\n  /**\r\n   * Sortable constructor.\r\n   * @constructs Sortable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Sortable containers\r\n   * @param {Object} options - Options for Sortable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, options, {\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * start index of source on drag start\r\n     * @property startIndex\r\n     * @type {Number}\r\n     */\r\n    this.startIndex = null;\r\n\r\n    /**\r\n     * start container on drag start\r\n     * @property startContainer\r\n     * @type {HTMLElement}\r\n     * @default null\r\n     */\r\n    this.startContainer = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOverContainer] = this[onDragOverContainer].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:over:container', this[onDragOverContainer]).on('drag:over', this[onDragOver]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Sortable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this[onDragStart]).off('drag:over:container', this[onDragOverContainer]).off('drag:over', this[onDragOver]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns true index of element within its container during drag operation, i.e. excluding mirror and original source\r\n   * @param {HTMLElement} element - An element\r\n   * @return {Number}\r\n   */\r\n  index(element) {\r\n    return this.getSortableElementsForContainer(element.parentNode).indexOf(element);\r\n  }\r\n\r\n  /**\r\n   * Returns sortable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getSortableElementsForContainer(container) {\r\n    const allSortableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allSortableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror && childElement.parentNode === container;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    this.startContainer = event.source.parentNode;\r\n    this.startIndex = this.index(event.source);\r\n\r\n    const sortableStartEvent = new _SortableEvent.SortableStartEvent({\r\n      dragEvent: event,\r\n      startIndex: this.startIndex,\r\n      startContainer: this.startContainer\r\n    });\r\n\r\n    this.trigger(sortableStartEvent);\r\n\r\n    if (sortableStartEvent.canceled()) {\r\n      event.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag over container handler\r\n   * @private\r\n   * @param {DragOverContainerEvent} event - Drag over container event\r\n   */\r\n  [onDragOverContainer](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, over, overContainer } = event;\r\n    const oldIndex = this.index(source);\r\n\r\n    const sortableSortEvent = new _SortableEvent.SortableSortEvent({\r\n      dragEvent: event,\r\n      currentIndex: oldIndex,\r\n      source,\r\n      over\r\n    });\r\n\r\n    this.trigger(sortableSortEvent);\r\n\r\n    if (sortableSortEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const children = this.getSortableElementsForContainer(overContainer);\r\n    const moves = move({ source, over, overContainer, children });\r\n\r\n    if (!moves) {\r\n      return;\r\n    }\r\n\r\n    const { oldContainer, newContainer } = moves;\r\n    const newIndex = this.index(event.source);\r\n\r\n    const sortableSortedEvent = new _SortableEvent.SortableSortedEvent({\r\n      dragEvent: event,\r\n      oldIndex,\r\n      newIndex,\r\n      oldContainer,\r\n      newContainer\r\n    });\r\n\r\n    this.trigger(sortableSortedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.over === event.originalSource || event.over === event.source) {\r\n      return;\r\n    }\r\n\r\n    const { source, over, overContainer } = event;\r\n    const oldIndex = this.index(source);\r\n\r\n    const sortableSortEvent = new _SortableEvent.SortableSortEvent({\r\n      dragEvent: event,\r\n      currentIndex: oldIndex,\r\n      source,\r\n      over\r\n    });\r\n\r\n    this.trigger(sortableSortEvent);\r\n\r\n    if (sortableSortEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const children = this.getDraggableElementsForContainer(overContainer);\r\n    const moves = move({ source, over, overContainer, children });\r\n\r\n    if (!moves) {\r\n      return;\r\n    }\r\n\r\n    const { oldContainer, newContainer } = moves;\r\n    const newIndex = this.index(source);\r\n\r\n    const sortableSortedEvent = new _SortableEvent.SortableSortedEvent({\r\n      dragEvent: event,\r\n      oldIndex,\r\n      newIndex,\r\n      oldContainer,\r\n      newContainer\r\n    });\r\n\r\n    this.trigger(sortableSortedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const sortableStopEvent = new _SortableEvent.SortableStopEvent({\r\n      dragEvent: event,\r\n      oldIndex: this.startIndex,\r\n      newIndex: this.index(event.source),\r\n      oldContainer: this.startContainer,\r\n      newContainer: event.source.parentNode\r\n    });\r\n\r\n    this.trigger(sortableStopEvent);\r\n\r\n    this.startIndex = null;\r\n    this.startContainer = null;\r\n  }\r\n}\r\n\r\nexports.default = Sortable;\r\nfunction index(element) {\r\n  return Array.prototype.indexOf.call(element.parentNode.children, element);\r\n}\r\n\r\nfunction move({ source, over, overContainer, children }) {\r\n  const emptyOverContainer = !children.length;\r\n  const differentContainer = source.parentNode !== overContainer;\r\n  const sameContainer = over && source.parentNode === over.parentNode;\r\n\r\n  if (emptyOverContainer) {\r\n    return moveInsideEmptyContainer(source, overContainer);\r\n  } else if (sameContainer) {\r\n    return moveWithinContainer(source, over);\r\n  } else if (differentContainer) {\r\n    return moveOutsideContainer(source, over, overContainer);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction moveInsideEmptyContainer(source, overContainer) {\r\n  const oldContainer = source.parentNode;\r\n\r\n  overContainer.appendChild(source);\r\n\r\n  return { oldContainer, newContainer: overContainer };\r\n}\r\n\r\nfunction moveWithinContainer(source, over) {\r\n  const oldIndex = index(source);\r\n  const newIndex = index(over);\r\n\r\n  if (oldIndex < newIndex) {\r\n    source.parentNode.insertBefore(source, over.nextElementSibling);\r\n  } else {\r\n    source.parentNode.insertBefore(source, over);\r\n  }\r\n\r\n  return { oldContainer: source.parentNode, newContainer: source.parentNode };\r\n}\r\n\r\nfunction moveOutsideContainer(source, over, overContainer) {\r\n  const oldContainer = source.parentNode;\r\n\r\n  if (over) {\r\n    over.parentNode.insertBefore(source, over);\r\n  } else {\r\n    // need to figure out proper position\r\n    overContainer.appendChild(source);\r\n  }\r\n\r\n  return { oldContainer, newContainer: source.parentNode };\r\n}\r\n\r\n/***/ }),\r\n/* 63 */\r\n/***/ (function(module, exports, __nested_webpack_require_49098__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SortableStopEvent = exports.SortableSortedEvent = exports.SortableSortEvent = exports.SortableStartEvent = exports.SortableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_49098__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sortable event\r\n * @class SortableEvent\r\n * @module SortableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SortableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this sortable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.SortableEvent = SortableEvent; /**\r\n                                        * Sortable start event\r\n                                        * @class SortableStartEvent\r\n                                        * @module SortableStartEvent\r\n                                        * @extends SortableEvent\r\n                                        */\r\n\r\nSortableEvent.type = 'sortable';\r\nclass SortableStartEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Start index of source on sortable start\r\n   * @property startIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get startIndex() {\r\n    return this.data.startIndex;\r\n  }\r\n\r\n  /**\r\n   * Start container on sortable start\r\n   * @property startContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get startContainer() {\r\n    return this.data.startContainer;\r\n  }\r\n}\r\n\r\nexports.SortableStartEvent = SortableStartEvent; /**\r\n                                                  * Sortable sort event\r\n                                                  * @class SortableSortEvent\r\n                                                  * @module SortableSortEvent\r\n                                                  * @extends SortableEvent\r\n                                                  */\r\n\r\nSortableStartEvent.type = 'sortable:start';\r\nSortableStartEvent.cancelable = true;\r\nclass SortableSortEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Index of current draggable element\r\n   * @property currentIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get currentIndex() {\r\n    return this.data.currentIndex;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are hovering over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n\r\n  /**\r\n   * Draggable container element you are hovering over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.dragEvent.overContainer;\r\n  }\r\n}\r\n\r\nexports.SortableSortEvent = SortableSortEvent; /**\r\n                                                * Sortable sorted event\r\n                                                * @class SortableSortedEvent\r\n                                                * @module SortableSortedEvent\r\n                                                * @extends SortableEvent\r\n                                                */\r\n\r\nSortableSortEvent.type = 'sortable:sort';\r\nSortableSortEvent.cancelable = true;\r\nclass SortableSortedEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Index of last sorted event\r\n   * @property oldIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get oldIndex() {\r\n    return this.data.oldIndex;\r\n  }\r\n\r\n  /**\r\n   * New index of this sorted event\r\n   * @property newIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get newIndex() {\r\n    return this.data.newIndex;\r\n  }\r\n\r\n  /**\r\n   * Old container of draggable element\r\n   * @property oldContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get oldContainer() {\r\n    return this.data.oldContainer;\r\n  }\r\n\r\n  /**\r\n   * New container of draggable element\r\n   * @property newContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get newContainer() {\r\n    return this.data.newContainer;\r\n  }\r\n}\r\n\r\nexports.SortableSortedEvent = SortableSortedEvent; /**\r\n                                                    * Sortable stop event\r\n                                                    * @class SortableStopEvent\r\n                                                    * @module SortableStopEvent\r\n                                                    * @extends SortableEvent\r\n                                                    */\r\n\r\nSortableSortedEvent.type = 'sortable:sorted';\r\nclass SortableStopEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Original index on sortable start\r\n   * @property oldIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get oldIndex() {\r\n    return this.data.oldIndex;\r\n  }\r\n\r\n  /**\r\n   * New index of draggable element\r\n   * @property newIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get newIndex() {\r\n    return this.data.newIndex;\r\n  }\r\n\r\n  /**\r\n   * Original container of draggable element\r\n   * @property oldContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get oldContainer() {\r\n    return this.data.oldContainer;\r\n  }\r\n\r\n  /**\r\n   * New container of draggable element\r\n   * @property newContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get newContainer() {\r\n    return this.data.newContainer;\r\n  }\r\n}\r\nexports.SortableStopEvent = SortableStopEvent;\r\nSortableStopEvent.type = 'sortable:stop';\r\n\r\n/***/ }),\r\n/* 64 */\r\n/***/ (function(module, exports, __nested_webpack_require_54604__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SortableEvent = __nested_webpack_require_54604__(39);\r\n\r\nObject.keys(_SortableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SortableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sortable = __nested_webpack_require_54604__(62);\r\n\r\nvar _Sortable2 = _interopRequireDefault(_Sortable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sortable2.default;\r\n\r\n/***/ }),\r\n/* 65 */\r\n/***/ (function(module, exports, __nested_webpack_require_55317__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _Draggable = __nested_webpack_require_55317__(24);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _SwappableEvent = __nested_webpack_require_55317__(40);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragStop = Symbol('onDragStop');\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element is swapped with another draggable element\r\n * @param {SwappableSwappedEvent} swappableEvent\r\n * @return {String}\r\n */\r\nfunction onSwappableSwappedDefaultAnnouncement({ dragEvent, swappedElement }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'swappable element';\r\n  const overText = swappedElement.textContent.trim() || swappedElement.id || 'swappable element';\r\n\r\n  return `Swapped ${sourceText} with ${overText}`;\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['swappabled:swapped']\r\n */\r\nconst defaultAnnouncements = {\r\n  'swappabled:swapped': onSwappableSwappedDefaultAnnouncement\r\n};\r\n\r\n/**\r\n * Swappable is built on top of Draggable and allows swapping of draggable elements.\r\n * Order is irrelevant to Swappable.\r\n * @class Swappable\r\n * @module Swappable\r\n * @extends Draggable\r\n */\r\nclass Swappable extends _Draggable2.default {\r\n  /**\r\n   * Swappable constructor.\r\n   * @constructs Swappable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Swappable containers\r\n   * @param {Object} options - Options for Swappable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, options, {\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * Last draggable element that was dragged over\r\n     * @property lastOver\r\n     * @type {HTMLElement}\r\n     */\r\n    this.lastOver = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:over', this[onDragOver]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Swappable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this._onDragStart).off('drag:over', this._onDragOver).off('drag:stop', this._onDragStop);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    const swappableStartEvent = new _SwappableEvent.SwappableStartEvent({\r\n      dragEvent: event\r\n    });\r\n\r\n    this.trigger(swappableStartEvent);\r\n\r\n    if (swappableStartEvent.canceled()) {\r\n      event.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.over === event.originalSource || event.over === event.source || event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const swappableSwapEvent = new _SwappableEvent.SwappableSwapEvent({\r\n      dragEvent: event,\r\n      over: event.over,\r\n      overContainer: event.overContainer\r\n    });\r\n\r\n    this.trigger(swappableSwapEvent);\r\n\r\n    if (swappableSwapEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    // swap originally swapped element back\r\n    if (this.lastOver && this.lastOver !== event.over) {\r\n      swap(this.lastOver, event.source);\r\n    }\r\n\r\n    if (this.lastOver === event.over) {\r\n      this.lastOver = null;\r\n    } else {\r\n      this.lastOver = event.over;\r\n    }\r\n\r\n    swap(event.source, event.over);\r\n\r\n    const swappableSwappedEvent = new _SwappableEvent.SwappableSwappedEvent({\r\n      dragEvent: event,\r\n      swappedElement: event.over\r\n    });\r\n\r\n    this.trigger(swappableSwappedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const swappableStopEvent = new _SwappableEvent.SwappableStopEvent({\r\n      dragEvent: event\r\n    });\r\n\r\n    this.trigger(swappableStopEvent);\r\n    this.lastOver = null;\r\n  }\r\n}\r\n\r\nexports.default = Swappable;\r\nfunction withTempElement(callback) {\r\n  const tmpElement = document.createElement('div');\r\n  callback(tmpElement);\r\n  tmpElement.parentNode.removeChild(tmpElement);\r\n}\r\n\r\nfunction swap(source, over) {\r\n  const overParent = over.parentNode;\r\n  const sourceParent = source.parentNode;\r\n\r\n  withTempElement(tmpElement => {\r\n    sourceParent.insertBefore(tmpElement, source);\r\n    overParent.insertBefore(source, over);\r\n    sourceParent.insertBefore(over, tmpElement);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 66 */\r\n/***/ (function(module, exports, __nested_webpack_require_60424__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SwappableStopEvent = exports.SwappableSwappedEvent = exports.SwappableSwapEvent = exports.SwappableStartEvent = exports.SwappableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_60424__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base swappable event\r\n * @class SwappableEvent\r\n * @module SwappableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SwappableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this swappable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.SwappableEvent = SwappableEvent; /**\r\n                                          * Swappable start event\r\n                                          * @class SwappableStartEvent\r\n                                          * @module SwappableStartEvent\r\n                                          * @extends SwappableEvent\r\n                                          */\r\n\r\nSwappableEvent.type = 'swappable';\r\nclass SwappableStartEvent extends SwappableEvent {}\r\n\r\nexports.SwappableStartEvent = SwappableStartEvent; /**\r\n                                                    * Swappable swap event\r\n                                                    * @class SwappableSwapEvent\r\n                                                    * @module SwappableSwapEvent\r\n                                                    * @extends SwappableEvent\r\n                                                    */\r\n\r\nSwappableStartEvent.type = 'swappable:start';\r\nSwappableStartEvent.cancelable = true;\r\nclass SwappableSwapEvent extends SwappableEvent {\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.SwappableSwapEvent = SwappableSwapEvent; /**\r\n                                                  * Swappable swapped event\r\n                                                  * @class SwappableSwappedEvent\r\n                                                  * @module SwappableSwappedEvent\r\n                                                  * @extends SwappableEvent\r\n                                                  */\r\n\r\nSwappableSwapEvent.type = 'swappable:swap';\r\nSwappableSwapEvent.cancelable = true;\r\nclass SwappableSwappedEvent extends SwappableEvent {\r\n\r\n  /**\r\n   * The draggable element that you swapped with\r\n   * @property swappedElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get swappedElement() {\r\n    return this.data.swappedElement;\r\n  }\r\n}\r\n\r\nexports.SwappableSwappedEvent = SwappableSwappedEvent; /**\r\n                                                        * Swappable stop event\r\n                                                        * @class SwappableStopEvent\r\n                                                        * @module SwappableStopEvent\r\n                                                        * @extends SwappableEvent\r\n                                                        */\r\n\r\nSwappableSwappedEvent.type = 'swappable:swapped';\r\nclass SwappableStopEvent extends SwappableEvent {}\r\nexports.SwappableStopEvent = SwappableStopEvent;\r\nSwappableStopEvent.type = 'swappable:stop';\r\n\r\n/***/ }),\r\n/* 67 */\r\n/***/ (function(module, exports, __nested_webpack_require_64177__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SwappableEvent = __nested_webpack_require_64177__(40);\r\n\r\nObject.keys(_SwappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SwappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Swappable = __nested_webpack_require_64177__(65);\r\n\r\nvar _Swappable2 = _interopRequireDefault(_Swappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Swappable2.default;\r\n\r\n/***/ }),\r\n/* 68 */\r\n/***/ (function(module, exports, __nested_webpack_require_64897__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_64897__(5);\r\n\r\nvar _Draggable = __nested_webpack_require_64897__(24);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _DroppableEvent = __nested_webpack_require_64897__(41);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst dropInDropzone = Symbol('dropInDropZone');\r\nconst returnToOriginalDropzone = Symbol('returnToOriginalDropzone');\r\nconst closestDropzone = Symbol('closestDropzone');\r\nconst getDropzones = Symbol('getDropzones');\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element is dropped into a dropzone element\r\n * @param {DroppableDroppedEvent} droppableEvent\r\n * @return {String}\r\n */\r\nfunction onDroppableDroppedDefaultAnnouncement({ dragEvent, dropzone }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';\r\n  const dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';\r\n\r\n  return `Dropped ${sourceText} into ${dropzoneText}`;\r\n}\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element has returned to its original dropzone element\r\n * @param {DroppableReturnedEvent} droppableEvent\r\n * @return {String}\r\n */\r\nfunction onDroppableReturnedDefaultAnnouncement({ dragEvent, dropzone }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';\r\n  const dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';\r\n\r\n  return `Returned ${sourceText} from ${dropzoneText}`;\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['droppable:dropped']\r\n * @const {Function} defaultAnnouncements['droppable:returned']\r\n */\r\nconst defaultAnnouncements = {\r\n  'droppable:dropped': onDroppableDroppedDefaultAnnouncement,\r\n  'droppable:returned': onDroppableReturnedDefaultAnnouncement\r\n};\r\n\r\nconst defaultClasses = {\r\n  'droppable:active': 'draggable-dropzone--active',\r\n  'droppable:occupied': 'draggable-dropzone--occupied'\r\n};\r\n\r\nconst defaultOptions = {\r\n  dropzone: '.draggable-droppable'\r\n};\r\n\r\n/**\r\n * Droppable is built on top of Draggable and allows dropping draggable elements\r\n * into dropzone element\r\n * @class Droppable\r\n * @module Droppable\r\n * @extends Draggable\r\n */\r\nclass Droppable extends _Draggable2.default {\r\n  /**\r\n   * Droppable constructor.\r\n   * @constructs Droppable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Droppable containers\r\n   * @param {Object} options - Options for Droppable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * All dropzone elements on drag start\r\n     * @property dropzones\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.dropzones = null;\r\n\r\n    /**\r\n     * Last dropzone element that the source was dropped into\r\n     * @property lastDropzone\r\n     * @type {HTMLElement}\r\n     */\r\n    this.lastDropzone = null;\r\n\r\n    /**\r\n     * Initial dropzone element that the source was drag from\r\n     * @property initialDropzone\r\n     * @type {HTMLElement}\r\n     */\r\n    this.initialDropzone = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Droppable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.dropzones = [...this[getDropzones]()];\r\n    const dropzone = (0, _utils.closest)(event.sensorEvent.target, this.options.dropzone);\r\n\r\n    if (!dropzone) {\r\n      event.cancel();\r\n      return;\r\n    }\r\n\r\n    const droppableStartEvent = new _DroppableEvent.DroppableStartEvent({\r\n      dragEvent: event,\r\n      dropzone\r\n    });\r\n\r\n    this.trigger(droppableStartEvent);\r\n\r\n    if (droppableStartEvent.canceled()) {\r\n      event.cancel();\r\n      return;\r\n    }\r\n\r\n    this.initialDropzone = dropzone;\r\n\r\n    for (const dropzoneElement of this.dropzones) {\r\n      if (dropzoneElement.classList.contains(this.getClassNameFor('droppable:occupied'))) {\r\n        continue;\r\n      }\r\n\r\n      dropzoneElement.classList.add(...this.getClassNamesFor('droppable:active'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const dropzone = this[closestDropzone](event.sensorEvent.target);\r\n    const overEmptyDropzone = dropzone && !dropzone.classList.contains(this.getClassNameFor('droppable:occupied'));\r\n\r\n    if (overEmptyDropzone && this[dropInDropzone](event, dropzone)) {\r\n      this.lastDropzone = dropzone;\r\n    } else if ((!dropzone || dropzone === this.initialDropzone) && this.lastDropzone) {\r\n      this[returnToOriginalDropzone](event);\r\n      this.lastDropzone = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const droppableStopEvent = new _DroppableEvent.DroppableStopEvent({\r\n      dragEvent: event,\r\n      dropzone: this.lastDropzone || this.initialDropzone\r\n    });\r\n\r\n    this.trigger(droppableStopEvent);\r\n\r\n    const occupiedClasses = this.getClassNamesFor('droppable:occupied');\r\n\r\n    for (const dropzone of this.dropzones) {\r\n      dropzone.classList.remove(...this.getClassNamesFor('droppable:active'));\r\n    }\r\n\r\n    if (this.lastDropzone && this.lastDropzone !== this.initialDropzone) {\r\n      this.initialDropzone.classList.remove(...occupiedClasses);\r\n    }\r\n\r\n    this.dropzones = null;\r\n    this.lastDropzone = null;\r\n    this.initialDropzone = null;\r\n  }\r\n\r\n  /**\r\n   * Drops a draggable element into a dropzone element\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   * @param {HTMLElement} dropzone - Dropzone element to drop draggable into\r\n   */\r\n  [dropInDropzone](event, dropzone) {\r\n    const droppableDroppedEvent = new _DroppableEvent.DroppableDroppedEvent({\r\n      dragEvent: event,\r\n      dropzone\r\n    });\r\n\r\n    this.trigger(droppableDroppedEvent);\r\n\r\n    if (droppableDroppedEvent.canceled()) {\r\n      return false;\r\n    }\r\n\r\n    const occupiedClasses = this.getClassNamesFor('droppable:occupied');\r\n\r\n    if (this.lastDropzone) {\r\n      this.lastDropzone.classList.remove(...occupiedClasses);\r\n    }\r\n\r\n    dropzone.appendChild(event.source);\r\n    dropzone.classList.add(...occupiedClasses);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Moves the previously dropped element back into its original dropzone\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [returnToOriginalDropzone](event) {\r\n    const droppableReturnedEvent = new _DroppableEvent.DroppableReturnedEvent({\r\n      dragEvent: event,\r\n      dropzone: this.lastDropzone\r\n    });\r\n\r\n    this.trigger(droppableReturnedEvent);\r\n\r\n    if (droppableReturnedEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.initialDropzone.appendChild(event.source);\r\n    this.lastDropzone.classList.remove(...this.getClassNamesFor('droppable:occupied'));\r\n  }\r\n\r\n  /**\r\n   * Returns closest dropzone element for even target\r\n   * @private\r\n   * @param {HTMLElement} target - Event target\r\n   * @return {HTMLElement|null}\r\n   */\r\n  [closestDropzone](target) {\r\n    if (!this.dropzones) {\r\n      return null;\r\n    }\r\n\r\n    return (0, _utils.closest)(target, this.dropzones);\r\n  }\r\n\r\n  /**\r\n   * Returns all current dropzone elements for this draggable instance\r\n   * @private\r\n   * @return {NodeList|HTMLElement[]|Array}\r\n   */\r\n  [getDropzones]() {\r\n    const dropzone = this.options.dropzone;\r\n\r\n    if (typeof dropzone === 'string') {\r\n      return document.querySelectorAll(dropzone);\r\n    } else if (dropzone instanceof NodeList || dropzone instanceof Array) {\r\n      return dropzone;\r\n    } else if (typeof dropzone === 'function') {\r\n      return dropzone();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}\r\nexports.default = Droppable;\r\n\r\n/***/ }),\r\n/* 69 */\r\n/***/ (function(module, exports, __nested_webpack_require_74010__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DroppableStopEvent = exports.DroppableReturnedEvent = exports.DroppableDroppedEvent = exports.DroppableStartEvent = exports.DroppableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_74010__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base droppable event\r\n * @class DroppableEvent\r\n * @module DroppableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DroppableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this droppable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.DroppableEvent = DroppableEvent; /**\r\n                                          * Droppable start event\r\n                                          * @class DroppableStartEvent\r\n                                          * @module DroppableStartEvent\r\n                                          * @extends DroppableEvent\r\n                                          */\r\n\r\nDroppableEvent.type = 'droppable';\r\nclass DroppableStartEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The initial dropzone element of the currently dragging draggable element\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableStartEvent = DroppableStartEvent; /**\r\n                                                    * Droppable dropped event\r\n                                                    * @class DroppableDroppedEvent\r\n                                                    * @module DroppableDroppedEvent\r\n                                                    * @extends DroppableEvent\r\n                                                    */\r\n\r\nDroppableStartEvent.type = 'droppable:start';\r\nDroppableStartEvent.cancelable = true;\r\nclass DroppableDroppedEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The dropzone element you dropped the draggable element into\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableDroppedEvent = DroppableDroppedEvent; /**\r\n                                                        * Droppable returned event\r\n                                                        * @class DroppableReturnedEvent\r\n                                                        * @module DroppableReturnedEvent\r\n                                                        * @extends DroppableEvent\r\n                                                        */\r\n\r\nDroppableDroppedEvent.type = 'droppable:dropped';\r\nDroppableDroppedEvent.cancelable = true;\r\nclass DroppableReturnedEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The dropzone element you dragged away from\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableReturnedEvent = DroppableReturnedEvent; /**\r\n                                                          * Droppable stop event\r\n                                                          * @class DroppableStopEvent\r\n                                                          * @module DroppableStopEvent\r\n                                                          * @extends DroppableEvent\r\n                                                          */\r\n\r\nDroppableReturnedEvent.type = 'droppable:returned';\r\nDroppableReturnedEvent.cancelable = true;\r\nclass DroppableStopEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The final dropzone element of the draggable element\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\nexports.DroppableStopEvent = DroppableStopEvent;\r\nDroppableStopEvent.type = 'droppable:stop';\r\nDroppableStopEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 70 */\r\n/***/ (function(module, exports, __nested_webpack_require_78173__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DroppableEvent = __nested_webpack_require_78173__(41);\r\n\r\nObject.keys(_DroppableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DroppableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Droppable = __nested_webpack_require_78173__(68);\r\n\r\nvar _Droppable2 = _interopRequireDefault(_Droppable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Droppable2.default;\r\n\r\n/***/ }),\r\n/* 71 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods\r\n * @class Emitter\r\n * @module Emitter\r\n */\r\nclass Emitter {\r\n  constructor() {\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks by event name\r\n   * @param {String} type\r\n   * @param {...Function} callbacks\r\n   */\r\n  on(type, ...callbacks) {\r\n    if (!this.callbacks[type]) {\r\n      this.callbacks[type] = [];\r\n    }\r\n\r\n    this.callbacks[type].push(...callbacks);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters callbacks by event name\r\n   * @param {String} type\r\n   * @param {Function} callback\r\n   */\r\n  off(type, callback) {\r\n    if (!this.callbacks[type]) {\r\n      return null;\r\n    }\r\n\r\n    const copy = this.callbacks[type].slice(0);\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n      if (callback === copy[i]) {\r\n        this.callbacks[type].splice(i, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers event callbacks by event object\r\n   * @param {AbstractEvent} event\r\n   */\r\n  trigger(event) {\r\n    if (!this.callbacks[event.type]) {\r\n      return null;\r\n    }\r\n\r\n    const callbacks = [...this.callbacks[event.type]];\r\n    const caughtErrors = [];\r\n\r\n    for (let i = callbacks.length - 1; i >= 0; i--) {\r\n      const callback = callbacks[i];\r\n\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        caughtErrors.push(error);\r\n      }\r\n    }\r\n\r\n    if (caughtErrors.length) {\r\n      /* eslint-disable no-console */\r\n      console.error(`Draggable caught errors while triggering '${event.type}'`, caughtErrors);\r\n      /* eslint-disable no-console */\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\nexports.default = Emitter;\r\n\r\n/***/ }),\r\n/* 72 */\r\n/***/ (function(module, exports, __nested_webpack_require_80757__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Emitter = __nested_webpack_require_80757__(71);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Emitter2.default;\r\n\r\n/***/ }),\r\n/* 73 */\r\n/***/ (function(module, exports, __nested_webpack_require_81161__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_81161__(5);\r\n\r\nvar _Plugins = __nested_webpack_require_81161__(42);\r\n\r\nvar _Emitter = __nested_webpack_require_81161__(72);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nvar _Sensors = __nested_webpack_require_81161__(29);\r\n\r\nvar _DraggableEvent = __nested_webpack_require_81161__(43);\r\n\r\nvar _DragEvent = __nested_webpack_require_81161__(44);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragPressure = Symbol('onDragPressure');\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['drag:start']\r\n * @const {Function} defaultAnnouncements['drag:stop']\r\n */\r\nconst defaultAnnouncements = {\r\n  'drag:start': event => `Picked up ${event.source.textContent.trim() || event.source.id || 'draggable element'}`,\r\n  'drag:stop': event => `Released ${event.source.textContent.trim() || event.source.id || 'draggable element'}`\r\n};\r\n\r\nconst defaultClasses = {\r\n  'container:dragging': 'draggable-container--is-dragging',\r\n  'source:dragging': 'draggable-source--is-dragging',\r\n  'source:placed': 'draggable-source--placed',\r\n  'container:placed': 'draggable-container--placed',\r\n  'body:dragging': 'draggable--is-dragging',\r\n  'draggable:over': 'draggable--over',\r\n  'container:over': 'draggable-container--over',\r\n  'source:original': 'draggable--original',\r\n  mirror: 'draggable-mirror'\r\n};\r\n\r\nconst defaultOptions = exports.defaultOptions = {\r\n  draggable: '.draggable-source',\r\n  handle: null,\r\n  delay: {},\r\n  distance: 0,\r\n  placedTimeout: 800,\r\n  plugins: [],\r\n  sensors: [],\r\n  exclude: {\r\n    plugins: [],\r\n    sensors: []\r\n  }\r\n};\r\n\r\n/**\r\n * This is the core draggable library that does the heavy lifting\r\n * @class Draggable\r\n * @module Draggable\r\n */\r\nclass Draggable {\r\n\r\n  /**\r\n   * Draggable constructor.\r\n   * @constructs Draggable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers\r\n   * @param {Object} options - Options for draggable\r\n   */\r\n\r\n  /**\r\n   * Default plugins draggable uses\r\n   * @static\r\n   * @property {Object} Plugins\r\n   * @property {Announcement} Plugins.Announcement\r\n   * @property {Focusable} Plugins.Focusable\r\n   * @property {Mirror} Plugins.Mirror\r\n   * @property {Scrollable} Plugins.Scrollable\r\n   * @type {Object}\r\n   */\r\n  constructor(containers = [document.body], options = {}) {\r\n    /**\r\n     * Draggable containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    if (containers instanceof NodeList || containers instanceof Array) {\r\n      this.containers = [...containers];\r\n    } else if (containers instanceof HTMLElement) {\r\n      this.containers = [containers];\r\n    } else {\r\n      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');\r\n    }\r\n\r\n    this.options = _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {}),\r\n      exclude: {\r\n        plugins: options.exclude && options.exclude.plugins || [],\r\n        sensors: options.exclude && options.exclude.sensors || []\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Draggables event emitter\r\n     * @property emitter\r\n     * @type {Emitter}\r\n     */\r\n    this.emitter = new _Emitter2.default();\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Active plugins\r\n     * @property plugins\r\n     * @type {Plugin[]}\r\n     */\r\n    this.plugins = [];\r\n\r\n    /**\r\n     * Active sensors\r\n     * @property sensors\r\n     * @type {Sensor[]}\r\n     */\r\n    this.sensors = [];\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragPressure] = this[onDragPressure].bind(this);\r\n\r\n    document.addEventListener('drag:start', this[onDragStart], true);\r\n    document.addEventListener('drag:move', this[onDragMove], true);\r\n    document.addEventListener('drag:stop', this[onDragStop], true);\r\n    document.addEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const defaultPlugins = Object.values(Draggable.Plugins).filter(Plugin => !this.options.exclude.plugins.includes(Plugin));\r\n    const defaultSensors = Object.values(Draggable.Sensors).filter(sensor => !this.options.exclude.sensors.includes(sensor));\r\n\r\n    this.addPlugin(...[...defaultPlugins, ...this.options.plugins]);\r\n    this.addSensor(...[...defaultSensors, ...this.options.sensors]);\r\n\r\n    const draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.on('mirror:created', ({ mirror }) => this.mirror = mirror);\r\n    this.on('mirror:destroy', () => this.mirror = null);\r\n\r\n    this.trigger(draggableInitializedEvent);\r\n  }\r\n\r\n  /**\r\n   * Destroys Draggable instance. This removes all internal event listeners and\r\n   * deactivates sensors and plugins\r\n   */\r\n\r\n\r\n  /**\r\n   * Default sensors draggable uses\r\n   * @static\r\n   * @property {Object} Sensors\r\n   * @property {MouseSensor} Sensors.MouseSensor\r\n   * @property {TouchSensor} Sensors.TouchSensor\r\n   * @type {Object}\r\n   */\r\n  destroy() {\r\n    document.removeEventListener('drag:start', this[onDragStart], true);\r\n    document.removeEventListener('drag:move', this[onDragMove], true);\r\n    document.removeEventListener('drag:stop', this[onDragStop], true);\r\n    document.removeEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.trigger(draggableDestroyEvent);\r\n\r\n    this.removePlugin(...this.plugins.map(plugin => plugin.constructor));\r\n    this.removeSensor(...this.sensors.map(sensor => sensor.constructor));\r\n  }\r\n\r\n  /**\r\n   * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)\r\n   */\r\n  addPlugin(...plugins) {\r\n    const activePlugins = plugins.map(Plugin => new Plugin(this));\r\n\r\n    activePlugins.forEach(plugin => plugin.attach());\r\n    this.plugins = [...this.plugins, ...activePlugins];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes plugins that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)\r\n   */\r\n  removePlugin(...plugins) {\r\n    const removedPlugins = this.plugins.filter(plugin => plugins.includes(plugin.constructor));\r\n\r\n    removedPlugins.forEach(plugin => plugin.detach());\r\n    this.plugins = this.plugins.filter(plugin => !plugins.includes(plugin.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addSensor(ForceTouchSensor, CustomSensor)\r\n   */\r\n  addSensor(...sensors) {\r\n    const activeSensors = sensors.map(Sensor => new Sensor(this.containers, this.options));\r\n\r\n    activeSensors.forEach(sensor => sensor.attach());\r\n    this.sensors = [...this.sensors, ...activeSensors];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes sensors that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeSensor(TouchSensor, DragSensor)\r\n   */\r\n  removeSensor(...sensors) {\r\n    const removedSensors = this.sensors.filter(sensor => sensors.includes(sensor.constructor));\r\n\r\n    removedSensors.forEach(sensor => sensor.detach());\r\n    this.sensors = this.sensors.filter(sensor => !sensors.includes(sensor.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n    this.sensors.forEach(sensor => sensor.addContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes container from this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n    this.sensors.forEach(sensor => sensor.removeContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds listener for draggable events\r\n   * @param {String} type - Event name\r\n   * @param {...Function} callbacks - Event callbacks\r\n   * @return {Draggable}\r\n   * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());\r\n   */\r\n  on(type, ...callbacks) {\r\n    this.emitter.on(type, ...callbacks);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes listener from draggable\r\n   * @param {String} type - Event name\r\n   * @param {Function} callback - Event callback\r\n   * @return {Draggable}\r\n   * @example draggable.off('drag:start', handlerFunction);\r\n   */\r\n  off(type, callback) {\r\n    this.emitter.off(type, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers draggable event\r\n   * @param {AbstractEvent} event - Event instance\r\n   * @return {Draggable}\r\n   * @example draggable.trigger(event);\r\n   */\r\n  trigger(event) {\r\n    this.emitter.trigger(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns class name for class identifier\r\n   * @param {String} name - Name of class identifier\r\n   * @return {String|null}\r\n   */\r\n  getClassNameFor(name) {\r\n    return this.getClassNamesFor(name)[0];\r\n  }\r\n\r\n  /**\r\n   * Returns class names for class identifier\r\n   * @return {String[]}\r\n   */\r\n  getClassNamesFor(name) {\r\n    const classNames = this.options.classes[name];\r\n\r\n    if (classNames instanceof Array) {\r\n      return classNames;\r\n    } else if (typeof classNames === 'string' || classNames instanceof String) {\r\n      return [classNames];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if this draggable instance is currently dragging\r\n   * @return {Boolean}\r\n   */\r\n  isDragging() {\r\n    return Boolean(this.dragging);\r\n  }\r\n\r\n  /**\r\n   * Returns all draggable elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElements() {\r\n    return this.containers.reduce((current, container) => {\r\n      return [...current, ...this.getDraggableElementsForContainer(container)];\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Returns draggable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElementsForContainer(container) {\r\n    const allDraggableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allDraggableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStart](event) {\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { target, container } = sensorEvent;\r\n\r\n    if (!this.containers.includes(container)) {\r\n      return;\r\n    }\r\n\r\n    if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    // Find draggable source element\r\n    this.originalSource = (0, _utils.closest)(target, this.options.draggable);\r\n    this.sourceContainer = container;\r\n\r\n    if (!this.originalSource) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    if (this.lastPlacedSource && this.lastPlacedContainer) {\r\n      clearTimeout(this.placedTimeoutID);\r\n      this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n    }\r\n\r\n    this.source = this.originalSource.cloneNode(true);\r\n    this.originalSource.parentNode.insertBefore(this.source, this.originalSource);\r\n    this.originalSource.style.display = 'none';\r\n\r\n    const dragEvent = new _DragEvent.DragStartEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragEvent);\r\n\r\n    this.dragging = !dragEvent.canceled();\r\n\r\n    if (dragEvent.canceled()) {\r\n      this.source.parentNode.removeChild(this.source);\r\n      this.originalSource.style.display = null;\r\n      return;\r\n    }\r\n\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:original'));\r\n    this.source.classList.add(...this.getClassNamesFor('source:dragging'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.add(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, 'none');\r\n\r\n    requestAnimationFrame(() => {\r\n      const oldSensorEvent = getSensorEvent(event);\r\n      const newSensorEvent = oldSensorEvent.clone({ target: this.source });\r\n\r\n      this[onDragMove](_extends({}, event, {\r\n        detail: newSensorEvent\r\n      }));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { container } = sensorEvent;\r\n    let target = sensorEvent.target;\r\n\r\n    const dragMoveEvent = new _DragEvent.DragMoveEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragMoveEvent);\r\n\r\n    if (dragMoveEvent.canceled()) {\r\n      sensorEvent.cancel();\r\n    }\r\n\r\n    target = (0, _utils.closest)(target, this.options.draggable);\r\n    const withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);\r\n    const overContainer = sensorEvent.overContainer || withinCorrectContainer;\r\n    const isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;\r\n    const isLeavingDraggable = this.currentOver && target !== this.currentOver;\r\n    const isOverContainer = overContainer && this.currentOverContainer !== overContainer;\r\n    const isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;\r\n\r\n    if (isLeavingDraggable) {\r\n      const dragOutEvent = new _DragEvent.DragOutEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        over: this.currentOver,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n      this.currentOver = null;\r\n\r\n      this.trigger(dragOutEvent);\r\n    }\r\n\r\n    if (isLeavingContainer) {\r\n      const dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n      this.currentOverContainer = null;\r\n\r\n      this.trigger(dragOutContainerEvent);\r\n    }\r\n\r\n    if (isOverContainer) {\r\n      overContainer.classList.add(...this.getClassNamesFor('container:over'));\r\n\r\n      const dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer\r\n      });\r\n\r\n      this.currentOverContainer = overContainer;\r\n\r\n      this.trigger(dragOverContainerEvent);\r\n    }\r\n\r\n    if (isOverDraggable) {\r\n      target.classList.add(...this.getClassNamesFor('draggable:over'));\r\n\r\n      const dragOverEvent = new _DragEvent.DragOverEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer,\r\n        over: target\r\n      });\r\n\r\n      this.currentOver = target;\r\n\r\n      this.trigger(dragOverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStop](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.dragging = false;\r\n\r\n    const dragStopEvent = new _DragEvent.DragStopEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStopEvent);\r\n\r\n    this.source.parentNode.insertBefore(this.originalSource, this.source);\r\n    this.source.parentNode.removeChild(this.source);\r\n    this.originalSource.style.display = '';\r\n\r\n    this.source.classList.remove(...this.getClassNamesFor('source:dragging'));\r\n    this.originalSource.classList.remove(...this.getClassNamesFor('source:original'));\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:placed'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:placed'));\r\n    this.sourceContainer.classList.remove(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.remove(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, '');\r\n\r\n    if (this.currentOver) {\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n    }\r\n\r\n    if (this.currentOverContainer) {\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n    }\r\n\r\n    this.lastPlacedSource = this.originalSource;\r\n    this.lastPlacedContainer = this.sourceContainer;\r\n\r\n    this.placedTimeoutID = setTimeout(() => {\r\n      if (this.lastPlacedSource) {\r\n        this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      }\r\n\r\n      if (this.lastPlacedContainer) {\r\n        this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n      }\r\n\r\n      this.lastPlacedSource = null;\r\n      this.lastPlacedContainer = null;\r\n    }, this.options.placedTimeout);\r\n\r\n    const dragStoppedEvent = new _DragEvent.DragStoppedEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStoppedEvent);\r\n\r\n    this.source = null;\r\n    this.originalSource = null;\r\n    this.currentOverContainer = null;\r\n    this.currentOver = null;\r\n    this.sourceContainer = null;\r\n  }\r\n\r\n  /**\r\n   * Drag pressure handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragPressure](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);\r\n\r\n    const dragPressureEvent = new _DragEvent.DragPressureEvent({\r\n      sensorEvent,\r\n      source,\r\n      pressure: sensorEvent.pressure\r\n    });\r\n\r\n    this.trigger(dragPressureEvent);\r\n  }\r\n}\r\n\r\nexports.default = Draggable;\r\nDraggable.Plugins = { Announcement: _Plugins.Announcement, Focusable: _Plugins.Focusable, Mirror: _Plugins.Mirror, Scrollable: _Plugins.Scrollable };\r\nDraggable.Sensors = { MouseSensor: _Sensors.MouseSensor, TouchSensor: _Sensors.TouchSensor };\r\nfunction getSensorEvent(event) {\r\n  return event.detail;\r\n}\r\n\r\nfunction applyUserSelect(element, value) {\r\n  element.style.webkitUserSelect = value;\r\n  element.style.mozUserSelect = value;\r\n  element.style.msUserSelect = value;\r\n  element.style.oUserSelect = value;\r\n  element.style.userSelect = value;\r\n}\r\n\r\n/***/ }),\r\n/* 74 */\r\n/***/ (function(module, exports, __nested_webpack_require_102298__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_102298__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_102298__(5);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst scroll = exports.scroll = Symbol('scroll');\r\n\r\n/**\r\n * Scrollable default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.speed\r\n * @property {Number} defaultOptions.sensitivity\r\n * @property {HTMLElement[]} defaultOptions.scrollableElements\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  speed: 6,\r\n  sensitivity: 50,\r\n  scrollableElements: []\r\n};\r\n\r\n/**\r\n * Scrollable plugin which scrolls the closest scrollable parent\r\n * @class Scrollable\r\n * @module Scrollable\r\n * @extends AbstractPlugin\r\n */\r\nclass Scrollable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Scrollable constructor.\r\n   * @constructs Scrollable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Scrollable options\r\n     * @property {Object} options\r\n     * @property {Number} options.speed\r\n     * @property {Number} options.sensitivity\r\n     * @property {HTMLElement[]} options.scrollableElements\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Keeps current mouse position\r\n     * @property {Object} currentMousePosition\r\n     * @property {Number} currentMousePosition.clientX\r\n     * @property {Number} currentMousePosition.clientY\r\n     * @type {Object|null}\r\n     */\r\n    this.currentMousePosition = null;\r\n\r\n    /**\r\n     * Scroll animation frame\r\n     * @property scrollAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.scrollAnimationFrame = null;\r\n\r\n    /**\r\n     * Closest scrollable element\r\n     * @property scrollableElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.scrollableElement = null;\r\n\r\n    /**\r\n     * Animation frame looking for the closest scrollable element\r\n     * @property findScrollableElementFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.findScrollableElementFrame = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[scroll] = this[scroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.scrollable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns closest scrollable elements by element\r\n   * @param {HTMLElement} target\r\n   * @return {HTMLElement}\r\n   */\r\n  getScrollableElement(target) {\r\n    if (this.hasDefinedScrollableElements()) {\r\n      return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;\r\n    } else {\r\n      return closestScrollableElement(target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if at least one scrollable element have been defined via options\r\n   * @param {HTMLElement} target\r\n   * @return {Boolean}\r\n   */\r\n  hasDefinedScrollableElements() {\r\n    return Boolean(this.options.scrollableElements.length !== 0);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler. Finds closest scrollable parent in separate frame\r\n   * @param {DragStartEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragStart](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler. Remembers mouse position and initiates scrolling\r\n   * @param {DragMoveEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragMove](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.sensorEvent.target);\r\n    });\r\n\r\n    if (!this.scrollableElement) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = dragEvent.sensorEvent;\r\n    const scrollOffset = { x: 0, y: 0 };\r\n\r\n    if ('ontouchstart' in window) {\r\n      scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n      scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\r\n    }\r\n\r\n    this.currentMousePosition = {\r\n      clientX: sensorEvent.clientX - scrollOffset.x,\r\n      clientY: sensorEvent.clientY - scrollOffset.y\r\n    };\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler. Cancels scroll animations and resets state\r\n   * @private\r\n   */\r\n  [onDragStop]() {\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n    cancelAnimationFrame(this.findScrollableElementFrame);\r\n\r\n    this.scrollableElement = null;\r\n    this.scrollAnimationFrame = null;\r\n    this.findScrollableElementFrame = null;\r\n    this.currentMousePosition = null;\r\n  }\r\n\r\n  /**\r\n   * Scroll function that does the heavylifting\r\n   * @private\r\n   */\r\n  [scroll]() {\r\n    if (!this.scrollableElement || !this.currentMousePosition) {\r\n      return;\r\n    }\r\n\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n\r\n    const { speed, sensitivity } = this.options;\r\n\r\n    const rect = this.scrollableElement.getBoundingClientRect();\r\n    const bottomCutOff = rect.bottom > window.innerHeight;\r\n    const topCutOff = rect.top < 0;\r\n    const cutOff = topCutOff || bottomCutOff;\r\n\r\n    const documentScrollingElement = getDocumentScrollingElement();\r\n    const scrollableElement = this.scrollableElement;\r\n    const clientX = this.currentMousePosition.clientX;\r\n    const clientY = this.currentMousePosition.clientY;\r\n\r\n    if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {\r\n      const { offsetHeight, offsetWidth } = scrollableElement;\r\n\r\n      if (rect.top + offsetHeight - clientY < sensitivity) {\r\n        scrollableElement.scrollTop += speed;\r\n      } else if (clientY - rect.top < sensitivity) {\r\n        scrollableElement.scrollTop -= speed;\r\n      }\r\n\r\n      if (rect.left + offsetWidth - clientX < sensitivity) {\r\n        scrollableElement.scrollLeft += speed;\r\n      } else if (clientX - rect.left < sensitivity) {\r\n        scrollableElement.scrollLeft -= speed;\r\n      }\r\n    } else {\r\n      const { innerHeight, innerWidth } = window;\r\n\r\n      if (clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop -= speed;\r\n      } else if (innerHeight - clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop += speed;\r\n      }\r\n\r\n      if (clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft -= speed;\r\n      } else if (innerWidth - clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft += speed;\r\n      }\r\n    }\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n}\r\n\r\nexports.default = Scrollable; /**\r\n                               * Returns true if the passed element has overflow\r\n                               * @param {HTMLElement} element\r\n                               * @return {Boolean}\r\n                               * @private\r\n                               */\r\n\r\nfunction hasOverflow(element) {\r\n  const overflowRegex = /(auto|scroll)/;\r\n  const computedStyles = getComputedStyle(element, null);\r\n\r\n  const overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');\r\n\r\n  return overflowRegex.test(overflow);\r\n}\r\n\r\n/**\r\n * Returns true if the passed element is statically positioned\r\n * @param {HTMLElement} element\r\n * @return {Boolean}\r\n * @private\r\n */\r\nfunction isStaticallyPositioned(element) {\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  return position === 'static';\r\n}\r\n\r\n/**\r\n * Finds closest scrollable element\r\n * @param {HTMLElement} element\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction closestScrollableElement(element) {\r\n  if (!element) {\r\n    return getDocumentScrollingElement();\r\n  }\r\n\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  const excludeStaticParents = position === 'absolute';\r\n\r\n  const scrollableElement = (0, _utils.closest)(element, parent => {\r\n    if (excludeStaticParents && isStaticallyPositioned(parent)) {\r\n      return false;\r\n    }\r\n    return hasOverflow(parent);\r\n  });\r\n\r\n  if (position === 'fixed' || !scrollableElement) {\r\n    return getDocumentScrollingElement();\r\n  } else {\r\n    return scrollableElement;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns element that scrolls document\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction getDocumentScrollingElement() {\r\n  return document.scrollingElement || document.documentElement;\r\n}\r\n\r\n/***/ }),\r\n/* 75 */\r\n/***/ (function(module, exports, __nested_webpack_require_112220__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Scrollable = __nested_webpack_require_112220__(74);\r\n\r\nvar _Scrollable2 = _interopRequireDefault(_Scrollable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Scrollable2.default;\r\nexports.defaultOptions = _Scrollable.defaultOptions;\r\n\r\n/***/ }),\r\n/* 76 */\r\n/***/ (function(module, exports, __nested_webpack_require_112727__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_112727__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base mirror event\r\n * @class MirrorEvent\r\n * @module MirrorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass MirrorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Drag event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.MirrorEvent = MirrorEvent; /**\r\n                                    * Mirror create event\r\n                                    * @class MirrorCreateEvent\r\n                                    * @module MirrorCreateEvent\r\n                                    * @extends MirrorEvent\r\n                                    */\r\n\r\nclass MirrorCreateEvent extends MirrorEvent {}\r\n\r\nexports.MirrorCreateEvent = MirrorCreateEvent; /**\r\n                                                * Mirror created event\r\n                                                * @class MirrorCreatedEvent\r\n                                                * @module MirrorCreatedEvent\r\n                                                * @extends MirrorEvent\r\n                                                */\r\n\r\nMirrorCreateEvent.type = 'mirror:create';\r\nclass MirrorCreatedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorCreatedEvent = MirrorCreatedEvent; /**\r\n                                                  * Mirror attached event\r\n                                                  * @class MirrorAttachedEvent\r\n                                                  * @module MirrorAttachedEvent\r\n                                                  * @extends MirrorEvent\r\n                                                  */\r\n\r\nMirrorCreatedEvent.type = 'mirror:created';\r\nclass MirrorAttachedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorAttachedEvent = MirrorAttachedEvent; /**\r\n                                                    * Mirror move event\r\n                                                    * @class MirrorMoveEvent\r\n                                                    * @module MirrorMoveEvent\r\n                                                    * @extends MirrorEvent\r\n                                                    */\r\n\r\nMirrorAttachedEvent.type = 'mirror:attached';\r\nclass MirrorMoveEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on x axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshX() {\r\n    return this.data.passedThreshX;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on y axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshY() {\r\n    return this.data.passedThreshY;\r\n  }\r\n}\r\n\r\nexports.MirrorMoveEvent = MirrorMoveEvent; /**\r\n                                            * Mirror destroy event\r\n                                            * @class MirrorDestroyEvent\r\n                                            * @module MirrorDestroyEvent\r\n                                            * @extends MirrorEvent\r\n                                            */\r\n\r\nMirrorMoveEvent.type = 'mirror:move';\r\nMirrorMoveEvent.cancelable = true;\r\nclass MirrorDestroyEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\nexports.MirrorDestroyEvent = MirrorDestroyEvent;\r\nMirrorDestroyEvent.type = 'mirror:destroy';\r\nMirrorDestroyEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 77 */\r\n/***/ (function(module, exports, __nested_webpack_require_118179__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MirrorEvent = __nested_webpack_require_118179__(76);\r\n\r\nObject.keys(_MirrorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _MirrorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 78 */\r\n/***/ (function(module, exports, __nested_webpack_require_118647__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_118647__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _MirrorEvent = __nested_webpack_require_118647__(77);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');\r\nconst onScroll = exports.onScroll = Symbol('onScroll');\r\nconst getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');\r\n\r\n/**\r\n * Mirror default options\r\n * @property {Object} defaultOptions\r\n * @property {Boolean} defaultOptions.constrainDimensions\r\n * @property {Boolean} defaultOptions.xAxis\r\n * @property {Boolean} defaultOptions.yAxis\r\n * @property {null} defaultOptions.cursorOffsetX\r\n * @property {null} defaultOptions.cursorOffsetY\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  constrainDimensions: false,\r\n  xAxis: true,\r\n  yAxis: true,\r\n  cursorOffsetX: null,\r\n  cursorOffsetY: null,\r\n  thresholdX: null,\r\n  thresholdY: null\r\n};\r\n\r\n/**\r\n * Mirror plugin which controls the mirror positioning while dragging\r\n * @class Mirror\r\n * @module Mirror\r\n * @extends AbstractPlugin\r\n */\r\nclass Mirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * Mirror constructor.\r\n   * @constructs Mirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Mirror options\r\n     * @property {Object} options\r\n     * @property {Boolean} options.constrainDimensions\r\n     * @property {Boolean} options.xAxis\r\n     * @property {Boolean} options.yAxis\r\n     * @property {Number|null} options.cursorOffsetX\r\n     * @property {Number|null} options.cursorOffsetY\r\n     * @property {String|HTMLElement|Function} options.appendTo\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Initial scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorMove] = this[onMirrorMove].bind(this);\r\n    this[onScroll] = this[onScroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.mirror || {};\r\n  }\r\n\r\n  [onDragStart](dragEvent) {\r\n    if (dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if ('ontouchstart' in window) {\r\n      document.addEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    // Last sensor position of mirror move\r\n    this.lastMirrorMovedClient = {\r\n      x: sensorEvent.clientX,\r\n      y: sensorEvent.clientY\r\n    };\r\n\r\n    const mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreateEvent);\r\n\r\n    if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const appendableContainer = this[getAppendableContainer](source) || sourceContainer;\r\n    this.mirror = source.cloneNode(true);\r\n\r\n    const mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    const mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreatedEvent);\r\n    appendableContainer.appendChild(this.mirror);\r\n    this.draggable.trigger(mirrorAttachedEvent);\r\n  }\r\n\r\n  [onDragMove](dragEvent) {\r\n    if (!this.mirror || dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    let passedThreshX = true;\r\n    let passedThreshY = true;\r\n\r\n    if (this.options.thresholdX || this.options.thresholdY) {\r\n      const { x: lastX, y: lastY } = this.lastMirrorMovedClient;\r\n\r\n      if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {\r\n        passedThreshX = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.x = sensorEvent.clientX;\r\n      }\r\n\r\n      if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {\r\n        passedThreshY = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.y = sensorEvent.clientY;\r\n      }\r\n\r\n      if (!passedThreshX && !passedThreshY) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror,\r\n      passedThreshX,\r\n      passedThreshY\r\n    });\r\n\r\n    this.draggable.trigger(mirrorMoveEvent);\r\n  }\r\n\r\n  [onDragStop](dragEvent) {\r\n    if ('ontouchstart' in window) {\r\n      document.removeEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = { x: 0, y: 0 };\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    if (!this.mirror) {\r\n      return;\r\n    }\r\n\r\n    const { source, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    const mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({\r\n      source,\r\n      mirror: this.mirror,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorDestroyEvent);\r\n\r\n    if (!mirrorDestroyEvent.canceled()) {\r\n      this.mirror.parentNode.removeChild(this.mirror);\r\n    }\r\n  }\r\n\r\n  [onScroll]() {\r\n    this.scrollOffset = {\r\n      x: window.scrollX - this.initialScrollOffset.x,\r\n      y: window.scrollY - this.initialScrollOffset.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror, source, sensorEvent }) {\r\n    const mirrorClasses = this.draggable.getClassNamesFor('mirror');\r\n\r\n    const setState = (_ref) => {\r\n      let { mirrorOffset, initialX, initialY } = _ref,\r\n          args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);\r\n\r\n      this.mirrorOffset = mirrorOffset;\r\n      this.initialX = initialX;\r\n      this.initialY = initialY;\r\n      this.lastMovedX = initialX;\r\n      this.lastMovedY = initialY;\r\n      return _extends({ mirrorOffset, initialX, initialY }, args);\r\n    };\r\n\r\n    mirror.style.display = 'none';\r\n\r\n    const initialState = {\r\n      mirror,\r\n      source,\r\n      sensorEvent,\r\n      mirrorClasses,\r\n      scrollOffset: this.scrollOffset,\r\n      options: this.options,\r\n      passedThreshX: true,\r\n      passedThreshY: true\r\n    };\r\n\r\n    return Promise.resolve(initialState)\r\n    // Fix reflow here\r\n    .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({ initial: true })).then(removeMirrorID).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Mirror move handler\r\n   * @param {MirrorMoveEvent} mirrorEvent\r\n   * @return {Promise|null}\r\n   * @private\r\n   */\r\n  [onMirrorMove](mirrorEvent) {\r\n    if (mirrorEvent.canceled()) {\r\n      return null;\r\n    }\r\n\r\n    const setState = (_ref2) => {\r\n      let { lastMovedX, lastMovedY } = _ref2,\r\n          args = _objectWithoutProperties(_ref2, ['lastMovedX', 'lastMovedY']);\r\n\r\n      this.lastMovedX = lastMovedX;\r\n      this.lastMovedY = lastMovedY;\r\n\r\n      return _extends({ lastMovedX, lastMovedY }, args);\r\n    };\r\n\r\n    const initialState = {\r\n      mirror: mirrorEvent.mirror,\r\n      sensorEvent: mirrorEvent.sensorEvent,\r\n      mirrorOffset: this.mirrorOffset,\r\n      options: this.options,\r\n      initialX: this.initialX,\r\n      initialY: this.initialY,\r\n      scrollOffset: this.scrollOffset,\r\n      passedThreshX: mirrorEvent.passedThreshX,\r\n      passedThreshY: mirrorEvent.passedThreshY,\r\n      lastMovedX: this.lastMovedX,\r\n      lastMovedY: this.lastMovedY\r\n    };\r\n\r\n    return Promise.resolve(initialState).then(positionMirror({ raf: true })).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Returns appendable container for mirror based on the appendTo option\r\n   * @private\r\n   * @param {Object} options\r\n   * @param {HTMLElement} options.source - Current source\r\n   * @return {HTMLElement}\r\n   */\r\n  [getAppendableContainer](source) {\r\n    const appendTo = this.options.appendTo;\r\n\r\n    if (typeof appendTo === 'string') {\r\n      return document.querySelector(appendTo);\r\n    } else if (appendTo instanceof HTMLElement) {\r\n      return appendTo;\r\n    } else if (typeof appendTo === 'function') {\r\n      return appendTo(source);\r\n    } else {\r\n      return source.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nexports.default = Mirror; /**\r\n                           * Computes mirror dimensions based on the source element\r\n                           * Adds sourceRect to state\r\n                           * @param {Object} state\r\n                           * @param {HTMLElement} state.source\r\n                           * @return {Promise}\r\n                           * @private\r\n                           */\r\n\r\nfunction computeMirrorDimensions(_ref3) {\r\n  let { source } = _ref3,\r\n      args = _objectWithoutProperties(_ref3, ['source']);\r\n\r\n  return withPromise(resolve => {\r\n    const sourceRect = source.getBoundingClientRect();\r\n    resolve(_extends({ source, sourceRect }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Calculates mirror offset\r\n * Adds mirrorOffset to state\r\n * @param {Object} state\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {DOMRect} state.sourceRect\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction calculateMirrorOffset(_ref4) {\r\n  let { sensorEvent, sourceRect, options } = _ref4,\r\n      args = _objectWithoutProperties(_ref4, ['sensorEvent', 'sourceRect', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    const top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;\r\n    const left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;\r\n\r\n    const mirrorOffset = { top, left };\r\n\r\n    resolve(_extends({ sensorEvent, sourceRect, mirrorOffset, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror styles\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {HTMLElement} state.source\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction resetMirror(_ref5) {\r\n  let { mirror, source, options } = _ref5,\r\n      args = _objectWithoutProperties(_ref5, ['mirror', 'source', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    let offsetHeight;\r\n    let offsetWidth;\r\n\r\n    if (options.constrainDimensions) {\r\n      const computedSourceStyles = getComputedStyle(source);\r\n      offsetHeight = computedSourceStyles.getPropertyValue('height');\r\n      offsetWidth = computedSourceStyles.getPropertyValue('width');\r\n    }\r\n\r\n    mirror.style.display = null;\r\n    mirror.style.position = 'fixed';\r\n    mirror.style.pointerEvents = 'none';\r\n    mirror.style.top = 0;\r\n    mirror.style.left = 0;\r\n    mirror.style.margin = 0;\r\n\r\n    if (options.constrainDimensions) {\r\n      mirror.style.height = offsetHeight;\r\n      mirror.style.width = offsetWidth;\r\n    }\r\n\r\n    resolve(_extends({ mirror, source, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror class on mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {String[]} state.mirrorClasses\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction addMirrorClasses(_ref6) {\r\n  let { mirror, mirrorClasses } = _ref6,\r\n      args = _objectWithoutProperties(_ref6, ['mirror', 'mirrorClasses']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.classList.add(...mirrorClasses);\r\n    resolve(_extends({ mirror, mirrorClasses }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Removes source ID from cloned mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction removeMirrorID(_ref7) {\r\n  let { mirror } = _ref7,\r\n      args = _objectWithoutProperties(_ref7, ['mirror']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.removeAttribute('id');\r\n    delete mirror.id;\r\n    resolve(_extends({ mirror }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Positions mirror with translate3d\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {Object} state.mirrorOffset\r\n * @param {Number} state.initialY\r\n * @param {Number} state.initialX\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction positionMirror({ withFrame = false, initial = false } = {}) {\r\n  return (_ref8) => {\r\n    let {\r\n      mirror,\r\n      sensorEvent,\r\n      mirrorOffset,\r\n      initialY,\r\n      initialX,\r\n      scrollOffset,\r\n      options,\r\n      passedThreshX,\r\n      passedThreshY,\r\n      lastMovedX,\r\n      lastMovedY\r\n    } = _ref8,\r\n        args = _objectWithoutProperties(_ref8, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options', 'passedThreshX', 'passedThreshY', 'lastMovedX', 'lastMovedY']);\r\n\r\n    return withPromise(resolve => {\r\n      const result = _extends({\r\n        mirror,\r\n        sensorEvent,\r\n        mirrorOffset,\r\n        options\r\n      }, args);\r\n\r\n      if (mirrorOffset) {\r\n        const x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);\r\n        const y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);\r\n\r\n        if (options.xAxis && options.yAxis || initial) {\r\n          mirror.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n        } else if (options.xAxis && !options.yAxis) {\r\n          mirror.style.transform = `translate3d(${x}px, ${initialY}px, 0)`;\r\n        } else if (options.yAxis && !options.xAxis) {\r\n          mirror.style.transform = `translate3d(${initialX}px, ${y}px, 0)`;\r\n        }\r\n\r\n        if (initial) {\r\n          result.initialX = x;\r\n          result.initialY = y;\r\n        }\r\n\r\n        result.lastMovedX = x;\r\n        result.lastMovedY = y;\r\n      }\r\n\r\n      resolve(result);\r\n    }, { frame: withFrame });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps functions in promise with potential animation frame option\r\n * @param {Function} callback\r\n * @param {Object} options\r\n * @param {Boolean} options.raf\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction withPromise(callback, { raf = false } = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    if (raf) {\r\n      requestAnimationFrame(() => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      callback(resolve, reject);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if the sensor event was triggered by a native browser drag event\r\n * @param {SensorEvent} sensorEvent\r\n */\r\nfunction isNativeDragEvent(sensorEvent) {\r\n  return (/^drag/.test(sensorEvent.originalEvent.type)\r\n  );\r\n}\r\n\r\n/***/ }),\r\n/* 79 */\r\n/***/ (function(module, exports, __nested_webpack_require_136161__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Mirror = __nested_webpack_require_136161__(78);\r\n\r\nvar _Mirror2 = _interopRequireDefault(_Mirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Mirror2.default;\r\nexports.defaultOptions = _Mirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 80 */\r\n/***/ (function(module, exports, __nested_webpack_require_136648__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_136648__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\n\r\n/**\r\n * Focusable default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = {};\r\n\r\n/**\r\n * Focusable plugin\r\n * @class Focusable\r\n * @module Focusable\r\n * @extends AbstractPlugin\r\n */\r\nclass Focusable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Focusable constructor.\r\n   * @constructs Focusable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Focusable options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);\r\n\r\n    // Remove modified elements when detach\r\n    this[onDestroy]();\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.focusable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns draggable containers and elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getElements() {\r\n    return [...this.draggable.containers, ...this.draggable.getDraggableElements()];\r\n  }\r\n\r\n  /**\r\n   * Intialize handler\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => decorateElement(element));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy handler\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => stripElement(element));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = Focusable; /**\r\n                              * Keeps track of all the elements that are missing tabindex attributes\r\n                              * so they can be reset when draggable gets destroyed\r\n                              * @const {HTMLElement[]} elementsWithMissingTabIndex\r\n                              */\r\n\r\nconst elementsWithMissingTabIndex = [];\r\n\r\n/**\r\n * Decorates element with tabindex attributes\r\n * @param {HTMLElement} element\r\n * @return {Object}\r\n * @private\r\n */\r\nfunction decorateElement(element) {\r\n  const hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);\r\n\r\n  if (hasMissingTabIndex) {\r\n    elementsWithMissingTabIndex.push(element);\r\n    element.tabIndex = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Removes elements tabindex attributes\r\n * @param {HTMLElement} element\r\n * @private\r\n */\r\nfunction stripElement(element) {\r\n  const tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);\r\n\r\n  if (tabIndexElementPosition !== -1) {\r\n    element.tabIndex = -1;\r\n    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 81 */\r\n/***/ (function(module, exports, __nested_webpack_require_140560__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_140560__(80);\r\n\r\nvar _Focusable2 = _interopRequireDefault(_Focusable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Focusable2.default;\r\n\r\n/***/ }),\r\n/* 82 */\r\n/***/ (function(module, exports, __nested_webpack_require_140972__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_140972__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\nconst announceEvent = Symbol('announceEvent');\r\nconst announceMessage = Symbol('announceMessage');\r\n\r\nconst ARIA_RELEVANT = 'aria-relevant';\r\nconst ARIA_ATOMIC = 'aria-atomic';\r\nconst ARIA_LIVE = 'aria-live';\r\nconst ROLE = 'role';\r\n\r\n/**\r\n * Announcement default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.expire\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  expire: 7000\r\n};\r\n\r\n/**\r\n * Announcement plugin\r\n * @class Announcement\r\n * @module Announcement\r\n * @extends AbstractPlugin\r\n */\r\nclass Announcement extends _AbstractPlugin2.default {\r\n  /**\r\n   * Announcement constructor.\r\n   * @constructs Announcement\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Plugin options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Original draggable trigger method. Hack until we have onAll or on('all')\r\n     * @property originalTriggerMethod\r\n     * @type {Function}\r\n     */\r\n    this.originalTriggerMethod = this.draggable.trigger;\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Returns passed in options\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.announcements || {};\r\n  }\r\n\r\n  /**\r\n   * Announces event\r\n   * @private\r\n   * @param {AbstractEvent} event\r\n   */\r\n  [announceEvent](event) {\r\n    const message = this.options[event.type];\r\n\r\n    if (message && typeof message === 'string') {\r\n      this[announceMessage](message);\r\n    }\r\n\r\n    if (message && typeof message === 'function') {\r\n      this[announceMessage](message(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Announces message to screen reader\r\n   * @private\r\n   * @param {String} message\r\n   */\r\n  [announceMessage](message) {\r\n    announce(message, { expire: this.options.expire });\r\n  }\r\n\r\n  /**\r\n   * Initialize hander\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Hack until there is an api for listening for all events\r\n    this.draggable.trigger = event => {\r\n      try {\r\n        this[announceEvent](event);\r\n      } finally {\r\n        // Ensure that original trigger is called\r\n        this.originalTriggerMethod.call(this.draggable, event);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy hander\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    this.draggable.trigger = this.originalTriggerMethod;\r\n  }\r\n}\r\n\r\nexports.default = Announcement; /**\r\n                                 * @const {HTMLElement} liveRegion\r\n                                 */\r\n\r\nconst liveRegion = createRegion();\r\n\r\n/**\r\n * Announces message via live region\r\n * @param {String} message\r\n * @param {Object} options\r\n * @param {Number} options.expire\r\n */\r\nfunction announce(message, { expire }) {\r\n  const element = document.createElement('div');\r\n\r\n  element.textContent = message;\r\n  liveRegion.appendChild(element);\r\n\r\n  return setTimeout(() => {\r\n    liveRegion.removeChild(element);\r\n  }, expire);\r\n}\r\n\r\n/**\r\n * Creates region element\r\n * @return {HTMLElement}\r\n */\r\nfunction createRegion() {\r\n  const element = document.createElement('div');\r\n\r\n  element.setAttribute('id', 'draggable-live-region');\r\n  element.setAttribute(ARIA_RELEVANT, 'additions');\r\n  element.setAttribute(ARIA_ATOMIC, 'true');\r\n  element.setAttribute(ARIA_LIVE, 'assertive');\r\n  element.setAttribute(ROLE, 'log');\r\n\r\n  element.style.position = 'fixed';\r\n  element.style.width = '1px';\r\n  element.style.height = '1px';\r\n  element.style.top = '-1px';\r\n  element.style.overflow = 'hidden';\r\n\r\n  return element;\r\n}\r\n\r\n// Append live region element as early as possible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  document.body.appendChild(liveRegion);\r\n});\r\n\r\n/***/ }),\r\n/* 83 */\r\n/***/ (function(module, exports, __nested_webpack_require_145860__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Announcement = __nested_webpack_require_145860__(82);\r\n\r\nvar _Announcement2 = _interopRequireDefault(_Announcement);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Announcement2.default;\r\nexports.defaultOptions = _Announcement.defaultOptions;\r\n\r\n/***/ }),\r\n/* 84 */\r\n/***/ (function(module, exports, __nested_webpack_require_146377__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_146377__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base draggable event\r\n * @class DraggableEvent\r\n * @module DraggableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DraggableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggable instance\r\n   * @property draggable\r\n   * @type {Draggable}\r\n   * @readonly\r\n   */\r\n  get draggable() {\r\n    return this.data.draggable;\r\n  }\r\n}\r\n\r\nexports.DraggableEvent = DraggableEvent; /**\r\n                                          * Draggable initialized event\r\n                                          * @class DraggableInitializedEvent\r\n                                          * @module DraggableInitializedEvent\r\n                                          * @extends DraggableEvent\r\n                                          */\r\n\r\nDraggableEvent.type = 'draggable';\r\nclass DraggableInitializedEvent extends DraggableEvent {}\r\n\r\nexports.DraggableInitializedEvent = DraggableInitializedEvent; /**\r\n                                                                * Draggable destory event\r\n                                                                * @class DraggableInitializedEvent\r\n                                                                * @module DraggableDestroyEvent\r\n                                                                * @extends DraggableDestroyEvent\r\n                                                                */\r\n\r\nDraggableInitializedEvent.type = 'draggable:initialize';\r\nclass DraggableDestroyEvent extends DraggableEvent {}\r\nexports.DraggableDestroyEvent = DraggableDestroyEvent;\r\nDraggableDestroyEvent.type = 'draggable:destroy';\r\n\r\n/***/ }),\r\n/* 85 */\r\n/***/ (function(module, exports, __nested_webpack_require_148441__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragStoppedEvent = exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_148441__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base drag event\r\n * @class DragEvent\r\n * @module DragEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DragEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.DragEvent = DragEvent; /**\r\n                                * Drag start event\r\n                                * @class DragStartEvent\r\n                                * @module DragStartEvent\r\n                                * @extends DragEvent\r\n                                */\r\n\r\nDragEvent.type = 'drag';\r\nclass DragStartEvent extends DragEvent {}\r\n\r\nexports.DragStartEvent = DragStartEvent; /**\r\n                                          * Drag move event\r\n                                          * @class DragMoveEvent\r\n                                          * @module DragMoveEvent\r\n                                          * @extends DragEvent\r\n                                          */\r\n\r\nDragStartEvent.type = 'drag:start';\r\nDragStartEvent.cancelable = true;\r\nclass DragMoveEvent extends DragEvent {}\r\n\r\nexports.DragMoveEvent = DragMoveEvent; /**\r\n                                        * Drag over event\r\n                                        * @class DragOverEvent\r\n                                        * @module DragOverEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragMoveEvent.type = 'drag:move';\r\nclass DragOverEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOverEvent = DragOverEvent; /**\r\n                                        * Drag out event\r\n                                        * @class DragOutEvent\r\n                                        * @module DragOutEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragOverEvent.type = 'drag:over';\r\nDragOverEvent.cancelable = true;\r\nclass DragOutEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you left\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOutEvent = DragOutEvent; /**\r\n                                      * Drag over container event\r\n                                      * @class DragOverContainerEvent\r\n                                      * @module DragOverContainerEvent\r\n                                      * @extends DragEvent\r\n                                      */\r\n\r\nDragOutEvent.type = 'drag:out';\r\nclass DragOverContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOverContainerEvent = DragOverContainerEvent; /**\r\n                                                          * Drag out container event\r\n                                                          * @class DragOutContainerEvent\r\n                                                          * @module DragOutContainerEvent\r\n                                                          * @extends DragEvent\r\n                                                          */\r\n\r\nDragOverContainerEvent.type = 'drag:over:container';\r\nclass DragOutContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you left\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOutContainerEvent = DragOutContainerEvent; /**\r\n                                                        * Drag pressure event\r\n                                                        * @class DragPressureEvent\r\n                                                        * @module DragPressureEvent\r\n                                                        * @extends DragEvent\r\n                                                        */\r\n\r\nDragOutContainerEvent.type = 'drag:out:container';\r\nclass DragPressureEvent extends DragEvent {\r\n\r\n  /**\r\n   * Pressure applied on draggable element\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.DragPressureEvent = DragPressureEvent; /**\r\n                                                * Drag stop event\r\n                                                * @class DragStopEvent\r\n                                                * @module DragStopEvent\r\n                                                * @extends DragEvent\r\n                                                */\r\n\r\nDragPressureEvent.type = 'drag:pressure';\r\nclass DragStopEvent extends DragEvent {}\r\n\r\nexports.DragStopEvent = DragStopEvent; /**\r\n                                        * Drag stopped event\r\n                                        * @class DragStoppedEvent\r\n                                        * @module DragStoppedEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragStopEvent.type = 'drag:stop';\r\nclass DragStoppedEvent extends DragEvent {}\r\nexports.DragStoppedEvent = DragStoppedEvent;\r\nDragStoppedEvent.type = 'drag:stopped';\r\n\r\n/***/ }),\r\n/* 86 */\r\n/***/ (function(module, exports, __nested_webpack_require_155966__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_155966__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\nconst onSortableSort = Symbol('onSortableSort');\r\n\r\n/**\r\n * SortAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out'\r\n};\r\n\r\n/**\r\n * SortAnimation plugin adds sort animation for sortable\r\n * @class SortAnimation\r\n * @module SortAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SortAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SortAnimation constructor.\r\n   * @constructs SortAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SortAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n    this.lastElements = [];\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n    this[onSortableSort] = this[onSortableSort].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sort', this[onSortableSort]);\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sort', this[onSortableSort]);\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.sortAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sort handler\r\n   * @param {SortableSortEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSort]({ dragEvent }) {\r\n    const { sourceContainer } = dragEvent;\r\n    const elements = this.draggable.getDraggableElementsForContainer(sourceContainer);\r\n    this.lastElements = Array.from(elements).map(el => {\r\n      return {\r\n        domEl: el,\r\n        offsetTop: el.offsetTop,\r\n        offsetLeft: el.offsetLeft\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex }) {\r\n    if (oldIndex === newIndex) {\r\n      return;\r\n    }\r\n\r\n    const effectedElements = [];\r\n    let start;\r\n    let end;\r\n    let num;\r\n    if (oldIndex > newIndex) {\r\n      start = newIndex;\r\n      end = oldIndex - 1;\r\n      num = 1;\r\n    } else {\r\n      start = oldIndex + 1;\r\n      end = newIndex;\r\n      num = -1;\r\n    }\r\n\r\n    for (let i = start; i <= end; i++) {\r\n      const from = this.lastElements[i];\r\n      const to = this.lastElements[i + num];\r\n      effectedElements.push({ from, to });\r\n    }\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      effectedElements.forEach(element => animate(element, this.options));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SortAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {Object} element\r\n                                  * @param {Object} element.from\r\n                                  * @param {Object} element.to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate({ from, to }, { duration, easingFunction }) {\r\n  const domEl = from.domEl;\r\n  const x = from.offsetLeft - to.offsetLeft;\r\n  const y = from.offsetTop - to.offsetTop;\r\n\r\n  domEl.style.pointerEvents = 'none';\r\n  domEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n\r\n  requestAnimationFrame(() => {\r\n    domEl.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n    domEl.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n    domEl.style.transform = '';\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 87 */\r\n/***/ (function(module, exports, __nested_webpack_require_161436__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SortAnimation = __nested_webpack_require_161436__(86);\r\n\r\nvar _SortAnimation2 = _interopRequireDefault(_SortAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SortAnimation2.default;\r\nexports.defaultOptions = _SortAnimation.defaultOptions;\r\n\r\n/***/ }),\r\n/* 88 */\r\n/***/ (function(module, exports, __nested_webpack_require_161958__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_161958__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\n\r\n/**\r\n * SwapAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @property {Boolean} defaultOptions.horizontal\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out',\r\n  horizontal: false\r\n};\r\n\r\n/**\r\n * SwapAnimation plugin adds swap animations for sortable\r\n * @class SwapAnimation\r\n * @module SwapAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SwapAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SwapAnimation constructor.\r\n   * @constructs SwapAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SwapAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.swapAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex, dragEvent }) {\r\n    const { source, over } = dragEvent;\r\n\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      if (oldIndex >= newIndex) {\r\n        animate(source, over, this.options);\r\n      } else {\r\n        animate(over, source, this.options);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SwapAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {HTMLElement} from\r\n                                  * @param {HTMLElement} to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @param {String} options.horizontal\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate(from, to, { duration, easingFunction, horizontal }) {\r\n  for (const element of [from, to]) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n\r\n  if (horizontal) {\r\n    const width = from.offsetWidth;\r\n    from.style.transform = `translate3d(${width}px, 0, 0)`;\r\n    to.style.transform = `translate3d(-${width}px, 0, 0)`;\r\n  } else {\r\n    const height = from.offsetHeight;\r\n    from.style.transform = `translate3d(0, ${height}px, 0)`;\r\n    to.style.transform = `translate3d(0, -${height}px, 0)`;\r\n  }\r\n\r\n  requestAnimationFrame(() => {\r\n    for (const element of [from, to]) {\r\n      element.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n      element.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n      element.style.transform = '';\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 89 */\r\n/***/ (function(module, exports, __nested_webpack_require_166692__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SwapAnimation = __nested_webpack_require_166692__(88);\r\n\r\nvar _SwapAnimation2 = _interopRequireDefault(_SwapAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SwapAnimation2.default;\r\nexports.defaultOptions = _SwapAnimation.defaultOptions;\r\n\r\n/***/ }),\r\n/* 90 */\r\n/***/ (function(module, exports, __nested_webpack_require_167214__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_167214__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _SnappableEvent = __nested_webpack_require_167214__(45);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragOut = Symbol('onDragOut');\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\n\r\n/**\r\n * Snappable plugin which snaps draggable elements into place\r\n * @class Snappable\r\n * @module Snappable\r\n * @extends AbstractPlugin\r\n */\r\nclass Snappable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Snappable constructor.\r\n   * @constructs Snappable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of the first source element\r\n     * @property {HTMLElement|null} firstSource\r\n     */\r\n    this.firstSource = null;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragOut] = this[onDragOut].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:stop', this[onDragStop]).on('drag:over', this[onDragOver]).on('drag:out', this[onDragOut]).on('droppable:over', this[onDragOver]).on('droppable:out', this[onDragOut]).on('mirror:created', this[onMirrorCreated]).on('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:stop', this[onDragStop]).off('drag:over', this[onDragOver]).off('drag:out', this[onDragOut]).off('droppable:over', this[onDragOver]).off('droppable:out', this[onDragOut]).off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.firstSource = event.source;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop]() {\r\n    this.firstSource = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent|DroppableOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    if (source === this.firstSource) {\r\n      this.firstSource = null;\r\n      return;\r\n    }\r\n\r\n    const snapInEvent = new _SnappableEvent.SnapInEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapInEvent);\r\n\r\n    if (snapInEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = 'none';\r\n    }\r\n\r\n    source.classList.remove(...this.draggable.getClassNamesFor('source:dragging'));\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:placed'));\r\n\r\n    // Need to cancel this in drag out\r\n    setTimeout(() => {\r\n      source.classList.remove(...this.draggable.getClassNamesFor('source:placed'));\r\n    }, this.draggable.options.placedTimeout);\r\n  }\r\n\r\n  /**\r\n   * Drag out handler\r\n   * @private\r\n   * @param {DragOutEvent|DroppableOutEvent} event - Drag out event\r\n   */\r\n  [onDragOut](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    const snapOutEvent = new _SnappableEvent.SnapOutEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapOutEvent);\r\n\r\n    if (snapOutEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = '';\r\n    }\r\n\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:dragging'));\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n}\r\nexports.default = Snappable;\r\n\r\n/***/ }),\r\n/* 91 */\r\n/***/ (function(module, exports, __nested_webpack_require_172201__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SnapOutEvent = exports.SnapInEvent = exports.SnapEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_172201__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base snap event\r\n * @class SnapEvent\r\n * @module SnapEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SnapEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this snap event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Snappable element\r\n   * @property snappable\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get snappable() {\r\n    return this.data.snappable;\r\n  }\r\n}\r\n\r\nexports.SnapEvent = SnapEvent; /**\r\n                                * Snap in event\r\n                                * @class SnapInEvent\r\n                                * @module SnapInEvent\r\n                                * @extends SnapEvent\r\n                                */\r\n\r\nSnapEvent.type = 'snap';\r\nclass SnapInEvent extends SnapEvent {}\r\n\r\nexports.SnapInEvent = SnapInEvent; /**\r\n                                    * Snap out event\r\n                                    * @class SnapOutEvent\r\n                                    * @module SnapOutEvent\r\n                                    * @extends SnapEvent\r\n                                    */\r\n\r\nSnapInEvent.type = 'snap:in';\r\nSnapInEvent.cancelable = true;\r\nclass SnapOutEvent extends SnapEvent {}\r\nexports.SnapOutEvent = SnapOutEvent;\r\nSnapOutEvent.type = 'snap:out';\r\nSnapOutEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 92 */\r\n/***/ (function(module, exports, __nested_webpack_require_174048__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_174048__(45);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_174048__(90);\r\n\r\nvar _Snappable2 = _interopRequireDefault(_Snappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Snappable2.default;\r\n\r\n/***/ }),\r\n/* 93 */\r\n/***/ (function(module, exports, __nested_webpack_require_174768__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_174768__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_174768__(5);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst resize = Symbol('resize');\r\n\r\n/**\r\n * ResizeMirror default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {};\r\n\r\n/**\r\n * The ResizeMirror plugin resizes the mirror element to the dimensions of the draggable element that the mirror is hovering over\r\n * @class ResizeMirror\r\n * @module ResizeMirror\r\n * @extends AbstractPlugin\r\n */\r\nclass ResizeMirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * ResizeMirror constructor.\r\n   * @constructs ResizeMirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * ResizeMirror options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * ResizeMirror remembers the last width when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastWidth\r\n     */\r\n    this.lastWidth = 0;\r\n\r\n    /**\r\n     * ResizeMirror remembers the last height when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastHeight\r\n     */\r\n    this.lastHeight = 0;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('mirror:created', this[onMirrorCreated]).on('drag:over', this[onDragOver]).on('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]).off('drag:over', this[onDragOver]).off('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.resizeMirror || {};\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [onDragOver](dragEvent) {\r\n    this[resize](dragEvent);\r\n  }\r\n\r\n  /**\r\n   * Resize function for\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [resize]({ overContainer, over }) {\r\n    requestAnimationFrame(() => {\r\n      if (!this.mirror.parentNode) {\r\n        return;\r\n      }\r\n\r\n      if (this.mirror.parentNode !== overContainer) {\r\n        overContainer.appendChild(this.mirror);\r\n      }\r\n\r\n      const overElement = over || this.draggable.getDraggableElementsForContainer(overContainer)[0];\r\n\r\n      if (!overElement) {\r\n        return;\r\n      }\r\n\r\n      (0, _utils.requestNextAnimationFrame)(() => {\r\n        const overRect = overElement.getBoundingClientRect();\r\n\r\n        if (this.lastHeight === overRect.height && this.lastWidth === overRect.width) {\r\n          return;\r\n        }\r\n\r\n        this.mirror.style.width = `${overRect.width}px`;\r\n        this.mirror.style.height = `${overRect.height}px`;\r\n\r\n        this.lastWidth = overRect.width;\r\n        this.lastHeight = overRect.height;\r\n      });\r\n    });\r\n  }\r\n}\r\nexports.default = ResizeMirror;\r\n\r\n/***/ }),\r\n/* 94 */\r\n/***/ (function(module, exports, __nested_webpack_require_179369__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _ResizeMirror = __nested_webpack_require_179369__(93);\r\n\r\nvar _ResizeMirror2 = _interopRequireDefault(_ResizeMirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ResizeMirror2.default;\r\nexports.defaultOptions = _ResizeMirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 95 */\r\n/***/ (function(module, exports, __nested_webpack_require_179886__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_179886__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_179886__(5);\r\n\r\nvar _CollidableEvent = __nested_webpack_require_179886__(46);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onRequestAnimationFrame = Symbol('onRequestAnimationFrame');\r\n\r\n/**\r\n * Collidable plugin which detects colliding elements while dragging\r\n * @class Collidable\r\n * @module Collidable\r\n * @extends AbstractPlugin\r\n */\r\nclass Collidable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Collidable constructor.\r\n   * @constructs Collidable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} currentlyCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.currentlyCollidingElement = null;\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} lastCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.lastCollidingElement = null;\r\n\r\n    /**\r\n     * Animation frame for finding colliding elements\r\n     * @property {Number|null} currentAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.currentAnimationFrame = null;\r\n\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onRequestAnimationFrame] = this[onRequestAnimationFrame].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns current collidables based on `collidables` option\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getCollidables() {\r\n    const collidables = this.draggable.options.collidables;\r\n\r\n    if (typeof collidables === 'string') {\r\n      return Array.prototype.slice.call(document.querySelectorAll(collidables));\r\n    } else if (collidables instanceof NodeList || collidables instanceof Array) {\r\n      return Array.prototype.slice.call(collidables);\r\n    } else if (collidables instanceof HTMLElement) {\r\n      return [collidables];\r\n    } else if (typeof collidables === 'function') {\r\n      return collidables();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    const target = event.sensorEvent.target;\r\n\r\n    this.currentAnimationFrame = requestAnimationFrame(this[onRequestAnimationFrame](target));\r\n\r\n    if (this.currentlyCollidingElement) {\r\n      event.cancel();\r\n    }\r\n\r\n    const collidableInEvent = new _CollidableEvent.CollidableInEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.currentlyCollidingElement\r\n    });\r\n\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.lastCollidingElement\r\n    });\r\n\r\n    const enteringCollidable = Boolean(this.currentlyCollidingElement && this.lastCollidingElement !== this.currentlyCollidingElement);\r\n    const leavingCollidable = Boolean(!this.currentlyCollidingElement && this.lastCollidingElement);\r\n\r\n    if (enteringCollidable) {\r\n      if (this.lastCollidingElement) {\r\n        this.draggable.trigger(collidableOutEvent);\r\n      }\r\n\r\n      this.draggable.trigger(collidableInEvent);\r\n    } else if (leavingCollidable) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = this.currentlyCollidingElement;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const lastCollidingElement = this.currentlyCollidingElement || this.lastCollidingElement;\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: lastCollidingElement\r\n    });\r\n\r\n    if (lastCollidingElement) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = null;\r\n    this.currentlyCollidingElement = null;\r\n  }\r\n\r\n  /**\r\n   * Animation frame function\r\n   * @private\r\n   * @param {HTMLElement} target - Current move target\r\n   * @return {Function}\r\n   */\r\n  [onRequestAnimationFrame](target) {\r\n    return () => {\r\n      const collidables = this.getCollidables();\r\n      this.currentlyCollidingElement = (0, _utils.closest)(target, element => collidables.includes(element));\r\n    };\r\n  }\r\n}\r\nexports.default = Collidable;\r\n\r\n/***/ }),\r\n/* 96 */\r\n/***/ (function(module, exports, __nested_webpack_require_184949__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.CollidableOutEvent = exports.CollidableInEvent = exports.CollidableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_184949__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base collidable event\r\n * @class CollidableEvent\r\n * @module CollidableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass CollidableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this colliable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.CollidableEvent = CollidableEvent; /**\r\n                                            * Collidable in event\r\n                                            * @class CollidableInEvent\r\n                                            * @module CollidableInEvent\r\n                                            * @extends CollidableEvent\r\n                                            */\r\n\r\nCollidableEvent.type = 'collidable';\r\nclass CollidableInEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you are currently colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\n\r\nexports.CollidableInEvent = CollidableInEvent; /**\r\n                                                * Collidable out event\r\n                                                * @class CollidableOutEvent\r\n                                                * @module CollidableOutEvent\r\n                                                * @extends CollidableEvent\r\n                                                */\r\n\r\nCollidableInEvent.type = 'collidable:in';\r\nclass CollidableOutEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you were previously colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\nexports.CollidableOutEvent = CollidableOutEvent;\r\nCollidableOutEvent.type = 'collidable:out';\r\n\r\n/***/ }),\r\n/* 97 */\r\n/***/ (function(module, exports, __nested_webpack_require_187303__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_187303__(46);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_187303__(95);\r\n\r\nvar _Collidable2 = _interopRequireDefault(_Collidable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Collidable2.default;\r\n\r\n/***/ }),\r\n/* 98 */\r\n/***/ (function(module, exports, __nested_webpack_require_188030__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_188030__(97);\r\n\r\nObject.defineProperty(exports, 'Collidable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Collidable).default;\r\n  }\r\n});\r\n\r\nvar _ResizeMirror = __nested_webpack_require_188030__(94);\r\n\r\nObject.defineProperty(exports, 'ResizeMirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ResizeMirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultResizeMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _ResizeMirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_188030__(92);\r\n\r\nObject.defineProperty(exports, 'Snappable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Snappable).default;\r\n  }\r\n});\r\n\r\nvar _SwapAnimation = __nested_webpack_require_188030__(89);\r\n\r\nObject.defineProperty(exports, 'SwapAnimation', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_SwapAnimation).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultSwapAnimationOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _SwapAnimation.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _SortAnimation = __nested_webpack_require_188030__(87);\r\n\r\nObject.defineProperty(exports, 'SortAnimation', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_SortAnimation).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultSortAnimationOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _SortAnimation.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 99 */\r\n/***/ (function(module, exports, __nested_webpack_require_189830__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_189830__(17);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_189830__(16);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseForceWillBegin = Symbol('onMouseForceWillBegin');\r\nconst onMouseForceDown = Symbol('onMouseForceDown');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseForceChange = Symbol('onMouseForceChange');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');\r\n\r\n/**\r\n * This sensor picks up native force touch events and dictates drag operations\r\n * @class ForceTouchSensor\r\n * @module ForceTouchSensor\r\n * @extends Sensor\r\n */\r\nclass ForceTouchSensor extends _Sensor2.default {\r\n  /**\r\n   * ForceTouchSensor constructor.\r\n   * @constructs ForceTouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property mightDrag\r\n     * @type {Boolean}\r\n     */\r\n    this.mightDrag = false;\r\n\r\n    this[onMouseForceWillBegin] = this[onMouseForceWillBegin].bind(this);\r\n    this[onMouseForceDown] = this[onMouseForceDown].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseForceChange] = this[onMouseForceChange].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    for (const container of this.containers) {\r\n      container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.addEventListener('mousedown', this[onMouseDown], true);\r\n      container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.addEventListener('mousemove', this[onMouseMove]);\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    for (const container of this.containers) {\r\n      container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.removeEventListener('mousedown', this[onMouseDown], true);\r\n      container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Mouse force will begin handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseForceWillBegin](event) {\r\n    event.preventDefault();\r\n    this.mightDrag = true;\r\n  }\r\n\r\n  /**\r\n   * Mouse force down handler\r\n   * @private\r\n   * @param {Event} event - Mouse force down event\r\n   */\r\n  [onMouseForceDown](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = event.currentTarget;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStartEvent);\r\n\r\n    this.currentContainer = container;\r\n    this.dragging = !dragStartEvent.canceled();\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target: null,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (!this.mightDrag) {\r\n      return;\r\n    }\r\n\r\n    // Need workaround for real click\r\n    // Cancel potential drag events\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force change event\r\n   */\r\n  [onMouseForceChange](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n    const container = event.currentTarget;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragPressureEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force global change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force global change event\r\n   */\r\n  [onMouseForceGlobalChange](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragPressureEvent);\r\n  }\r\n}\r\nexports.default = ForceTouchSensor;\r\n\r\n/***/ }),\r\n/* 100 */\r\n/***/ (function(module, exports, __nested_webpack_require_196573__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_196573__(99);\r\n\r\nvar _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ForceTouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 101 */\r\n/***/ (function(module, exports, __nested_webpack_require_197014__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_197014__(5);\r\n\r\nvar _Sensor = __nested_webpack_require_197014__(17);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_197014__(16);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragEnd = Symbol('onDragEnd');\r\nconst onDrop = Symbol('onDrop');\r\nconst reset = Symbol('reset');\r\n\r\n/**\r\n * This sensor picks up native browser drag events and dictates drag operations\r\n * @class DragSensor\r\n * @module DragSensor\r\n * @extends Sensor\r\n */\r\nclass DragSensor extends _Sensor2.default {\r\n  /**\r\n   * DragSensor constructor.\r\n   * @constructs DragSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up setting the draggable attribute, unless canceled\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property draggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.draggableElement = null;\r\n\r\n    /**\r\n     * Native draggable element could be links or images, their draggable state will be disabled during drag operation\r\n     * @property nativeDraggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.nativeDraggableElement = null;\r\n\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragEnd] = this[onDragEnd].bind(this);\r\n    this[onDrop] = this[onDrop].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    // Need for firefox. \"text\" key is needed for IE\r\n    event.dataTransfer.setData('text', '');\r\n    event.dataTransfer.effectAllowed = this.options.type;\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    this.currentContainer = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    // Workaround\r\n    setTimeout(() => {\r\n      this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n      if (dragStartEvent.canceled()) {\r\n        this.dragging = false;\r\n      } else {\r\n        this.dragging = true;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {Event} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragMoveEvent);\r\n\r\n    if (!dragMoveEvent.canceled()) {\r\n      event.preventDefault();\r\n      event.dataTransfer.dropEffect = this.options.type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag end handler\r\n   * @private\r\n   * @param {Event} event - Drag end event\r\n   */\r\n  [onDragEnd](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStopEvent);\r\n\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Drop handler\r\n   * @private\r\n   * @param {Event} event - Drop event\r\n   */\r\n  [onDrop](event) {\r\n    // eslint-disable-line class-methods-use-this\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071\r\n    if (event.target && (event.target.form || event.target.contenteditable)) {\r\n      return;\r\n    }\r\n\r\n    const nativeDraggableElement = (0, _utils.closest)(event.target, element => element.draggable);\r\n\r\n    if (nativeDraggableElement) {\r\n      nativeDraggableElement.draggable = false;\r\n      this.nativeDraggableElement = nativeDraggableElement;\r\n    }\r\n\r\n    document.addEventListener('mouseup', this[onMouseUp], true);\r\n    document.addEventListener('dragstart', this[onDragStart], false);\r\n    document.addEventListener('dragover', this[onDragOver], false);\r\n    document.addEventListener('dragend', this[onDragEnd], false);\r\n    document.addEventListener('drop', this[onDrop], false);\r\n\r\n    const target = (0, _utils.closest)(event.target, this.options.draggable);\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.startEvent = event;\r\n\r\n    this.mouseDownTimeout = setTimeout(() => {\r\n      target.draggable = true;\r\n      this.draggableElement = target;\r\n    }, this.delay.drag);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp]() {\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [reset]() {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n    document.removeEventListener('dragstart', this[onDragStart], false);\r\n    document.removeEventListener('dragover', this[onDragOver], false);\r\n    document.removeEventListener('dragend', this[onDragEnd], false);\r\n    document.removeEventListener('drop', this[onDrop], false);\r\n\r\n    if (this.nativeDraggableElement) {\r\n      this.nativeDraggableElement.draggable = true;\r\n      this.nativeDraggableElement = null;\r\n    }\r\n\r\n    if (this.draggableElement) {\r\n      this.draggableElement.draggable = false;\r\n      this.draggableElement = null;\r\n    }\r\n  }\r\n}\r\nexports.default = DragSensor;\r\n\r\n/***/ }),\r\n/* 102 */\r\n/***/ (function(module, exports, __nested_webpack_require_204290__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_204290__(101);\r\n\r\nvar _DragSensor2 = _interopRequireDefault(_DragSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _DragSensor2.default;\r\n\r\n/***/ }),\r\n/* 103 */\r\n/***/ (function(module, exports, __nested_webpack_require_204708__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_204708__(5);\r\n\r\nvar _Sensor = __nested_webpack_require_204708__(17);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_204708__(16);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onTouchStart = Symbol('onTouchStart');\r\nconst onTouchEnd = Symbol('onTouchEnd');\r\nconst onTouchMove = Symbol('onTouchMove');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * Prevents scrolling when set to true\r\n * @var {Boolean} preventScrolling\r\n */\r\nlet preventScrolling = false;\r\n\r\n// WebKit requires cancelable `touchmove` events to be added as early as possible\r\nwindow.addEventListener('touchmove', event => {\r\n  if (!preventScrolling) {\r\n    return;\r\n  }\r\n\r\n  // Prevent scrolling\r\n  event.preventDefault();\r\n}, { passive: false });\r\n\r\n/**\r\n * This sensor picks up native browser touch events and dictates drag operations\r\n * @class TouchSensor\r\n * @module TouchSensor\r\n * @extends Sensor\r\n */\r\nclass TouchSensor extends _Sensor2.default {\r\n  /**\r\n   * TouchSensor constructor.\r\n   * @constructs TouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Closest scrollable container so accidental scroll can cancel long touch\r\n     * @property currentScrollableParent\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentScrollableParent = null;\r\n\r\n    /**\r\n     * TimeoutID for managing delay\r\n     * @property tapTimeout\r\n     * @type {Number}\r\n     */\r\n    this.tapTimeout = null;\r\n\r\n    /**\r\n     * touchMoved indicates if touch has moved during tapTimeout\r\n     * @property touchMoved\r\n     * @type {Boolean}\r\n     */\r\n    this.touchMoved = false;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onTouchStart] = this[onTouchStart].bind(this);\r\n    this[onTouchEnd] = this[onTouchEnd].bind(this);\r\n    this[onTouchMove] = this[onTouchMove].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Touch start handler\r\n   * @private\r\n   * @param {Event} event - Touch start event\r\n   */\r\n  [onTouchStart](event) {\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n    const { distance = 0 } = this.options;\r\n    const { delay } = this;\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onTouchStartAt = Date.now();\r\n    this.startEvent = event;\r\n    this.currentContainer = container;\r\n\r\n    document.addEventListener('touchend', this[onTouchEnd]);\r\n    document.addEventListener('touchcancel', this[onTouchEnd]);\r\n    document.addEventListener('touchmove', this[onDistanceChange]);\r\n    container.addEventListener('contextmenu', onContextMenu);\r\n\r\n    if (distance) {\r\n      preventScrolling = true;\r\n    }\r\n\r\n    this.tapTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ touches: [{ pageX: this.pageX, pageY: this.pageY }] });\r\n    }, delay.touch);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n    const touch = (0, _utils.touchCoords)(startEvent);\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: touch.pageX,\r\n      clientY: touch.pageY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('touchmove', this[onTouchMove]);\r\n    }\r\n    preventScrolling = this.dragging;\r\n  }\r\n\r\n  /**\r\n   * Touch move handler prior to drag start.\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n    const start = (0, _utils.touchCoords)(startEvent);\r\n    const current = (0, _utils.touchCoords)(event);\r\n    const timeElapsed = Date.now() - this.onTouchStartAt;\r\n    const distanceTravelled = (0, _utils.distance)(start.pageX, start.pageY, current.pageX, current.pageY);\r\n\r\n    Object.assign(this, current);\r\n\r\n    clearTimeout(this.tapTimeout);\r\n\r\n    if (timeElapsed < delay.touch) {\r\n      // moved during delay\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler while dragging\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onTouchMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Touch end handler\r\n   * @private\r\n   * @param {Event} event - Touch end event\r\n   */\r\n  [onTouchEnd](event) {\r\n    clearTimeout(this.tapTimeout);\r\n    preventScrolling = false;\r\n\r\n    document.removeEventListener('touchend', this[onTouchEnd]);\r\n    document.removeEventListener('touchcancel', this[onTouchEnd]);\r\n    document.removeEventListener('touchmove', this[onDistanceChange]);\r\n\r\n    if (this.currentContainer) {\r\n      this.currentContainer.removeEventListener('contextmenu', onContextMenu);\r\n    }\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('touchmove', this[onTouchMove]);\r\n\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    event.preventDefault();\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n}\r\n\r\nexports.default = TouchSensor;\r\nfunction onContextMenu(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\n/***/ }),\r\n/* 104 */\r\n/***/ (function(module, exports, __nested_webpack_require_212191__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_212191__(103);\r\n\r\nvar _TouchSensor2 = _interopRequireDefault(_TouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _TouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 105 */\r\n/***/ (function(module, exports, __nested_webpack_require_212613__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_212613__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sensor event\r\n * @class SensorEvent\r\n * @module SensorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SensorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Original browser event that triggered a sensor\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    return this.data.originalEvent;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientX for both touch and mouse events\r\n   * @property clientX\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientX() {\r\n    return this.data.clientX;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientY for both touch and mouse events\r\n   * @property clientY\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientY() {\r\n    return this.data.clientY;\r\n  }\r\n\r\n  /**\r\n   * Normalized target for both touch and mouse events\r\n   * Returns the element that is behind cursor or touch pointer\r\n   * @property target\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get target() {\r\n    return this.data.target;\r\n  }\r\n\r\n  /**\r\n   * Container that initiated the sensor\r\n   * @property container\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get container() {\r\n    return this.data.container;\r\n  }\r\n\r\n  /**\r\n   * Trackpad pressure\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.SensorEvent = SensorEvent; /**\r\n                                    * Drag start sensor event\r\n                                    * @class DragStartSensorEvent\r\n                                    * @module DragStartSensorEvent\r\n                                    * @extends SensorEvent\r\n                                    */\r\n\r\nclass DragStartSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStartSensorEvent = DragStartSensorEvent; /**\r\n                                                      * Drag move sensor event\r\n                                                      * @class DragMoveSensorEvent\r\n                                                      * @module DragMoveSensorEvent\r\n                                                      * @extends SensorEvent\r\n                                                      */\r\n\r\nDragStartSensorEvent.type = 'drag:start';\r\nclass DragMoveSensorEvent extends SensorEvent {}\r\n\r\nexports.DragMoveSensorEvent = DragMoveSensorEvent; /**\r\n                                                    * Drag stop sensor event\r\n                                                    * @class DragStopSensorEvent\r\n                                                    * @module DragStopSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragMoveSensorEvent.type = 'drag:move';\r\nclass DragStopSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStopSensorEvent = DragStopSensorEvent; /**\r\n                                                    * Drag pressure sensor event\r\n                                                    * @class DragPressureSensorEvent\r\n                                                    * @module DragPressureSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragStopSensorEvent.type = 'drag:stop';\r\nclass DragPressureSensorEvent extends SensorEvent {}\r\nexports.DragPressureSensorEvent = DragPressureSensorEvent;\r\nDragPressureSensorEvent.type = 'drag:pressure';\r\n\r\n/***/ }),\r\n/* 106 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 107 */\r\n/***/ (function(module, exports, __nested_webpack_require_217141__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_217141__(106);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 108 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 109 */\r\n/***/ (function(module, exports, __nested_webpack_require_218165__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_218165__(108);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 110 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 111 */\r\n/***/ (function(module, exports, __nested_webpack_require_218927__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_218927__(110);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 112 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 113 */\r\n/***/ (function(module, exports, __nested_webpack_require_221360__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_221360__(112);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 114 */\r\n/***/ (function(module, exports, __nested_webpack_require_221766__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_221766__(5);\r\n\r\nvar _Sensor = __nested_webpack_require_221766__(17);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_221766__(16);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * This sensor picks up native browser mouse events and dictates drag operations\r\n * @class MouseSensor\r\n * @module MouseSensor\r\n * @extends Sensor\r\n */\r\nclass MouseSensor extends _Sensor2.default {\r\n  /**\r\n   * MouseSensor constructor.\r\n   * @constructs MouseSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up triggering the drag start operation\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onContextMenuWhileDragging] = this[onContextMenuWhileDragging].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (event.button !== 0 || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n\r\n    const { delay } = this;\r\n    const { pageX, pageY } = event;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onMouseDownAt = Date.now();\r\n    this.startEvent = event;\r\n\r\n    this.currentContainer = container;\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n    document.addEventListener('dragstart', preventNativeDragStart);\r\n    document.addEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    this.mouseDownTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ pageX: this.pageX, pageY: this.pageY });\r\n    }, delay.mouse);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n      document.addEventListener('mousemove', this[onMouseMove]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect change in distance, starting drag when both\r\n   * delay and distance requirements are met\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { pageX, pageY } = event;\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const timeElapsed = Date.now() - this.onMouseDownAt;\r\n    const distanceTravelled = (0, _utils.distance)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;\r\n\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (timeElapsed < delay.mouse) {\r\n      // moved during delay\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n    document.removeEventListener('dragstart', preventNativeDragStart);\r\n    document.removeEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n\r\n  /**\r\n   * Context menu handler\r\n   * @private\r\n   * @param {Event} event - Context menu event\r\n   */\r\n  [onContextMenuWhileDragging](event) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nexports.default = MouseSensor;\r\nfunction preventNativeDragStart(event) {\r\n  event.preventDefault();\r\n}\r\n\r\n/***/ }),\r\n/* 115 */\r\n/***/ (function(module, exports, __nested_webpack_require_228641__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_228641__(114);\r\n\r\nvar _MouseSensor2 = _interopRequireDefault(_MouseSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _MouseSensor2.default;\r\n\r\n/***/ }),\r\n/* 116 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst defaultDealy = {\r\n  mouse: 0,\r\n  drag: 0,\r\n  touch: 100\r\n};\r\n\r\n/**\r\n * Base sensor class. Extend from this class to create a new or custom sensor\r\n * @class Sensor\r\n * @module Sensor\r\n */\r\nclass Sensor {\r\n  /**\r\n   * Sensor constructor.\r\n   * @constructs Sensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    /**\r\n     * Current containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.containers = [...containers];\r\n\r\n    /**\r\n     * Current options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, options);\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Current container\r\n     * @property currentContainer\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentContainer = null;\r\n\r\n    /**\r\n     * The event of the initial sensor down\r\n     * @property startEvent\r\n     * @type {Event}\r\n     */\r\n    this.startEvent = null;\r\n\r\n    /**\r\n     * The delay of each sensor\r\n     * @property delay\r\n     * @type {Object}\r\n     */\r\n    this.delay = calcDelay(options.delay);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  attach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  detach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to this sensor\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n  }\r\n\r\n  /**\r\n   * Removes container from this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from this sensor\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n  }\r\n\r\n  /**\r\n   * Triggers event on target element\r\n   * @param {HTMLElement} element - Element to trigger event on\r\n   * @param {SensorEvent} sensorEvent - Sensor event to trigger\r\n   */\r\n  trigger(element, sensorEvent) {\r\n    const event = document.createEvent('Event');\r\n    event.detail = sensorEvent;\r\n    event.initEvent(sensorEvent.type, true, true);\r\n    element.dispatchEvent(event);\r\n    this.lastEvent = sensorEvent;\r\n\r\n    return sensorEvent;\r\n  }\r\n}\r\n\r\nexports.default = Sensor; /**\r\n                           * Calculate the delay of each sensor through the delay in the options\r\n                           * @param {undefined|Number|Object} optionsDelay - the delay in the options\r\n                           * @return {Object}\r\n                           */\r\n\r\nfunction calcDelay(optionsDelay) {\r\n  const delay = {};\r\n\r\n  if (optionsDelay === undefined) {\r\n    return _extends({}, defaultDealy);\r\n  }\r\n\r\n  if (typeof optionsDelay === 'number') {\r\n    for (const key in defaultDealy) {\r\n      if (defaultDealy.hasOwnProperty(key)) {\r\n        delay[key] = optionsDelay;\r\n      }\r\n    }\r\n    return delay;\r\n  }\r\n\r\n  for (const key in defaultDealy) {\r\n    if (defaultDealy.hasOwnProperty(key)) {\r\n      if (optionsDelay[key] === undefined) {\r\n        delay[key] = defaultDealy[key];\r\n      } else {\r\n        delay[key] = optionsDelay[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return delay;\r\n}\r\n\r\n/***/ }),\r\n/* 117 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 118 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 119 */\r\n/***/ (function(module, exports, __nested_webpack_require_236086__) {\r\n\r\n\"use strict\";\r\n\r\n// https://github.com/tc39/Array.prototype.includes\r\nvar $export = __nested_webpack_require_236086__(15);\r\nvar $includes = __nested_webpack_require_236086__(57)(true);\r\n\r\n$export($export.P, 'Array', {\r\n  includes: function includes(el /* , fromIndex = 0 */) {\r\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\r\n  }\r\n});\r\n\r\n__nested_webpack_require_236086__(49)('includes');\r\n\r\n\r\n/***/ }),\r\n/* 120 */\r\n/***/ (function(module, exports, __nested_webpack_require_236553__) {\r\n\r\n__nested_webpack_require_236553__(119);\r\nmodule.exports = __nested_webpack_require_236553__(2).Array.includes;\r\n\r\n\r\n/***/ }),\r\n/* 121 */\r\n/***/ (function(module, exports, __nested_webpack_require_236722__) {\r\n\r\nvar getKeys = __nested_webpack_require_236722__(13);\r\nvar toIObject = __nested_webpack_require_236722__(7);\r\nvar isEnum = __nested_webpack_require_236722__(19).f;\r\nmodule.exports = function (isEntries) {\r\n  return function (it) {\r\n    var O = toIObject(it);\r\n    var keys = getKeys(O);\r\n    var length = keys.length;\r\n    var i = 0;\r\n    var result = [];\r\n    var key;\r\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\r\n      result.push(isEntries ? [key, O[key]] : O[key]);\r\n    } return result;\r\n  };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 122 */\r\n/***/ (function(module, exports, __nested_webpack_require_237286__) {\r\n\r\n// https://github.com/tc39/proposal-object-values-entries\r\nvar $export = __nested_webpack_require_237286__(15);\r\nvar $values = __nested_webpack_require_237286__(121)(false);\r\n\r\n$export($export.S, 'Object', {\r\n  values: function values(it) {\r\n    return $values(it);\r\n  }\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 123 */\r\n/***/ (function(module, exports, __nested_webpack_require_237620__) {\r\n\r\n__nested_webpack_require_237620__(122);\r\nmodule.exports = __nested_webpack_require_237620__(2).Object.values;\r\n\r\n\r\n/***/ }),\r\n/* 124 */\r\n/***/ (function(module, exports, __nested_webpack_require_237788__) {\r\n\r\n\"use strict\";\r\n\r\n// 19.1.2.1 Object.assign(target, source, ...)\r\nvar getKeys = __nested_webpack_require_237788__(13);\r\nvar gOPS = __nested_webpack_require_237788__(31);\r\nvar pIE = __nested_webpack_require_237788__(19);\r\nvar toObject = __nested_webpack_require_237788__(50);\r\nvar IObject = __nested_webpack_require_237788__(58);\r\nvar $assign = Object.assign;\r\n\r\n// should work with symbols and should have deterministic property order (V8 bug)\r\nmodule.exports = !$assign || __nested_webpack_require_237788__(23)(function () {\r\n  var A = {};\r\n  var B = {};\r\n  // eslint-disable-next-line no-undef\r\n  var S = Symbol();\r\n  var K = 'abcdefghijklmnopqrst';\r\n  A[S] = 7;\r\n  K.split('').forEach(function (k) { B[k] = k; });\r\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\r\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\r\n  var T = toObject(target);\r\n  var aLen = arguments.length;\r\n  var index = 1;\r\n  var getSymbols = gOPS.f;\r\n  var isEnum = pIE.f;\r\n  while (aLen > index) {\r\n    var S = IObject(arguments[index++]);\r\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\r\n    var length = keys.length;\r\n    var j = 0;\r\n    var key;\r\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\r\n  } return T;\r\n} : $assign;\r\n\r\n\r\n/***/ }),\r\n/* 125 */\r\n/***/ (function(module, exports, __nested_webpack_require_239105__) {\r\n\r\n// 19.1.3.1 Object.assign(target, source)\r\nvar $export = __nested_webpack_require_239105__(15);\r\n\r\n$export($export.S + $export.F, 'Object', { assign: __nested_webpack_require_239105__(124) });\r\n\r\n\r\n/***/ }),\r\n/* 126 */\r\n/***/ (function(module, exports, __nested_webpack_require_239356__) {\r\n\r\n__nested_webpack_require_239356__(125);\r\nmodule.exports = __nested_webpack_require_239356__(2).Object.assign;\r\n\r\n\r\n/***/ }),\r\n/* 127 */\r\n/***/ (function(module, exports, __nested_webpack_require_239524__) {\r\n\r\nvar ITERATOR = __nested_webpack_require_239524__(0)('iterator');\r\nvar SAFE_CLOSING = false;\r\n\r\ntry {\r\n  var riter = [7][ITERATOR]();\r\n  riter['return'] = function () { SAFE_CLOSING = true; };\r\n  // eslint-disable-next-line no-throw-literal\r\n  Array.from(riter, function () { throw 2; });\r\n} catch (e) { /* empty */ }\r\n\r\nmodule.exports = function (exec, skipClosing) {\r\n  if (!skipClosing && !SAFE_CLOSING) return false;\r\n  var safe = false;\r\n  try {\r\n    var arr = [7];\r\n    var iter = arr[ITERATOR]();\r\n    iter.next = function () { return { done: safe = true }; };\r\n    arr[ITERATOR] = function () { return iter; };\r\n    exec(arr);\r\n  } catch (e) { /* empty */ }\r\n  return safe;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 128 */\r\n/***/ (function(module, exports, __nested_webpack_require_240281__) {\r\n\r\n\"use strict\";\r\n\r\nvar global = __nested_webpack_require_240281__(1);\r\nvar dP = __nested_webpack_require_240281__(9);\r\nvar DESCRIPTORS = __nested_webpack_require_240281__(11);\r\nvar SPECIES = __nested_webpack_require_240281__(0)('species');\r\n\r\nmodule.exports = function (KEY) {\r\n  var C = global[KEY];\r\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\r\n    configurable: true,\r\n    get: function () { return this; }\r\n  });\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 129 */\r\n/***/ (function(module, exports, __nested_webpack_require_240744__) {\r\n\r\nvar redefine = __nested_webpack_require_240744__(14);\r\nmodule.exports = function (target, src, safe) {\r\n  for (var key in src) redefine(target, key, src[key], safe);\r\n  return target;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 130 */\r\n/***/ (function(module, exports, __nested_webpack_require_241004__) {\r\n\r\nvar anObject = __nested_webpack_require_241004__(6);\r\nvar isObject = __nested_webpack_require_241004__(8);\r\nvar newPromiseCapability = __nested_webpack_require_241004__(47);\r\n\r\nmodule.exports = function (C, x) {\r\n  anObject(C);\r\n  if (isObject(x) && x.constructor === C) return x;\r\n  var promiseCapability = newPromiseCapability.f(C);\r\n  var resolve = promiseCapability.resolve;\r\n  resolve(x);\r\n  return promiseCapability.promise;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 131 */\r\n/***/ (function(module, exports, __nested_webpack_require_241483__) {\r\n\r\nvar global = __nested_webpack_require_241483__(1);\r\nvar navigator = global.navigator;\r\n\r\nmodule.exports = navigator && navigator.userAgent || '';\r\n\r\n\r\n/***/ }),\r\n/* 132 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (exec) {\r\n  try {\r\n    return { e: false, v: exec() };\r\n  } catch (e) {\r\n    return { e: true, v: e };\r\n  }\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 133 */\r\n/***/ (function(module, exports, __nested_webpack_require_241904__) {\r\n\r\nvar global = __nested_webpack_require_241904__(1);\r\nvar macrotask = __nested_webpack_require_241904__(48).set;\r\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\r\nvar process = global.process;\r\nvar Promise = global.Promise;\r\nvar isNode = __nested_webpack_require_241904__(20)(process) == 'process';\r\n\r\nmodule.exports = function () {\r\n  var head, last, notify;\r\n\r\n  var flush = function () {\r\n    var parent, fn;\r\n    if (isNode && (parent = process.domain)) parent.exit();\r\n    while (head) {\r\n      fn = head.fn;\r\n      head = head.next;\r\n      try {\r\n        fn();\r\n      } catch (e) {\r\n        if (head) notify();\r\n        else last = undefined;\r\n        throw e;\r\n      }\r\n    } last = undefined;\r\n    if (parent) parent.enter();\r\n  };\r\n\r\n  // Node.js\r\n  if (isNode) {\r\n    notify = function () {\r\n      process.nextTick(flush);\r\n    };\r\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\r\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\r\n    var toggle = true;\r\n    var node = document.createTextNode('');\r\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\r\n    notify = function () {\r\n      node.data = toggle = !toggle;\r\n    };\r\n  // environments with maybe non-completely correct, but existent Promise\r\n  } else if (Promise && Promise.resolve) {\r\n    // Promise.resolve without an argument throws an error in LG WebOS 2\r\n    var promise = Promise.resolve(undefined);\r\n    notify = function () {\r\n      promise.then(flush);\r\n    };\r\n  // for other environments - macrotask based on:\r\n  // - setImmediate\r\n  // - MessageChannel\r\n  // - window.postMessag\r\n  // - onreadystatechange\r\n  // - setTimeout\r\n  } else {\r\n    notify = function () {\r\n      // strange IE + webpack dev server bug - use .call(global)\r\n      macrotask.call(global, flush);\r\n    };\r\n  }\r\n\r\n  return function (fn) {\r\n    var task = { fn: fn, next: undefined };\r\n    if (last) last.next = task;\r\n    if (!head) {\r\n      head = task;\r\n      notify();\r\n    } last = task;\r\n  };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 134 */\r\n/***/ (function(module, exports) {\r\n\r\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\r\nmodule.exports = function (fn, args, that) {\r\n  var un = that === undefined;\r\n  switch (args.length) {\r\n    case 0: return un ? fn()\r\n                      : fn.call(that);\r\n    case 1: return un ? fn(args[0])\r\n                      : fn.call(that, args[0]);\r\n    case 2: return un ? fn(args[0], args[1])\r\n                      : fn.call(that, args[0], args[1]);\r\n    case 3: return un ? fn(args[0], args[1], args[2])\r\n                      : fn.call(that, args[0], args[1], args[2]);\r\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\r\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\r\n  } return fn.apply(that, args);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 135 */\r\n/***/ (function(module, exports, __nested_webpack_require_244834__) {\r\n\r\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\r\nvar anObject = __nested_webpack_require_244834__(6);\r\nvar aFunction = __nested_webpack_require_244834__(26);\r\nvar SPECIES = __nested_webpack_require_244834__(0)('species');\r\nmodule.exports = function (O, D) {\r\n  var C = anObject(O).constructor;\r\n  var S;\r\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 136 */\r\n/***/ (function(module, exports, __nested_webpack_require_245279__) {\r\n\r\nvar classof = __nested_webpack_require_245279__(30);\r\nvar ITERATOR = __nested_webpack_require_245279__(0)('iterator');\r\nvar Iterators = __nested_webpack_require_245279__(18);\r\nmodule.exports = __nested_webpack_require_245279__(2).getIteratorMethod = function (it) {\r\n  if (it != undefined) return it[ITERATOR]\r\n    || it['@@iterator']\r\n    || Iterators[classof(it)];\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 137 */\r\n/***/ (function(module, exports, __nested_webpack_require_245680__) {\r\n\r\n// check on default Array iterator\r\nvar Iterators = __nested_webpack_require_245680__(18);\r\nvar ITERATOR = __nested_webpack_require_245680__(0)('iterator');\r\nvar ArrayProto = Array.prototype;\r\n\r\nmodule.exports = function (it) {\r\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 138 */\r\n/***/ (function(module, exports, __nested_webpack_require_246057__) {\r\n\r\n// call something on iterator step with safe closing on error\r\nvar anObject = __nested_webpack_require_246057__(6);\r\nmodule.exports = function (iterator, fn, value, entries) {\r\n  try {\r\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\r\n  // 7.4.6 IteratorClose(iterator, completion)\r\n  } catch (e) {\r\n    var ret = iterator['return'];\r\n    if (ret !== undefined) anObject(ret.call(iterator));\r\n    throw e;\r\n  }\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 139 */\r\n/***/ (function(module, exports, __nested_webpack_require_246563__) {\r\n\r\nvar ctx = __nested_webpack_require_246563__(27);\r\nvar call = __nested_webpack_require_246563__(138);\r\nvar isArrayIter = __nested_webpack_require_246563__(137);\r\nvar anObject = __nested_webpack_require_246563__(6);\r\nvar toLength = __nested_webpack_require_246563__(56);\r\nvar getIterFn = __nested_webpack_require_246563__(136);\r\nvar BREAK = {};\r\nvar RETURN = {};\r\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\r\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\r\n  var f = ctx(fn, that, entries ? 2 : 1);\r\n  var index = 0;\r\n  var length, step, iterator, result;\r\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\r\n  // fast case for arrays with default iterator\r\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\r\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\r\n    if (result === BREAK || result === RETURN) return result;\r\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\r\n    result = call(iterator, f, step.value, entries);\r\n    if (result === BREAK || result === RETURN) return result;\r\n  }\r\n};\r\nexports.BREAK = BREAK;\r\nexports.RETURN = RETURN;\r\n\r\n\r\n/***/ }),\r\n/* 140 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (it, Constructor, name, forbiddenField) {\r\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\r\n    throw TypeError(name + ': incorrect invocation!');\r\n  } return it;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 141 */\r\n/***/ (function(module, exports, __nested_webpack_require_248145__) {\r\n\r\n\"use strict\";\r\n\r\nvar LIBRARY = __nested_webpack_require_248145__(21);\r\nvar global = __nested_webpack_require_248145__(1);\r\nvar ctx = __nested_webpack_require_248145__(27);\r\nvar classof = __nested_webpack_require_248145__(30);\r\nvar $export = __nested_webpack_require_248145__(15);\r\nvar isObject = __nested_webpack_require_248145__(8);\r\nvar aFunction = __nested_webpack_require_248145__(26);\r\nvar anInstance = __nested_webpack_require_248145__(140);\r\nvar forOf = __nested_webpack_require_248145__(139);\r\nvar speciesConstructor = __nested_webpack_require_248145__(135);\r\nvar task = __nested_webpack_require_248145__(48).set;\r\nvar microtask = __nested_webpack_require_248145__(133)();\r\nvar newPromiseCapabilityModule = __nested_webpack_require_248145__(47);\r\nvar perform = __nested_webpack_require_248145__(132);\r\nvar userAgent = __nested_webpack_require_248145__(131);\r\nvar promiseResolve = __nested_webpack_require_248145__(130);\r\nvar PROMISE = 'Promise';\r\nvar TypeError = global.TypeError;\r\nvar process = global.process;\r\nvar versions = process && process.versions;\r\nvar v8 = versions && versions.v8 || '';\r\nvar $Promise = global[PROMISE];\r\nvar isNode = classof(process) == 'process';\r\nvar empty = function () { /* empty */ };\r\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\r\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\r\n\r\nvar USE_NATIVE = !!function () {\r\n  try {\r\n    // correct subclassing with @@species support\r\n    var promise = $Promise.resolve(1);\r\n    var FakePromise = (promise.constructor = {})[__nested_webpack_require_248145__(0)('species')] = function (exec) {\r\n      exec(empty, empty);\r\n    };\r\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\r\n    return (isNode || typeof PromiseRejectionEvent == 'function')\r\n      && promise.then(empty) instanceof FakePromise\r\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\r\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\r\n      // we can't detect it synchronously, so just check versions\r\n      && v8.indexOf('6.6') !== 0\r\n      && userAgent.indexOf('Chrome/66') === -1;\r\n  } catch (e) { /* empty */ }\r\n}();\r\n\r\n// helpers\r\nvar isThenable = function (it) {\r\n  var then;\r\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\r\n};\r\nvar notify = function (promise, isReject) {\r\n  if (promise._n) return;\r\n  promise._n = true;\r\n  var chain = promise._c;\r\n  microtask(function () {\r\n    var value = promise._v;\r\n    var ok = promise._s == 1;\r\n    var i = 0;\r\n    var run = function (reaction) {\r\n      var handler = ok ? reaction.ok : reaction.fail;\r\n      var resolve = reaction.resolve;\r\n      var reject = reaction.reject;\r\n      var domain = reaction.domain;\r\n      var result, then, exited;\r\n      try {\r\n        if (handler) {\r\n          if (!ok) {\r\n            if (promise._h == 2) onHandleUnhandled(promise);\r\n            promise._h = 1;\r\n          }\r\n          if (handler === true) result = value;\r\n          else {\r\n            if (domain) domain.enter();\r\n            result = handler(value); // may throw\r\n            if (domain) {\r\n              domain.exit();\r\n              exited = true;\r\n            }\r\n          }\r\n          if (result === reaction.promise) {\r\n            reject(TypeError('Promise-chain cycle'));\r\n          } else if (then = isThenable(result)) {\r\n            then.call(result, resolve, reject);\r\n          } else resolve(result);\r\n        } else reject(value);\r\n      } catch (e) {\r\n        if (domain && !exited) domain.exit();\r\n        reject(e);\r\n      }\r\n    };\r\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\r\n    promise._c = [];\r\n    promise._n = false;\r\n    if (isReject && !promise._h) onUnhandled(promise);\r\n  });\r\n};\r\nvar onUnhandled = function (promise) {\r\n  task.call(global, function () {\r\n    var value = promise._v;\r\n    var unhandled = isUnhandled(promise);\r\n    var result, handler, console;\r\n    if (unhandled) {\r\n      result = perform(function () {\r\n        if (isNode) {\r\n          process.emit('unhandledRejection', value, promise);\r\n        } else if (handler = global.onunhandledrejection) {\r\n          handler({ promise: promise, reason: value });\r\n        } else if ((console = global.console) && console.error) {\r\n          console.error('Unhandled promise rejection', value);\r\n        }\r\n      });\r\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\r\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\r\n    } promise._a = undefined;\r\n    if (unhandled && result.e) throw result.v;\r\n  });\r\n};\r\nvar isUnhandled = function (promise) {\r\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\r\n};\r\nvar onHandleUnhandled = function (promise) {\r\n  task.call(global, function () {\r\n    var handler;\r\n    if (isNode) {\r\n      process.emit('rejectionHandled', promise);\r\n    } else if (handler = global.onrejectionhandled) {\r\n      handler({ promise: promise, reason: promise._v });\r\n    }\r\n  });\r\n};\r\nvar $reject = function (value) {\r\n  var promise = this;\r\n  if (promise._d) return;\r\n  promise._d = true;\r\n  promise = promise._w || promise; // unwrap\r\n  promise._v = value;\r\n  promise._s = 2;\r\n  if (!promise._a) promise._a = promise._c.slice();\r\n  notify(promise, true);\r\n};\r\nvar $resolve = function (value) {\r\n  var promise = this;\r\n  var then;\r\n  if (promise._d) return;\r\n  promise._d = true;\r\n  promise = promise._w || promise; // unwrap\r\n  try {\r\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\r\n    if (then = isThenable(value)) {\r\n      microtask(function () {\r\n        var wrapper = { _w: promise, _d: false }; // wrap\r\n        try {\r\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\r\n        } catch (e) {\r\n          $reject.call(wrapper, e);\r\n        }\r\n      });\r\n    } else {\r\n      promise._v = value;\r\n      promise._s = 1;\r\n      notify(promise, false);\r\n    }\r\n  } catch (e) {\r\n    $reject.call({ _w: promise, _d: false }, e); // wrap\r\n  }\r\n};\r\n\r\n// constructor polyfill\r\nif (!USE_NATIVE) {\r\n  // 25.4.3.1 Promise(executor)\r\n  $Promise = function Promise(executor) {\r\n    anInstance(this, $Promise, PROMISE, '_h');\r\n    aFunction(executor);\r\n    Internal.call(this);\r\n    try {\r\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\r\n    } catch (err) {\r\n      $reject.call(this, err);\r\n    }\r\n  };\r\n  // eslint-disable-next-line no-unused-vars\r\n  Internal = function Promise(executor) {\r\n    this._c = [];             // <- awaiting reactions\r\n    this._a = undefined;      // <- checked in isUnhandled reactions\r\n    this._s = 0;              // <- state\r\n    this._d = false;          // <- done\r\n    this._v = undefined;      // <- value\r\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\r\n    this._n = false;          // <- notify\r\n  };\r\n  Internal.prototype = __nested_webpack_require_248145__(129)($Promise.prototype, {\r\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\r\n    then: function then(onFulfilled, onRejected) {\r\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\r\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\r\n      reaction.fail = typeof onRejected == 'function' && onRejected;\r\n      reaction.domain = isNode ? process.domain : undefined;\r\n      this._c.push(reaction);\r\n      if (this._a) this._a.push(reaction);\r\n      if (this._s) notify(this, false);\r\n      return reaction.promise;\r\n    },\r\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\r\n    'catch': function (onRejected) {\r\n      return this.then(undefined, onRejected);\r\n    }\r\n  });\r\n  OwnPromiseCapability = function () {\r\n    var promise = new Internal();\r\n    this.promise = promise;\r\n    this.resolve = ctx($resolve, promise, 1);\r\n    this.reject = ctx($reject, promise, 1);\r\n  };\r\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\r\n    return C === $Promise || C === Wrapper\r\n      ? new OwnPromiseCapability(C)\r\n      : newGenericPromiseCapability(C);\r\n  };\r\n}\r\n\r\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\r\n__nested_webpack_require_248145__(25)($Promise, PROMISE);\r\n__nested_webpack_require_248145__(128)(PROMISE);\r\nWrapper = __nested_webpack_require_248145__(2)[PROMISE];\r\n\r\n// statics\r\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\r\n  // 25.4.4.5 Promise.reject(r)\r\n  reject: function reject(r) {\r\n    var capability = newPromiseCapability(this);\r\n    var $$reject = capability.reject;\r\n    $$reject(r);\r\n    return capability.promise;\r\n  }\r\n});\r\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\r\n  // 25.4.4.6 Promise.resolve(x)\r\n  resolve: function resolve(x) {\r\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\r\n  }\r\n});\r\n$export($export.S + $export.F * !(USE_NATIVE && __nested_webpack_require_248145__(127)(function (iter) {\r\n  $Promise.all(iter)['catch'](empty);\r\n})), PROMISE, {\r\n  // 25.4.4.1 Promise.all(iterable)\r\n  all: function all(iterable) {\r\n    var C = this;\r\n    var capability = newPromiseCapability(C);\r\n    var resolve = capability.resolve;\r\n    var reject = capability.reject;\r\n    var result = perform(function () {\r\n      var values = [];\r\n      var index = 0;\r\n      var remaining = 1;\r\n      forOf(iterable, false, function (promise) {\r\n        var $index = index++;\r\n        var alreadyCalled = false;\r\n        values.push(undefined);\r\n        remaining++;\r\n        C.resolve(promise).then(function (value) {\r\n          if (alreadyCalled) return;\r\n          alreadyCalled = true;\r\n          values[$index] = value;\r\n          --remaining || resolve(values);\r\n        }, reject);\r\n      });\r\n      --remaining || resolve(values);\r\n    });\r\n    if (result.e) reject(result.v);\r\n    return capability.promise;\r\n  },\r\n  // 25.4.4.4 Promise.race(iterable)\r\n  race: function race(iterable) {\r\n    var C = this;\r\n    var capability = newPromiseCapability(C);\r\n    var reject = capability.reject;\r\n    var result = perform(function () {\r\n      forOf(iterable, false, function (promise) {\r\n        C.resolve(promise).then(capability.resolve, reject);\r\n      });\r\n    });\r\n    if (result.e) reject(result.v);\r\n    return capability.promise;\r\n  }\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 142 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (done, value) {\r\n  return { value: value, done: !!done };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 143 */\r\n/***/ (function(module, exports, __nested_webpack_require_258478__) {\r\n\r\n\"use strict\";\r\n\r\nvar addToUnscopables = __nested_webpack_require_258478__(49);\r\nvar step = __nested_webpack_require_258478__(142);\r\nvar Iterators = __nested_webpack_require_258478__(18);\r\nvar toIObject = __nested_webpack_require_258478__(7);\r\n\r\n// 22.1.3.4 Array.prototype.entries()\r\n// 22.1.3.13 Array.prototype.keys()\r\n// 22.1.3.29 Array.prototype.values()\r\n// 22.1.3.30 Array.prototype[@@iterator]()\r\nmodule.exports = __nested_webpack_require_258478__(51)(Array, 'Array', function (iterated, kind) {\r\n  this._t = toIObject(iterated); // target\r\n  this._i = 0;                   // next index\r\n  this._k = kind;                // kind\r\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\r\n}, function () {\r\n  var O = this._t;\r\n  var kind = this._k;\r\n  var index = this._i++;\r\n  if (!O || index >= O.length) {\r\n    this._t = undefined;\r\n    return step(1);\r\n  }\r\n  if (kind == 'keys') return step(0, index);\r\n  if (kind == 'values') return step(0, O[index]);\r\n  return step(0, [index, O[index]]);\r\n}, 'values');\r\n\r\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\r\nIterators.Arguments = Iterators.Array;\r\n\r\naddToUnscopables('keys');\r\naddToUnscopables('values');\r\naddToUnscopables('entries');\r\n\r\n\r\n/***/ }),\r\n/* 144 */\r\n/***/ (function(module, exports, __nested_webpack_require_259703__) {\r\n\r\nvar $iterators = __nested_webpack_require_259703__(143);\r\nvar getKeys = __nested_webpack_require_259703__(13);\r\nvar redefine = __nested_webpack_require_259703__(14);\r\nvar global = __nested_webpack_require_259703__(1);\r\nvar hide = __nested_webpack_require_259703__(10);\r\nvar Iterators = __nested_webpack_require_259703__(18);\r\nvar wks = __nested_webpack_require_259703__(0);\r\nvar ITERATOR = wks('iterator');\r\nvar TO_STRING_TAG = wks('toStringTag');\r\nvar ArrayValues = Iterators.Array;\r\n\r\nvar DOMIterables = {\r\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\r\n  CSSStyleDeclaration: false,\r\n  CSSValueList: false,\r\n  ClientRectList: false,\r\n  DOMRectList: false,\r\n  DOMStringList: false,\r\n  DOMTokenList: true,\r\n  DataTransferItemList: false,\r\n  FileList: false,\r\n  HTMLAllCollection: false,\r\n  HTMLCollection: false,\r\n  HTMLFormElement: false,\r\n  HTMLSelectElement: false,\r\n  MediaList: true, // TODO: Not spec compliant, should be false.\r\n  MimeTypeArray: false,\r\n  NamedNodeMap: false,\r\n  NodeList: true,\r\n  PaintRequestList: false,\r\n  Plugin: false,\r\n  PluginArray: false,\r\n  SVGLengthList: false,\r\n  SVGNumberList: false,\r\n  SVGPathSegList: false,\r\n  SVGPointList: false,\r\n  SVGStringList: false,\r\n  SVGTransformList: false,\r\n  SourceBufferList: false,\r\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\r\n  TextTrackCueList: false,\r\n  TextTrackList: false,\r\n  TouchList: false\r\n};\r\n\r\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\r\n  var NAME = collections[i];\r\n  var explicit = DOMIterables[NAME];\r\n  var Collection = global[NAME];\r\n  var proto = Collection && Collection.prototype;\r\n  var key;\r\n  if (proto) {\r\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\r\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\r\n    Iterators[NAME] = ArrayValues;\r\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\r\n  }\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 145 */\r\n/***/ (function(module, exports, __nested_webpack_require_261660__) {\r\n\r\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\r\nvar has = __nested_webpack_require_261660__(12);\r\nvar toObject = __nested_webpack_require_261660__(50);\r\nvar IE_PROTO = __nested_webpack_require_261660__(33)('IE_PROTO');\r\nvar ObjectProto = Object.prototype;\r\n\r\nmodule.exports = Object.getPrototypeOf || function (O) {\r\n  O = toObject(O);\r\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\r\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\r\n    return O.constructor.prototype;\r\n  } return O instanceof Object ? ObjectProto : null;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 146 */\r\n/***/ (function(module, exports, __nested_webpack_require_262256__) {\r\n\r\n\"use strict\";\r\n\r\nvar create = __nested_webpack_require_262256__(55);\r\nvar descriptor = __nested_webpack_require_262256__(28);\r\nvar setToStringTag = __nested_webpack_require_262256__(25);\r\nvar IteratorPrototype = {};\r\n\r\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\r\n__nested_webpack_require_262256__(10)(IteratorPrototype, __nested_webpack_require_262256__(0)('iterator'), function () { return this; });\r\n\r\nmodule.exports = function (Constructor, NAME, next) {\r\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\r\n  setToStringTag(Constructor, NAME + ' Iterator');\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 147 */\r\n/***/ (function(module, exports, __nested_webpack_require_262876__) {\r\n\r\nvar toInteger = __nested_webpack_require_262876__(34);\r\nvar defined = __nested_webpack_require_262876__(35);\r\n// true  -> String#at\r\n// false -> String#codePointAt\r\nmodule.exports = function (TO_STRING) {\r\n  return function (that, pos) {\r\n    var s = String(defined(that));\r\n    var i = toInteger(pos);\r\n    var l = s.length;\r\n    var a, b;\r\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\r\n    a = s.charCodeAt(i);\r\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\r\n      ? TO_STRING ? s.charAt(i) : a\r\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\r\n  };\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 148 */\r\n/***/ (function(module, exports, __nested_webpack_require_263599__) {\r\n\r\n\"use strict\";\r\n\r\nvar $at = __nested_webpack_require_263599__(147)(true);\r\n\r\n// 21.1.3.27 String.prototype[@@iterator]()\r\n__nested_webpack_require_263599__(51)(String, 'String', function (iterated) {\r\n  this._t = String(iterated); // target\r\n  this._i = 0;                // next index\r\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\r\n}, function () {\r\n  var O = this._t;\r\n  var index = this._i;\r\n  var point;\r\n  if (index >= O.length) return { value: undefined, done: true };\r\n  point = $at(O, index);\r\n  this._i += point.length;\r\n  return { value: point, done: false };\r\n});\r\n\r\n\r\n/***/ }),\r\n/* 149 */\r\n/***/ (function(module, exports, __nested_webpack_require_264233__) {\r\n\r\n__nested_webpack_require_264233__(52);\r\n__nested_webpack_require_264233__(148);\r\n__nested_webpack_require_264233__(144);\r\n__nested_webpack_require_264233__(141);\r\nmodule.exports = __nested_webpack_require_264233__(2).Promise;\r\n\r\n\r\n/***/ }),\r\n/* 150 */\r\n/***/ (function(module, exports, __nested_webpack_require_264475__) {\r\n\r\nvar pIE = __nested_webpack_require_264475__(19);\r\nvar createDesc = __nested_webpack_require_264475__(28);\r\nvar toIObject = __nested_webpack_require_264475__(7);\r\nvar toPrimitive = __nested_webpack_require_264475__(37);\r\nvar has = __nested_webpack_require_264475__(12);\r\nvar IE8_DOM_DEFINE = __nested_webpack_require_264475__(61);\r\nvar gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nexports.f = __nested_webpack_require_264475__(11) ? gOPD : function getOwnPropertyDescriptor(O, P) {\r\n  O = toIObject(O);\r\n  P = toPrimitive(P, true);\r\n  if (IE8_DOM_DEFINE) try {\r\n    return gOPD(O, P);\r\n  } catch (e) { /* empty */ }\r\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 151 */\r\n/***/ (function(module, exports, __nested_webpack_require_265142__) {\r\n\r\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\r\nvar toIObject = __nested_webpack_require_265142__(7);\r\nvar gOPN = __nested_webpack_require_265142__(53).f;\r\nvar toString = {}.toString;\r\n\r\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\r\n  ? Object.getOwnPropertyNames(window) : [];\r\n\r\nvar getWindowNames = function (it) {\r\n  try {\r\n    return gOPN(it);\r\n  } catch (e) {\r\n    return windowNames.slice();\r\n  }\r\n};\r\n\r\nmodule.exports.f = function getOwnPropertyNames(it) {\r\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 152 */\r\n/***/ (function(module, exports, __nested_webpack_require_265846__) {\r\n\r\nvar dP = __nested_webpack_require_265846__(9);\r\nvar anObject = __nested_webpack_require_265846__(6);\r\nvar getKeys = __nested_webpack_require_265846__(13);\r\n\r\nmodule.exports = __nested_webpack_require_265846__(11) ? Object.defineProperties : function defineProperties(O, Properties) {\r\n  anObject(O);\r\n  var keys = getKeys(Properties);\r\n  var length = keys.length;\r\n  var i = 0;\r\n  var P;\r\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\r\n  return O;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 153 */\r\n/***/ (function(module, exports, __nested_webpack_require_266342__) {\r\n\r\n// 7.2.2 IsArray(argument)\r\nvar cof = __nested_webpack_require_266342__(20);\r\nmodule.exports = Array.isArray || function isArray(arg) {\r\n  return cof(arg) == 'Array';\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 154 */\r\n/***/ (function(module, exports, __nested_webpack_require_266585__) {\r\n\r\nvar toInteger = __nested_webpack_require_266585__(34);\r\nvar max = Math.max;\r\nvar min = Math.min;\r\nmodule.exports = function (index, length) {\r\n  index = toInteger(index);\r\n  return index < 0 ? max(index + length, 0) : min(index, length);\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 155 */\r\n/***/ (function(module, exports, __nested_webpack_require_266899__) {\r\n\r\n// all enumerable object keys, includes symbols\r\nvar getKeys = __nested_webpack_require_266899__(13);\r\nvar gOPS = __nested_webpack_require_266899__(31);\r\nvar pIE = __nested_webpack_require_266899__(19);\r\nmodule.exports = function (it) {\r\n  var result = getKeys(it);\r\n  var getSymbols = gOPS.f;\r\n  if (getSymbols) {\r\n    var symbols = getSymbols(it);\r\n    var isEnum = pIE.f;\r\n    var i = 0;\r\n    var key;\r\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\r\n  } return result;\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 156 */\r\n/***/ (function(module, exports, __nested_webpack_require_267463__) {\r\n\r\nvar global = __nested_webpack_require_267463__(1);\r\nvar core = __nested_webpack_require_267463__(2);\r\nvar LIBRARY = __nested_webpack_require_267463__(21);\r\nvar wksExt = __nested_webpack_require_267463__(60);\r\nvar defineProperty = __nested_webpack_require_267463__(9).f;\r\nmodule.exports = function (name) {\r\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\r\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 157 */\r\n/***/ (function(module, exports, __nested_webpack_require_267983__) {\r\n\r\nvar META = __nested_webpack_require_267983__(22)('meta');\r\nvar isObject = __nested_webpack_require_267983__(8);\r\nvar has = __nested_webpack_require_267983__(12);\r\nvar setDesc = __nested_webpack_require_267983__(9).f;\r\nvar id = 0;\r\nvar isExtensible = Object.isExtensible || function () {\r\n  return true;\r\n};\r\nvar FREEZE = !__nested_webpack_require_267983__(23)(function () {\r\n  return isExtensible(Object.preventExtensions({}));\r\n});\r\nvar setMeta = function (it) {\r\n  setDesc(it, META, { value: {\r\n    i: 'O' + ++id, // object ID\r\n    w: {}          // weak collections IDs\r\n  } });\r\n};\r\nvar fastKey = function (it, create) {\r\n  // return primitive with prefix\r\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\r\n  if (!has(it, META)) {\r\n    // can't set metadata to uncaught frozen object\r\n    if (!isExtensible(it)) return 'F';\r\n    // not necessary to add metadata\r\n    if (!create) return 'E';\r\n    // add missing metadata\r\n    setMeta(it);\r\n  // return object ID\r\n  } return it[META].i;\r\n};\r\nvar getWeak = function (it, create) {\r\n  if (!has(it, META)) {\r\n    // can't set metadata to uncaught frozen object\r\n    if (!isExtensible(it)) return true;\r\n    // not necessary to add metadata\r\n    if (!create) return false;\r\n    // add missing metadata\r\n    setMeta(it);\r\n  // return hash weak collections IDs\r\n  } return it[META].w;\r\n};\r\n// add metadata on freeze-family methods calling\r\nvar onFreeze = function (it) {\r\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\r\n  return it;\r\n};\r\nvar meta = module.exports = {\r\n  KEY: META,\r\n  NEED: false,\r\n  fastKey: fastKey,\r\n  getWeak: getWeak,\r\n  onFreeze: onFreeze\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 158 */\r\n/***/ (function(module, exports, __nested_webpack_require_269693__) {\r\n\r\n\"use strict\";\r\n\r\n// ECMAScript 6 symbols shim\r\nvar global = __nested_webpack_require_269693__(1);\r\nvar has = __nested_webpack_require_269693__(12);\r\nvar DESCRIPTORS = __nested_webpack_require_269693__(11);\r\nvar $export = __nested_webpack_require_269693__(15);\r\nvar redefine = __nested_webpack_require_269693__(14);\r\nvar META = __nested_webpack_require_269693__(157).KEY;\r\nvar $fails = __nested_webpack_require_269693__(23);\r\nvar shared = __nested_webpack_require_269693__(36);\r\nvar setToStringTag = __nested_webpack_require_269693__(25);\r\nvar uid = __nested_webpack_require_269693__(22);\r\nvar wks = __nested_webpack_require_269693__(0);\r\nvar wksExt = __nested_webpack_require_269693__(60);\r\nvar wksDefine = __nested_webpack_require_269693__(156);\r\nvar enumKeys = __nested_webpack_require_269693__(155);\r\nvar isArray = __nested_webpack_require_269693__(153);\r\nvar anObject = __nested_webpack_require_269693__(6);\r\nvar isObject = __nested_webpack_require_269693__(8);\r\nvar toIObject = __nested_webpack_require_269693__(7);\r\nvar toPrimitive = __nested_webpack_require_269693__(37);\r\nvar createDesc = __nested_webpack_require_269693__(28);\r\nvar _create = __nested_webpack_require_269693__(55);\r\nvar gOPNExt = __nested_webpack_require_269693__(151);\r\nvar $GOPD = __nested_webpack_require_269693__(150);\r\nvar $DP = __nested_webpack_require_269693__(9);\r\nvar $keys = __nested_webpack_require_269693__(13);\r\nvar gOPD = $GOPD.f;\r\nvar dP = $DP.f;\r\nvar gOPN = gOPNExt.f;\r\nvar $Symbol = global.Symbol;\r\nvar $JSON = global.JSON;\r\nvar _stringify = $JSON && $JSON.stringify;\r\nvar PROTOTYPE = 'prototype';\r\nvar HIDDEN = wks('_hidden');\r\nvar TO_PRIMITIVE = wks('toPrimitive');\r\nvar isEnum = {}.propertyIsEnumerable;\r\nvar SymbolRegistry = shared('symbol-registry');\r\nvar AllSymbols = shared('symbols');\r\nvar OPSymbols = shared('op-symbols');\r\nvar ObjectProto = Object[PROTOTYPE];\r\nvar USE_NATIVE = typeof $Symbol == 'function';\r\nvar QObject = global.QObject;\r\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\r\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\r\n\r\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\r\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\r\n  return _create(dP({}, 'a', {\r\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\r\n  })).a != 7;\r\n}) ? function (it, key, D) {\r\n  var protoDesc = gOPD(ObjectProto, key);\r\n  if (protoDesc) delete ObjectProto[key];\r\n  dP(it, key, D);\r\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\r\n} : dP;\r\n\r\nvar wrap = function (tag) {\r\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\r\n  sym._k = tag;\r\n  return sym;\r\n};\r\n\r\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\r\n  return typeof it == 'symbol';\r\n} : function (it) {\r\n  return it instanceof $Symbol;\r\n};\r\n\r\nvar $defineProperty = function defineProperty(it, key, D) {\r\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\r\n  anObject(it);\r\n  key = toPrimitive(key, true);\r\n  anObject(D);\r\n  if (has(AllSymbols, key)) {\r\n    if (!D.enumerable) {\r\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\r\n      it[HIDDEN][key] = true;\r\n    } else {\r\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\r\n      D = _create(D, { enumerable: createDesc(0, false) });\r\n    } return setSymbolDesc(it, key, D);\r\n  } return dP(it, key, D);\r\n};\r\nvar $defineProperties = function defineProperties(it, P) {\r\n  anObject(it);\r\n  var keys = enumKeys(P = toIObject(P));\r\n  var i = 0;\r\n  var l = keys.length;\r\n  var key;\r\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\r\n  return it;\r\n};\r\nvar $create = function create(it, P) {\r\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\r\n};\r\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\r\n  var E = isEnum.call(this, key = toPrimitive(key, true));\r\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\r\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\r\n};\r\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\r\n  it = toIObject(it);\r\n  key = toPrimitive(key, true);\r\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\r\n  var D = gOPD(it, key);\r\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\r\n  return D;\r\n};\r\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\r\n  var names = gOPN(toIObject(it));\r\n  var result = [];\r\n  var i = 0;\r\n  var key;\r\n  while (names.length > i) {\r\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\r\n  } return result;\r\n};\r\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\r\n  var IS_OP = it === ObjectProto;\r\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\r\n  var result = [];\r\n  var i = 0;\r\n  var key;\r\n  while (names.length > i) {\r\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\r\n  } return result;\r\n};\r\n\r\n// 19.4.1.1 Symbol([description])\r\nif (!USE_NATIVE) {\r\n  $Symbol = function Symbol() {\r\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\r\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\r\n    var $set = function (value) {\r\n      if (this === ObjectProto) $set.call(OPSymbols, value);\r\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\r\n      setSymbolDesc(this, tag, createDesc(1, value));\r\n    };\r\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\r\n    return wrap(tag);\r\n  };\r\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\r\n    return this._k;\r\n  });\r\n\r\n  $GOPD.f = $getOwnPropertyDescriptor;\r\n  $DP.f = $defineProperty;\r\n  __nested_webpack_require_269693__(53).f = gOPNExt.f = $getOwnPropertyNames;\r\n  __nested_webpack_require_269693__(19).f = $propertyIsEnumerable;\r\n  __nested_webpack_require_269693__(31).f = $getOwnPropertySymbols;\r\n\r\n  if (DESCRIPTORS && !__nested_webpack_require_269693__(21)) {\r\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\r\n  }\r\n\r\n  wksExt.f = function (name) {\r\n    return wrap(wks(name));\r\n  };\r\n}\r\n\r\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\r\n\r\nfor (var es6Symbols = (\r\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\r\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\r\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\r\n\r\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\r\n\r\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\r\n  // 19.4.2.1 Symbol.for(key)\r\n  'for': function (key) {\r\n    return has(SymbolRegistry, key += '')\r\n      ? SymbolRegistry[key]\r\n      : SymbolRegistry[key] = $Symbol(key);\r\n  },\r\n  // 19.4.2.5 Symbol.keyFor(sym)\r\n  keyFor: function keyFor(sym) {\r\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\r\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\r\n  },\r\n  useSetter: function () { setter = true; },\r\n  useSimple: function () { setter = false; }\r\n});\r\n\r\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\r\n  // 19.1.2.2 Object.create(O [, Properties])\r\n  create: $create,\r\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\r\n  defineProperty: $defineProperty,\r\n  // 19.1.2.3 Object.defineProperties(O, Properties)\r\n  defineProperties: $defineProperties,\r\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\r\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\r\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\r\n  getOwnPropertyNames: $getOwnPropertyNames,\r\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\r\n  getOwnPropertySymbols: $getOwnPropertySymbols\r\n});\r\n\r\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\r\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\r\n  var S = $Symbol();\r\n  // MS Edge converts symbol values to JSON as {}\r\n  // WebKit converts symbol values to JSON as null\r\n  // V8 throws on boxed symbols\r\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\r\n})), 'JSON', {\r\n  stringify: function stringify(it) {\r\n    var args = [it];\r\n    var i = 1;\r\n    var replacer, $replacer;\r\n    while (arguments.length > i) args.push(arguments[i++]);\r\n    $replacer = replacer = args[1];\r\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\r\n    if (!isArray(replacer)) replacer = function (key, value) {\r\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\r\n      if (!isSymbol(value)) return value;\r\n    };\r\n    args[1] = replacer;\r\n    return _stringify.apply($JSON, args);\r\n  }\r\n});\r\n\r\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\r\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __nested_webpack_require_269693__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\r\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\r\nsetToStringTag($Symbol, 'Symbol');\r\n// 20.2.1.9 Math[@@toStringTag]\r\nsetToStringTag(Math, 'Math', true);\r\n// 24.3.3 JSON[@@toStringTag]\r\nsetToStringTag(global.JSON, 'JSON', true);\r\n\r\n\r\n/***/ }),\r\n/* 159 */\r\n/***/ (function(module, exports, __nested_webpack_require_278874__) {\r\n\r\n__nested_webpack_require_278874__(158);\r\n__nested_webpack_require_278874__(52);\r\nmodule.exports = __nested_webpack_require_278874__(2).Symbol;\r\n\r\n\r\n/***/ }),\r\n/* 160 */\r\n/***/ (function(module, exports, __nested_webpack_require_279061__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.Plugins = exports.Sensors = exports.Sortable = exports.Swappable = exports.Droppable = exports.Draggable = exports.BasePlugin = exports.BaseEvent = undefined;\r\n\r\n__nested_webpack_require_279061__(159);\r\n\r\n__nested_webpack_require_279061__(149);\r\n\r\n__nested_webpack_require_279061__(126);\r\n\r\n__nested_webpack_require_279061__(123);\r\n\r\n__nested_webpack_require_279061__(120);\r\n\r\nvar _AbstractEvent = __nested_webpack_require_279061__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_279061__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _Sensors = __nested_webpack_require_279061__(29);\r\n\r\nvar Sensors = _interopRequireWildcard(_Sensors);\r\n\r\nvar _Plugins = __nested_webpack_require_279061__(98);\r\n\r\nvar Plugins = _interopRequireWildcard(_Plugins);\r\n\r\nvar _Draggable = __nested_webpack_require_279061__(24);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _Droppable = __nested_webpack_require_279061__(70);\r\n\r\nvar _Droppable2 = _interopRequireDefault(_Droppable);\r\n\r\nvar _Swappable = __nested_webpack_require_279061__(67);\r\n\r\nvar _Swappable2 = _interopRequireDefault(_Swappable);\r\n\r\nvar _Sortable = __nested_webpack_require_279061__(64);\r\n\r\nvar _Sortable2 = _interopRequireDefault(_Sortable);\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.BaseEvent = _AbstractEvent2.default;\r\nexports.BasePlugin = _AbstractPlugin2.default;\r\nexports.Draggable = _Draggable2.default;\r\nexports.Droppable = _Droppable2.default;\r\nexports.Swappable = _Swappable2.default;\r\nexports.Sortable = _Sortable2.default;\r\nexports.Sensors = Sensors;\r\nexports.Plugins = Plugins;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/draggable.bundle.legacy.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/draggable.js":
/*!**********************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/draggable.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_571__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_571__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_571__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_571__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_571__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_571__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_571__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_571__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_571__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_571__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_571__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_571__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_571__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_571__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_571__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_571__(__nested_webpack_require_571__.s = 44);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4119__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_4119__(18);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_4586__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_4586__(21);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sensor2.default;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_4985__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_4985__(29);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_4985__(27);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_4985__(25);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_4985__(23);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_6109__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_6109__(38);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6540__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_6540__(42);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6967__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_6967__(1);\r\n\r\nObject.defineProperty(exports, 'Sensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sensor).default;\r\n  }\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_6967__(20);\r\n\r\nObject.defineProperty(exports, 'MouseSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_MouseSensor).default;\r\n  }\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_6967__(17);\r\n\r\nObject.defineProperty(exports, 'TouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_TouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_6967__(15);\r\n\r\nObject.defineProperty(exports, 'DragSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_DragSensor).default;\r\n  }\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_6967__(13);\r\n\r\nObject.defineProperty(exports, 'ForceTouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ForceTouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_6967__(0);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_8573__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Announcement = __nested_webpack_require_8573__(40);\r\n\r\nObject.defineProperty(exports, 'Announcement', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Announcement).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultAnnouncementOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Announcement.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_8573__(37);\r\n\r\nObject.defineProperty(exports, 'Focusable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Focusable).default;\r\n  }\r\n});\r\n\r\nvar _Mirror = __nested_webpack_require_8573__(35);\r\n\r\nObject.defineProperty(exports, 'Mirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Mirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Mirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Scrollable = __nested_webpack_require_8573__(31);\r\n\r\nObject.defineProperty(exports, 'Scrollable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Scrollable).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultScrollableOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Scrollable.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_10116__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_10116__(41);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_10592__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_10592__(43);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods\r\n * @class Emitter\r\n * @module Emitter\r\n */\r\nclass Emitter {\r\n  constructor() {\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks by event name\r\n   * @param {String} type\r\n   * @param {...Function} callbacks\r\n   */\r\n  on(type, ...callbacks) {\r\n    if (!this.callbacks[type]) {\r\n      this.callbacks[type] = [];\r\n    }\r\n\r\n    this.callbacks[type].push(...callbacks);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters callbacks by event name\r\n   * @param {String} type\r\n   * @param {Function} callback\r\n   */\r\n  off(type, callback) {\r\n    if (!this.callbacks[type]) {\r\n      return null;\r\n    }\r\n\r\n    const copy = this.callbacks[type].slice(0);\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n      if (callback === copy[i]) {\r\n        this.callbacks[type].splice(i, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers event callbacks by event object\r\n   * @param {AbstractEvent} event\r\n   */\r\n  trigger(event) {\r\n    if (!this.callbacks[event.type]) {\r\n      return null;\r\n    }\r\n\r\n    const callbacks = [...this.callbacks[event.type]];\r\n    const caughtErrors = [];\r\n\r\n    for (let i = callbacks.length - 1; i >= 0; i--) {\r\n      const callback = callbacks[i];\r\n\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        caughtErrors.push(error);\r\n      }\r\n    }\r\n\r\n    if (caughtErrors.length) {\r\n      /* eslint-disable no-console */\r\n      console.error(`Draggable caught errors while triggering '${event.type}'`, caughtErrors);\r\n      /* eslint-disable no-console */\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\nexports.default = Emitter;\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __nested_webpack_require_12917__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Emitter = __nested_webpack_require_12917__(9);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Emitter2.default;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_13320__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_13320__(2);\r\n\r\nvar _Plugins = __nested_webpack_require_13320__(6);\r\n\r\nvar _Emitter = __nested_webpack_require_13320__(10);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nvar _Sensors = __nested_webpack_require_13320__(5);\r\n\r\nvar _DraggableEvent = __nested_webpack_require_13320__(7);\r\n\r\nvar _DragEvent = __nested_webpack_require_13320__(8);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragPressure = Symbol('onDragPressure');\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['drag:start']\r\n * @const {Function} defaultAnnouncements['drag:stop']\r\n */\r\nconst defaultAnnouncements = {\r\n  'drag:start': event => `Picked up ${event.source.textContent.trim() || event.source.id || 'draggable element'}`,\r\n  'drag:stop': event => `Released ${event.source.textContent.trim() || event.source.id || 'draggable element'}`\r\n};\r\n\r\nconst defaultClasses = {\r\n  'container:dragging': 'draggable-container--is-dragging',\r\n  'source:dragging': 'draggable-source--is-dragging',\r\n  'source:placed': 'draggable-source--placed',\r\n  'container:placed': 'draggable-container--placed',\r\n  'body:dragging': 'draggable--is-dragging',\r\n  'draggable:over': 'draggable--over',\r\n  'container:over': 'draggable-container--over',\r\n  'source:original': 'draggable--original',\r\n  mirror: 'draggable-mirror'\r\n};\r\n\r\nconst defaultOptions = exports.defaultOptions = {\r\n  draggable: '.draggable-source',\r\n  handle: null,\r\n  delay: {},\r\n  distance: 0,\r\n  placedTimeout: 800,\r\n  plugins: [],\r\n  sensors: [],\r\n  exclude: {\r\n    plugins: [],\r\n    sensors: []\r\n  }\r\n};\r\n\r\n/**\r\n * This is the core draggable library that does the heavy lifting\r\n * @class Draggable\r\n * @module Draggable\r\n */\r\nclass Draggable {\r\n\r\n  /**\r\n   * Draggable constructor.\r\n   * @constructs Draggable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers\r\n   * @param {Object} options - Options for draggable\r\n   */\r\n\r\n  /**\r\n   * Default plugins draggable uses\r\n   * @static\r\n   * @property {Object} Plugins\r\n   * @property {Announcement} Plugins.Announcement\r\n   * @property {Focusable} Plugins.Focusable\r\n   * @property {Mirror} Plugins.Mirror\r\n   * @property {Scrollable} Plugins.Scrollable\r\n   * @type {Object}\r\n   */\r\n  constructor(containers = [document.body], options = {}) {\r\n    /**\r\n     * Draggable containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    if (containers instanceof NodeList || containers instanceof Array) {\r\n      this.containers = [...containers];\r\n    } else if (containers instanceof HTMLElement) {\r\n      this.containers = [containers];\r\n    } else {\r\n      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');\r\n    }\r\n\r\n    this.options = _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {}),\r\n      exclude: {\r\n        plugins: options.exclude && options.exclude.plugins || [],\r\n        sensors: options.exclude && options.exclude.sensors || []\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Draggables event emitter\r\n     * @property emitter\r\n     * @type {Emitter}\r\n     */\r\n    this.emitter = new _Emitter2.default();\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Active plugins\r\n     * @property plugins\r\n     * @type {Plugin[]}\r\n     */\r\n    this.plugins = [];\r\n\r\n    /**\r\n     * Active sensors\r\n     * @property sensors\r\n     * @type {Sensor[]}\r\n     */\r\n    this.sensors = [];\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragPressure] = this[onDragPressure].bind(this);\r\n\r\n    document.addEventListener('drag:start', this[onDragStart], true);\r\n    document.addEventListener('drag:move', this[onDragMove], true);\r\n    document.addEventListener('drag:stop', this[onDragStop], true);\r\n    document.addEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const defaultPlugins = Object.values(Draggable.Plugins).filter(Plugin => !this.options.exclude.plugins.includes(Plugin));\r\n    const defaultSensors = Object.values(Draggable.Sensors).filter(sensor => !this.options.exclude.sensors.includes(sensor));\r\n\r\n    this.addPlugin(...[...defaultPlugins, ...this.options.plugins]);\r\n    this.addSensor(...[...defaultSensors, ...this.options.sensors]);\r\n\r\n    const draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.on('mirror:created', ({ mirror }) => this.mirror = mirror);\r\n    this.on('mirror:destroy', () => this.mirror = null);\r\n\r\n    this.trigger(draggableInitializedEvent);\r\n  }\r\n\r\n  /**\r\n   * Destroys Draggable instance. This removes all internal event listeners and\r\n   * deactivates sensors and plugins\r\n   */\r\n\r\n\r\n  /**\r\n   * Default sensors draggable uses\r\n   * @static\r\n   * @property {Object} Sensors\r\n   * @property {MouseSensor} Sensors.MouseSensor\r\n   * @property {TouchSensor} Sensors.TouchSensor\r\n   * @type {Object}\r\n   */\r\n  destroy() {\r\n    document.removeEventListener('drag:start', this[onDragStart], true);\r\n    document.removeEventListener('drag:move', this[onDragMove], true);\r\n    document.removeEventListener('drag:stop', this[onDragStop], true);\r\n    document.removeEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.trigger(draggableDestroyEvent);\r\n\r\n    this.removePlugin(...this.plugins.map(plugin => plugin.constructor));\r\n    this.removeSensor(...this.sensors.map(sensor => sensor.constructor));\r\n  }\r\n\r\n  /**\r\n   * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)\r\n   */\r\n  addPlugin(...plugins) {\r\n    const activePlugins = plugins.map(Plugin => new Plugin(this));\r\n\r\n    activePlugins.forEach(plugin => plugin.attach());\r\n    this.plugins = [...this.plugins, ...activePlugins];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes plugins that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)\r\n   */\r\n  removePlugin(...plugins) {\r\n    const removedPlugins = this.plugins.filter(plugin => plugins.includes(plugin.constructor));\r\n\r\n    removedPlugins.forEach(plugin => plugin.detach());\r\n    this.plugins = this.plugins.filter(plugin => !plugins.includes(plugin.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addSensor(ForceTouchSensor, CustomSensor)\r\n   */\r\n  addSensor(...sensors) {\r\n    const activeSensors = sensors.map(Sensor => new Sensor(this.containers, this.options));\r\n\r\n    activeSensors.forEach(sensor => sensor.attach());\r\n    this.sensors = [...this.sensors, ...activeSensors];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes sensors that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeSensor(TouchSensor, DragSensor)\r\n   */\r\n  removeSensor(...sensors) {\r\n    const removedSensors = this.sensors.filter(sensor => sensors.includes(sensor.constructor));\r\n\r\n    removedSensors.forEach(sensor => sensor.detach());\r\n    this.sensors = this.sensors.filter(sensor => !sensors.includes(sensor.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n    this.sensors.forEach(sensor => sensor.addContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes container from this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n    this.sensors.forEach(sensor => sensor.removeContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds listener for draggable events\r\n   * @param {String} type - Event name\r\n   * @param {...Function} callbacks - Event callbacks\r\n   * @return {Draggable}\r\n   * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());\r\n   */\r\n  on(type, ...callbacks) {\r\n    this.emitter.on(type, ...callbacks);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes listener from draggable\r\n   * @param {String} type - Event name\r\n   * @param {Function} callback - Event callback\r\n   * @return {Draggable}\r\n   * @example draggable.off('drag:start', handlerFunction);\r\n   */\r\n  off(type, callback) {\r\n    this.emitter.off(type, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers draggable event\r\n   * @param {AbstractEvent} event - Event instance\r\n   * @return {Draggable}\r\n   * @example draggable.trigger(event);\r\n   */\r\n  trigger(event) {\r\n    this.emitter.trigger(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns class name for class identifier\r\n   * @param {String} name - Name of class identifier\r\n   * @return {String|null}\r\n   */\r\n  getClassNameFor(name) {\r\n    return this.getClassNamesFor(name)[0];\r\n  }\r\n\r\n  /**\r\n   * Returns class names for class identifier\r\n   * @return {String[]}\r\n   */\r\n  getClassNamesFor(name) {\r\n    const classNames = this.options.classes[name];\r\n\r\n    if (classNames instanceof Array) {\r\n      return classNames;\r\n    } else if (typeof classNames === 'string' || classNames instanceof String) {\r\n      return [classNames];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if this draggable instance is currently dragging\r\n   * @return {Boolean}\r\n   */\r\n  isDragging() {\r\n    return Boolean(this.dragging);\r\n  }\r\n\r\n  /**\r\n   * Returns all draggable elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElements() {\r\n    return this.containers.reduce((current, container) => {\r\n      return [...current, ...this.getDraggableElementsForContainer(container)];\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Returns draggable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElementsForContainer(container) {\r\n    const allDraggableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allDraggableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStart](event) {\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { target, container } = sensorEvent;\r\n\r\n    if (!this.containers.includes(container)) {\r\n      return;\r\n    }\r\n\r\n    if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    // Find draggable source element\r\n    this.originalSource = (0, _utils.closest)(target, this.options.draggable);\r\n    this.sourceContainer = container;\r\n\r\n    if (!this.originalSource) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    if (this.lastPlacedSource && this.lastPlacedContainer) {\r\n      clearTimeout(this.placedTimeoutID);\r\n      this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n    }\r\n\r\n    this.source = this.originalSource.cloneNode(true);\r\n    this.originalSource.parentNode.insertBefore(this.source, this.originalSource);\r\n    this.originalSource.style.display = 'none';\r\n\r\n    const dragEvent = new _DragEvent.DragStartEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragEvent);\r\n\r\n    this.dragging = !dragEvent.canceled();\r\n\r\n    if (dragEvent.canceled()) {\r\n      this.source.parentNode.removeChild(this.source);\r\n      this.originalSource.style.display = null;\r\n      return;\r\n    }\r\n\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:original'));\r\n    this.source.classList.add(...this.getClassNamesFor('source:dragging'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.add(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, 'none');\r\n\r\n    requestAnimationFrame(() => {\r\n      const oldSensorEvent = getSensorEvent(event);\r\n      const newSensorEvent = oldSensorEvent.clone({ target: this.source });\r\n\r\n      this[onDragMove](_extends({}, event, {\r\n        detail: newSensorEvent\r\n      }));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { container } = sensorEvent;\r\n    let target = sensorEvent.target;\r\n\r\n    const dragMoveEvent = new _DragEvent.DragMoveEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragMoveEvent);\r\n\r\n    if (dragMoveEvent.canceled()) {\r\n      sensorEvent.cancel();\r\n    }\r\n\r\n    target = (0, _utils.closest)(target, this.options.draggable);\r\n    const withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);\r\n    const overContainer = sensorEvent.overContainer || withinCorrectContainer;\r\n    const isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;\r\n    const isLeavingDraggable = this.currentOver && target !== this.currentOver;\r\n    const isOverContainer = overContainer && this.currentOverContainer !== overContainer;\r\n    const isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;\r\n\r\n    if (isLeavingDraggable) {\r\n      const dragOutEvent = new _DragEvent.DragOutEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        over: this.currentOver,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n      this.currentOver = null;\r\n\r\n      this.trigger(dragOutEvent);\r\n    }\r\n\r\n    if (isLeavingContainer) {\r\n      const dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n      this.currentOverContainer = null;\r\n\r\n      this.trigger(dragOutContainerEvent);\r\n    }\r\n\r\n    if (isOverContainer) {\r\n      overContainer.classList.add(...this.getClassNamesFor('container:over'));\r\n\r\n      const dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer\r\n      });\r\n\r\n      this.currentOverContainer = overContainer;\r\n\r\n      this.trigger(dragOverContainerEvent);\r\n    }\r\n\r\n    if (isOverDraggable) {\r\n      target.classList.add(...this.getClassNamesFor('draggable:over'));\r\n\r\n      const dragOverEvent = new _DragEvent.DragOverEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer,\r\n        over: target\r\n      });\r\n\r\n      this.currentOver = target;\r\n\r\n      this.trigger(dragOverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStop](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.dragging = false;\r\n\r\n    const dragStopEvent = new _DragEvent.DragStopEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStopEvent);\r\n\r\n    this.source.parentNode.insertBefore(this.originalSource, this.source);\r\n    this.source.parentNode.removeChild(this.source);\r\n    this.originalSource.style.display = '';\r\n\r\n    this.source.classList.remove(...this.getClassNamesFor('source:dragging'));\r\n    this.originalSource.classList.remove(...this.getClassNamesFor('source:original'));\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:placed'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:placed'));\r\n    this.sourceContainer.classList.remove(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.remove(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, '');\r\n\r\n    if (this.currentOver) {\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n    }\r\n\r\n    if (this.currentOverContainer) {\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n    }\r\n\r\n    this.lastPlacedSource = this.originalSource;\r\n    this.lastPlacedContainer = this.sourceContainer;\r\n\r\n    this.placedTimeoutID = setTimeout(() => {\r\n      if (this.lastPlacedSource) {\r\n        this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      }\r\n\r\n      if (this.lastPlacedContainer) {\r\n        this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n      }\r\n\r\n      this.lastPlacedSource = null;\r\n      this.lastPlacedContainer = null;\r\n    }, this.options.placedTimeout);\r\n\r\n    const dragStoppedEvent = new _DragEvent.DragStoppedEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStoppedEvent);\r\n\r\n    this.source = null;\r\n    this.originalSource = null;\r\n    this.currentOverContainer = null;\r\n    this.currentOver = null;\r\n    this.sourceContainer = null;\r\n  }\r\n\r\n  /**\r\n   * Drag pressure handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragPressure](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);\r\n\r\n    const dragPressureEvent = new _DragEvent.DragPressureEvent({\r\n      sensorEvent,\r\n      source,\r\n      pressure: sensorEvent.pressure\r\n    });\r\n\r\n    this.trigger(dragPressureEvent);\r\n  }\r\n}\r\n\r\nexports.default = Draggable;\r\nDraggable.Plugins = { Announcement: _Plugins.Announcement, Focusable: _Plugins.Focusable, Mirror: _Plugins.Mirror, Scrollable: _Plugins.Scrollable };\r\nDraggable.Sensors = { MouseSensor: _Sensors.MouseSensor, TouchSensor: _Sensors.TouchSensor };\r\nfunction getSensorEvent(event) {\r\n  return event.detail;\r\n}\r\n\r\nfunction applyUserSelect(element, value) {\r\n  element.style.webkitUserSelect = value;\r\n  element.style.mozUserSelect = value;\r\n  element.style.msUserSelect = value;\r\n  element.style.oUserSelect = value;\r\n  element.style.userSelect = value;\r\n}\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_34453__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_34453__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_34453__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseForceWillBegin = Symbol('onMouseForceWillBegin');\r\nconst onMouseForceDown = Symbol('onMouseForceDown');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseForceChange = Symbol('onMouseForceChange');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');\r\n\r\n/**\r\n * This sensor picks up native force touch events and dictates drag operations\r\n * @class ForceTouchSensor\r\n * @module ForceTouchSensor\r\n * @extends Sensor\r\n */\r\nclass ForceTouchSensor extends _Sensor2.default {\r\n  /**\r\n   * ForceTouchSensor constructor.\r\n   * @constructs ForceTouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property mightDrag\r\n     * @type {Boolean}\r\n     */\r\n    this.mightDrag = false;\r\n\r\n    this[onMouseForceWillBegin] = this[onMouseForceWillBegin].bind(this);\r\n    this[onMouseForceDown] = this[onMouseForceDown].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseForceChange] = this[onMouseForceChange].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    for (const container of this.containers) {\r\n      container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.addEventListener('mousedown', this[onMouseDown], true);\r\n      container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.addEventListener('mousemove', this[onMouseMove]);\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    for (const container of this.containers) {\r\n      container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.removeEventListener('mousedown', this[onMouseDown], true);\r\n      container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Mouse force will begin handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseForceWillBegin](event) {\r\n    event.preventDefault();\r\n    this.mightDrag = true;\r\n  }\r\n\r\n  /**\r\n   * Mouse force down handler\r\n   * @private\r\n   * @param {Event} event - Mouse force down event\r\n   */\r\n  [onMouseForceDown](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = event.currentTarget;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStartEvent);\r\n\r\n    this.currentContainer = container;\r\n    this.dragging = !dragStartEvent.canceled();\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target: null,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (!this.mightDrag) {\r\n      return;\r\n    }\r\n\r\n    // Need workaround for real click\r\n    // Cancel potential drag events\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force change event\r\n   */\r\n  [onMouseForceChange](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n    const container = event.currentTarget;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragPressureEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force global change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force global change event\r\n   */\r\n  [onMouseForceGlobalChange](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragPressureEvent);\r\n  }\r\n}\r\nexports.default = ForceTouchSensor;\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_41193__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_41193__(12);\r\n\r\nvar _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ForceTouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_41633__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_41633__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_41633__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_41633__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragEnd = Symbol('onDragEnd');\r\nconst onDrop = Symbol('onDrop');\r\nconst reset = Symbol('reset');\r\n\r\n/**\r\n * This sensor picks up native browser drag events and dictates drag operations\r\n * @class DragSensor\r\n * @module DragSensor\r\n * @extends Sensor\r\n */\r\nclass DragSensor extends _Sensor2.default {\r\n  /**\r\n   * DragSensor constructor.\r\n   * @constructs DragSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up setting the draggable attribute, unless canceled\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property draggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.draggableElement = null;\r\n\r\n    /**\r\n     * Native draggable element could be links or images, their draggable state will be disabled during drag operation\r\n     * @property nativeDraggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.nativeDraggableElement = null;\r\n\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragEnd] = this[onDragEnd].bind(this);\r\n    this[onDrop] = this[onDrop].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    // Need for firefox. \"text\" key is needed for IE\r\n    event.dataTransfer.setData('text', '');\r\n    event.dataTransfer.effectAllowed = this.options.type;\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    this.currentContainer = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    // Workaround\r\n    setTimeout(() => {\r\n      this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n      if (dragStartEvent.canceled()) {\r\n        this.dragging = false;\r\n      } else {\r\n        this.dragging = true;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {Event} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragMoveEvent);\r\n\r\n    if (!dragMoveEvent.canceled()) {\r\n      event.preventDefault();\r\n      event.dataTransfer.dropEffect = this.options.type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag end handler\r\n   * @private\r\n   * @param {Event} event - Drag end event\r\n   */\r\n  [onDragEnd](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStopEvent);\r\n\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Drop handler\r\n   * @private\r\n   * @param {Event} event - Drop event\r\n   */\r\n  [onDrop](event) {\r\n    // eslint-disable-line class-methods-use-this\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071\r\n    if (event.target && (event.target.form || event.target.contenteditable)) {\r\n      return;\r\n    }\r\n\r\n    const nativeDraggableElement = (0, _utils.closest)(event.target, element => element.draggable);\r\n\r\n    if (nativeDraggableElement) {\r\n      nativeDraggableElement.draggable = false;\r\n      this.nativeDraggableElement = nativeDraggableElement;\r\n    }\r\n\r\n    document.addEventListener('mouseup', this[onMouseUp], true);\r\n    document.addEventListener('dragstart', this[onDragStart], false);\r\n    document.addEventListener('dragover', this[onDragOver], false);\r\n    document.addEventListener('dragend', this[onDragEnd], false);\r\n    document.addEventListener('drop', this[onDrop], false);\r\n\r\n    const target = (0, _utils.closest)(event.target, this.options.draggable);\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.startEvent = event;\r\n\r\n    this.mouseDownTimeout = setTimeout(() => {\r\n      target.draggable = true;\r\n      this.draggableElement = target;\r\n    }, this.delay.drag);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp]() {\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [reset]() {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n    document.removeEventListener('dragstart', this[onDragStart], false);\r\n    document.removeEventListener('dragover', this[onDragOver], false);\r\n    document.removeEventListener('dragend', this[onDragEnd], false);\r\n    document.removeEventListener('drop', this[onDrop], false);\r\n\r\n    if (this.nativeDraggableElement) {\r\n      this.nativeDraggableElement.draggable = true;\r\n      this.nativeDraggableElement = null;\r\n    }\r\n\r\n    if (this.draggableElement) {\r\n      this.draggableElement.draggable = false;\r\n      this.draggableElement = null;\r\n    }\r\n  }\r\n}\r\nexports.default = DragSensor;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_48906__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_48906__(14);\r\n\r\nvar _DragSensor2 = _interopRequireDefault(_DragSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _DragSensor2.default;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_49322__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_49322__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_49322__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_49322__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onTouchStart = Symbol('onTouchStart');\r\nconst onTouchEnd = Symbol('onTouchEnd');\r\nconst onTouchMove = Symbol('onTouchMove');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * Prevents scrolling when set to true\r\n * @var {Boolean} preventScrolling\r\n */\r\nlet preventScrolling = false;\r\n\r\n// WebKit requires cancelable `touchmove` events to be added as early as possible\r\nwindow.addEventListener('touchmove', event => {\r\n  if (!preventScrolling) {\r\n    return;\r\n  }\r\n\r\n  // Prevent scrolling\r\n  event.preventDefault();\r\n}, { passive: false });\r\n\r\n/**\r\n * This sensor picks up native browser touch events and dictates drag operations\r\n * @class TouchSensor\r\n * @module TouchSensor\r\n * @extends Sensor\r\n */\r\nclass TouchSensor extends _Sensor2.default {\r\n  /**\r\n   * TouchSensor constructor.\r\n   * @constructs TouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Closest scrollable container so accidental scroll can cancel long touch\r\n     * @property currentScrollableParent\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentScrollableParent = null;\r\n\r\n    /**\r\n     * TimeoutID for managing delay\r\n     * @property tapTimeout\r\n     * @type {Number}\r\n     */\r\n    this.tapTimeout = null;\r\n\r\n    /**\r\n     * touchMoved indicates if touch has moved during tapTimeout\r\n     * @property touchMoved\r\n     * @type {Boolean}\r\n     */\r\n    this.touchMoved = false;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onTouchStart] = this[onTouchStart].bind(this);\r\n    this[onTouchEnd] = this[onTouchEnd].bind(this);\r\n    this[onTouchMove] = this[onTouchMove].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Touch start handler\r\n   * @private\r\n   * @param {Event} event - Touch start event\r\n   */\r\n  [onTouchStart](event) {\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n    const { distance = 0 } = this.options;\r\n    const { delay } = this;\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onTouchStartAt = Date.now();\r\n    this.startEvent = event;\r\n    this.currentContainer = container;\r\n\r\n    document.addEventListener('touchend', this[onTouchEnd]);\r\n    document.addEventListener('touchcancel', this[onTouchEnd]);\r\n    document.addEventListener('touchmove', this[onDistanceChange]);\r\n    container.addEventListener('contextmenu', onContextMenu);\r\n\r\n    if (distance) {\r\n      preventScrolling = true;\r\n    }\r\n\r\n    this.tapTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ touches: [{ pageX: this.pageX, pageY: this.pageY }] });\r\n    }, delay.touch);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n    const touch = (0, _utils.touchCoords)(startEvent);\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: touch.pageX,\r\n      clientY: touch.pageY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('touchmove', this[onTouchMove]);\r\n    }\r\n    preventScrolling = this.dragging;\r\n  }\r\n\r\n  /**\r\n   * Touch move handler prior to drag start.\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n    const start = (0, _utils.touchCoords)(startEvent);\r\n    const current = (0, _utils.touchCoords)(event);\r\n    const timeElapsed = Date.now() - this.onTouchStartAt;\r\n    const distanceTravelled = (0, _utils.distance)(start.pageX, start.pageY, current.pageX, current.pageY);\r\n\r\n    Object.assign(this, current);\r\n\r\n    clearTimeout(this.tapTimeout);\r\n\r\n    if (timeElapsed < delay.touch) {\r\n      // moved during delay\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler while dragging\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onTouchMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Touch end handler\r\n   * @private\r\n   * @param {Event} event - Touch end event\r\n   */\r\n  [onTouchEnd](event) {\r\n    clearTimeout(this.tapTimeout);\r\n    preventScrolling = false;\r\n\r\n    document.removeEventListener('touchend', this[onTouchEnd]);\r\n    document.removeEventListener('touchcancel', this[onTouchEnd]);\r\n    document.removeEventListener('touchmove', this[onDistanceChange]);\r\n\r\n    if (this.currentContainer) {\r\n      this.currentContainer.removeEventListener('contextmenu', onContextMenu);\r\n    }\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('touchmove', this[onTouchMove]);\r\n\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    event.preventDefault();\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n}\r\n\r\nexports.default = TouchSensor;\r\nfunction onContextMenu(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_56802__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_56802__(16);\r\n\r\nvar _TouchSensor2 = _interopRequireDefault(_TouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _TouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_57222__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_57222__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sensor event\r\n * @class SensorEvent\r\n * @module SensorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SensorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Original browser event that triggered a sensor\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    return this.data.originalEvent;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientX for both touch and mouse events\r\n   * @property clientX\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientX() {\r\n    return this.data.clientX;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientY for both touch and mouse events\r\n   * @property clientY\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientY() {\r\n    return this.data.clientY;\r\n  }\r\n\r\n  /**\r\n   * Normalized target for both touch and mouse events\r\n   * Returns the element that is behind cursor or touch pointer\r\n   * @property target\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get target() {\r\n    return this.data.target;\r\n  }\r\n\r\n  /**\r\n   * Container that initiated the sensor\r\n   * @property container\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get container() {\r\n    return this.data.container;\r\n  }\r\n\r\n  /**\r\n   * Trackpad pressure\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.SensorEvent = SensorEvent; /**\r\n                                    * Drag start sensor event\r\n                                    * @class DragStartSensorEvent\r\n                                    * @module DragStartSensorEvent\r\n                                    * @extends SensorEvent\r\n                                    */\r\n\r\nclass DragStartSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStartSensorEvent = DragStartSensorEvent; /**\r\n                                                      * Drag move sensor event\r\n                                                      * @class DragMoveSensorEvent\r\n                                                      * @module DragMoveSensorEvent\r\n                                                      * @extends SensorEvent\r\n                                                      */\r\n\r\nDragStartSensorEvent.type = 'drag:start';\r\nclass DragMoveSensorEvent extends SensorEvent {}\r\n\r\nexports.DragMoveSensorEvent = DragMoveSensorEvent; /**\r\n                                                    * Drag stop sensor event\r\n                                                    * @class DragStopSensorEvent\r\n                                                    * @module DragStopSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragMoveSensorEvent.type = 'drag:move';\r\nclass DragStopSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStopSensorEvent = DragStopSensorEvent; /**\r\n                                                    * Drag pressure sensor event\r\n                                                    * @class DragPressureSensorEvent\r\n                                                    * @module DragPressureSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragStopSensorEvent.type = 'drag:stop';\r\nclass DragPressureSensorEvent extends SensorEvent {}\r\nexports.DragPressureSensorEvent = DragPressureSensorEvent;\r\nDragPressureSensorEvent.type = 'drag:pressure';\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_61213__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_61213__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_61213__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_61213__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * This sensor picks up native browser mouse events and dictates drag operations\r\n * @class MouseSensor\r\n * @module MouseSensor\r\n * @extends Sensor\r\n */\r\nclass MouseSensor extends _Sensor2.default {\r\n  /**\r\n   * MouseSensor constructor.\r\n   * @constructs MouseSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up triggering the drag start operation\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onContextMenuWhileDragging] = this[onContextMenuWhileDragging].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (event.button !== 0 || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n\r\n    const { delay } = this;\r\n    const { pageX, pageY } = event;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onMouseDownAt = Date.now();\r\n    this.startEvent = event;\r\n\r\n    this.currentContainer = container;\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n    document.addEventListener('dragstart', preventNativeDragStart);\r\n    document.addEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    this.mouseDownTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ pageX: this.pageX, pageY: this.pageY });\r\n    }, delay.mouse);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n      document.addEventListener('mousemove', this[onMouseMove]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect change in distance, starting drag when both\r\n   * delay and distance requirements are met\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { pageX, pageY } = event;\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const timeElapsed = Date.now() - this.onMouseDownAt;\r\n    const distanceTravelled = (0, _utils.distance)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;\r\n\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (timeElapsed < delay.mouse) {\r\n      // moved during delay\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n    document.removeEventListener('dragstart', preventNativeDragStart);\r\n    document.removeEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n\r\n  /**\r\n   * Context menu handler\r\n   * @private\r\n   * @param {Event} event - Context menu event\r\n   */\r\n  [onContextMenuWhileDragging](event) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nexports.default = MouseSensor;\r\nfunction preventNativeDragStart(event) {\r\n  event.preventDefault();\r\n}\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __nested_webpack_require_68085__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_68085__(19);\r\n\r\nvar _MouseSensor2 = _interopRequireDefault(_MouseSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _MouseSensor2.default;\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst defaultDealy = {\r\n  mouse: 0,\r\n  drag: 0,\r\n  touch: 100\r\n};\r\n\r\n/**\r\n * Base sensor class. Extend from this class to create a new or custom sensor\r\n * @class Sensor\r\n * @module Sensor\r\n */\r\nclass Sensor {\r\n  /**\r\n   * Sensor constructor.\r\n   * @constructs Sensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    /**\r\n     * Current containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.containers = [...containers];\r\n\r\n    /**\r\n     * Current options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, options);\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Current container\r\n     * @property currentContainer\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentContainer = null;\r\n\r\n    /**\r\n     * The event of the initial sensor down\r\n     * @property startEvent\r\n     * @type {Event}\r\n     */\r\n    this.startEvent = null;\r\n\r\n    /**\r\n     * The delay of each sensor\r\n     * @property delay\r\n     * @type {Object}\r\n     */\r\n    this.delay = calcDelay(options.delay);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  attach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  detach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to this sensor\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n  }\r\n\r\n  /**\r\n   * Removes container from this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from this sensor\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n  }\r\n\r\n  /**\r\n   * Triggers event on target element\r\n   * @param {HTMLElement} element - Element to trigger event on\r\n   * @param {SensorEvent} sensorEvent - Sensor event to trigger\r\n   */\r\n  trigger(element, sensorEvent) {\r\n    const event = document.createEvent('Event');\r\n    event.detail = sensorEvent;\r\n    event.initEvent(sensorEvent.type, true, true);\r\n    element.dispatchEvent(event);\r\n    this.lastEvent = sensorEvent;\r\n\r\n    return sensorEvent;\r\n  }\r\n}\r\n\r\nexports.default = Sensor; /**\r\n                           * Calculate the delay of each sensor through the delay in the options\r\n                           * @param {undefined|Number|Object} optionsDelay - the delay in the options\r\n                           * @return {Object}\r\n                           */\r\n\r\nfunction calcDelay(optionsDelay) {\r\n  const delay = {};\r\n\r\n  if (optionsDelay === undefined) {\r\n    return _extends({}, defaultDealy);\r\n  }\r\n\r\n  if (typeof optionsDelay === 'number') {\r\n    for (const key in defaultDealy) {\r\n      if (defaultDealy.hasOwnProperty(key)) {\r\n        delay[key] = optionsDelay;\r\n      }\r\n    }\r\n    return delay;\r\n  }\r\n\r\n  for (const key in defaultDealy) {\r\n    if (defaultDealy.hasOwnProperty(key)) {\r\n      if (optionsDelay[key] === undefined) {\r\n        delay[key] = defaultDealy[key];\r\n      } else {\r\n        delay[key] = optionsDelay[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return delay;\r\n}\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __nested_webpack_require_73042__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_73042__(22);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_74063__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_74063__(24);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_74822__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_74822__(26);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __nested_webpack_require_77252__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_77252__(28);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_77656__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_77656__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_77656__(2);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst scroll = exports.scroll = Symbol('scroll');\r\n\r\n/**\r\n * Scrollable default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.speed\r\n * @property {Number} defaultOptions.sensitivity\r\n * @property {HTMLElement[]} defaultOptions.scrollableElements\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  speed: 6,\r\n  sensitivity: 50,\r\n  scrollableElements: []\r\n};\r\n\r\n/**\r\n * Scrollable plugin which scrolls the closest scrollable parent\r\n * @class Scrollable\r\n * @module Scrollable\r\n * @extends AbstractPlugin\r\n */\r\nclass Scrollable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Scrollable constructor.\r\n   * @constructs Scrollable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Scrollable options\r\n     * @property {Object} options\r\n     * @property {Number} options.speed\r\n     * @property {Number} options.sensitivity\r\n     * @property {HTMLElement[]} options.scrollableElements\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Keeps current mouse position\r\n     * @property {Object} currentMousePosition\r\n     * @property {Number} currentMousePosition.clientX\r\n     * @property {Number} currentMousePosition.clientY\r\n     * @type {Object|null}\r\n     */\r\n    this.currentMousePosition = null;\r\n\r\n    /**\r\n     * Scroll animation frame\r\n     * @property scrollAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.scrollAnimationFrame = null;\r\n\r\n    /**\r\n     * Closest scrollable element\r\n     * @property scrollableElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.scrollableElement = null;\r\n\r\n    /**\r\n     * Animation frame looking for the closest scrollable element\r\n     * @property findScrollableElementFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.findScrollableElementFrame = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[scroll] = this[scroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.scrollable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns closest scrollable elements by element\r\n   * @param {HTMLElement} target\r\n   * @return {HTMLElement}\r\n   */\r\n  getScrollableElement(target) {\r\n    if (this.hasDefinedScrollableElements()) {\r\n      return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;\r\n    } else {\r\n      return closestScrollableElement(target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if at least one scrollable element have been defined via options\r\n   * @param {HTMLElement} target\r\n   * @return {Boolean}\r\n   */\r\n  hasDefinedScrollableElements() {\r\n    return Boolean(this.options.scrollableElements.length !== 0);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler. Finds closest scrollable parent in separate frame\r\n   * @param {DragStartEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragStart](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler. Remembers mouse position and initiates scrolling\r\n   * @param {DragMoveEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragMove](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.sensorEvent.target);\r\n    });\r\n\r\n    if (!this.scrollableElement) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = dragEvent.sensorEvent;\r\n    const scrollOffset = { x: 0, y: 0 };\r\n\r\n    if ('ontouchstart' in window) {\r\n      scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n      scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\r\n    }\r\n\r\n    this.currentMousePosition = {\r\n      clientX: sensorEvent.clientX - scrollOffset.x,\r\n      clientY: sensorEvent.clientY - scrollOffset.y\r\n    };\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler. Cancels scroll animations and resets state\r\n   * @private\r\n   */\r\n  [onDragStop]() {\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n    cancelAnimationFrame(this.findScrollableElementFrame);\r\n\r\n    this.scrollableElement = null;\r\n    this.scrollAnimationFrame = null;\r\n    this.findScrollableElementFrame = null;\r\n    this.currentMousePosition = null;\r\n  }\r\n\r\n  /**\r\n   * Scroll function that does the heavylifting\r\n   * @private\r\n   */\r\n  [scroll]() {\r\n    if (!this.scrollableElement || !this.currentMousePosition) {\r\n      return;\r\n    }\r\n\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n\r\n    const { speed, sensitivity } = this.options;\r\n\r\n    const rect = this.scrollableElement.getBoundingClientRect();\r\n    const bottomCutOff = rect.bottom > window.innerHeight;\r\n    const topCutOff = rect.top < 0;\r\n    const cutOff = topCutOff || bottomCutOff;\r\n\r\n    const documentScrollingElement = getDocumentScrollingElement();\r\n    const scrollableElement = this.scrollableElement;\r\n    const clientX = this.currentMousePosition.clientX;\r\n    const clientY = this.currentMousePosition.clientY;\r\n\r\n    if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {\r\n      const { offsetHeight, offsetWidth } = scrollableElement;\r\n\r\n      if (rect.top + offsetHeight - clientY < sensitivity) {\r\n        scrollableElement.scrollTop += speed;\r\n      } else if (clientY - rect.top < sensitivity) {\r\n        scrollableElement.scrollTop -= speed;\r\n      }\r\n\r\n      if (rect.left + offsetWidth - clientX < sensitivity) {\r\n        scrollableElement.scrollLeft += speed;\r\n      } else if (clientX - rect.left < sensitivity) {\r\n        scrollableElement.scrollLeft -= speed;\r\n      }\r\n    } else {\r\n      const { innerHeight, innerWidth } = window;\r\n\r\n      if (clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop -= speed;\r\n      } else if (innerHeight - clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop += speed;\r\n      }\r\n\r\n      if (clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft -= speed;\r\n      } else if (innerWidth - clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft += speed;\r\n      }\r\n    }\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n}\r\n\r\nexports.default = Scrollable; /**\r\n                               * Returns true if the passed element has overflow\r\n                               * @param {HTMLElement} element\r\n                               * @return {Boolean}\r\n                               * @private\r\n                               */\r\n\r\nfunction hasOverflow(element) {\r\n  const overflowRegex = /(auto|scroll)/;\r\n  const computedStyles = getComputedStyle(element, null);\r\n\r\n  const overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');\r\n\r\n  return overflowRegex.test(overflow);\r\n}\r\n\r\n/**\r\n * Returns true if the passed element is statically positioned\r\n * @param {HTMLElement} element\r\n * @return {Boolean}\r\n * @private\r\n */\r\nfunction isStaticallyPositioned(element) {\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  return position === 'static';\r\n}\r\n\r\n/**\r\n * Finds closest scrollable element\r\n * @param {HTMLElement} element\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction closestScrollableElement(element) {\r\n  if (!element) {\r\n    return getDocumentScrollingElement();\r\n  }\r\n\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  const excludeStaticParents = position === 'absolute';\r\n\r\n  const scrollableElement = (0, _utils.closest)(element, parent => {\r\n    if (excludeStaticParents && isStaticallyPositioned(parent)) {\r\n      return false;\r\n    }\r\n    return hasOverflow(parent);\r\n  });\r\n\r\n  if (position === 'fixed' || !scrollableElement) {\r\n    return getDocumentScrollingElement();\r\n  } else {\r\n    return scrollableElement;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns element that scrolls document\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction getDocumentScrollingElement() {\r\n  return document.scrollingElement || document.documentElement;\r\n}\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __nested_webpack_require_87578__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Scrollable = __nested_webpack_require_87578__(30);\r\n\r\nvar _Scrollable2 = _interopRequireDefault(_Scrollable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Scrollable2.default;\r\nexports.defaultOptions = _Scrollable.defaultOptions;\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __nested_webpack_require_88085__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_88085__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base mirror event\r\n * @class MirrorEvent\r\n * @module MirrorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass MirrorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Drag event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.MirrorEvent = MirrorEvent; /**\r\n                                    * Mirror create event\r\n                                    * @class MirrorCreateEvent\r\n                                    * @module MirrorCreateEvent\r\n                                    * @extends MirrorEvent\r\n                                    */\r\n\r\nclass MirrorCreateEvent extends MirrorEvent {}\r\n\r\nexports.MirrorCreateEvent = MirrorCreateEvent; /**\r\n                                                * Mirror created event\r\n                                                * @class MirrorCreatedEvent\r\n                                                * @module MirrorCreatedEvent\r\n                                                * @extends MirrorEvent\r\n                                                */\r\n\r\nMirrorCreateEvent.type = 'mirror:create';\r\nclass MirrorCreatedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorCreatedEvent = MirrorCreatedEvent; /**\r\n                                                  * Mirror attached event\r\n                                                  * @class MirrorAttachedEvent\r\n                                                  * @module MirrorAttachedEvent\r\n                                                  * @extends MirrorEvent\r\n                                                  */\r\n\r\nMirrorCreatedEvent.type = 'mirror:created';\r\nclass MirrorAttachedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorAttachedEvent = MirrorAttachedEvent; /**\r\n                                                    * Mirror move event\r\n                                                    * @class MirrorMoveEvent\r\n                                                    * @module MirrorMoveEvent\r\n                                                    * @extends MirrorEvent\r\n                                                    */\r\n\r\nMirrorAttachedEvent.type = 'mirror:attached';\r\nclass MirrorMoveEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on x axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshX() {\r\n    return this.data.passedThreshX;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on y axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshY() {\r\n    return this.data.passedThreshY;\r\n  }\r\n}\r\n\r\nexports.MirrorMoveEvent = MirrorMoveEvent; /**\r\n                                            * Mirror destroy event\r\n                                            * @class MirrorDestroyEvent\r\n                                            * @module MirrorDestroyEvent\r\n                                            * @extends MirrorEvent\r\n                                            */\r\n\r\nMirrorMoveEvent.type = 'mirror:move';\r\nMirrorMoveEvent.cancelable = true;\r\nclass MirrorDestroyEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\nexports.MirrorDestroyEvent = MirrorDestroyEvent;\r\nMirrorDestroyEvent.type = 'mirror:destroy';\r\nMirrorDestroyEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_93537__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MirrorEvent = __nested_webpack_require_93537__(32);\r\n\r\nObject.keys(_MirrorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _MirrorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __nested_webpack_require_94005__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_94005__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _MirrorEvent = __nested_webpack_require_94005__(33);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');\r\nconst onScroll = exports.onScroll = Symbol('onScroll');\r\nconst getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');\r\n\r\n/**\r\n * Mirror default options\r\n * @property {Object} defaultOptions\r\n * @property {Boolean} defaultOptions.constrainDimensions\r\n * @property {Boolean} defaultOptions.xAxis\r\n * @property {Boolean} defaultOptions.yAxis\r\n * @property {null} defaultOptions.cursorOffsetX\r\n * @property {null} defaultOptions.cursorOffsetY\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  constrainDimensions: false,\r\n  xAxis: true,\r\n  yAxis: true,\r\n  cursorOffsetX: null,\r\n  cursorOffsetY: null,\r\n  thresholdX: null,\r\n  thresholdY: null\r\n};\r\n\r\n/**\r\n * Mirror plugin which controls the mirror positioning while dragging\r\n * @class Mirror\r\n * @module Mirror\r\n * @extends AbstractPlugin\r\n */\r\nclass Mirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * Mirror constructor.\r\n   * @constructs Mirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Mirror options\r\n     * @property {Object} options\r\n     * @property {Boolean} options.constrainDimensions\r\n     * @property {Boolean} options.xAxis\r\n     * @property {Boolean} options.yAxis\r\n     * @property {Number|null} options.cursorOffsetX\r\n     * @property {Number|null} options.cursorOffsetY\r\n     * @property {String|HTMLElement|Function} options.appendTo\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Initial scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorMove] = this[onMirrorMove].bind(this);\r\n    this[onScroll] = this[onScroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.mirror || {};\r\n  }\r\n\r\n  [onDragStart](dragEvent) {\r\n    if (dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if ('ontouchstart' in window) {\r\n      document.addEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    // Last sensor position of mirror move\r\n    this.lastMirrorMovedClient = {\r\n      x: sensorEvent.clientX,\r\n      y: sensorEvent.clientY\r\n    };\r\n\r\n    const mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreateEvent);\r\n\r\n    if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const appendableContainer = this[getAppendableContainer](source) || sourceContainer;\r\n    this.mirror = source.cloneNode(true);\r\n\r\n    const mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    const mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreatedEvent);\r\n    appendableContainer.appendChild(this.mirror);\r\n    this.draggable.trigger(mirrorAttachedEvent);\r\n  }\r\n\r\n  [onDragMove](dragEvent) {\r\n    if (!this.mirror || dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    let passedThreshX = true;\r\n    let passedThreshY = true;\r\n\r\n    if (this.options.thresholdX || this.options.thresholdY) {\r\n      const { x: lastX, y: lastY } = this.lastMirrorMovedClient;\r\n\r\n      if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {\r\n        passedThreshX = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.x = sensorEvent.clientX;\r\n      }\r\n\r\n      if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {\r\n        passedThreshY = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.y = sensorEvent.clientY;\r\n      }\r\n\r\n      if (!passedThreshX && !passedThreshY) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror,\r\n      passedThreshX,\r\n      passedThreshY\r\n    });\r\n\r\n    this.draggable.trigger(mirrorMoveEvent);\r\n  }\r\n\r\n  [onDragStop](dragEvent) {\r\n    if ('ontouchstart' in window) {\r\n      document.removeEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = { x: 0, y: 0 };\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    if (!this.mirror) {\r\n      return;\r\n    }\r\n\r\n    const { source, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    const mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({\r\n      source,\r\n      mirror: this.mirror,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorDestroyEvent);\r\n\r\n    if (!mirrorDestroyEvent.canceled()) {\r\n      this.mirror.parentNode.removeChild(this.mirror);\r\n    }\r\n  }\r\n\r\n  [onScroll]() {\r\n    this.scrollOffset = {\r\n      x: window.scrollX - this.initialScrollOffset.x,\r\n      y: window.scrollY - this.initialScrollOffset.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror, source, sensorEvent }) {\r\n    const mirrorClasses = this.draggable.getClassNamesFor('mirror');\r\n\r\n    const setState = (_ref) => {\r\n      let { mirrorOffset, initialX, initialY } = _ref,\r\n          args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);\r\n\r\n      this.mirrorOffset = mirrorOffset;\r\n      this.initialX = initialX;\r\n      this.initialY = initialY;\r\n      this.lastMovedX = initialX;\r\n      this.lastMovedY = initialY;\r\n      return _extends({ mirrorOffset, initialX, initialY }, args);\r\n    };\r\n\r\n    mirror.style.display = 'none';\r\n\r\n    const initialState = {\r\n      mirror,\r\n      source,\r\n      sensorEvent,\r\n      mirrorClasses,\r\n      scrollOffset: this.scrollOffset,\r\n      options: this.options,\r\n      passedThreshX: true,\r\n      passedThreshY: true\r\n    };\r\n\r\n    return Promise.resolve(initialState)\r\n    // Fix reflow here\r\n    .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({ initial: true })).then(removeMirrorID).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Mirror move handler\r\n   * @param {MirrorMoveEvent} mirrorEvent\r\n   * @return {Promise|null}\r\n   * @private\r\n   */\r\n  [onMirrorMove](mirrorEvent) {\r\n    if (mirrorEvent.canceled()) {\r\n      return null;\r\n    }\r\n\r\n    const setState = (_ref2) => {\r\n      let { lastMovedX, lastMovedY } = _ref2,\r\n          args = _objectWithoutProperties(_ref2, ['lastMovedX', 'lastMovedY']);\r\n\r\n      this.lastMovedX = lastMovedX;\r\n      this.lastMovedY = lastMovedY;\r\n\r\n      return _extends({ lastMovedX, lastMovedY }, args);\r\n    };\r\n\r\n    const initialState = {\r\n      mirror: mirrorEvent.mirror,\r\n      sensorEvent: mirrorEvent.sensorEvent,\r\n      mirrorOffset: this.mirrorOffset,\r\n      options: this.options,\r\n      initialX: this.initialX,\r\n      initialY: this.initialY,\r\n      scrollOffset: this.scrollOffset,\r\n      passedThreshX: mirrorEvent.passedThreshX,\r\n      passedThreshY: mirrorEvent.passedThreshY,\r\n      lastMovedX: this.lastMovedX,\r\n      lastMovedY: this.lastMovedY\r\n    };\r\n\r\n    return Promise.resolve(initialState).then(positionMirror({ raf: true })).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Returns appendable container for mirror based on the appendTo option\r\n   * @private\r\n   * @param {Object} options\r\n   * @param {HTMLElement} options.source - Current source\r\n   * @return {HTMLElement}\r\n   */\r\n  [getAppendableContainer](source) {\r\n    const appendTo = this.options.appendTo;\r\n\r\n    if (typeof appendTo === 'string') {\r\n      return document.querySelector(appendTo);\r\n    } else if (appendTo instanceof HTMLElement) {\r\n      return appendTo;\r\n    } else if (typeof appendTo === 'function') {\r\n      return appendTo(source);\r\n    } else {\r\n      return source.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nexports.default = Mirror; /**\r\n                           * Computes mirror dimensions based on the source element\r\n                           * Adds sourceRect to state\r\n                           * @param {Object} state\r\n                           * @param {HTMLElement} state.source\r\n                           * @return {Promise}\r\n                           * @private\r\n                           */\r\n\r\nfunction computeMirrorDimensions(_ref3) {\r\n  let { source } = _ref3,\r\n      args = _objectWithoutProperties(_ref3, ['source']);\r\n\r\n  return withPromise(resolve => {\r\n    const sourceRect = source.getBoundingClientRect();\r\n    resolve(_extends({ source, sourceRect }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Calculates mirror offset\r\n * Adds mirrorOffset to state\r\n * @param {Object} state\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {DOMRect} state.sourceRect\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction calculateMirrorOffset(_ref4) {\r\n  let { sensorEvent, sourceRect, options } = _ref4,\r\n      args = _objectWithoutProperties(_ref4, ['sensorEvent', 'sourceRect', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    const top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;\r\n    const left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;\r\n\r\n    const mirrorOffset = { top, left };\r\n\r\n    resolve(_extends({ sensorEvent, sourceRect, mirrorOffset, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror styles\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {HTMLElement} state.source\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction resetMirror(_ref5) {\r\n  let { mirror, source, options } = _ref5,\r\n      args = _objectWithoutProperties(_ref5, ['mirror', 'source', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    let offsetHeight;\r\n    let offsetWidth;\r\n\r\n    if (options.constrainDimensions) {\r\n      const computedSourceStyles = getComputedStyle(source);\r\n      offsetHeight = computedSourceStyles.getPropertyValue('height');\r\n      offsetWidth = computedSourceStyles.getPropertyValue('width');\r\n    }\r\n\r\n    mirror.style.display = null;\r\n    mirror.style.position = 'fixed';\r\n    mirror.style.pointerEvents = 'none';\r\n    mirror.style.top = 0;\r\n    mirror.style.left = 0;\r\n    mirror.style.margin = 0;\r\n\r\n    if (options.constrainDimensions) {\r\n      mirror.style.height = offsetHeight;\r\n      mirror.style.width = offsetWidth;\r\n    }\r\n\r\n    resolve(_extends({ mirror, source, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror class on mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {String[]} state.mirrorClasses\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction addMirrorClasses(_ref6) {\r\n  let { mirror, mirrorClasses } = _ref6,\r\n      args = _objectWithoutProperties(_ref6, ['mirror', 'mirrorClasses']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.classList.add(...mirrorClasses);\r\n    resolve(_extends({ mirror, mirrorClasses }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Removes source ID from cloned mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction removeMirrorID(_ref7) {\r\n  let { mirror } = _ref7,\r\n      args = _objectWithoutProperties(_ref7, ['mirror']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.removeAttribute('id');\r\n    delete mirror.id;\r\n    resolve(_extends({ mirror }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Positions mirror with translate3d\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {Object} state.mirrorOffset\r\n * @param {Number} state.initialY\r\n * @param {Number} state.initialX\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction positionMirror({ withFrame = false, initial = false } = {}) {\r\n  return (_ref8) => {\r\n    let {\r\n      mirror,\r\n      sensorEvent,\r\n      mirrorOffset,\r\n      initialY,\r\n      initialX,\r\n      scrollOffset,\r\n      options,\r\n      passedThreshX,\r\n      passedThreshY,\r\n      lastMovedX,\r\n      lastMovedY\r\n    } = _ref8,\r\n        args = _objectWithoutProperties(_ref8, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options', 'passedThreshX', 'passedThreshY', 'lastMovedX', 'lastMovedY']);\r\n\r\n    return withPromise(resolve => {\r\n      const result = _extends({\r\n        mirror,\r\n        sensorEvent,\r\n        mirrorOffset,\r\n        options\r\n      }, args);\r\n\r\n      if (mirrorOffset) {\r\n        const x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);\r\n        const y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);\r\n\r\n        if (options.xAxis && options.yAxis || initial) {\r\n          mirror.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n        } else if (options.xAxis && !options.yAxis) {\r\n          mirror.style.transform = `translate3d(${x}px, ${initialY}px, 0)`;\r\n        } else if (options.yAxis && !options.xAxis) {\r\n          mirror.style.transform = `translate3d(${initialX}px, ${y}px, 0)`;\r\n        }\r\n\r\n        if (initial) {\r\n          result.initialX = x;\r\n          result.initialY = y;\r\n        }\r\n\r\n        result.lastMovedX = x;\r\n        result.lastMovedY = y;\r\n      }\r\n\r\n      resolve(result);\r\n    }, { frame: withFrame });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps functions in promise with potential animation frame option\r\n * @param {Function} callback\r\n * @param {Object} options\r\n * @param {Boolean} options.raf\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction withPromise(callback, { raf = false } = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    if (raf) {\r\n      requestAnimationFrame(() => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      callback(resolve, reject);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if the sensor event was triggered by a native browser drag event\r\n * @param {SensorEvent} sensorEvent\r\n */\r\nfunction isNativeDragEvent(sensorEvent) {\r\n  return (/^drag/.test(sensorEvent.originalEvent.type)\r\n  );\r\n}\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __nested_webpack_require_111519__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Mirror = __nested_webpack_require_111519__(34);\r\n\r\nvar _Mirror2 = _interopRequireDefault(_Mirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Mirror2.default;\r\nexports.defaultOptions = _Mirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_112006__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_112006__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\n\r\n/**\r\n * Focusable default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = {};\r\n\r\n/**\r\n * Focusable plugin\r\n * @class Focusable\r\n * @module Focusable\r\n * @extends AbstractPlugin\r\n */\r\nclass Focusable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Focusable constructor.\r\n   * @constructs Focusable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Focusable options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);\r\n\r\n    // Remove modified elements when detach\r\n    this[onDestroy]();\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.focusable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns draggable containers and elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getElements() {\r\n    return [...this.draggable.containers, ...this.draggable.getDraggableElements()];\r\n  }\r\n\r\n  /**\r\n   * Intialize handler\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => decorateElement(element));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy handler\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => stripElement(element));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = Focusable; /**\r\n                              * Keeps track of all the elements that are missing tabindex attributes\r\n                              * so they can be reset when draggable gets destroyed\r\n                              * @const {HTMLElement[]} elementsWithMissingTabIndex\r\n                              */\r\n\r\nconst elementsWithMissingTabIndex = [];\r\n\r\n/**\r\n * Decorates element with tabindex attributes\r\n * @param {HTMLElement} element\r\n * @return {Object}\r\n * @private\r\n */\r\nfunction decorateElement(element) {\r\n  const hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);\r\n\r\n  if (hasMissingTabIndex) {\r\n    elementsWithMissingTabIndex.push(element);\r\n    element.tabIndex = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Removes elements tabindex attributes\r\n * @param {HTMLElement} element\r\n * @private\r\n */\r\nfunction stripElement(element) {\r\n  const tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);\r\n\r\n  if (tabIndexElementPosition !== -1) {\r\n    element.tabIndex = -1;\r\n    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __nested_webpack_require_115918__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_115918__(36);\r\n\r\nvar _Focusable2 = _interopRequireDefault(_Focusable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Focusable2.default;\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __nested_webpack_require_117242__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_117242__(3);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\nconst announceEvent = Symbol('announceEvent');\r\nconst announceMessage = Symbol('announceMessage');\r\n\r\nconst ARIA_RELEVANT = 'aria-relevant';\r\nconst ARIA_ATOMIC = 'aria-atomic';\r\nconst ARIA_LIVE = 'aria-live';\r\nconst ROLE = 'role';\r\n\r\n/**\r\n * Announcement default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.expire\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  expire: 7000\r\n};\r\n\r\n/**\r\n * Announcement plugin\r\n * @class Announcement\r\n * @module Announcement\r\n * @extends AbstractPlugin\r\n */\r\nclass Announcement extends _AbstractPlugin2.default {\r\n  /**\r\n   * Announcement constructor.\r\n   * @constructs Announcement\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Plugin options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Original draggable trigger method. Hack until we have onAll or on('all')\r\n     * @property originalTriggerMethod\r\n     * @type {Function}\r\n     */\r\n    this.originalTriggerMethod = this.draggable.trigger;\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Returns passed in options\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.announcements || {};\r\n  }\r\n\r\n  /**\r\n   * Announces event\r\n   * @private\r\n   * @param {AbstractEvent} event\r\n   */\r\n  [announceEvent](event) {\r\n    const message = this.options[event.type];\r\n\r\n    if (message && typeof message === 'string') {\r\n      this[announceMessage](message);\r\n    }\r\n\r\n    if (message && typeof message === 'function') {\r\n      this[announceMessage](message(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Announces message to screen reader\r\n   * @private\r\n   * @param {String} message\r\n   */\r\n  [announceMessage](message) {\r\n    announce(message, { expire: this.options.expire });\r\n  }\r\n\r\n  /**\r\n   * Initialize hander\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Hack until there is an api for listening for all events\r\n    this.draggable.trigger = event => {\r\n      try {\r\n        this[announceEvent](event);\r\n      } finally {\r\n        // Ensure that original trigger is called\r\n        this.originalTriggerMethod.call(this.draggable, event);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy hander\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    this.draggable.trigger = this.originalTriggerMethod;\r\n  }\r\n}\r\n\r\nexports.default = Announcement; /**\r\n                                 * @const {HTMLElement} liveRegion\r\n                                 */\r\n\r\nconst liveRegion = createRegion();\r\n\r\n/**\r\n * Announces message via live region\r\n * @param {String} message\r\n * @param {Object} options\r\n * @param {Number} options.expire\r\n */\r\nfunction announce(message, { expire }) {\r\n  const element = document.createElement('div');\r\n\r\n  element.textContent = message;\r\n  liveRegion.appendChild(element);\r\n\r\n  return setTimeout(() => {\r\n    liveRegion.removeChild(element);\r\n  }, expire);\r\n}\r\n\r\n/**\r\n * Creates region element\r\n * @return {HTMLElement}\r\n */\r\nfunction createRegion() {\r\n  const element = document.createElement('div');\r\n\r\n  element.setAttribute('id', 'draggable-live-region');\r\n  element.setAttribute(ARIA_RELEVANT, 'additions');\r\n  element.setAttribute(ARIA_ATOMIC, 'true');\r\n  element.setAttribute(ARIA_LIVE, 'assertive');\r\n  element.setAttribute(ROLE, 'log');\r\n\r\n  element.style.position = 'fixed';\r\n  element.style.width = '1px';\r\n  element.style.height = '1px';\r\n  element.style.top = '-1px';\r\n  element.style.overflow = 'hidden';\r\n\r\n  return element;\r\n}\r\n\r\n// Append live region element as early as possible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  document.body.appendChild(liveRegion);\r\n});\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __nested_webpack_require_122130__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Announcement = __nested_webpack_require_122130__(39);\r\n\r\nvar _Announcement2 = _interopRequireDefault(_Announcement);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Announcement2.default;\r\nexports.defaultOptions = _Announcement.defaultOptions;\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __nested_webpack_require_122647__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_122647__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base draggable event\r\n * @class DraggableEvent\r\n * @module DraggableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DraggableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggable instance\r\n   * @property draggable\r\n   * @type {Draggable}\r\n   * @readonly\r\n   */\r\n  get draggable() {\r\n    return this.data.draggable;\r\n  }\r\n}\r\n\r\nexports.DraggableEvent = DraggableEvent; /**\r\n                                          * Draggable initialized event\r\n                                          * @class DraggableInitializedEvent\r\n                                          * @module DraggableInitializedEvent\r\n                                          * @extends DraggableEvent\r\n                                          */\r\n\r\nDraggableEvent.type = 'draggable';\r\nclass DraggableInitializedEvent extends DraggableEvent {}\r\n\r\nexports.DraggableInitializedEvent = DraggableInitializedEvent; /**\r\n                                                                * Draggable destory event\r\n                                                                * @class DraggableInitializedEvent\r\n                                                                * @module DraggableDestroyEvent\r\n                                                                * @extends DraggableDestroyEvent\r\n                                                                */\r\n\r\nDraggableInitializedEvent.type = 'draggable:initialize';\r\nclass DraggableDestroyEvent extends DraggableEvent {}\r\nexports.DraggableDestroyEvent = DraggableDestroyEvent;\r\nDraggableDestroyEvent.type = 'draggable:destroy';\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __nested_webpack_require_126817__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragStoppedEvent = exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_126817__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base drag event\r\n * @class DragEvent\r\n * @module DragEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DragEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.DragEvent = DragEvent; /**\r\n                                * Drag start event\r\n                                * @class DragStartEvent\r\n                                * @module DragStartEvent\r\n                                * @extends DragEvent\r\n                                */\r\n\r\nDragEvent.type = 'drag';\r\nclass DragStartEvent extends DragEvent {}\r\n\r\nexports.DragStartEvent = DragStartEvent; /**\r\n                                          * Drag move event\r\n                                          * @class DragMoveEvent\r\n                                          * @module DragMoveEvent\r\n                                          * @extends DragEvent\r\n                                          */\r\n\r\nDragStartEvent.type = 'drag:start';\r\nDragStartEvent.cancelable = true;\r\nclass DragMoveEvent extends DragEvent {}\r\n\r\nexports.DragMoveEvent = DragMoveEvent; /**\r\n                                        * Drag over event\r\n                                        * @class DragOverEvent\r\n                                        * @module DragOverEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragMoveEvent.type = 'drag:move';\r\nclass DragOverEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOverEvent = DragOverEvent; /**\r\n                                        * Drag out event\r\n                                        * @class DragOutEvent\r\n                                        * @module DragOutEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragOverEvent.type = 'drag:over';\r\nDragOverEvent.cancelable = true;\r\nclass DragOutEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you left\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOutEvent = DragOutEvent; /**\r\n                                      * Drag over container event\r\n                                      * @class DragOverContainerEvent\r\n                                      * @module DragOverContainerEvent\r\n                                      * @extends DragEvent\r\n                                      */\r\n\r\nDragOutEvent.type = 'drag:out';\r\nclass DragOverContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOverContainerEvent = DragOverContainerEvent; /**\r\n                                                          * Drag out container event\r\n                                                          * @class DragOutContainerEvent\r\n                                                          * @module DragOutContainerEvent\r\n                                                          * @extends DragEvent\r\n                                                          */\r\n\r\nDragOverContainerEvent.type = 'drag:over:container';\r\nclass DragOutContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you left\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOutContainerEvent = DragOutContainerEvent; /**\r\n                                                        * Drag pressure event\r\n                                                        * @class DragPressureEvent\r\n                                                        * @module DragPressureEvent\r\n                                                        * @extends DragEvent\r\n                                                        */\r\n\r\nDragOutContainerEvent.type = 'drag:out:container';\r\nclass DragPressureEvent extends DragEvent {\r\n\r\n  /**\r\n   * Pressure applied on draggable element\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.DragPressureEvent = DragPressureEvent; /**\r\n                                                * Drag stop event\r\n                                                * @class DragStopEvent\r\n                                                * @module DragStopEvent\r\n                                                * @extends DragEvent\r\n                                                */\r\n\r\nDragPressureEvent.type = 'drag:pressure';\r\nclass DragStopEvent extends DragEvent {}\r\n\r\nexports.DragStopEvent = DragStopEvent; /**\r\n                                        * Drag stopped event\r\n                                        * @class DragStoppedEvent\r\n                                        * @module DragStoppedEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragStopEvent.type = 'drag:stop';\r\nclass DragStoppedEvent extends DragEvent {}\r\nexports.DragStoppedEvent = DragStoppedEvent;\r\nDragStoppedEvent.type = 'drag:stopped';\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_134342__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_134342__(8);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_134342__(7);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Plugins = __nested_webpack_require_134342__(6);\r\n\r\nObject.keys(_Plugins).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Plugins[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sensors = __nested_webpack_require_134342__(5);\r\n\r\nObject.keys(_Sensors).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Sensors[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Draggable = __nested_webpack_require_134342__(11);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Draggable2.default;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/draggable.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/droppable.js":
/*!**********************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/droppable.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_571__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_571__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_571__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_571__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_571__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_571__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_571__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_571__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_571__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_571__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_571__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_571__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_571__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_571__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_571__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_571__(__nested_webpack_require_571__.s = 48);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4119__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_4119__(44);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_4119__(42);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_4119__(40);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_4119__(38);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_5243__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_5243__(19);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_5710__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_5710__(22);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sensor2.default;\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_6109__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_6109__(46);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6536__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_6536__(31);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6967__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_6967__(2);\r\n\r\nObject.defineProperty(exports, 'Sensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sensor).default;\r\n  }\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_6967__(21);\r\n\r\nObject.defineProperty(exports, 'MouseSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_MouseSensor).default;\r\n  }\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_6967__(18);\r\n\r\nObject.defineProperty(exports, 'TouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_TouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_6967__(16);\r\n\r\nObject.defineProperty(exports, 'DragSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_DragSensor).default;\r\n  }\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_6967__(14);\r\n\r\nObject.defineProperty(exports, 'ForceTouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ForceTouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_6967__(1);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_8573__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Announcement = __nested_webpack_require_8573__(33);\r\n\r\nObject.defineProperty(exports, 'Announcement', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Announcement).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultAnnouncementOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Announcement.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_8573__(30);\r\n\r\nObject.defineProperty(exports, 'Focusable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Focusable).default;\r\n  }\r\n});\r\n\r\nvar _Mirror = __nested_webpack_require_8573__(28);\r\n\r\nObject.defineProperty(exports, 'Mirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Mirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Mirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Scrollable = __nested_webpack_require_8573__(24);\r\n\r\nObject.defineProperty(exports, 'Scrollable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Scrollable).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultScrollableOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Scrollable.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_10116__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_10116__(34);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_10592__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_10592__(35);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_11053__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DroppableEvent = __nested_webpack_require_11053__(47);\r\n\r\nObject.keys(_DroppableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DroppableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods\r\n * @class Emitter\r\n * @module Emitter\r\n */\r\nclass Emitter {\r\n  constructor() {\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks by event name\r\n   * @param {String} type\r\n   * @param {...Function} callbacks\r\n   */\r\n  on(type, ...callbacks) {\r\n    if (!this.callbacks[type]) {\r\n      this.callbacks[type] = [];\r\n    }\r\n\r\n    this.callbacks[type].push(...callbacks);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters callbacks by event name\r\n   * @param {String} type\r\n   * @param {Function} callback\r\n   */\r\n  off(type, callback) {\r\n    if (!this.callbacks[type]) {\r\n      return null;\r\n    }\r\n\r\n    const copy = this.callbacks[type].slice(0);\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n      if (callback === copy[i]) {\r\n        this.callbacks[type].splice(i, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers event callbacks by event object\r\n   * @param {AbstractEvent} event\r\n   */\r\n  trigger(event) {\r\n    if (!this.callbacks[event.type]) {\r\n      return null;\r\n    }\r\n\r\n    const callbacks = [...this.callbacks[event.type]];\r\n    const caughtErrors = [];\r\n\r\n    for (let i = callbacks.length - 1; i >= 0; i--) {\r\n      const callback = callbacks[i];\r\n\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        caughtErrors.push(error);\r\n      }\r\n    }\r\n\r\n    if (caughtErrors.length) {\r\n      /* eslint-disable no-console */\r\n      console.error(`Draggable caught errors while triggering '${event.type}'`, caughtErrors);\r\n      /* eslint-disable no-console */\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\nexports.default = Emitter;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_13394__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Emitter = __nested_webpack_require_13394__(10);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Emitter2.default;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_13798__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_13798__(0);\r\n\r\nvar _Plugins = __nested_webpack_require_13798__(6);\r\n\r\nvar _Emitter = __nested_webpack_require_13798__(11);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nvar _Sensors = __nested_webpack_require_13798__(5);\r\n\r\nvar _DraggableEvent = __nested_webpack_require_13798__(7);\r\n\r\nvar _DragEvent = __nested_webpack_require_13798__(8);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragPressure = Symbol('onDragPressure');\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['drag:start']\r\n * @const {Function} defaultAnnouncements['drag:stop']\r\n */\r\nconst defaultAnnouncements = {\r\n  'drag:start': event => `Picked up ${event.source.textContent.trim() || event.source.id || 'draggable element'}`,\r\n  'drag:stop': event => `Released ${event.source.textContent.trim() || event.source.id || 'draggable element'}`\r\n};\r\n\r\nconst defaultClasses = {\r\n  'container:dragging': 'draggable-container--is-dragging',\r\n  'source:dragging': 'draggable-source--is-dragging',\r\n  'source:placed': 'draggable-source--placed',\r\n  'container:placed': 'draggable-container--placed',\r\n  'body:dragging': 'draggable--is-dragging',\r\n  'draggable:over': 'draggable--over',\r\n  'container:over': 'draggable-container--over',\r\n  'source:original': 'draggable--original',\r\n  mirror: 'draggable-mirror'\r\n};\r\n\r\nconst defaultOptions = exports.defaultOptions = {\r\n  draggable: '.draggable-source',\r\n  handle: null,\r\n  delay: {},\r\n  distance: 0,\r\n  placedTimeout: 800,\r\n  plugins: [],\r\n  sensors: [],\r\n  exclude: {\r\n    plugins: [],\r\n    sensors: []\r\n  }\r\n};\r\n\r\n/**\r\n * This is the core draggable library that does the heavy lifting\r\n * @class Draggable\r\n * @module Draggable\r\n */\r\nclass Draggable {\r\n\r\n  /**\r\n   * Draggable constructor.\r\n   * @constructs Draggable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers\r\n   * @param {Object} options - Options for draggable\r\n   */\r\n\r\n  /**\r\n   * Default plugins draggable uses\r\n   * @static\r\n   * @property {Object} Plugins\r\n   * @property {Announcement} Plugins.Announcement\r\n   * @property {Focusable} Plugins.Focusable\r\n   * @property {Mirror} Plugins.Mirror\r\n   * @property {Scrollable} Plugins.Scrollable\r\n   * @type {Object}\r\n   */\r\n  constructor(containers = [document.body], options = {}) {\r\n    /**\r\n     * Draggable containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    if (containers instanceof NodeList || containers instanceof Array) {\r\n      this.containers = [...containers];\r\n    } else if (containers instanceof HTMLElement) {\r\n      this.containers = [containers];\r\n    } else {\r\n      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');\r\n    }\r\n\r\n    this.options = _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {}),\r\n      exclude: {\r\n        plugins: options.exclude && options.exclude.plugins || [],\r\n        sensors: options.exclude && options.exclude.sensors || []\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Draggables event emitter\r\n     * @property emitter\r\n     * @type {Emitter}\r\n     */\r\n    this.emitter = new _Emitter2.default();\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Active plugins\r\n     * @property plugins\r\n     * @type {Plugin[]}\r\n     */\r\n    this.plugins = [];\r\n\r\n    /**\r\n     * Active sensors\r\n     * @property sensors\r\n     * @type {Sensor[]}\r\n     */\r\n    this.sensors = [];\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragPressure] = this[onDragPressure].bind(this);\r\n\r\n    document.addEventListener('drag:start', this[onDragStart], true);\r\n    document.addEventListener('drag:move', this[onDragMove], true);\r\n    document.addEventListener('drag:stop', this[onDragStop], true);\r\n    document.addEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const defaultPlugins = Object.values(Draggable.Plugins).filter(Plugin => !this.options.exclude.plugins.includes(Plugin));\r\n    const defaultSensors = Object.values(Draggable.Sensors).filter(sensor => !this.options.exclude.sensors.includes(sensor));\r\n\r\n    this.addPlugin(...[...defaultPlugins, ...this.options.plugins]);\r\n    this.addSensor(...[...defaultSensors, ...this.options.sensors]);\r\n\r\n    const draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.on('mirror:created', ({ mirror }) => this.mirror = mirror);\r\n    this.on('mirror:destroy', () => this.mirror = null);\r\n\r\n    this.trigger(draggableInitializedEvent);\r\n  }\r\n\r\n  /**\r\n   * Destroys Draggable instance. This removes all internal event listeners and\r\n   * deactivates sensors and plugins\r\n   */\r\n\r\n\r\n  /**\r\n   * Default sensors draggable uses\r\n   * @static\r\n   * @property {Object} Sensors\r\n   * @property {MouseSensor} Sensors.MouseSensor\r\n   * @property {TouchSensor} Sensors.TouchSensor\r\n   * @type {Object}\r\n   */\r\n  destroy() {\r\n    document.removeEventListener('drag:start', this[onDragStart], true);\r\n    document.removeEventListener('drag:move', this[onDragMove], true);\r\n    document.removeEventListener('drag:stop', this[onDragStop], true);\r\n    document.removeEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.trigger(draggableDestroyEvent);\r\n\r\n    this.removePlugin(...this.plugins.map(plugin => plugin.constructor));\r\n    this.removeSensor(...this.sensors.map(sensor => sensor.constructor));\r\n  }\r\n\r\n  /**\r\n   * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)\r\n   */\r\n  addPlugin(...plugins) {\r\n    const activePlugins = plugins.map(Plugin => new Plugin(this));\r\n\r\n    activePlugins.forEach(plugin => plugin.attach());\r\n    this.plugins = [...this.plugins, ...activePlugins];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes plugins that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)\r\n   */\r\n  removePlugin(...plugins) {\r\n    const removedPlugins = this.plugins.filter(plugin => plugins.includes(plugin.constructor));\r\n\r\n    removedPlugins.forEach(plugin => plugin.detach());\r\n    this.plugins = this.plugins.filter(plugin => !plugins.includes(plugin.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addSensor(ForceTouchSensor, CustomSensor)\r\n   */\r\n  addSensor(...sensors) {\r\n    const activeSensors = sensors.map(Sensor => new Sensor(this.containers, this.options));\r\n\r\n    activeSensors.forEach(sensor => sensor.attach());\r\n    this.sensors = [...this.sensors, ...activeSensors];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes sensors that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeSensor(TouchSensor, DragSensor)\r\n   */\r\n  removeSensor(...sensors) {\r\n    const removedSensors = this.sensors.filter(sensor => sensors.includes(sensor.constructor));\r\n\r\n    removedSensors.forEach(sensor => sensor.detach());\r\n    this.sensors = this.sensors.filter(sensor => !sensors.includes(sensor.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n    this.sensors.forEach(sensor => sensor.addContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes container from this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n    this.sensors.forEach(sensor => sensor.removeContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds listener for draggable events\r\n   * @param {String} type - Event name\r\n   * @param {...Function} callbacks - Event callbacks\r\n   * @return {Draggable}\r\n   * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());\r\n   */\r\n  on(type, ...callbacks) {\r\n    this.emitter.on(type, ...callbacks);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes listener from draggable\r\n   * @param {String} type - Event name\r\n   * @param {Function} callback - Event callback\r\n   * @return {Draggable}\r\n   * @example draggable.off('drag:start', handlerFunction);\r\n   */\r\n  off(type, callback) {\r\n    this.emitter.off(type, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers draggable event\r\n   * @param {AbstractEvent} event - Event instance\r\n   * @return {Draggable}\r\n   * @example draggable.trigger(event);\r\n   */\r\n  trigger(event) {\r\n    this.emitter.trigger(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns class name for class identifier\r\n   * @param {String} name - Name of class identifier\r\n   * @return {String|null}\r\n   */\r\n  getClassNameFor(name) {\r\n    return this.getClassNamesFor(name)[0];\r\n  }\r\n\r\n  /**\r\n   * Returns class names for class identifier\r\n   * @return {String[]}\r\n   */\r\n  getClassNamesFor(name) {\r\n    const classNames = this.options.classes[name];\r\n\r\n    if (classNames instanceof Array) {\r\n      return classNames;\r\n    } else if (typeof classNames === 'string' || classNames instanceof String) {\r\n      return [classNames];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if this draggable instance is currently dragging\r\n   * @return {Boolean}\r\n   */\r\n  isDragging() {\r\n    return Boolean(this.dragging);\r\n  }\r\n\r\n  /**\r\n   * Returns all draggable elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElements() {\r\n    return this.containers.reduce((current, container) => {\r\n      return [...current, ...this.getDraggableElementsForContainer(container)];\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Returns draggable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElementsForContainer(container) {\r\n    const allDraggableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allDraggableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStart](event) {\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { target, container } = sensorEvent;\r\n\r\n    if (!this.containers.includes(container)) {\r\n      return;\r\n    }\r\n\r\n    if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    // Find draggable source element\r\n    this.originalSource = (0, _utils.closest)(target, this.options.draggable);\r\n    this.sourceContainer = container;\r\n\r\n    if (!this.originalSource) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    if (this.lastPlacedSource && this.lastPlacedContainer) {\r\n      clearTimeout(this.placedTimeoutID);\r\n      this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n    }\r\n\r\n    this.source = this.originalSource.cloneNode(true);\r\n    this.originalSource.parentNode.insertBefore(this.source, this.originalSource);\r\n    this.originalSource.style.display = 'none';\r\n\r\n    const dragEvent = new _DragEvent.DragStartEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragEvent);\r\n\r\n    this.dragging = !dragEvent.canceled();\r\n\r\n    if (dragEvent.canceled()) {\r\n      this.source.parentNode.removeChild(this.source);\r\n      this.originalSource.style.display = null;\r\n      return;\r\n    }\r\n\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:original'));\r\n    this.source.classList.add(...this.getClassNamesFor('source:dragging'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.add(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, 'none');\r\n\r\n    requestAnimationFrame(() => {\r\n      const oldSensorEvent = getSensorEvent(event);\r\n      const newSensorEvent = oldSensorEvent.clone({ target: this.source });\r\n\r\n      this[onDragMove](_extends({}, event, {\r\n        detail: newSensorEvent\r\n      }));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { container } = sensorEvent;\r\n    let target = sensorEvent.target;\r\n\r\n    const dragMoveEvent = new _DragEvent.DragMoveEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragMoveEvent);\r\n\r\n    if (dragMoveEvent.canceled()) {\r\n      sensorEvent.cancel();\r\n    }\r\n\r\n    target = (0, _utils.closest)(target, this.options.draggable);\r\n    const withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);\r\n    const overContainer = sensorEvent.overContainer || withinCorrectContainer;\r\n    const isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;\r\n    const isLeavingDraggable = this.currentOver && target !== this.currentOver;\r\n    const isOverContainer = overContainer && this.currentOverContainer !== overContainer;\r\n    const isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;\r\n\r\n    if (isLeavingDraggable) {\r\n      const dragOutEvent = new _DragEvent.DragOutEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        over: this.currentOver,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n      this.currentOver = null;\r\n\r\n      this.trigger(dragOutEvent);\r\n    }\r\n\r\n    if (isLeavingContainer) {\r\n      const dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n      this.currentOverContainer = null;\r\n\r\n      this.trigger(dragOutContainerEvent);\r\n    }\r\n\r\n    if (isOverContainer) {\r\n      overContainer.classList.add(...this.getClassNamesFor('container:over'));\r\n\r\n      const dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer\r\n      });\r\n\r\n      this.currentOverContainer = overContainer;\r\n\r\n      this.trigger(dragOverContainerEvent);\r\n    }\r\n\r\n    if (isOverDraggable) {\r\n      target.classList.add(...this.getClassNamesFor('draggable:over'));\r\n\r\n      const dragOverEvent = new _DragEvent.DragOverEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer,\r\n        over: target\r\n      });\r\n\r\n      this.currentOver = target;\r\n\r\n      this.trigger(dragOverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStop](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.dragging = false;\r\n\r\n    const dragStopEvent = new _DragEvent.DragStopEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStopEvent);\r\n\r\n    this.source.parentNode.insertBefore(this.originalSource, this.source);\r\n    this.source.parentNode.removeChild(this.source);\r\n    this.originalSource.style.display = '';\r\n\r\n    this.source.classList.remove(...this.getClassNamesFor('source:dragging'));\r\n    this.originalSource.classList.remove(...this.getClassNamesFor('source:original'));\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:placed'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:placed'));\r\n    this.sourceContainer.classList.remove(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.remove(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, '');\r\n\r\n    if (this.currentOver) {\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n    }\r\n\r\n    if (this.currentOverContainer) {\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n    }\r\n\r\n    this.lastPlacedSource = this.originalSource;\r\n    this.lastPlacedContainer = this.sourceContainer;\r\n\r\n    this.placedTimeoutID = setTimeout(() => {\r\n      if (this.lastPlacedSource) {\r\n        this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      }\r\n\r\n      if (this.lastPlacedContainer) {\r\n        this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n      }\r\n\r\n      this.lastPlacedSource = null;\r\n      this.lastPlacedContainer = null;\r\n    }, this.options.placedTimeout);\r\n\r\n    const dragStoppedEvent = new _DragEvent.DragStoppedEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStoppedEvent);\r\n\r\n    this.source = null;\r\n    this.originalSource = null;\r\n    this.currentOverContainer = null;\r\n    this.currentOver = null;\r\n    this.sourceContainer = null;\r\n  }\r\n\r\n  /**\r\n   * Drag pressure handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragPressure](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);\r\n\r\n    const dragPressureEvent = new _DragEvent.DragPressureEvent({\r\n      sensorEvent,\r\n      source,\r\n      pressure: sensorEvent.pressure\r\n    });\r\n\r\n    this.trigger(dragPressureEvent);\r\n  }\r\n}\r\n\r\nexports.default = Draggable;\r\nDraggable.Plugins = { Announcement: _Plugins.Announcement, Focusable: _Plugins.Focusable, Mirror: _Plugins.Mirror, Scrollable: _Plugins.Scrollable };\r\nDraggable.Sensors = { MouseSensor: _Sensors.MouseSensor, TouchSensor: _Sensors.TouchSensor };\r\nfunction getSensorEvent(event) {\r\n  return event.detail;\r\n}\r\n\r\nfunction applyUserSelect(element, value) {\r\n  element.style.webkitUserSelect = value;\r\n  element.style.mozUserSelect = value;\r\n  element.style.msUserSelect = value;\r\n  element.style.oUserSelect = value;\r\n  element.style.userSelect = value;\r\n}\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_34931__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_34931__(2);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_34931__(1);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseForceWillBegin = Symbol('onMouseForceWillBegin');\r\nconst onMouseForceDown = Symbol('onMouseForceDown');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseForceChange = Symbol('onMouseForceChange');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');\r\n\r\n/**\r\n * This sensor picks up native force touch events and dictates drag operations\r\n * @class ForceTouchSensor\r\n * @module ForceTouchSensor\r\n * @extends Sensor\r\n */\r\nclass ForceTouchSensor extends _Sensor2.default {\r\n  /**\r\n   * ForceTouchSensor constructor.\r\n   * @constructs ForceTouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property mightDrag\r\n     * @type {Boolean}\r\n     */\r\n    this.mightDrag = false;\r\n\r\n    this[onMouseForceWillBegin] = this[onMouseForceWillBegin].bind(this);\r\n    this[onMouseForceDown] = this[onMouseForceDown].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseForceChange] = this[onMouseForceChange].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    for (const container of this.containers) {\r\n      container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.addEventListener('mousedown', this[onMouseDown], true);\r\n      container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.addEventListener('mousemove', this[onMouseMove]);\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    for (const container of this.containers) {\r\n      container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.removeEventListener('mousedown', this[onMouseDown], true);\r\n      container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Mouse force will begin handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseForceWillBegin](event) {\r\n    event.preventDefault();\r\n    this.mightDrag = true;\r\n  }\r\n\r\n  /**\r\n   * Mouse force down handler\r\n   * @private\r\n   * @param {Event} event - Mouse force down event\r\n   */\r\n  [onMouseForceDown](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = event.currentTarget;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStartEvent);\r\n\r\n    this.currentContainer = container;\r\n    this.dragging = !dragStartEvent.canceled();\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target: null,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (!this.mightDrag) {\r\n      return;\r\n    }\r\n\r\n    // Need workaround for real click\r\n    // Cancel potential drag events\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force change event\r\n   */\r\n  [onMouseForceChange](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n    const container = event.currentTarget;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragPressureEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force global change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force global change event\r\n   */\r\n  [onMouseForceGlobalChange](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragPressureEvent);\r\n  }\r\n}\r\nexports.default = ForceTouchSensor;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_41671__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_41671__(13);\r\n\r\nvar _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ForceTouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_42111__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_42111__(0);\r\n\r\nvar _Sensor = __nested_webpack_require_42111__(2);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_42111__(1);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragEnd = Symbol('onDragEnd');\r\nconst onDrop = Symbol('onDrop');\r\nconst reset = Symbol('reset');\r\n\r\n/**\r\n * This sensor picks up native browser drag events and dictates drag operations\r\n * @class DragSensor\r\n * @module DragSensor\r\n * @extends Sensor\r\n */\r\nclass DragSensor extends _Sensor2.default {\r\n  /**\r\n   * DragSensor constructor.\r\n   * @constructs DragSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up setting the draggable attribute, unless canceled\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property draggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.draggableElement = null;\r\n\r\n    /**\r\n     * Native draggable element could be links or images, their draggable state will be disabled during drag operation\r\n     * @property nativeDraggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.nativeDraggableElement = null;\r\n\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragEnd] = this[onDragEnd].bind(this);\r\n    this[onDrop] = this[onDrop].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    // Need for firefox. \"text\" key is needed for IE\r\n    event.dataTransfer.setData('text', '');\r\n    event.dataTransfer.effectAllowed = this.options.type;\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    this.currentContainer = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    // Workaround\r\n    setTimeout(() => {\r\n      this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n      if (dragStartEvent.canceled()) {\r\n        this.dragging = false;\r\n      } else {\r\n        this.dragging = true;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {Event} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragMoveEvent);\r\n\r\n    if (!dragMoveEvent.canceled()) {\r\n      event.preventDefault();\r\n      event.dataTransfer.dropEffect = this.options.type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag end handler\r\n   * @private\r\n   * @param {Event} event - Drag end event\r\n   */\r\n  [onDragEnd](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStopEvent);\r\n\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Drop handler\r\n   * @private\r\n   * @param {Event} event - Drop event\r\n   */\r\n  [onDrop](event) {\r\n    // eslint-disable-line class-methods-use-this\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071\r\n    if (event.target && (event.target.form || event.target.contenteditable)) {\r\n      return;\r\n    }\r\n\r\n    const nativeDraggableElement = (0, _utils.closest)(event.target, element => element.draggable);\r\n\r\n    if (nativeDraggableElement) {\r\n      nativeDraggableElement.draggable = false;\r\n      this.nativeDraggableElement = nativeDraggableElement;\r\n    }\r\n\r\n    document.addEventListener('mouseup', this[onMouseUp], true);\r\n    document.addEventListener('dragstart', this[onDragStart], false);\r\n    document.addEventListener('dragover', this[onDragOver], false);\r\n    document.addEventListener('dragend', this[onDragEnd], false);\r\n    document.addEventListener('drop', this[onDrop], false);\r\n\r\n    const target = (0, _utils.closest)(event.target, this.options.draggable);\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.startEvent = event;\r\n\r\n    this.mouseDownTimeout = setTimeout(() => {\r\n      target.draggable = true;\r\n      this.draggableElement = target;\r\n    }, this.delay.drag);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp]() {\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [reset]() {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n    document.removeEventListener('dragstart', this[onDragStart], false);\r\n    document.removeEventListener('dragover', this[onDragOver], false);\r\n    document.removeEventListener('dragend', this[onDragEnd], false);\r\n    document.removeEventListener('drop', this[onDrop], false);\r\n\r\n    if (this.nativeDraggableElement) {\r\n      this.nativeDraggableElement.draggable = true;\r\n      this.nativeDraggableElement = null;\r\n    }\r\n\r\n    if (this.draggableElement) {\r\n      this.draggableElement.draggable = false;\r\n      this.draggableElement = null;\r\n    }\r\n  }\r\n}\r\nexports.default = DragSensor;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_49384__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_49384__(15);\r\n\r\nvar _DragSensor2 = _interopRequireDefault(_DragSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _DragSensor2.default;\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_49800__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_49800__(0);\r\n\r\nvar _Sensor = __nested_webpack_require_49800__(2);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_49800__(1);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onTouchStart = Symbol('onTouchStart');\r\nconst onTouchEnd = Symbol('onTouchEnd');\r\nconst onTouchMove = Symbol('onTouchMove');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * Prevents scrolling when set to true\r\n * @var {Boolean} preventScrolling\r\n */\r\nlet preventScrolling = false;\r\n\r\n// WebKit requires cancelable `touchmove` events to be added as early as possible\r\nwindow.addEventListener('touchmove', event => {\r\n  if (!preventScrolling) {\r\n    return;\r\n  }\r\n\r\n  // Prevent scrolling\r\n  event.preventDefault();\r\n}, { passive: false });\r\n\r\n/**\r\n * This sensor picks up native browser touch events and dictates drag operations\r\n * @class TouchSensor\r\n * @module TouchSensor\r\n * @extends Sensor\r\n */\r\nclass TouchSensor extends _Sensor2.default {\r\n  /**\r\n   * TouchSensor constructor.\r\n   * @constructs TouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Closest scrollable container so accidental scroll can cancel long touch\r\n     * @property currentScrollableParent\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentScrollableParent = null;\r\n\r\n    /**\r\n     * TimeoutID for managing delay\r\n     * @property tapTimeout\r\n     * @type {Number}\r\n     */\r\n    this.tapTimeout = null;\r\n\r\n    /**\r\n     * touchMoved indicates if touch has moved during tapTimeout\r\n     * @property touchMoved\r\n     * @type {Boolean}\r\n     */\r\n    this.touchMoved = false;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onTouchStart] = this[onTouchStart].bind(this);\r\n    this[onTouchEnd] = this[onTouchEnd].bind(this);\r\n    this[onTouchMove] = this[onTouchMove].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Touch start handler\r\n   * @private\r\n   * @param {Event} event - Touch start event\r\n   */\r\n  [onTouchStart](event) {\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n    const { distance = 0 } = this.options;\r\n    const { delay } = this;\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onTouchStartAt = Date.now();\r\n    this.startEvent = event;\r\n    this.currentContainer = container;\r\n\r\n    document.addEventListener('touchend', this[onTouchEnd]);\r\n    document.addEventListener('touchcancel', this[onTouchEnd]);\r\n    document.addEventListener('touchmove', this[onDistanceChange]);\r\n    container.addEventListener('contextmenu', onContextMenu);\r\n\r\n    if (distance) {\r\n      preventScrolling = true;\r\n    }\r\n\r\n    this.tapTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ touches: [{ pageX: this.pageX, pageY: this.pageY }] });\r\n    }, delay.touch);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n    const touch = (0, _utils.touchCoords)(startEvent);\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: touch.pageX,\r\n      clientY: touch.pageY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('touchmove', this[onTouchMove]);\r\n    }\r\n    preventScrolling = this.dragging;\r\n  }\r\n\r\n  /**\r\n   * Touch move handler prior to drag start.\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n    const start = (0, _utils.touchCoords)(startEvent);\r\n    const current = (0, _utils.touchCoords)(event);\r\n    const timeElapsed = Date.now() - this.onTouchStartAt;\r\n    const distanceTravelled = (0, _utils.distance)(start.pageX, start.pageY, current.pageX, current.pageY);\r\n\r\n    Object.assign(this, current);\r\n\r\n    clearTimeout(this.tapTimeout);\r\n\r\n    if (timeElapsed < delay.touch) {\r\n      // moved during delay\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler while dragging\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onTouchMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Touch end handler\r\n   * @private\r\n   * @param {Event} event - Touch end event\r\n   */\r\n  [onTouchEnd](event) {\r\n    clearTimeout(this.tapTimeout);\r\n    preventScrolling = false;\r\n\r\n    document.removeEventListener('touchend', this[onTouchEnd]);\r\n    document.removeEventListener('touchcancel', this[onTouchEnd]);\r\n    document.removeEventListener('touchmove', this[onDistanceChange]);\r\n\r\n    if (this.currentContainer) {\r\n      this.currentContainer.removeEventListener('contextmenu', onContextMenu);\r\n    }\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('touchmove', this[onTouchMove]);\r\n\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    event.preventDefault();\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n}\r\n\r\nexports.default = TouchSensor;\r\nfunction onContextMenu(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_57280__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_57280__(17);\r\n\r\nvar _TouchSensor2 = _interopRequireDefault(_TouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _TouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_57700__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_57700__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sensor event\r\n * @class SensorEvent\r\n * @module SensorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SensorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Original browser event that triggered a sensor\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    return this.data.originalEvent;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientX for both touch and mouse events\r\n   * @property clientX\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientX() {\r\n    return this.data.clientX;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientY for both touch and mouse events\r\n   * @property clientY\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientY() {\r\n    return this.data.clientY;\r\n  }\r\n\r\n  /**\r\n   * Normalized target for both touch and mouse events\r\n   * Returns the element that is behind cursor or touch pointer\r\n   * @property target\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get target() {\r\n    return this.data.target;\r\n  }\r\n\r\n  /**\r\n   * Container that initiated the sensor\r\n   * @property container\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get container() {\r\n    return this.data.container;\r\n  }\r\n\r\n  /**\r\n   * Trackpad pressure\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.SensorEvent = SensorEvent; /**\r\n                                    * Drag start sensor event\r\n                                    * @class DragStartSensorEvent\r\n                                    * @module DragStartSensorEvent\r\n                                    * @extends SensorEvent\r\n                                    */\r\n\r\nclass DragStartSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStartSensorEvent = DragStartSensorEvent; /**\r\n                                                      * Drag move sensor event\r\n                                                      * @class DragMoveSensorEvent\r\n                                                      * @module DragMoveSensorEvent\r\n                                                      * @extends SensorEvent\r\n                                                      */\r\n\r\nDragStartSensorEvent.type = 'drag:start';\r\nclass DragMoveSensorEvent extends SensorEvent {}\r\n\r\nexports.DragMoveSensorEvent = DragMoveSensorEvent; /**\r\n                                                    * Drag stop sensor event\r\n                                                    * @class DragStopSensorEvent\r\n                                                    * @module DragStopSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragMoveSensorEvent.type = 'drag:move';\r\nclass DragStopSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStopSensorEvent = DragStopSensorEvent; /**\r\n                                                    * Drag pressure sensor event\r\n                                                    * @class DragPressureSensorEvent\r\n                                                    * @module DragPressureSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragStopSensorEvent.type = 'drag:stop';\r\nclass DragPressureSensorEvent extends SensorEvent {}\r\nexports.DragPressureSensorEvent = DragPressureSensorEvent;\r\nDragPressureSensorEvent.type = 'drag:pressure';\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __nested_webpack_require_61691__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_61691__(0);\r\n\r\nvar _Sensor = __nested_webpack_require_61691__(2);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_61691__(1);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * This sensor picks up native browser mouse events and dictates drag operations\r\n * @class MouseSensor\r\n * @module MouseSensor\r\n * @extends Sensor\r\n */\r\nclass MouseSensor extends _Sensor2.default {\r\n  /**\r\n   * MouseSensor constructor.\r\n   * @constructs MouseSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up triggering the drag start operation\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onContextMenuWhileDragging] = this[onContextMenuWhileDragging].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (event.button !== 0 || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n\r\n    const { delay } = this;\r\n    const { pageX, pageY } = event;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onMouseDownAt = Date.now();\r\n    this.startEvent = event;\r\n\r\n    this.currentContainer = container;\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n    document.addEventListener('dragstart', preventNativeDragStart);\r\n    document.addEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    this.mouseDownTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ pageX: this.pageX, pageY: this.pageY });\r\n    }, delay.mouse);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n      document.addEventListener('mousemove', this[onMouseMove]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect change in distance, starting drag when both\r\n   * delay and distance requirements are met\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { pageX, pageY } = event;\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const timeElapsed = Date.now() - this.onMouseDownAt;\r\n    const distanceTravelled = (0, _utils.distance)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;\r\n\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (timeElapsed < delay.mouse) {\r\n      // moved during delay\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n    document.removeEventListener('dragstart', preventNativeDragStart);\r\n    document.removeEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n\r\n  /**\r\n   * Context menu handler\r\n   * @private\r\n   * @param {Event} event - Context menu event\r\n   */\r\n  [onContextMenuWhileDragging](event) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nexports.default = MouseSensor;\r\nfunction preventNativeDragStart(event) {\r\n  event.preventDefault();\r\n}\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __nested_webpack_require_68563__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_68563__(20);\r\n\r\nvar _MouseSensor2 = _interopRequireDefault(_MouseSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _MouseSensor2.default;\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst defaultDealy = {\r\n  mouse: 0,\r\n  drag: 0,\r\n  touch: 100\r\n};\r\n\r\n/**\r\n * Base sensor class. Extend from this class to create a new or custom sensor\r\n * @class Sensor\r\n * @module Sensor\r\n */\r\nclass Sensor {\r\n  /**\r\n   * Sensor constructor.\r\n   * @constructs Sensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    /**\r\n     * Current containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.containers = [...containers];\r\n\r\n    /**\r\n     * Current options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, options);\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Current container\r\n     * @property currentContainer\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentContainer = null;\r\n\r\n    /**\r\n     * The event of the initial sensor down\r\n     * @property startEvent\r\n     * @type {Event}\r\n     */\r\n    this.startEvent = null;\r\n\r\n    /**\r\n     * The delay of each sensor\r\n     * @property delay\r\n     * @type {Object}\r\n     */\r\n    this.delay = calcDelay(options.delay);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  attach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  detach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to this sensor\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n  }\r\n\r\n  /**\r\n   * Removes container from this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from this sensor\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n  }\r\n\r\n  /**\r\n   * Triggers event on target element\r\n   * @param {HTMLElement} element - Element to trigger event on\r\n   * @param {SensorEvent} sensorEvent - Sensor event to trigger\r\n   */\r\n  trigger(element, sensorEvent) {\r\n    const event = document.createEvent('Event');\r\n    event.detail = sensorEvent;\r\n    event.initEvent(sensorEvent.type, true, true);\r\n    element.dispatchEvent(event);\r\n    this.lastEvent = sensorEvent;\r\n\r\n    return sensorEvent;\r\n  }\r\n}\r\n\r\nexports.default = Sensor; /**\r\n                           * Calculate the delay of each sensor through the delay in the options\r\n                           * @param {undefined|Number|Object} optionsDelay - the delay in the options\r\n                           * @return {Object}\r\n                           */\r\n\r\nfunction calcDelay(optionsDelay) {\r\n  const delay = {};\r\n\r\n  if (optionsDelay === undefined) {\r\n    return _extends({}, defaultDealy);\r\n  }\r\n\r\n  if (typeof optionsDelay === 'number') {\r\n    for (const key in defaultDealy) {\r\n      if (defaultDealy.hasOwnProperty(key)) {\r\n        delay[key] = optionsDelay;\r\n      }\r\n    }\r\n    return delay;\r\n  }\r\n\r\n  for (const key in defaultDealy) {\r\n    if (defaultDealy.hasOwnProperty(key)) {\r\n      if (optionsDelay[key] === undefined) {\r\n        delay[key] = defaultDealy[key];\r\n      } else {\r\n        delay[key] = optionsDelay[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return delay;\r\n}\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __nested_webpack_require_72985__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_72985__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_72985__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst scroll = exports.scroll = Symbol('scroll');\r\n\r\n/**\r\n * Scrollable default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.speed\r\n * @property {Number} defaultOptions.sensitivity\r\n * @property {HTMLElement[]} defaultOptions.scrollableElements\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  speed: 6,\r\n  sensitivity: 50,\r\n  scrollableElements: []\r\n};\r\n\r\n/**\r\n * Scrollable plugin which scrolls the closest scrollable parent\r\n * @class Scrollable\r\n * @module Scrollable\r\n * @extends AbstractPlugin\r\n */\r\nclass Scrollable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Scrollable constructor.\r\n   * @constructs Scrollable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Scrollable options\r\n     * @property {Object} options\r\n     * @property {Number} options.speed\r\n     * @property {Number} options.sensitivity\r\n     * @property {HTMLElement[]} options.scrollableElements\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Keeps current mouse position\r\n     * @property {Object} currentMousePosition\r\n     * @property {Number} currentMousePosition.clientX\r\n     * @property {Number} currentMousePosition.clientY\r\n     * @type {Object|null}\r\n     */\r\n    this.currentMousePosition = null;\r\n\r\n    /**\r\n     * Scroll animation frame\r\n     * @property scrollAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.scrollAnimationFrame = null;\r\n\r\n    /**\r\n     * Closest scrollable element\r\n     * @property scrollableElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.scrollableElement = null;\r\n\r\n    /**\r\n     * Animation frame looking for the closest scrollable element\r\n     * @property findScrollableElementFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.findScrollableElementFrame = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[scroll] = this[scroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.scrollable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns closest scrollable elements by element\r\n   * @param {HTMLElement} target\r\n   * @return {HTMLElement}\r\n   */\r\n  getScrollableElement(target) {\r\n    if (this.hasDefinedScrollableElements()) {\r\n      return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;\r\n    } else {\r\n      return closestScrollableElement(target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if at least one scrollable element have been defined via options\r\n   * @param {HTMLElement} target\r\n   * @return {Boolean}\r\n   */\r\n  hasDefinedScrollableElements() {\r\n    return Boolean(this.options.scrollableElements.length !== 0);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler. Finds closest scrollable parent in separate frame\r\n   * @param {DragStartEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragStart](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler. Remembers mouse position and initiates scrolling\r\n   * @param {DragMoveEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragMove](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.sensorEvent.target);\r\n    });\r\n\r\n    if (!this.scrollableElement) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = dragEvent.sensorEvent;\r\n    const scrollOffset = { x: 0, y: 0 };\r\n\r\n    if ('ontouchstart' in window) {\r\n      scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n      scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\r\n    }\r\n\r\n    this.currentMousePosition = {\r\n      clientX: sensorEvent.clientX - scrollOffset.x,\r\n      clientY: sensorEvent.clientY - scrollOffset.y\r\n    };\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler. Cancels scroll animations and resets state\r\n   * @private\r\n   */\r\n  [onDragStop]() {\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n    cancelAnimationFrame(this.findScrollableElementFrame);\r\n\r\n    this.scrollableElement = null;\r\n    this.scrollAnimationFrame = null;\r\n    this.findScrollableElementFrame = null;\r\n    this.currentMousePosition = null;\r\n  }\r\n\r\n  /**\r\n   * Scroll function that does the heavylifting\r\n   * @private\r\n   */\r\n  [scroll]() {\r\n    if (!this.scrollableElement || !this.currentMousePosition) {\r\n      return;\r\n    }\r\n\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n\r\n    const { speed, sensitivity } = this.options;\r\n\r\n    const rect = this.scrollableElement.getBoundingClientRect();\r\n    const bottomCutOff = rect.bottom > window.innerHeight;\r\n    const topCutOff = rect.top < 0;\r\n    const cutOff = topCutOff || bottomCutOff;\r\n\r\n    const documentScrollingElement = getDocumentScrollingElement();\r\n    const scrollableElement = this.scrollableElement;\r\n    const clientX = this.currentMousePosition.clientX;\r\n    const clientY = this.currentMousePosition.clientY;\r\n\r\n    if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {\r\n      const { offsetHeight, offsetWidth } = scrollableElement;\r\n\r\n      if (rect.top + offsetHeight - clientY < sensitivity) {\r\n        scrollableElement.scrollTop += speed;\r\n      } else if (clientY - rect.top < sensitivity) {\r\n        scrollableElement.scrollTop -= speed;\r\n      }\r\n\r\n      if (rect.left + offsetWidth - clientX < sensitivity) {\r\n        scrollableElement.scrollLeft += speed;\r\n      } else if (clientX - rect.left < sensitivity) {\r\n        scrollableElement.scrollLeft -= speed;\r\n      }\r\n    } else {\r\n      const { innerHeight, innerWidth } = window;\r\n\r\n      if (clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop -= speed;\r\n      } else if (innerHeight - clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop += speed;\r\n      }\r\n\r\n      if (clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft -= speed;\r\n      } else if (innerWidth - clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft += speed;\r\n      }\r\n    }\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n}\r\n\r\nexports.default = Scrollable; /**\r\n                               * Returns true if the passed element has overflow\r\n                               * @param {HTMLElement} element\r\n                               * @return {Boolean}\r\n                               * @private\r\n                               */\r\n\r\nfunction hasOverflow(element) {\r\n  const overflowRegex = /(auto|scroll)/;\r\n  const computedStyles = getComputedStyle(element, null);\r\n\r\n  const overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');\r\n\r\n  return overflowRegex.test(overflow);\r\n}\r\n\r\n/**\r\n * Returns true if the passed element is statically positioned\r\n * @param {HTMLElement} element\r\n * @return {Boolean}\r\n * @private\r\n */\r\nfunction isStaticallyPositioned(element) {\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  return position === 'static';\r\n}\r\n\r\n/**\r\n * Finds closest scrollable element\r\n * @param {HTMLElement} element\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction closestScrollableElement(element) {\r\n  if (!element) {\r\n    return getDocumentScrollingElement();\r\n  }\r\n\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  const excludeStaticParents = position === 'absolute';\r\n\r\n  const scrollableElement = (0, _utils.closest)(element, parent => {\r\n    if (excludeStaticParents && isStaticallyPositioned(parent)) {\r\n      return false;\r\n    }\r\n    return hasOverflow(parent);\r\n  });\r\n\r\n  if (position === 'fixed' || !scrollableElement) {\r\n    return getDocumentScrollingElement();\r\n  } else {\r\n    return scrollableElement;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns element that scrolls document\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction getDocumentScrollingElement() {\r\n  return document.scrollingElement || document.documentElement;\r\n}\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_82907__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Scrollable = __nested_webpack_require_82907__(23);\r\n\r\nvar _Scrollable2 = _interopRequireDefault(_Scrollable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Scrollable2.default;\r\nexports.defaultOptions = _Scrollable.defaultOptions;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_83414__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_83414__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base mirror event\r\n * @class MirrorEvent\r\n * @module MirrorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass MirrorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Drag event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.MirrorEvent = MirrorEvent; /**\r\n                                    * Mirror create event\r\n                                    * @class MirrorCreateEvent\r\n                                    * @module MirrorCreateEvent\r\n                                    * @extends MirrorEvent\r\n                                    */\r\n\r\nclass MirrorCreateEvent extends MirrorEvent {}\r\n\r\nexports.MirrorCreateEvent = MirrorCreateEvent; /**\r\n                                                * Mirror created event\r\n                                                * @class MirrorCreatedEvent\r\n                                                * @module MirrorCreatedEvent\r\n                                                * @extends MirrorEvent\r\n                                                */\r\n\r\nMirrorCreateEvent.type = 'mirror:create';\r\nclass MirrorCreatedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorCreatedEvent = MirrorCreatedEvent; /**\r\n                                                  * Mirror attached event\r\n                                                  * @class MirrorAttachedEvent\r\n                                                  * @module MirrorAttachedEvent\r\n                                                  * @extends MirrorEvent\r\n                                                  */\r\n\r\nMirrorCreatedEvent.type = 'mirror:created';\r\nclass MirrorAttachedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorAttachedEvent = MirrorAttachedEvent; /**\r\n                                                    * Mirror move event\r\n                                                    * @class MirrorMoveEvent\r\n                                                    * @module MirrorMoveEvent\r\n                                                    * @extends MirrorEvent\r\n                                                    */\r\n\r\nMirrorAttachedEvent.type = 'mirror:attached';\r\nclass MirrorMoveEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on x axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshX() {\r\n    return this.data.passedThreshX;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on y axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshY() {\r\n    return this.data.passedThreshY;\r\n  }\r\n}\r\n\r\nexports.MirrorMoveEvent = MirrorMoveEvent; /**\r\n                                            * Mirror destroy event\r\n                                            * @class MirrorDestroyEvent\r\n                                            * @module MirrorDestroyEvent\r\n                                            * @extends MirrorEvent\r\n                                            */\r\n\r\nMirrorMoveEvent.type = 'mirror:move';\r\nMirrorMoveEvent.cancelable = true;\r\nclass MirrorDestroyEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\nexports.MirrorDestroyEvent = MirrorDestroyEvent;\r\nMirrorDestroyEvent.type = 'mirror:destroy';\r\nMirrorDestroyEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __nested_webpack_require_88866__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MirrorEvent = __nested_webpack_require_88866__(25);\r\n\r\nObject.keys(_MirrorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _MirrorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_89334__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_89334__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _MirrorEvent = __nested_webpack_require_89334__(26);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');\r\nconst onScroll = exports.onScroll = Symbol('onScroll');\r\nconst getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');\r\n\r\n/**\r\n * Mirror default options\r\n * @property {Object} defaultOptions\r\n * @property {Boolean} defaultOptions.constrainDimensions\r\n * @property {Boolean} defaultOptions.xAxis\r\n * @property {Boolean} defaultOptions.yAxis\r\n * @property {null} defaultOptions.cursorOffsetX\r\n * @property {null} defaultOptions.cursorOffsetY\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  constrainDimensions: false,\r\n  xAxis: true,\r\n  yAxis: true,\r\n  cursorOffsetX: null,\r\n  cursorOffsetY: null,\r\n  thresholdX: null,\r\n  thresholdY: null\r\n};\r\n\r\n/**\r\n * Mirror plugin which controls the mirror positioning while dragging\r\n * @class Mirror\r\n * @module Mirror\r\n * @extends AbstractPlugin\r\n */\r\nclass Mirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * Mirror constructor.\r\n   * @constructs Mirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Mirror options\r\n     * @property {Object} options\r\n     * @property {Boolean} options.constrainDimensions\r\n     * @property {Boolean} options.xAxis\r\n     * @property {Boolean} options.yAxis\r\n     * @property {Number|null} options.cursorOffsetX\r\n     * @property {Number|null} options.cursorOffsetY\r\n     * @property {String|HTMLElement|Function} options.appendTo\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Initial scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorMove] = this[onMirrorMove].bind(this);\r\n    this[onScroll] = this[onScroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.mirror || {};\r\n  }\r\n\r\n  [onDragStart](dragEvent) {\r\n    if (dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if ('ontouchstart' in window) {\r\n      document.addEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    // Last sensor position of mirror move\r\n    this.lastMirrorMovedClient = {\r\n      x: sensorEvent.clientX,\r\n      y: sensorEvent.clientY\r\n    };\r\n\r\n    const mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreateEvent);\r\n\r\n    if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const appendableContainer = this[getAppendableContainer](source) || sourceContainer;\r\n    this.mirror = source.cloneNode(true);\r\n\r\n    const mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    const mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreatedEvent);\r\n    appendableContainer.appendChild(this.mirror);\r\n    this.draggable.trigger(mirrorAttachedEvent);\r\n  }\r\n\r\n  [onDragMove](dragEvent) {\r\n    if (!this.mirror || dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    let passedThreshX = true;\r\n    let passedThreshY = true;\r\n\r\n    if (this.options.thresholdX || this.options.thresholdY) {\r\n      const { x: lastX, y: lastY } = this.lastMirrorMovedClient;\r\n\r\n      if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {\r\n        passedThreshX = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.x = sensorEvent.clientX;\r\n      }\r\n\r\n      if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {\r\n        passedThreshY = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.y = sensorEvent.clientY;\r\n      }\r\n\r\n      if (!passedThreshX && !passedThreshY) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror,\r\n      passedThreshX,\r\n      passedThreshY\r\n    });\r\n\r\n    this.draggable.trigger(mirrorMoveEvent);\r\n  }\r\n\r\n  [onDragStop](dragEvent) {\r\n    if ('ontouchstart' in window) {\r\n      document.removeEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = { x: 0, y: 0 };\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    if (!this.mirror) {\r\n      return;\r\n    }\r\n\r\n    const { source, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    const mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({\r\n      source,\r\n      mirror: this.mirror,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorDestroyEvent);\r\n\r\n    if (!mirrorDestroyEvent.canceled()) {\r\n      this.mirror.parentNode.removeChild(this.mirror);\r\n    }\r\n  }\r\n\r\n  [onScroll]() {\r\n    this.scrollOffset = {\r\n      x: window.scrollX - this.initialScrollOffset.x,\r\n      y: window.scrollY - this.initialScrollOffset.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror, source, sensorEvent }) {\r\n    const mirrorClasses = this.draggable.getClassNamesFor('mirror');\r\n\r\n    const setState = (_ref) => {\r\n      let { mirrorOffset, initialX, initialY } = _ref,\r\n          args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);\r\n\r\n      this.mirrorOffset = mirrorOffset;\r\n      this.initialX = initialX;\r\n      this.initialY = initialY;\r\n      this.lastMovedX = initialX;\r\n      this.lastMovedY = initialY;\r\n      return _extends({ mirrorOffset, initialX, initialY }, args);\r\n    };\r\n\r\n    mirror.style.display = 'none';\r\n\r\n    const initialState = {\r\n      mirror,\r\n      source,\r\n      sensorEvent,\r\n      mirrorClasses,\r\n      scrollOffset: this.scrollOffset,\r\n      options: this.options,\r\n      passedThreshX: true,\r\n      passedThreshY: true\r\n    };\r\n\r\n    return Promise.resolve(initialState)\r\n    // Fix reflow here\r\n    .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({ initial: true })).then(removeMirrorID).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Mirror move handler\r\n   * @param {MirrorMoveEvent} mirrorEvent\r\n   * @return {Promise|null}\r\n   * @private\r\n   */\r\n  [onMirrorMove](mirrorEvent) {\r\n    if (mirrorEvent.canceled()) {\r\n      return null;\r\n    }\r\n\r\n    const setState = (_ref2) => {\r\n      let { lastMovedX, lastMovedY } = _ref2,\r\n          args = _objectWithoutProperties(_ref2, ['lastMovedX', 'lastMovedY']);\r\n\r\n      this.lastMovedX = lastMovedX;\r\n      this.lastMovedY = lastMovedY;\r\n\r\n      return _extends({ lastMovedX, lastMovedY }, args);\r\n    };\r\n\r\n    const initialState = {\r\n      mirror: mirrorEvent.mirror,\r\n      sensorEvent: mirrorEvent.sensorEvent,\r\n      mirrorOffset: this.mirrorOffset,\r\n      options: this.options,\r\n      initialX: this.initialX,\r\n      initialY: this.initialY,\r\n      scrollOffset: this.scrollOffset,\r\n      passedThreshX: mirrorEvent.passedThreshX,\r\n      passedThreshY: mirrorEvent.passedThreshY,\r\n      lastMovedX: this.lastMovedX,\r\n      lastMovedY: this.lastMovedY\r\n    };\r\n\r\n    return Promise.resolve(initialState).then(positionMirror({ raf: true })).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Returns appendable container for mirror based on the appendTo option\r\n   * @private\r\n   * @param {Object} options\r\n   * @param {HTMLElement} options.source - Current source\r\n   * @return {HTMLElement}\r\n   */\r\n  [getAppendableContainer](source) {\r\n    const appendTo = this.options.appendTo;\r\n\r\n    if (typeof appendTo === 'string') {\r\n      return document.querySelector(appendTo);\r\n    } else if (appendTo instanceof HTMLElement) {\r\n      return appendTo;\r\n    } else if (typeof appendTo === 'function') {\r\n      return appendTo(source);\r\n    } else {\r\n      return source.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nexports.default = Mirror; /**\r\n                           * Computes mirror dimensions based on the source element\r\n                           * Adds sourceRect to state\r\n                           * @param {Object} state\r\n                           * @param {HTMLElement} state.source\r\n                           * @return {Promise}\r\n                           * @private\r\n                           */\r\n\r\nfunction computeMirrorDimensions(_ref3) {\r\n  let { source } = _ref3,\r\n      args = _objectWithoutProperties(_ref3, ['source']);\r\n\r\n  return withPromise(resolve => {\r\n    const sourceRect = source.getBoundingClientRect();\r\n    resolve(_extends({ source, sourceRect }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Calculates mirror offset\r\n * Adds mirrorOffset to state\r\n * @param {Object} state\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {DOMRect} state.sourceRect\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction calculateMirrorOffset(_ref4) {\r\n  let { sensorEvent, sourceRect, options } = _ref4,\r\n      args = _objectWithoutProperties(_ref4, ['sensorEvent', 'sourceRect', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    const top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;\r\n    const left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;\r\n\r\n    const mirrorOffset = { top, left };\r\n\r\n    resolve(_extends({ sensorEvent, sourceRect, mirrorOffset, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror styles\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {HTMLElement} state.source\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction resetMirror(_ref5) {\r\n  let { mirror, source, options } = _ref5,\r\n      args = _objectWithoutProperties(_ref5, ['mirror', 'source', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    let offsetHeight;\r\n    let offsetWidth;\r\n\r\n    if (options.constrainDimensions) {\r\n      const computedSourceStyles = getComputedStyle(source);\r\n      offsetHeight = computedSourceStyles.getPropertyValue('height');\r\n      offsetWidth = computedSourceStyles.getPropertyValue('width');\r\n    }\r\n\r\n    mirror.style.display = null;\r\n    mirror.style.position = 'fixed';\r\n    mirror.style.pointerEvents = 'none';\r\n    mirror.style.top = 0;\r\n    mirror.style.left = 0;\r\n    mirror.style.margin = 0;\r\n\r\n    if (options.constrainDimensions) {\r\n      mirror.style.height = offsetHeight;\r\n      mirror.style.width = offsetWidth;\r\n    }\r\n\r\n    resolve(_extends({ mirror, source, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror class on mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {String[]} state.mirrorClasses\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction addMirrorClasses(_ref6) {\r\n  let { mirror, mirrorClasses } = _ref6,\r\n      args = _objectWithoutProperties(_ref6, ['mirror', 'mirrorClasses']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.classList.add(...mirrorClasses);\r\n    resolve(_extends({ mirror, mirrorClasses }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Removes source ID from cloned mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction removeMirrorID(_ref7) {\r\n  let { mirror } = _ref7,\r\n      args = _objectWithoutProperties(_ref7, ['mirror']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.removeAttribute('id');\r\n    delete mirror.id;\r\n    resolve(_extends({ mirror }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Positions mirror with translate3d\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {Object} state.mirrorOffset\r\n * @param {Number} state.initialY\r\n * @param {Number} state.initialX\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction positionMirror({ withFrame = false, initial = false } = {}) {\r\n  return (_ref8) => {\r\n    let {\r\n      mirror,\r\n      sensorEvent,\r\n      mirrorOffset,\r\n      initialY,\r\n      initialX,\r\n      scrollOffset,\r\n      options,\r\n      passedThreshX,\r\n      passedThreshY,\r\n      lastMovedX,\r\n      lastMovedY\r\n    } = _ref8,\r\n        args = _objectWithoutProperties(_ref8, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options', 'passedThreshX', 'passedThreshY', 'lastMovedX', 'lastMovedY']);\r\n\r\n    return withPromise(resolve => {\r\n      const result = _extends({\r\n        mirror,\r\n        sensorEvent,\r\n        mirrorOffset,\r\n        options\r\n      }, args);\r\n\r\n      if (mirrorOffset) {\r\n        const x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);\r\n        const y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);\r\n\r\n        if (options.xAxis && options.yAxis || initial) {\r\n          mirror.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n        } else if (options.xAxis && !options.yAxis) {\r\n          mirror.style.transform = `translate3d(${x}px, ${initialY}px, 0)`;\r\n        } else if (options.yAxis && !options.xAxis) {\r\n          mirror.style.transform = `translate3d(${initialX}px, ${y}px, 0)`;\r\n        }\r\n\r\n        if (initial) {\r\n          result.initialX = x;\r\n          result.initialY = y;\r\n        }\r\n\r\n        result.lastMovedX = x;\r\n        result.lastMovedY = y;\r\n      }\r\n\r\n      resolve(result);\r\n    }, { frame: withFrame });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps functions in promise with potential animation frame option\r\n * @param {Function} callback\r\n * @param {Object} options\r\n * @param {Boolean} options.raf\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction withPromise(callback, { raf = false } = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    if (raf) {\r\n      requestAnimationFrame(() => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      callback(resolve, reject);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if the sensor event was triggered by a native browser drag event\r\n * @param {SensorEvent} sensorEvent\r\n */\r\nfunction isNativeDragEvent(sensorEvent) {\r\n  return (/^drag/.test(sensorEvent.originalEvent.type)\r\n  );\r\n}\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __nested_webpack_require_106848__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Mirror = __nested_webpack_require_106848__(27);\r\n\r\nvar _Mirror2 = _interopRequireDefault(_Mirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Mirror2.default;\r\nexports.defaultOptions = _Mirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __nested_webpack_require_107335__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_107335__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\n\r\n/**\r\n * Focusable default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = {};\r\n\r\n/**\r\n * Focusable plugin\r\n * @class Focusable\r\n * @module Focusable\r\n * @extends AbstractPlugin\r\n */\r\nclass Focusable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Focusable constructor.\r\n   * @constructs Focusable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Focusable options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);\r\n\r\n    // Remove modified elements when detach\r\n    this[onDestroy]();\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.focusable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns draggable containers and elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getElements() {\r\n    return [...this.draggable.containers, ...this.draggable.getDraggableElements()];\r\n  }\r\n\r\n  /**\r\n   * Intialize handler\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => decorateElement(element));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy handler\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => stripElement(element));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = Focusable; /**\r\n                              * Keeps track of all the elements that are missing tabindex attributes\r\n                              * so they can be reset when draggable gets destroyed\r\n                              * @const {HTMLElement[]} elementsWithMissingTabIndex\r\n                              */\r\n\r\nconst elementsWithMissingTabIndex = [];\r\n\r\n/**\r\n * Decorates element with tabindex attributes\r\n * @param {HTMLElement} element\r\n * @return {Object}\r\n * @private\r\n */\r\nfunction decorateElement(element) {\r\n  const hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);\r\n\r\n  if (hasMissingTabIndex) {\r\n    elementsWithMissingTabIndex.push(element);\r\n    element.tabIndex = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Removes elements tabindex attributes\r\n * @param {HTMLElement} element\r\n * @private\r\n */\r\nfunction stripElement(element) {\r\n  const tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);\r\n\r\n  if (tabIndexElementPosition !== -1) {\r\n    element.tabIndex = -1;\r\n    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_111247__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_111247__(29);\r\n\r\nvar _Focusable2 = _interopRequireDefault(_Focusable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Focusable2.default;\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __nested_webpack_require_112571__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_112571__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\nconst announceEvent = Symbol('announceEvent');\r\nconst announceMessage = Symbol('announceMessage');\r\n\r\nconst ARIA_RELEVANT = 'aria-relevant';\r\nconst ARIA_ATOMIC = 'aria-atomic';\r\nconst ARIA_LIVE = 'aria-live';\r\nconst ROLE = 'role';\r\n\r\n/**\r\n * Announcement default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.expire\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  expire: 7000\r\n};\r\n\r\n/**\r\n * Announcement plugin\r\n * @class Announcement\r\n * @module Announcement\r\n * @extends AbstractPlugin\r\n */\r\nclass Announcement extends _AbstractPlugin2.default {\r\n  /**\r\n   * Announcement constructor.\r\n   * @constructs Announcement\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Plugin options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Original draggable trigger method. Hack until we have onAll or on('all')\r\n     * @property originalTriggerMethod\r\n     * @type {Function}\r\n     */\r\n    this.originalTriggerMethod = this.draggable.trigger;\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Returns passed in options\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.announcements || {};\r\n  }\r\n\r\n  /**\r\n   * Announces event\r\n   * @private\r\n   * @param {AbstractEvent} event\r\n   */\r\n  [announceEvent](event) {\r\n    const message = this.options[event.type];\r\n\r\n    if (message && typeof message === 'string') {\r\n      this[announceMessage](message);\r\n    }\r\n\r\n    if (message && typeof message === 'function') {\r\n      this[announceMessage](message(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Announces message to screen reader\r\n   * @private\r\n   * @param {String} message\r\n   */\r\n  [announceMessage](message) {\r\n    announce(message, { expire: this.options.expire });\r\n  }\r\n\r\n  /**\r\n   * Initialize hander\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Hack until there is an api for listening for all events\r\n    this.draggable.trigger = event => {\r\n      try {\r\n        this[announceEvent](event);\r\n      } finally {\r\n        // Ensure that original trigger is called\r\n        this.originalTriggerMethod.call(this.draggable, event);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy hander\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    this.draggable.trigger = this.originalTriggerMethod;\r\n  }\r\n}\r\n\r\nexports.default = Announcement; /**\r\n                                 * @const {HTMLElement} liveRegion\r\n                                 */\r\n\r\nconst liveRegion = createRegion();\r\n\r\n/**\r\n * Announces message via live region\r\n * @param {String} message\r\n * @param {Object} options\r\n * @param {Number} options.expire\r\n */\r\nfunction announce(message, { expire }) {\r\n  const element = document.createElement('div');\r\n\r\n  element.textContent = message;\r\n  liveRegion.appendChild(element);\r\n\r\n  return setTimeout(() => {\r\n    liveRegion.removeChild(element);\r\n  }, expire);\r\n}\r\n\r\n/**\r\n * Creates region element\r\n * @return {HTMLElement}\r\n */\r\nfunction createRegion() {\r\n  const element = document.createElement('div');\r\n\r\n  element.setAttribute('id', 'draggable-live-region');\r\n  element.setAttribute(ARIA_RELEVANT, 'additions');\r\n  element.setAttribute(ARIA_ATOMIC, 'true');\r\n  element.setAttribute(ARIA_LIVE, 'assertive');\r\n  element.setAttribute(ROLE, 'log');\r\n\r\n  element.style.position = 'fixed';\r\n  element.style.width = '1px';\r\n  element.style.height = '1px';\r\n  element.style.top = '-1px';\r\n  element.style.overflow = 'hidden';\r\n\r\n  return element;\r\n}\r\n\r\n// Append live region element as early as possible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  document.body.appendChild(liveRegion);\r\n});\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_117459__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Announcement = __nested_webpack_require_117459__(32);\r\n\r\nvar _Announcement2 = _interopRequireDefault(_Announcement);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Announcement2.default;\r\nexports.defaultOptions = _Announcement.defaultOptions;\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __nested_webpack_require_117976__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_117976__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base draggable event\r\n * @class DraggableEvent\r\n * @module DraggableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DraggableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggable instance\r\n   * @property draggable\r\n   * @type {Draggable}\r\n   * @readonly\r\n   */\r\n  get draggable() {\r\n    return this.data.draggable;\r\n  }\r\n}\r\n\r\nexports.DraggableEvent = DraggableEvent; /**\r\n                                          * Draggable initialized event\r\n                                          * @class DraggableInitializedEvent\r\n                                          * @module DraggableInitializedEvent\r\n                                          * @extends DraggableEvent\r\n                                          */\r\n\r\nDraggableEvent.type = 'draggable';\r\nclass DraggableInitializedEvent extends DraggableEvent {}\r\n\r\nexports.DraggableInitializedEvent = DraggableInitializedEvent; /**\r\n                                                                * Draggable destory event\r\n                                                                * @class DraggableInitializedEvent\r\n                                                                * @module DraggableDestroyEvent\r\n                                                                * @extends DraggableDestroyEvent\r\n                                                                */\r\n\r\nDraggableInitializedEvent.type = 'draggable:initialize';\r\nclass DraggableDestroyEvent extends DraggableEvent {}\r\nexports.DraggableDestroyEvent = DraggableDestroyEvent;\r\nDraggableDestroyEvent.type = 'draggable:destroy';\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __nested_webpack_require_120040__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragStoppedEvent = exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_120040__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base drag event\r\n * @class DragEvent\r\n * @module DragEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DragEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.DragEvent = DragEvent; /**\r\n                                * Drag start event\r\n                                * @class DragStartEvent\r\n                                * @module DragStartEvent\r\n                                * @extends DragEvent\r\n                                */\r\n\r\nDragEvent.type = 'drag';\r\nclass DragStartEvent extends DragEvent {}\r\n\r\nexports.DragStartEvent = DragStartEvent; /**\r\n                                          * Drag move event\r\n                                          * @class DragMoveEvent\r\n                                          * @module DragMoveEvent\r\n                                          * @extends DragEvent\r\n                                          */\r\n\r\nDragStartEvent.type = 'drag:start';\r\nDragStartEvent.cancelable = true;\r\nclass DragMoveEvent extends DragEvent {}\r\n\r\nexports.DragMoveEvent = DragMoveEvent; /**\r\n                                        * Drag over event\r\n                                        * @class DragOverEvent\r\n                                        * @module DragOverEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragMoveEvent.type = 'drag:move';\r\nclass DragOverEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOverEvent = DragOverEvent; /**\r\n                                        * Drag out event\r\n                                        * @class DragOutEvent\r\n                                        * @module DragOutEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragOverEvent.type = 'drag:over';\r\nDragOverEvent.cancelable = true;\r\nclass DragOutEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you left\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOutEvent = DragOutEvent; /**\r\n                                      * Drag over container event\r\n                                      * @class DragOverContainerEvent\r\n                                      * @module DragOverContainerEvent\r\n                                      * @extends DragEvent\r\n                                      */\r\n\r\nDragOutEvent.type = 'drag:out';\r\nclass DragOverContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOverContainerEvent = DragOverContainerEvent; /**\r\n                                                          * Drag out container event\r\n                                                          * @class DragOutContainerEvent\r\n                                                          * @module DragOutContainerEvent\r\n                                                          * @extends DragEvent\r\n                                                          */\r\n\r\nDragOverContainerEvent.type = 'drag:over:container';\r\nclass DragOutContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you left\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOutContainerEvent = DragOutContainerEvent; /**\r\n                                                        * Drag pressure event\r\n                                                        * @class DragPressureEvent\r\n                                                        * @module DragPressureEvent\r\n                                                        * @extends DragEvent\r\n                                                        */\r\n\r\nDragOutContainerEvent.type = 'drag:out:container';\r\nclass DragPressureEvent extends DragEvent {\r\n\r\n  /**\r\n   * Pressure applied on draggable element\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.DragPressureEvent = DragPressureEvent; /**\r\n                                                * Drag stop event\r\n                                                * @class DragStopEvent\r\n                                                * @module DragStopEvent\r\n                                                * @extends DragEvent\r\n                                                */\r\n\r\nDragPressureEvent.type = 'drag:pressure';\r\nclass DragStopEvent extends DragEvent {}\r\n\r\nexports.DragStopEvent = DragStopEvent; /**\r\n                                        * Drag stopped event\r\n                                        * @class DragStoppedEvent\r\n                                        * @module DragStoppedEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragStopEvent.type = 'drag:stop';\r\nclass DragStoppedEvent extends DragEvent {}\r\nexports.DragStoppedEvent = DragStoppedEvent;\r\nDragStoppedEvent.type = 'drag:stopped';\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_127565__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_127565__(8);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_127565__(7);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Plugins = __nested_webpack_require_127565__(6);\r\n\r\nObject.keys(_Plugins).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Plugins[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sensors = __nested_webpack_require_127565__(5);\r\n\r\nObject.keys(_Sensors).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Sensors[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Draggable = __nested_webpack_require_127565__(12);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Draggable2.default;\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __nested_webpack_require_129683__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_129683__(37);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __nested_webpack_require_130704__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_130704__(39);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __nested_webpack_require_131463__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_131463__(41);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_133893__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_133893__(43);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __nested_webpack_require_134297__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_134297__(0);\r\n\r\nvar _Draggable = __nested_webpack_require_134297__(36);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _DroppableEvent = __nested_webpack_require_134297__(9);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst dropInDropzone = Symbol('dropInDropZone');\r\nconst returnToOriginalDropzone = Symbol('returnToOriginalDropzone');\r\nconst closestDropzone = Symbol('closestDropzone');\r\nconst getDropzones = Symbol('getDropzones');\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element is dropped into a dropzone element\r\n * @param {DroppableDroppedEvent} droppableEvent\r\n * @return {String}\r\n */\r\nfunction onDroppableDroppedDefaultAnnouncement({ dragEvent, dropzone }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';\r\n  const dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';\r\n\r\n  return `Dropped ${sourceText} into ${dropzoneText}`;\r\n}\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element has returned to its original dropzone element\r\n * @param {DroppableReturnedEvent} droppableEvent\r\n * @return {String}\r\n */\r\nfunction onDroppableReturnedDefaultAnnouncement({ dragEvent, dropzone }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';\r\n  const dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';\r\n\r\n  return `Returned ${sourceText} from ${dropzoneText}`;\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['droppable:dropped']\r\n * @const {Function} defaultAnnouncements['droppable:returned']\r\n */\r\nconst defaultAnnouncements = {\r\n  'droppable:dropped': onDroppableDroppedDefaultAnnouncement,\r\n  'droppable:returned': onDroppableReturnedDefaultAnnouncement\r\n};\r\n\r\nconst defaultClasses = {\r\n  'droppable:active': 'draggable-dropzone--active',\r\n  'droppable:occupied': 'draggable-dropzone--occupied'\r\n};\r\n\r\nconst defaultOptions = {\r\n  dropzone: '.draggable-droppable'\r\n};\r\n\r\n/**\r\n * Droppable is built on top of Draggable and allows dropping draggable elements\r\n * into dropzone element\r\n * @class Droppable\r\n * @module Droppable\r\n * @extends Draggable\r\n */\r\nclass Droppable extends _Draggable2.default {\r\n  /**\r\n   * Droppable constructor.\r\n   * @constructs Droppable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Droppable containers\r\n   * @param {Object} options - Options for Droppable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * All dropzone elements on drag start\r\n     * @property dropzones\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.dropzones = null;\r\n\r\n    /**\r\n     * Last dropzone element that the source was dropped into\r\n     * @property lastDropzone\r\n     * @type {HTMLElement}\r\n     */\r\n    this.lastDropzone = null;\r\n\r\n    /**\r\n     * Initial dropzone element that the source was drag from\r\n     * @property initialDropzone\r\n     * @type {HTMLElement}\r\n     */\r\n    this.initialDropzone = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Droppable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.dropzones = [...this[getDropzones]()];\r\n    const dropzone = (0, _utils.closest)(event.sensorEvent.target, this.options.dropzone);\r\n\r\n    if (!dropzone) {\r\n      event.cancel();\r\n      return;\r\n    }\r\n\r\n    const droppableStartEvent = new _DroppableEvent.DroppableStartEvent({\r\n      dragEvent: event,\r\n      dropzone\r\n    });\r\n\r\n    this.trigger(droppableStartEvent);\r\n\r\n    if (droppableStartEvent.canceled()) {\r\n      event.cancel();\r\n      return;\r\n    }\r\n\r\n    this.initialDropzone = dropzone;\r\n\r\n    for (const dropzoneElement of this.dropzones) {\r\n      if (dropzoneElement.classList.contains(this.getClassNameFor('droppable:occupied'))) {\r\n        continue;\r\n      }\r\n\r\n      dropzoneElement.classList.add(...this.getClassNamesFor('droppable:active'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const dropzone = this[closestDropzone](event.sensorEvent.target);\r\n    const overEmptyDropzone = dropzone && !dropzone.classList.contains(this.getClassNameFor('droppable:occupied'));\r\n\r\n    if (overEmptyDropzone && this[dropInDropzone](event, dropzone)) {\r\n      this.lastDropzone = dropzone;\r\n    } else if ((!dropzone || dropzone === this.initialDropzone) && this.lastDropzone) {\r\n      this[returnToOriginalDropzone](event);\r\n      this.lastDropzone = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const droppableStopEvent = new _DroppableEvent.DroppableStopEvent({\r\n      dragEvent: event,\r\n      dropzone: this.lastDropzone || this.initialDropzone\r\n    });\r\n\r\n    this.trigger(droppableStopEvent);\r\n\r\n    const occupiedClasses = this.getClassNamesFor('droppable:occupied');\r\n\r\n    for (const dropzone of this.dropzones) {\r\n      dropzone.classList.remove(...this.getClassNamesFor('droppable:active'));\r\n    }\r\n\r\n    if (this.lastDropzone && this.lastDropzone !== this.initialDropzone) {\r\n      this.initialDropzone.classList.remove(...occupiedClasses);\r\n    }\r\n\r\n    this.dropzones = null;\r\n    this.lastDropzone = null;\r\n    this.initialDropzone = null;\r\n  }\r\n\r\n  /**\r\n   * Drops a draggable element into a dropzone element\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   * @param {HTMLElement} dropzone - Dropzone element to drop draggable into\r\n   */\r\n  [dropInDropzone](event, dropzone) {\r\n    const droppableDroppedEvent = new _DroppableEvent.DroppableDroppedEvent({\r\n      dragEvent: event,\r\n      dropzone\r\n    });\r\n\r\n    this.trigger(droppableDroppedEvent);\r\n\r\n    if (droppableDroppedEvent.canceled()) {\r\n      return false;\r\n    }\r\n\r\n    const occupiedClasses = this.getClassNamesFor('droppable:occupied');\r\n\r\n    if (this.lastDropzone) {\r\n      this.lastDropzone.classList.remove(...occupiedClasses);\r\n    }\r\n\r\n    dropzone.appendChild(event.source);\r\n    dropzone.classList.add(...occupiedClasses);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Moves the previously dropped element back into its original dropzone\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [returnToOriginalDropzone](event) {\r\n    const droppableReturnedEvent = new _DroppableEvent.DroppableReturnedEvent({\r\n      dragEvent: event,\r\n      dropzone: this.lastDropzone\r\n    });\r\n\r\n    this.trigger(droppableReturnedEvent);\r\n\r\n    if (droppableReturnedEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.initialDropzone.appendChild(event.source);\r\n    this.lastDropzone.classList.remove(...this.getClassNamesFor('droppable:occupied'));\r\n  }\r\n\r\n  /**\r\n   * Returns closest dropzone element for even target\r\n   * @private\r\n   * @param {HTMLElement} target - Event target\r\n   * @return {HTMLElement|null}\r\n   */\r\n  [closestDropzone](target) {\r\n    if (!this.dropzones) {\r\n      return null;\r\n    }\r\n\r\n    return (0, _utils.closest)(target, this.dropzones);\r\n  }\r\n\r\n  /**\r\n   * Returns all current dropzone elements for this draggable instance\r\n   * @private\r\n   * @return {NodeList|HTMLElement[]|Array}\r\n   */\r\n  [getDropzones]() {\r\n    const dropzone = this.options.dropzone;\r\n\r\n    if (typeof dropzone === 'string') {\r\n      return document.querySelectorAll(dropzone);\r\n    } else if (dropzone instanceof NodeList || dropzone instanceof Array) {\r\n      return dropzone;\r\n    } else if (typeof dropzone === 'function') {\r\n      return dropzone();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}\r\nexports.default = Droppable;\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __nested_webpack_require_145515__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DroppableStopEvent = exports.DroppableReturnedEvent = exports.DroppableDroppedEvent = exports.DroppableStartEvent = exports.DroppableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_145515__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base droppable event\r\n * @class DroppableEvent\r\n * @module DroppableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DroppableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this droppable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.DroppableEvent = DroppableEvent; /**\r\n                                          * Droppable start event\r\n                                          * @class DroppableStartEvent\r\n                                          * @module DroppableStartEvent\r\n                                          * @extends DroppableEvent\r\n                                          */\r\n\r\nDroppableEvent.type = 'droppable';\r\nclass DroppableStartEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The initial dropzone element of the currently dragging draggable element\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableStartEvent = DroppableStartEvent; /**\r\n                                                    * Droppable dropped event\r\n                                                    * @class DroppableDroppedEvent\r\n                                                    * @module DroppableDroppedEvent\r\n                                                    * @extends DroppableEvent\r\n                                                    */\r\n\r\nDroppableStartEvent.type = 'droppable:start';\r\nDroppableStartEvent.cancelable = true;\r\nclass DroppableDroppedEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The dropzone element you dropped the draggable element into\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableDroppedEvent = DroppableDroppedEvent; /**\r\n                                                        * Droppable returned event\r\n                                                        * @class DroppableReturnedEvent\r\n                                                        * @module DroppableReturnedEvent\r\n                                                        * @extends DroppableEvent\r\n                                                        */\r\n\r\nDroppableDroppedEvent.type = 'droppable:dropped';\r\nDroppableDroppedEvent.cancelable = true;\r\nclass DroppableReturnedEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The dropzone element you dragged away from\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\n\r\nexports.DroppableReturnedEvent = DroppableReturnedEvent; /**\r\n                                                          * Droppable stop event\r\n                                                          * @class DroppableStopEvent\r\n                                                          * @module DroppableStopEvent\r\n                                                          * @extends DroppableEvent\r\n                                                          */\r\n\r\nDroppableReturnedEvent.type = 'droppable:returned';\r\nDroppableReturnedEvent.cancelable = true;\r\nclass DroppableStopEvent extends DroppableEvent {\r\n\r\n  /**\r\n   * The final dropzone element of the draggable element\r\n   * @property dropzone\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get dropzone() {\r\n    return this.data.dropzone;\r\n  }\r\n}\r\nexports.DroppableStopEvent = DroppableStopEvent;\r\nDroppableStopEvent.type = 'droppable:stop';\r\nDroppableStopEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __nested_webpack_require_149678__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DroppableEvent = __nested_webpack_require_149678__(9);\r\n\r\nObject.keys(_DroppableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DroppableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Droppable = __nested_webpack_require_149678__(45);\r\n\r\nvar _Droppable2 = _interopRequireDefault(_Droppable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Droppable2.default;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/droppable.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/plugins.js":
/*!********************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/plugins.js ***!
  \********************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_565__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_565__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_565__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_565__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_565__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_565__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_565__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_565__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_565__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_565__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_565__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_565__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_565__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_565__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_565__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_565__(__nested_webpack_require_565__.s = 27);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4113__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_4113__(22);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_4544__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_4544__(10);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_5020__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_5020__(21);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_5020__(19);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_5020__(17);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_5020__(15);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_6144__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_6144__(24);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6571__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_6571__(25);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_7050__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_7050__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\nconst onSortableSort = Symbol('onSortableSort');\r\n\r\n/**\r\n * SortAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out'\r\n};\r\n\r\n/**\r\n * SortAnimation plugin adds sort animation for sortable\r\n * @class SortAnimation\r\n * @module SortAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SortAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SortAnimation constructor.\r\n   * @constructs SortAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SortAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n    this.lastElements = [];\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n    this[onSortableSort] = this[onSortableSort].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sort', this[onSortableSort]);\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sort', this[onSortableSort]);\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.sortAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sort handler\r\n   * @param {SortableSortEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSort]({ dragEvent }) {\r\n    const { sourceContainer } = dragEvent;\r\n    const elements = this.draggable.getDraggableElementsForContainer(sourceContainer);\r\n    this.lastElements = Array.from(elements).map(el => {\r\n      return {\r\n        domEl: el,\r\n        offsetTop: el.offsetTop,\r\n        offsetLeft: el.offsetLeft\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex }) {\r\n    if (oldIndex === newIndex) {\r\n      return;\r\n    }\r\n\r\n    const effectedElements = [];\r\n    let start;\r\n    let end;\r\n    let num;\r\n    if (oldIndex > newIndex) {\r\n      start = newIndex;\r\n      end = oldIndex - 1;\r\n      num = 1;\r\n    } else {\r\n      start = oldIndex + 1;\r\n      end = newIndex;\r\n      num = -1;\r\n    }\r\n\r\n    for (let i = start; i <= end; i++) {\r\n      const from = this.lastElements[i];\r\n      const to = this.lastElements[i + num];\r\n      effectedElements.push({ from, to });\r\n    }\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      effectedElements.forEach(element => animate(element, this.options));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SortAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {Object} element\r\n                                  * @param {Object} element.from\r\n                                  * @param {Object} element.to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate({ from, to }, { duration, easingFunction }) {\r\n  const domEl = from.domEl;\r\n  const x = from.offsetLeft - to.offsetLeft;\r\n  const y = from.offsetTop - to.offsetTop;\r\n\r\n  domEl.style.pointerEvents = 'none';\r\n  domEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n\r\n  requestAnimationFrame(() => {\r\n    domEl.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n    domEl.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n    domEl.style.transform = '';\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_12519__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SortAnimation = __nested_webpack_require_12519__(5);\r\n\r\nvar _SortAnimation2 = _interopRequireDefault(_SortAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SortAnimation2.default;\r\nexports.defaultOptions = _SortAnimation.defaultOptions;\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_13039__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_13039__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\n\r\n/**\r\n * SwapAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @property {Boolean} defaultOptions.horizontal\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out',\r\n  horizontal: false\r\n};\r\n\r\n/**\r\n * SwapAnimation plugin adds swap animations for sortable\r\n * @class SwapAnimation\r\n * @module SwapAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SwapAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SwapAnimation constructor.\r\n   * @constructs SwapAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SwapAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.swapAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex, dragEvent }) {\r\n    const { source, over } = dragEvent;\r\n\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      if (oldIndex >= newIndex) {\r\n        animate(source, over, this.options);\r\n      } else {\r\n        animate(over, source, this.options);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SwapAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {HTMLElement} from\r\n                                  * @param {HTMLElement} to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @param {String} options.horizontal\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate(from, to, { duration, easingFunction, horizontal }) {\r\n  for (const element of [from, to]) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n\r\n  if (horizontal) {\r\n    const width = from.offsetWidth;\r\n    from.style.transform = `translate3d(${width}px, 0, 0)`;\r\n    to.style.transform = `translate3d(-${width}px, 0, 0)`;\r\n  } else {\r\n    const height = from.offsetHeight;\r\n    from.style.transform = `translate3d(0, ${height}px, 0)`;\r\n    to.style.transform = `translate3d(0, -${height}px, 0)`;\r\n  }\r\n\r\n  requestAnimationFrame(() => {\r\n    for (const element of [from, to]) {\r\n      element.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n      element.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n      element.style.transform = '';\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_17772__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SwapAnimation = __nested_webpack_require_17772__(7);\r\n\r\nvar _SwapAnimation2 = _interopRequireDefault(_SwapAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SwapAnimation2.default;\r\nexports.defaultOptions = _SwapAnimation.defaultOptions;\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_18292__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_18292__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _SnappableEvent = __nested_webpack_require_18292__(1);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragOut = Symbol('onDragOut');\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\n\r\n/**\r\n * Snappable plugin which snaps draggable elements into place\r\n * @class Snappable\r\n * @module Snappable\r\n * @extends AbstractPlugin\r\n */\r\nclass Snappable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Snappable constructor.\r\n   * @constructs Snappable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of the first source element\r\n     * @property {HTMLElement|null} firstSource\r\n     */\r\n    this.firstSource = null;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragOut] = this[onDragOut].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:stop', this[onDragStop]).on('drag:over', this[onDragOver]).on('drag:out', this[onDragOut]).on('droppable:over', this[onDragOver]).on('droppable:out', this[onDragOut]).on('mirror:created', this[onMirrorCreated]).on('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:stop', this[onDragStop]).off('drag:over', this[onDragOver]).off('drag:out', this[onDragOut]).off('droppable:over', this[onDragOver]).off('droppable:out', this[onDragOut]).off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.firstSource = event.source;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop]() {\r\n    this.firstSource = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent|DroppableOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    if (source === this.firstSource) {\r\n      this.firstSource = null;\r\n      return;\r\n    }\r\n\r\n    const snapInEvent = new _SnappableEvent.SnapInEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapInEvent);\r\n\r\n    if (snapInEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = 'none';\r\n    }\r\n\r\n    source.classList.remove(...this.draggable.getClassNamesFor('source:dragging'));\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:placed'));\r\n\r\n    // Need to cancel this in drag out\r\n    setTimeout(() => {\r\n      source.classList.remove(...this.draggable.getClassNamesFor('source:placed'));\r\n    }, this.draggable.options.placedTimeout);\r\n  }\r\n\r\n  /**\r\n   * Drag out handler\r\n   * @private\r\n   * @param {DragOutEvent|DroppableOutEvent} event - Drag out event\r\n   */\r\n  [onDragOut](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    const snapOutEvent = new _SnappableEvent.SnapOutEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapOutEvent);\r\n\r\n    if (snapOutEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = '';\r\n    }\r\n\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:dragging'));\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n}\r\nexports.default = Snappable;\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __nested_webpack_require_23278__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SnapOutEvent = exports.SnapInEvent = exports.SnapEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_23278__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base snap event\r\n * @class SnapEvent\r\n * @module SnapEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SnapEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this snap event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Snappable element\r\n   * @property snappable\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get snappable() {\r\n    return this.data.snappable;\r\n  }\r\n}\r\n\r\nexports.SnapEvent = SnapEvent; /**\r\n                                * Snap in event\r\n                                * @class SnapInEvent\r\n                                * @module SnapInEvent\r\n                                * @extends SnapEvent\r\n                                */\r\n\r\nSnapEvent.type = 'snap';\r\nclass SnapInEvent extends SnapEvent {}\r\n\r\nexports.SnapInEvent = SnapInEvent; /**\r\n                                    * Snap out event\r\n                                    * @class SnapOutEvent\r\n                                    * @module SnapOutEvent\r\n                                    * @extends SnapEvent\r\n                                    */\r\n\r\nSnapInEvent.type = 'snap:in';\r\nSnapInEvent.cancelable = true;\r\nclass SnapOutEvent extends SnapEvent {}\r\nexports.SnapOutEvent = SnapOutEvent;\r\nSnapOutEvent.type = 'snap:out';\r\nSnapOutEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_25125__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_25125__(1);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_25125__(9);\r\n\r\nvar _Snappable2 = _interopRequireDefault(_Snappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Snappable2.default;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_25843__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_25843__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_25843__(2);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst resize = Symbol('resize');\r\n\r\n/**\r\n * ResizeMirror default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {};\r\n\r\n/**\r\n * The ResizeMirror plugin resizes the mirror element to the dimensions of the draggable element that the mirror is hovering over\r\n * @class ResizeMirror\r\n * @module ResizeMirror\r\n * @extends AbstractPlugin\r\n */\r\nclass ResizeMirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * ResizeMirror constructor.\r\n   * @constructs ResizeMirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * ResizeMirror options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * ResizeMirror remembers the last width when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastWidth\r\n     */\r\n    this.lastWidth = 0;\r\n\r\n    /**\r\n     * ResizeMirror remembers the last height when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastHeight\r\n     */\r\n    this.lastHeight = 0;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('mirror:created', this[onMirrorCreated]).on('drag:over', this[onDragOver]).on('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]).off('drag:over', this[onDragOver]).off('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.resizeMirror || {};\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [onDragOver](dragEvent) {\r\n    this[resize](dragEvent);\r\n  }\r\n\r\n  /**\r\n   * Resize function for\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [resize]({ overContainer, over }) {\r\n    requestAnimationFrame(() => {\r\n      if (!this.mirror.parentNode) {\r\n        return;\r\n      }\r\n\r\n      if (this.mirror.parentNode !== overContainer) {\r\n        overContainer.appendChild(this.mirror);\r\n      }\r\n\r\n      const overElement = over || this.draggable.getDraggableElementsForContainer(overContainer)[0];\r\n\r\n      if (!overElement) {\r\n        return;\r\n      }\r\n\r\n      (0, _utils.requestNextAnimationFrame)(() => {\r\n        const overRect = overElement.getBoundingClientRect();\r\n\r\n        if (this.lastHeight === overRect.height && this.lastWidth === overRect.width) {\r\n          return;\r\n        }\r\n\r\n        this.mirror.style.width = `${overRect.width}px`;\r\n        this.mirror.style.height = `${overRect.height}px`;\r\n\r\n        this.lastWidth = overRect.width;\r\n        this.lastHeight = overRect.height;\r\n      });\r\n    });\r\n  }\r\n}\r\nexports.default = ResizeMirror;\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_30444__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _ResizeMirror = __nested_webpack_require_30444__(12);\r\n\r\nvar _ResizeMirror2 = _interopRequireDefault(_ResizeMirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ResizeMirror2.default;\r\nexports.defaultOptions = _ResizeMirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_31496__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_31496__(14);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_32517__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_32517__(16);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_33276__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_33276__(18);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __nested_webpack_require_35706__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_35706__(20);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __nested_webpack_require_37022__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_37022__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_37022__(2);\r\n\r\nvar _CollidableEvent = __nested_webpack_require_37022__(4);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onRequestAnimationFrame = Symbol('onRequestAnimationFrame');\r\n\r\n/**\r\n * Collidable plugin which detects colliding elements while dragging\r\n * @class Collidable\r\n * @module Collidable\r\n * @extends AbstractPlugin\r\n */\r\nclass Collidable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Collidable constructor.\r\n   * @constructs Collidable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} currentlyCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.currentlyCollidingElement = null;\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} lastCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.lastCollidingElement = null;\r\n\r\n    /**\r\n     * Animation frame for finding colliding elements\r\n     * @property {Number|null} currentAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.currentAnimationFrame = null;\r\n\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onRequestAnimationFrame] = this[onRequestAnimationFrame].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns current collidables based on `collidables` option\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getCollidables() {\r\n    const collidables = this.draggable.options.collidables;\r\n\r\n    if (typeof collidables === 'string') {\r\n      return Array.prototype.slice.call(document.querySelectorAll(collidables));\r\n    } else if (collidables instanceof NodeList || collidables instanceof Array) {\r\n      return Array.prototype.slice.call(collidables);\r\n    } else if (collidables instanceof HTMLElement) {\r\n      return [collidables];\r\n    } else if (typeof collidables === 'function') {\r\n      return collidables();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    const target = event.sensorEvent.target;\r\n\r\n    this.currentAnimationFrame = requestAnimationFrame(this[onRequestAnimationFrame](target));\r\n\r\n    if (this.currentlyCollidingElement) {\r\n      event.cancel();\r\n    }\r\n\r\n    const collidableInEvent = new _CollidableEvent.CollidableInEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.currentlyCollidingElement\r\n    });\r\n\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.lastCollidingElement\r\n    });\r\n\r\n    const enteringCollidable = Boolean(this.currentlyCollidingElement && this.lastCollidingElement !== this.currentlyCollidingElement);\r\n    const leavingCollidable = Boolean(!this.currentlyCollidingElement && this.lastCollidingElement);\r\n\r\n    if (enteringCollidable) {\r\n      if (this.lastCollidingElement) {\r\n        this.draggable.trigger(collidableOutEvent);\r\n      }\r\n\r\n      this.draggable.trigger(collidableInEvent);\r\n    } else if (leavingCollidable) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = this.currentlyCollidingElement;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const lastCollidingElement = this.currentlyCollidingElement || this.lastCollidingElement;\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: lastCollidingElement\r\n    });\r\n\r\n    if (lastCollidingElement) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = null;\r\n    this.currentlyCollidingElement = null;\r\n  }\r\n\r\n  /**\r\n   * Animation frame function\r\n   * @private\r\n   * @param {HTMLElement} target - Current move target\r\n   * @return {Function}\r\n   */\r\n  [onRequestAnimationFrame](target) {\r\n    return () => {\r\n      const collidables = this.getCollidables();\r\n      this.currentlyCollidingElement = (0, _utils.closest)(target, element => collidables.includes(element));\r\n    };\r\n  }\r\n}\r\nexports.default = Collidable;\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_44190__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.CollidableOutEvent = exports.CollidableInEvent = exports.CollidableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_44190__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base collidable event\r\n * @class CollidableEvent\r\n * @module CollidableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass CollidableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this colliable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.CollidableEvent = CollidableEvent; /**\r\n                                            * Collidable in event\r\n                                            * @class CollidableInEvent\r\n                                            * @module CollidableInEvent\r\n                                            * @extends CollidableEvent\r\n                                            */\r\n\r\nCollidableEvent.type = 'collidable';\r\nclass CollidableInEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you are currently colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\n\r\nexports.CollidableInEvent = CollidableInEvent; /**\r\n                                                * Collidable out event\r\n                                                * @class CollidableOutEvent\r\n                                                * @module CollidableOutEvent\r\n                                                * @extends CollidableEvent\r\n                                                */\r\n\r\nCollidableInEvent.type = 'collidable:in';\r\nclass CollidableOutEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you were previously colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\nexports.CollidableOutEvent = CollidableOutEvent;\r\nCollidableOutEvent.type = 'collidable:out';\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __nested_webpack_require_46544__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_46544__(4);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_46544__(23);\r\n\r\nvar _Collidable2 = _interopRequireDefault(_Collidable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Collidable2.default;\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_47270__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_47270__(26);\r\n\r\nObject.defineProperty(exports, 'Collidable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Collidable).default;\r\n  }\r\n});\r\n\r\nvar _ResizeMirror = __nested_webpack_require_47270__(13);\r\n\r\nObject.defineProperty(exports, 'ResizeMirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ResizeMirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultResizeMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _ResizeMirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_47270__(11);\r\n\r\nObject.defineProperty(exports, 'Snappable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Snappable).default;\r\n  }\r\n});\r\n\r\nvar _SwapAnimation = __nested_webpack_require_47270__(8);\r\n\r\nObject.defineProperty(exports, 'SwapAnimation', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_SwapAnimation).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultSwapAnimationOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _SwapAnimation.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _SortAnimation = __nested_webpack_require_47270__(6);\r\n\r\nObject.defineProperty(exports, 'SortAnimation', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_SortAnimation).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultSortAnimationOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _SortAnimation.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/plugins.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/plugins/collidable.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/plugins/collidable.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_574__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_574__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_574__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_574__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_574__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_574__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_574__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_574__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_574__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_574__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_574__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_574__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_574__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_574__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_574__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_574__(__nested_webpack_require_574__.s = 16);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4122__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_4122__(15);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_5135__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_5135__(1);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6153__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_6153__(3);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_6909__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_6909__(5);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_9336__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_9336__(7);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_9738__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_9738__(8);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_9738__(6);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_9738__(4);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_9738__(2);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_11771__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_11771__(10);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_12203__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_12203__(11);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_12203__(9);\r\n\r\nvar _CollidableEvent = __nested_webpack_require_12203__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onRequestAnimationFrame = Symbol('onRequestAnimationFrame');\r\n\r\n/**\r\n * Collidable plugin which detects colliding elements while dragging\r\n * @class Collidable\r\n * @module Collidable\r\n * @extends AbstractPlugin\r\n */\r\nclass Collidable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Collidable constructor.\r\n   * @constructs Collidable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} currentlyCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.currentlyCollidingElement = null;\r\n\r\n    /**\r\n     * Keeps track of currently colliding elements\r\n     * @property {HTMLElement|null} lastCollidingElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.lastCollidingElement = null;\r\n\r\n    /**\r\n     * Animation frame for finding colliding elements\r\n     * @property {Number|null} currentAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.currentAnimationFrame = null;\r\n\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onRequestAnimationFrame] = this[onRequestAnimationFrame].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns current collidables based on `collidables` option\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getCollidables() {\r\n    const collidables = this.draggable.options.collidables;\r\n\r\n    if (typeof collidables === 'string') {\r\n      return Array.prototype.slice.call(document.querySelectorAll(collidables));\r\n    } else if (collidables instanceof NodeList || collidables instanceof Array) {\r\n      return Array.prototype.slice.call(collidables);\r\n    } else if (collidables instanceof HTMLElement) {\r\n      return [collidables];\r\n    } else if (typeof collidables === 'function') {\r\n      return collidables();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {DragMoveEvent} event - Drag move event\r\n   */\r\n  [onDragMove](event) {\r\n    const target = event.sensorEvent.target;\r\n\r\n    this.currentAnimationFrame = requestAnimationFrame(this[onRequestAnimationFrame](target));\r\n\r\n    if (this.currentlyCollidingElement) {\r\n      event.cancel();\r\n    }\r\n\r\n    const collidableInEvent = new _CollidableEvent.CollidableInEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.currentlyCollidingElement\r\n    });\r\n\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: this.lastCollidingElement\r\n    });\r\n\r\n    const enteringCollidable = Boolean(this.currentlyCollidingElement && this.lastCollidingElement !== this.currentlyCollidingElement);\r\n    const leavingCollidable = Boolean(!this.currentlyCollidingElement && this.lastCollidingElement);\r\n\r\n    if (enteringCollidable) {\r\n      if (this.lastCollidingElement) {\r\n        this.draggable.trigger(collidableOutEvent);\r\n      }\r\n\r\n      this.draggable.trigger(collidableInEvent);\r\n    } else if (leavingCollidable) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = this.currentlyCollidingElement;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const lastCollidingElement = this.currentlyCollidingElement || this.lastCollidingElement;\r\n    const collidableOutEvent = new _CollidableEvent.CollidableOutEvent({\r\n      dragEvent: event,\r\n      collidingElement: lastCollidingElement\r\n    });\r\n\r\n    if (lastCollidingElement) {\r\n      this.draggable.trigger(collidableOutEvent);\r\n    }\r\n\r\n    this.lastCollidingElement = null;\r\n    this.currentlyCollidingElement = null;\r\n  }\r\n\r\n  /**\r\n   * Animation frame function\r\n   * @private\r\n   * @param {HTMLElement} target - Current move target\r\n   * @return {Function}\r\n   */\r\n  [onRequestAnimationFrame](target) {\r\n    return () => {\r\n      const collidables = this.getCollidables();\r\n      this.currentlyCollidingElement = (0, _utils.closest)(target, element => collidables.includes(element));\r\n    };\r\n  }\r\n}\r\nexports.default = Collidable;\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_19372__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_19372__(13);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_19800__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.CollidableOutEvent = exports.CollidableInEvent = exports.CollidableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_19800__(14);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base collidable event\r\n * @class CollidableEvent\r\n * @module CollidableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass CollidableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this colliable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.CollidableEvent = CollidableEvent; /**\r\n                                            * Collidable in event\r\n                                            * @class CollidableInEvent\r\n                                            * @module CollidableInEvent\r\n                                            * @extends CollidableEvent\r\n                                            */\r\n\r\nCollidableEvent.type = 'collidable';\r\nclass CollidableInEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you are currently colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\n\r\nexports.CollidableInEvent = CollidableInEvent; /**\r\n                                                * Collidable out event\r\n                                                * @class CollidableOutEvent\r\n                                                * @module CollidableOutEvent\r\n                                                * @extends CollidableEvent\r\n                                                */\r\n\r\nCollidableInEvent.type = 'collidable:in';\r\nclass CollidableOutEvent extends CollidableEvent {\r\n\r\n  /**\r\n   * Element you were previously colliding with\r\n   * @property collidingElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get collidingElement() {\r\n    return this.data.collidingElement;\r\n  }\r\n}\r\nexports.CollidableOutEvent = CollidableOutEvent;\r\nCollidableOutEvent.type = 'collidable:out';\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_22155__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _CollidableEvent = __nested_webpack_require_22155__(0);\r\n\r\nObject.keys(_CollidableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _CollidableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Collidable = __nested_webpack_require_22155__(12);\r\n\r\nvar _Collidable2 = _interopRequireDefault(_Collidable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Collidable2.default;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/plugins/collidable.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/plugins/resize-mirror.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/plugins/resize-mirror.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_580__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_580__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_580__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_580__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_580__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_580__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_580__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_580__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_580__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_580__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_580__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_580__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_580__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_580__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_580__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_580__(__nested_webpack_require_580__.s = 12);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_4662__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_4662__(0);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_5680__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_5680__(2);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6436__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_6436__(4);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_8863__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_8863__(6);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_9265__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_9265__(7);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_9265__(5);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_9265__(3);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_9265__(1);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __nested_webpack_require_11297__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_11297__(9);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_11728__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_11728__(10);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_11728__(8);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst resize = Symbol('resize');\r\n\r\n/**\r\n * ResizeMirror default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {};\r\n\r\n/**\r\n * The ResizeMirror plugin resizes the mirror element to the dimensions of the draggable element that the mirror is hovering over\r\n * @class ResizeMirror\r\n * @module ResizeMirror\r\n * @extends AbstractPlugin\r\n */\r\nclass ResizeMirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * ResizeMirror constructor.\r\n   * @constructs ResizeMirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * ResizeMirror options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * ResizeMirror remembers the last width when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastWidth\r\n     */\r\n    this.lastWidth = 0;\r\n\r\n    /**\r\n     * ResizeMirror remembers the last height when resizing the mirror\r\n     * to avoid additional writes to the DOM\r\n     * @property {number} lastHeight\r\n     */\r\n    this.lastHeight = 0;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('mirror:created', this[onMirrorCreated]).on('drag:over', this[onDragOver]).on('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]).off('drag:over', this[onDragOver]).off('drag:over:container', this[onDragOver]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.resizeMirror || {};\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [onDragOver](dragEvent) {\r\n    this[resize](dragEvent);\r\n  }\r\n\r\n  /**\r\n   * Resize function for\r\n   * @param {DragOverEvent | DragOverContainer} dragEvent\r\n   * @private\r\n   */\r\n  [resize]({ overContainer, over }) {\r\n    requestAnimationFrame(() => {\r\n      if (!this.mirror.parentNode) {\r\n        return;\r\n      }\r\n\r\n      if (this.mirror.parentNode !== overContainer) {\r\n        overContainer.appendChild(this.mirror);\r\n      }\r\n\r\n      const overElement = over || this.draggable.getDraggableElementsForContainer(overContainer)[0];\r\n\r\n      if (!overElement) {\r\n        return;\r\n      }\r\n\r\n      (0, _utils.requestNextAnimationFrame)(() => {\r\n        const overRect = overElement.getBoundingClientRect();\r\n\r\n        if (this.lastHeight === overRect.height && this.lastWidth === overRect.width) {\r\n          return;\r\n        }\r\n\r\n        this.mirror.style.width = `${overRect.width}px`;\r\n        this.mirror.style.height = `${overRect.height}px`;\r\n\r\n        this.lastWidth = overRect.width;\r\n        this.lastHeight = overRect.height;\r\n      });\r\n    });\r\n  }\r\n}\r\nexports.default = ResizeMirror;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_16330__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _ResizeMirror = __nested_webpack_require_16330__(11);\r\n\r\nvar _ResizeMirror2 = _interopRequireDefault(_ResizeMirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ResizeMirror2.default;\r\nexports.defaultOptions = _ResizeMirror.defaultOptions;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/plugins/resize-mirror.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/plugins/snappable.js":
/*!******************************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/plugins/snappable.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_571__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_571__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_571__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_571__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_571__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_571__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_571__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_571__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_571__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_571__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_571__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_571__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_571__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_571__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_571__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_571__(__nested_webpack_require_571__.s = 7);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4118__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_4118__(6);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_5504__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_5504__(1);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_5934__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_5934__(2);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _SnappableEvent = __nested_webpack_require_5934__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragOut = Symbol('onDragOut');\r\nconst onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorDestroy = Symbol('onMirrorDestroy');\r\n\r\n/**\r\n * Snappable plugin which snaps draggable elements into place\r\n * @class Snappable\r\n * @module Snappable\r\n * @extends AbstractPlugin\r\n */\r\nclass Snappable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Snappable constructor.\r\n   * @constructs Snappable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Keeps track of the first source element\r\n     * @property {HTMLElement|null} firstSource\r\n     */\r\n    this.firstSource = null;\r\n\r\n    /**\r\n     * Keeps track of the mirror element\r\n     * @property {HTMLElement} mirror\r\n     */\r\n    this.mirror = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragOut] = this[onDragOut].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorDestroy] = this[onMirrorDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:stop', this[onDragStop]).on('drag:over', this[onDragOver]).on('drag:out', this[onDragOut]).on('droppable:over', this[onDragOver]).on('droppable:out', this[onDragOut]).on('mirror:created', this[onMirrorCreated]).on('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:stop', this[onDragStop]).off('drag:over', this[onDragOver]).off('drag:out', this[onDragOut]).off('droppable:over', this[onDragOver]).off('droppable:out', this[onDragOut]).off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    this.firstSource = event.source;\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop]() {\r\n    this.firstSource = null;\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent|DroppableOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    if (source === this.firstSource) {\r\n      this.firstSource = null;\r\n      return;\r\n    }\r\n\r\n    const snapInEvent = new _SnappableEvent.SnapInEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapInEvent);\r\n\r\n    if (snapInEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = 'none';\r\n    }\r\n\r\n    source.classList.remove(...this.draggable.getClassNamesFor('source:dragging'));\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:placed'));\r\n\r\n    // Need to cancel this in drag out\r\n    setTimeout(() => {\r\n      source.classList.remove(...this.draggable.getClassNamesFor('source:placed'));\r\n    }, this.draggable.options.placedTimeout);\r\n  }\r\n\r\n  /**\r\n   * Drag out handler\r\n   * @private\r\n   * @param {DragOutEvent|DroppableOutEvent} event - Drag out event\r\n   */\r\n  [onDragOut](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const source = event.source || event.dragEvent.source;\r\n\r\n    const snapOutEvent = new _SnappableEvent.SnapOutEvent({\r\n      dragEvent: event,\r\n      snappable: event.over || event.droppable\r\n    });\r\n\r\n    this.draggable.trigger(snapOutEvent);\r\n\r\n    if (snapOutEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if (this.mirror) {\r\n      this.mirror.style.display = '';\r\n    }\r\n\r\n    source.classList.add(...this.draggable.getClassNamesFor('source:dragging'));\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror }) {\r\n    this.mirror = mirror;\r\n  }\r\n\r\n  /**\r\n   * Mirror destroy handler\r\n   * @param {MirrorDestroyEvent} mirrorEvent\r\n   * @private\r\n   */\r\n  [onMirrorDestroy]() {\r\n    this.mirror = null;\r\n  }\r\n}\r\nexports.default = Snappable;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_13024__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_13024__(4);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_13450__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SnapOutEvent = exports.SnapInEvent = exports.SnapEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_13450__(5);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base snap event\r\n * @class SnapEvent\r\n * @module SnapEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SnapEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Drag event that triggered this snap event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Snappable element\r\n   * @property snappable\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get snappable() {\r\n    return this.data.snappable;\r\n  }\r\n}\r\n\r\nexports.SnapEvent = SnapEvent; /**\r\n                                * Snap in event\r\n                                * @class SnapInEvent\r\n                                * @module SnapInEvent\r\n                                * @extends SnapEvent\r\n                                */\r\n\r\nSnapEvent.type = 'snap';\r\nclass SnapInEvent extends SnapEvent {}\r\n\r\nexports.SnapInEvent = SnapInEvent; /**\r\n                                    * Snap out event\r\n                                    * @class SnapOutEvent\r\n                                    * @module SnapOutEvent\r\n                                    * @extends SnapEvent\r\n                                    */\r\n\r\nSnapInEvent.type = 'snap:in';\r\nSnapInEvent.cancelable = true;\r\nclass SnapOutEvent extends SnapEvent {}\r\nexports.SnapOutEvent = SnapOutEvent;\r\nSnapOutEvent.type = 'snap:out';\r\nSnapOutEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_15296__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SnappableEvent = __nested_webpack_require_15296__(0);\r\n\r\nObject.keys(_SnappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SnappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Snappable = __nested_webpack_require_15296__(3);\r\n\r\nvar _Snappable2 = _interopRequireDefault(_Snappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Snappable2.default;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/plugins/snappable.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/plugins/swap-animation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/plugins/swap-animation.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_583__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_583__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_583__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_583__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_583__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_583__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_583__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_583__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_583__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_583__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_583__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_583__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_583__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_583__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_583__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_583__(__nested_webpack_require_583__.s = 3);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_5041__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_5041__(0);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_5471__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_5471__(1);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onSortableSorted = Symbol('onSortableSorted');\r\n\r\n/**\r\n * SwapAnimation default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.duration\r\n * @property {String} defaultOptions.easingFunction\r\n * @property {Boolean} defaultOptions.horizontal\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  duration: 150,\r\n  easingFunction: 'ease-in-out',\r\n  horizontal: false\r\n};\r\n\r\n/**\r\n * SwapAnimation plugin adds swap animations for sortable\r\n * @class SwapAnimation\r\n * @module SwapAnimation\r\n * @extends AbstractPlugin\r\n */\r\nclass SwapAnimation extends _AbstractPlugin2.default {\r\n  /**\r\n   * SwapAnimation constructor.\r\n   * @constructs SwapAnimation\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * SwapAnimation options\r\n     * @property {Object} options\r\n     * @property {Number} defaultOptions.duration\r\n     * @property {String} defaultOptions.easingFunction\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Last animation frame\r\n     * @property {Number} lastAnimationFrame\r\n     * @type {Number}\r\n     */\r\n    this.lastAnimationFrame = null;\r\n\r\n    this[onSortableSorted] = this[onSortableSorted].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('sortable:sorted', this[onSortableSorted]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.swapAnimation || {};\r\n  }\r\n\r\n  /**\r\n   * Sortable sorted handler\r\n   * @param {SortableSortedEvent} sortableEvent\r\n   * @private\r\n   */\r\n  [onSortableSorted]({ oldIndex, newIndex, dragEvent }) {\r\n    const { source, over } = dragEvent;\r\n\r\n    cancelAnimationFrame(this.lastAnimationFrame);\r\n\r\n    // Can be done in a separate frame\r\n    this.lastAnimationFrame = requestAnimationFrame(() => {\r\n      if (oldIndex >= newIndex) {\r\n        animate(source, over, this.options);\r\n      } else {\r\n        animate(over, source, this.options);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = SwapAnimation; /**\r\n                                  * Animates two elements\r\n                                  * @param {HTMLElement} from\r\n                                  * @param {HTMLElement} to\r\n                                  * @param {Object} options\r\n                                  * @param {Number} options.duration\r\n                                  * @param {String} options.easingFunction\r\n                                  * @param {String} options.horizontal\r\n                                  * @private\r\n                                  */\r\n\r\nfunction animate(from, to, { duration, easingFunction, horizontal }) {\r\n  for (const element of [from, to]) {\r\n    element.style.pointerEvents = 'none';\r\n  }\r\n\r\n  if (horizontal) {\r\n    const width = from.offsetWidth;\r\n    from.style.transform = `translate3d(${width}px, 0, 0)`;\r\n    to.style.transform = `translate3d(-${width}px, 0, 0)`;\r\n  } else {\r\n    const height = from.offsetHeight;\r\n    from.style.transform = `translate3d(0, ${height}px, 0)`;\r\n    to.style.transform = `translate3d(0, -${height}px, 0)`;\r\n  }\r\n\r\n  requestAnimationFrame(() => {\r\n    for (const element of [from, to]) {\r\n      element.addEventListener('transitionend', resetElementOnTransitionEnd);\r\n      element.style.transition = `transform ${duration}ms ${easingFunction}`;\r\n      element.style.transform = '';\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Resets animation style properties after animation has completed\r\n * @param {Event} event\r\n * @private\r\n */\r\nfunction resetElementOnTransitionEnd(event) {\r\n  event.target.style.transition = '';\r\n  event.target.style.pointerEvents = '';\r\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\r\n}\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_10204__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _SwapAnimation = __nested_webpack_require_10204__(2);\r\n\r\nvar _SwapAnimation2 = _interopRequireDefault(_SwapAnimation);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _SwapAnimation2.default;\r\nexports.defaultOptions = _SwapAnimation.defaultOptions;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/plugins/swap-animation.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/sortable.js":
/*!*********************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/sortable.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_568__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_568__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_568__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_568__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_568__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_568__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_568__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_568__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_568__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_568__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_568__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_568__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_568__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_568__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_568__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_568__(__nested_webpack_require_568__.s = 48);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4116__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_4116__(19);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_4583__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_4583__(22);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sensor2.default;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_4982__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_4982__(30);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_4982__(28);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_4982__(26);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_4982__(24);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_6106__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_6106__(46);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6533__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_6533__(39);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6964__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_6964__(1);\r\n\r\nObject.defineProperty(exports, 'Sensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sensor).default;\r\n  }\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_6964__(21);\r\n\r\nObject.defineProperty(exports, 'MouseSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_MouseSensor).default;\r\n  }\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_6964__(18);\r\n\r\nObject.defineProperty(exports, 'TouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_TouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_6964__(16);\r\n\r\nObject.defineProperty(exports, 'DragSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_DragSensor).default;\r\n  }\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_6964__(14);\r\n\r\nObject.defineProperty(exports, 'ForceTouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ForceTouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_6964__(0);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_8570__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Announcement = __nested_webpack_require_8570__(41);\r\n\r\nObject.defineProperty(exports, 'Announcement', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Announcement).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultAnnouncementOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Announcement.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_8570__(38);\r\n\r\nObject.defineProperty(exports, 'Focusable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Focusable).default;\r\n  }\r\n});\r\n\r\nvar _Mirror = __nested_webpack_require_8570__(36);\r\n\r\nObject.defineProperty(exports, 'Mirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Mirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Mirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Scrollable = __nested_webpack_require_8570__(32);\r\n\r\nObject.defineProperty(exports, 'Scrollable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Scrollable).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultScrollableOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Scrollable.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_10113__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_10113__(42);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_10589__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_10589__(43);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_11050__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SortableEvent = __nested_webpack_require_11050__(47);\r\n\r\nObject.keys(_SortableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SortableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods\r\n * @class Emitter\r\n * @module Emitter\r\n */\r\nclass Emitter {\r\n  constructor() {\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks by event name\r\n   * @param {String} type\r\n   * @param {...Function} callbacks\r\n   */\r\n  on(type, ...callbacks) {\r\n    if (!this.callbacks[type]) {\r\n      this.callbacks[type] = [];\r\n    }\r\n\r\n    this.callbacks[type].push(...callbacks);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters callbacks by event name\r\n   * @param {String} type\r\n   * @param {Function} callback\r\n   */\r\n  off(type, callback) {\r\n    if (!this.callbacks[type]) {\r\n      return null;\r\n    }\r\n\r\n    const copy = this.callbacks[type].slice(0);\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n      if (callback === copy[i]) {\r\n        this.callbacks[type].splice(i, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers event callbacks by event object\r\n   * @param {AbstractEvent} event\r\n   */\r\n  trigger(event) {\r\n    if (!this.callbacks[event.type]) {\r\n      return null;\r\n    }\r\n\r\n    const callbacks = [...this.callbacks[event.type]];\r\n    const caughtErrors = [];\r\n\r\n    for (let i = callbacks.length - 1; i >= 0; i--) {\r\n      const callback = callbacks[i];\r\n\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        caughtErrors.push(error);\r\n      }\r\n    }\r\n\r\n    if (caughtErrors.length) {\r\n      /* eslint-disable no-console */\r\n      console.error(`Draggable caught errors while triggering '${event.type}'`, caughtErrors);\r\n      /* eslint-disable no-console */\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\nexports.default = Emitter;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_13388__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Emitter = __nested_webpack_require_13388__(10);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Emitter2.default;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_13792__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_13792__(2);\r\n\r\nvar _Plugins = __nested_webpack_require_13792__(6);\r\n\r\nvar _Emitter = __nested_webpack_require_13792__(11);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nvar _Sensors = __nested_webpack_require_13792__(5);\r\n\r\nvar _DraggableEvent = __nested_webpack_require_13792__(7);\r\n\r\nvar _DragEvent = __nested_webpack_require_13792__(8);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragPressure = Symbol('onDragPressure');\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['drag:start']\r\n * @const {Function} defaultAnnouncements['drag:stop']\r\n */\r\nconst defaultAnnouncements = {\r\n  'drag:start': event => `Picked up ${event.source.textContent.trim() || event.source.id || 'draggable element'}`,\r\n  'drag:stop': event => `Released ${event.source.textContent.trim() || event.source.id || 'draggable element'}`\r\n};\r\n\r\nconst defaultClasses = {\r\n  'container:dragging': 'draggable-container--is-dragging',\r\n  'source:dragging': 'draggable-source--is-dragging',\r\n  'source:placed': 'draggable-source--placed',\r\n  'container:placed': 'draggable-container--placed',\r\n  'body:dragging': 'draggable--is-dragging',\r\n  'draggable:over': 'draggable--over',\r\n  'container:over': 'draggable-container--over',\r\n  'source:original': 'draggable--original',\r\n  mirror: 'draggable-mirror'\r\n};\r\n\r\nconst defaultOptions = exports.defaultOptions = {\r\n  draggable: '.draggable-source',\r\n  handle: null,\r\n  delay: {},\r\n  distance: 0,\r\n  placedTimeout: 800,\r\n  plugins: [],\r\n  sensors: [],\r\n  exclude: {\r\n    plugins: [],\r\n    sensors: []\r\n  }\r\n};\r\n\r\n/**\r\n * This is the core draggable library that does the heavy lifting\r\n * @class Draggable\r\n * @module Draggable\r\n */\r\nclass Draggable {\r\n\r\n  /**\r\n   * Draggable constructor.\r\n   * @constructs Draggable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers\r\n   * @param {Object} options - Options for draggable\r\n   */\r\n\r\n  /**\r\n   * Default plugins draggable uses\r\n   * @static\r\n   * @property {Object} Plugins\r\n   * @property {Announcement} Plugins.Announcement\r\n   * @property {Focusable} Plugins.Focusable\r\n   * @property {Mirror} Plugins.Mirror\r\n   * @property {Scrollable} Plugins.Scrollable\r\n   * @type {Object}\r\n   */\r\n  constructor(containers = [document.body], options = {}) {\r\n    /**\r\n     * Draggable containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    if (containers instanceof NodeList || containers instanceof Array) {\r\n      this.containers = [...containers];\r\n    } else if (containers instanceof HTMLElement) {\r\n      this.containers = [containers];\r\n    } else {\r\n      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');\r\n    }\r\n\r\n    this.options = _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {}),\r\n      exclude: {\r\n        plugins: options.exclude && options.exclude.plugins || [],\r\n        sensors: options.exclude && options.exclude.sensors || []\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Draggables event emitter\r\n     * @property emitter\r\n     * @type {Emitter}\r\n     */\r\n    this.emitter = new _Emitter2.default();\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Active plugins\r\n     * @property plugins\r\n     * @type {Plugin[]}\r\n     */\r\n    this.plugins = [];\r\n\r\n    /**\r\n     * Active sensors\r\n     * @property sensors\r\n     * @type {Sensor[]}\r\n     */\r\n    this.sensors = [];\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragPressure] = this[onDragPressure].bind(this);\r\n\r\n    document.addEventListener('drag:start', this[onDragStart], true);\r\n    document.addEventListener('drag:move', this[onDragMove], true);\r\n    document.addEventListener('drag:stop', this[onDragStop], true);\r\n    document.addEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const defaultPlugins = Object.values(Draggable.Plugins).filter(Plugin => !this.options.exclude.plugins.includes(Plugin));\r\n    const defaultSensors = Object.values(Draggable.Sensors).filter(sensor => !this.options.exclude.sensors.includes(sensor));\r\n\r\n    this.addPlugin(...[...defaultPlugins, ...this.options.plugins]);\r\n    this.addSensor(...[...defaultSensors, ...this.options.sensors]);\r\n\r\n    const draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.on('mirror:created', ({ mirror }) => this.mirror = mirror);\r\n    this.on('mirror:destroy', () => this.mirror = null);\r\n\r\n    this.trigger(draggableInitializedEvent);\r\n  }\r\n\r\n  /**\r\n   * Destroys Draggable instance. This removes all internal event listeners and\r\n   * deactivates sensors and plugins\r\n   */\r\n\r\n\r\n  /**\r\n   * Default sensors draggable uses\r\n   * @static\r\n   * @property {Object} Sensors\r\n   * @property {MouseSensor} Sensors.MouseSensor\r\n   * @property {TouchSensor} Sensors.TouchSensor\r\n   * @type {Object}\r\n   */\r\n  destroy() {\r\n    document.removeEventListener('drag:start', this[onDragStart], true);\r\n    document.removeEventListener('drag:move', this[onDragMove], true);\r\n    document.removeEventListener('drag:stop', this[onDragStop], true);\r\n    document.removeEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.trigger(draggableDestroyEvent);\r\n\r\n    this.removePlugin(...this.plugins.map(plugin => plugin.constructor));\r\n    this.removeSensor(...this.sensors.map(sensor => sensor.constructor));\r\n  }\r\n\r\n  /**\r\n   * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)\r\n   */\r\n  addPlugin(...plugins) {\r\n    const activePlugins = plugins.map(Plugin => new Plugin(this));\r\n\r\n    activePlugins.forEach(plugin => plugin.attach());\r\n    this.plugins = [...this.plugins, ...activePlugins];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes plugins that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)\r\n   */\r\n  removePlugin(...plugins) {\r\n    const removedPlugins = this.plugins.filter(plugin => plugins.includes(plugin.constructor));\r\n\r\n    removedPlugins.forEach(plugin => plugin.detach());\r\n    this.plugins = this.plugins.filter(plugin => !plugins.includes(plugin.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addSensor(ForceTouchSensor, CustomSensor)\r\n   */\r\n  addSensor(...sensors) {\r\n    const activeSensors = sensors.map(Sensor => new Sensor(this.containers, this.options));\r\n\r\n    activeSensors.forEach(sensor => sensor.attach());\r\n    this.sensors = [...this.sensors, ...activeSensors];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes sensors that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeSensor(TouchSensor, DragSensor)\r\n   */\r\n  removeSensor(...sensors) {\r\n    const removedSensors = this.sensors.filter(sensor => sensors.includes(sensor.constructor));\r\n\r\n    removedSensors.forEach(sensor => sensor.detach());\r\n    this.sensors = this.sensors.filter(sensor => !sensors.includes(sensor.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n    this.sensors.forEach(sensor => sensor.addContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes container from this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n    this.sensors.forEach(sensor => sensor.removeContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds listener for draggable events\r\n   * @param {String} type - Event name\r\n   * @param {...Function} callbacks - Event callbacks\r\n   * @return {Draggable}\r\n   * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());\r\n   */\r\n  on(type, ...callbacks) {\r\n    this.emitter.on(type, ...callbacks);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes listener from draggable\r\n   * @param {String} type - Event name\r\n   * @param {Function} callback - Event callback\r\n   * @return {Draggable}\r\n   * @example draggable.off('drag:start', handlerFunction);\r\n   */\r\n  off(type, callback) {\r\n    this.emitter.off(type, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers draggable event\r\n   * @param {AbstractEvent} event - Event instance\r\n   * @return {Draggable}\r\n   * @example draggable.trigger(event);\r\n   */\r\n  trigger(event) {\r\n    this.emitter.trigger(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns class name for class identifier\r\n   * @param {String} name - Name of class identifier\r\n   * @return {String|null}\r\n   */\r\n  getClassNameFor(name) {\r\n    return this.getClassNamesFor(name)[0];\r\n  }\r\n\r\n  /**\r\n   * Returns class names for class identifier\r\n   * @return {String[]}\r\n   */\r\n  getClassNamesFor(name) {\r\n    const classNames = this.options.classes[name];\r\n\r\n    if (classNames instanceof Array) {\r\n      return classNames;\r\n    } else if (typeof classNames === 'string' || classNames instanceof String) {\r\n      return [classNames];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if this draggable instance is currently dragging\r\n   * @return {Boolean}\r\n   */\r\n  isDragging() {\r\n    return Boolean(this.dragging);\r\n  }\r\n\r\n  /**\r\n   * Returns all draggable elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElements() {\r\n    return this.containers.reduce((current, container) => {\r\n      return [...current, ...this.getDraggableElementsForContainer(container)];\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Returns draggable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElementsForContainer(container) {\r\n    const allDraggableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allDraggableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStart](event) {\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { target, container } = sensorEvent;\r\n\r\n    if (!this.containers.includes(container)) {\r\n      return;\r\n    }\r\n\r\n    if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    // Find draggable source element\r\n    this.originalSource = (0, _utils.closest)(target, this.options.draggable);\r\n    this.sourceContainer = container;\r\n\r\n    if (!this.originalSource) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    if (this.lastPlacedSource && this.lastPlacedContainer) {\r\n      clearTimeout(this.placedTimeoutID);\r\n      this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n    }\r\n\r\n    this.source = this.originalSource.cloneNode(true);\r\n    this.originalSource.parentNode.insertBefore(this.source, this.originalSource);\r\n    this.originalSource.style.display = 'none';\r\n\r\n    const dragEvent = new _DragEvent.DragStartEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragEvent);\r\n\r\n    this.dragging = !dragEvent.canceled();\r\n\r\n    if (dragEvent.canceled()) {\r\n      this.source.parentNode.removeChild(this.source);\r\n      this.originalSource.style.display = null;\r\n      return;\r\n    }\r\n\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:original'));\r\n    this.source.classList.add(...this.getClassNamesFor('source:dragging'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.add(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, 'none');\r\n\r\n    requestAnimationFrame(() => {\r\n      const oldSensorEvent = getSensorEvent(event);\r\n      const newSensorEvent = oldSensorEvent.clone({ target: this.source });\r\n\r\n      this[onDragMove](_extends({}, event, {\r\n        detail: newSensorEvent\r\n      }));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { container } = sensorEvent;\r\n    let target = sensorEvent.target;\r\n\r\n    const dragMoveEvent = new _DragEvent.DragMoveEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragMoveEvent);\r\n\r\n    if (dragMoveEvent.canceled()) {\r\n      sensorEvent.cancel();\r\n    }\r\n\r\n    target = (0, _utils.closest)(target, this.options.draggable);\r\n    const withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);\r\n    const overContainer = sensorEvent.overContainer || withinCorrectContainer;\r\n    const isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;\r\n    const isLeavingDraggable = this.currentOver && target !== this.currentOver;\r\n    const isOverContainer = overContainer && this.currentOverContainer !== overContainer;\r\n    const isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;\r\n\r\n    if (isLeavingDraggable) {\r\n      const dragOutEvent = new _DragEvent.DragOutEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        over: this.currentOver,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n      this.currentOver = null;\r\n\r\n      this.trigger(dragOutEvent);\r\n    }\r\n\r\n    if (isLeavingContainer) {\r\n      const dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n      this.currentOverContainer = null;\r\n\r\n      this.trigger(dragOutContainerEvent);\r\n    }\r\n\r\n    if (isOverContainer) {\r\n      overContainer.classList.add(...this.getClassNamesFor('container:over'));\r\n\r\n      const dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer\r\n      });\r\n\r\n      this.currentOverContainer = overContainer;\r\n\r\n      this.trigger(dragOverContainerEvent);\r\n    }\r\n\r\n    if (isOverDraggable) {\r\n      target.classList.add(...this.getClassNamesFor('draggable:over'));\r\n\r\n      const dragOverEvent = new _DragEvent.DragOverEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer,\r\n        over: target\r\n      });\r\n\r\n      this.currentOver = target;\r\n\r\n      this.trigger(dragOverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStop](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.dragging = false;\r\n\r\n    const dragStopEvent = new _DragEvent.DragStopEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStopEvent);\r\n\r\n    this.source.parentNode.insertBefore(this.originalSource, this.source);\r\n    this.source.parentNode.removeChild(this.source);\r\n    this.originalSource.style.display = '';\r\n\r\n    this.source.classList.remove(...this.getClassNamesFor('source:dragging'));\r\n    this.originalSource.classList.remove(...this.getClassNamesFor('source:original'));\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:placed'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:placed'));\r\n    this.sourceContainer.classList.remove(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.remove(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, '');\r\n\r\n    if (this.currentOver) {\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n    }\r\n\r\n    if (this.currentOverContainer) {\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n    }\r\n\r\n    this.lastPlacedSource = this.originalSource;\r\n    this.lastPlacedContainer = this.sourceContainer;\r\n\r\n    this.placedTimeoutID = setTimeout(() => {\r\n      if (this.lastPlacedSource) {\r\n        this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      }\r\n\r\n      if (this.lastPlacedContainer) {\r\n        this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n      }\r\n\r\n      this.lastPlacedSource = null;\r\n      this.lastPlacedContainer = null;\r\n    }, this.options.placedTimeout);\r\n\r\n    const dragStoppedEvent = new _DragEvent.DragStoppedEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStoppedEvent);\r\n\r\n    this.source = null;\r\n    this.originalSource = null;\r\n    this.currentOverContainer = null;\r\n    this.currentOver = null;\r\n    this.sourceContainer = null;\r\n  }\r\n\r\n  /**\r\n   * Drag pressure handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragPressure](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);\r\n\r\n    const dragPressureEvent = new _DragEvent.DragPressureEvent({\r\n      sensorEvent,\r\n      source,\r\n      pressure: sensorEvent.pressure\r\n    });\r\n\r\n    this.trigger(dragPressureEvent);\r\n  }\r\n}\r\n\r\nexports.default = Draggable;\r\nDraggable.Plugins = { Announcement: _Plugins.Announcement, Focusable: _Plugins.Focusable, Mirror: _Plugins.Mirror, Scrollable: _Plugins.Scrollable };\r\nDraggable.Sensors = { MouseSensor: _Sensors.MouseSensor, TouchSensor: _Sensors.TouchSensor };\r\nfunction getSensorEvent(event) {\r\n  return event.detail;\r\n}\r\n\r\nfunction applyUserSelect(element, value) {\r\n  element.style.webkitUserSelect = value;\r\n  element.style.mozUserSelect = value;\r\n  element.style.msUserSelect = value;\r\n  element.style.oUserSelect = value;\r\n  element.style.userSelect = value;\r\n}\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_34925__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_34925__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_34925__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseForceWillBegin = Symbol('onMouseForceWillBegin');\r\nconst onMouseForceDown = Symbol('onMouseForceDown');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseForceChange = Symbol('onMouseForceChange');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');\r\n\r\n/**\r\n * This sensor picks up native force touch events and dictates drag operations\r\n * @class ForceTouchSensor\r\n * @module ForceTouchSensor\r\n * @extends Sensor\r\n */\r\nclass ForceTouchSensor extends _Sensor2.default {\r\n  /**\r\n   * ForceTouchSensor constructor.\r\n   * @constructs ForceTouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property mightDrag\r\n     * @type {Boolean}\r\n     */\r\n    this.mightDrag = false;\r\n\r\n    this[onMouseForceWillBegin] = this[onMouseForceWillBegin].bind(this);\r\n    this[onMouseForceDown] = this[onMouseForceDown].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseForceChange] = this[onMouseForceChange].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    for (const container of this.containers) {\r\n      container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.addEventListener('mousedown', this[onMouseDown], true);\r\n      container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.addEventListener('mousemove', this[onMouseMove]);\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    for (const container of this.containers) {\r\n      container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.removeEventListener('mousedown', this[onMouseDown], true);\r\n      container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Mouse force will begin handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseForceWillBegin](event) {\r\n    event.preventDefault();\r\n    this.mightDrag = true;\r\n  }\r\n\r\n  /**\r\n   * Mouse force down handler\r\n   * @private\r\n   * @param {Event} event - Mouse force down event\r\n   */\r\n  [onMouseForceDown](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = event.currentTarget;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStartEvent);\r\n\r\n    this.currentContainer = container;\r\n    this.dragging = !dragStartEvent.canceled();\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target: null,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (!this.mightDrag) {\r\n      return;\r\n    }\r\n\r\n    // Need workaround for real click\r\n    // Cancel potential drag events\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force change event\r\n   */\r\n  [onMouseForceChange](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n    const container = event.currentTarget;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragPressureEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force global change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force global change event\r\n   */\r\n  [onMouseForceGlobalChange](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragPressureEvent);\r\n  }\r\n}\r\nexports.default = ForceTouchSensor;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_41665__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_41665__(13);\r\n\r\nvar _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ForceTouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_42105__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_42105__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_42105__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_42105__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragEnd = Symbol('onDragEnd');\r\nconst onDrop = Symbol('onDrop');\r\nconst reset = Symbol('reset');\r\n\r\n/**\r\n * This sensor picks up native browser drag events and dictates drag operations\r\n * @class DragSensor\r\n * @module DragSensor\r\n * @extends Sensor\r\n */\r\nclass DragSensor extends _Sensor2.default {\r\n  /**\r\n   * DragSensor constructor.\r\n   * @constructs DragSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up setting the draggable attribute, unless canceled\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property draggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.draggableElement = null;\r\n\r\n    /**\r\n     * Native draggable element could be links or images, their draggable state will be disabled during drag operation\r\n     * @property nativeDraggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.nativeDraggableElement = null;\r\n\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragEnd] = this[onDragEnd].bind(this);\r\n    this[onDrop] = this[onDrop].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    // Need for firefox. \"text\" key is needed for IE\r\n    event.dataTransfer.setData('text', '');\r\n    event.dataTransfer.effectAllowed = this.options.type;\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    this.currentContainer = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    // Workaround\r\n    setTimeout(() => {\r\n      this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n      if (dragStartEvent.canceled()) {\r\n        this.dragging = false;\r\n      } else {\r\n        this.dragging = true;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {Event} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragMoveEvent);\r\n\r\n    if (!dragMoveEvent.canceled()) {\r\n      event.preventDefault();\r\n      event.dataTransfer.dropEffect = this.options.type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag end handler\r\n   * @private\r\n   * @param {Event} event - Drag end event\r\n   */\r\n  [onDragEnd](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStopEvent);\r\n\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Drop handler\r\n   * @private\r\n   * @param {Event} event - Drop event\r\n   */\r\n  [onDrop](event) {\r\n    // eslint-disable-line class-methods-use-this\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071\r\n    if (event.target && (event.target.form || event.target.contenteditable)) {\r\n      return;\r\n    }\r\n\r\n    const nativeDraggableElement = (0, _utils.closest)(event.target, element => element.draggable);\r\n\r\n    if (nativeDraggableElement) {\r\n      nativeDraggableElement.draggable = false;\r\n      this.nativeDraggableElement = nativeDraggableElement;\r\n    }\r\n\r\n    document.addEventListener('mouseup', this[onMouseUp], true);\r\n    document.addEventListener('dragstart', this[onDragStart], false);\r\n    document.addEventListener('dragover', this[onDragOver], false);\r\n    document.addEventListener('dragend', this[onDragEnd], false);\r\n    document.addEventListener('drop', this[onDrop], false);\r\n\r\n    const target = (0, _utils.closest)(event.target, this.options.draggable);\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.startEvent = event;\r\n\r\n    this.mouseDownTimeout = setTimeout(() => {\r\n      target.draggable = true;\r\n      this.draggableElement = target;\r\n    }, this.delay.drag);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp]() {\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [reset]() {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n    document.removeEventListener('dragstart', this[onDragStart], false);\r\n    document.removeEventListener('dragover', this[onDragOver], false);\r\n    document.removeEventListener('dragend', this[onDragEnd], false);\r\n    document.removeEventListener('drop', this[onDrop], false);\r\n\r\n    if (this.nativeDraggableElement) {\r\n      this.nativeDraggableElement.draggable = true;\r\n      this.nativeDraggableElement = null;\r\n    }\r\n\r\n    if (this.draggableElement) {\r\n      this.draggableElement.draggable = false;\r\n      this.draggableElement = null;\r\n    }\r\n  }\r\n}\r\nexports.default = DragSensor;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_49378__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_49378__(15);\r\n\r\nvar _DragSensor2 = _interopRequireDefault(_DragSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _DragSensor2.default;\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_49794__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_49794__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_49794__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_49794__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onTouchStart = Symbol('onTouchStart');\r\nconst onTouchEnd = Symbol('onTouchEnd');\r\nconst onTouchMove = Symbol('onTouchMove');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * Prevents scrolling when set to true\r\n * @var {Boolean} preventScrolling\r\n */\r\nlet preventScrolling = false;\r\n\r\n// WebKit requires cancelable `touchmove` events to be added as early as possible\r\nwindow.addEventListener('touchmove', event => {\r\n  if (!preventScrolling) {\r\n    return;\r\n  }\r\n\r\n  // Prevent scrolling\r\n  event.preventDefault();\r\n}, { passive: false });\r\n\r\n/**\r\n * This sensor picks up native browser touch events and dictates drag operations\r\n * @class TouchSensor\r\n * @module TouchSensor\r\n * @extends Sensor\r\n */\r\nclass TouchSensor extends _Sensor2.default {\r\n  /**\r\n   * TouchSensor constructor.\r\n   * @constructs TouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Closest scrollable container so accidental scroll can cancel long touch\r\n     * @property currentScrollableParent\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentScrollableParent = null;\r\n\r\n    /**\r\n     * TimeoutID for managing delay\r\n     * @property tapTimeout\r\n     * @type {Number}\r\n     */\r\n    this.tapTimeout = null;\r\n\r\n    /**\r\n     * touchMoved indicates if touch has moved during tapTimeout\r\n     * @property touchMoved\r\n     * @type {Boolean}\r\n     */\r\n    this.touchMoved = false;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onTouchStart] = this[onTouchStart].bind(this);\r\n    this[onTouchEnd] = this[onTouchEnd].bind(this);\r\n    this[onTouchMove] = this[onTouchMove].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Touch start handler\r\n   * @private\r\n   * @param {Event} event - Touch start event\r\n   */\r\n  [onTouchStart](event) {\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n    const { distance = 0 } = this.options;\r\n    const { delay } = this;\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onTouchStartAt = Date.now();\r\n    this.startEvent = event;\r\n    this.currentContainer = container;\r\n\r\n    document.addEventListener('touchend', this[onTouchEnd]);\r\n    document.addEventListener('touchcancel', this[onTouchEnd]);\r\n    document.addEventListener('touchmove', this[onDistanceChange]);\r\n    container.addEventListener('contextmenu', onContextMenu);\r\n\r\n    if (distance) {\r\n      preventScrolling = true;\r\n    }\r\n\r\n    this.tapTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ touches: [{ pageX: this.pageX, pageY: this.pageY }] });\r\n    }, delay.touch);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n    const touch = (0, _utils.touchCoords)(startEvent);\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: touch.pageX,\r\n      clientY: touch.pageY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('touchmove', this[onTouchMove]);\r\n    }\r\n    preventScrolling = this.dragging;\r\n  }\r\n\r\n  /**\r\n   * Touch move handler prior to drag start.\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n    const start = (0, _utils.touchCoords)(startEvent);\r\n    const current = (0, _utils.touchCoords)(event);\r\n    const timeElapsed = Date.now() - this.onTouchStartAt;\r\n    const distanceTravelled = (0, _utils.distance)(start.pageX, start.pageY, current.pageX, current.pageY);\r\n\r\n    Object.assign(this, current);\r\n\r\n    clearTimeout(this.tapTimeout);\r\n\r\n    if (timeElapsed < delay.touch) {\r\n      // moved during delay\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler while dragging\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onTouchMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Touch end handler\r\n   * @private\r\n   * @param {Event} event - Touch end event\r\n   */\r\n  [onTouchEnd](event) {\r\n    clearTimeout(this.tapTimeout);\r\n    preventScrolling = false;\r\n\r\n    document.removeEventListener('touchend', this[onTouchEnd]);\r\n    document.removeEventListener('touchcancel', this[onTouchEnd]);\r\n    document.removeEventListener('touchmove', this[onDistanceChange]);\r\n\r\n    if (this.currentContainer) {\r\n      this.currentContainer.removeEventListener('contextmenu', onContextMenu);\r\n    }\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('touchmove', this[onTouchMove]);\r\n\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    event.preventDefault();\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n}\r\n\r\nexports.default = TouchSensor;\r\nfunction onContextMenu(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_57274__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_57274__(17);\r\n\r\nvar _TouchSensor2 = _interopRequireDefault(_TouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _TouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_57694__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_57694__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sensor event\r\n * @class SensorEvent\r\n * @module SensorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SensorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Original browser event that triggered a sensor\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    return this.data.originalEvent;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientX for both touch and mouse events\r\n   * @property clientX\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientX() {\r\n    return this.data.clientX;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientY for both touch and mouse events\r\n   * @property clientY\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientY() {\r\n    return this.data.clientY;\r\n  }\r\n\r\n  /**\r\n   * Normalized target for both touch and mouse events\r\n   * Returns the element that is behind cursor or touch pointer\r\n   * @property target\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get target() {\r\n    return this.data.target;\r\n  }\r\n\r\n  /**\r\n   * Container that initiated the sensor\r\n   * @property container\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get container() {\r\n    return this.data.container;\r\n  }\r\n\r\n  /**\r\n   * Trackpad pressure\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.SensorEvent = SensorEvent; /**\r\n                                    * Drag start sensor event\r\n                                    * @class DragStartSensorEvent\r\n                                    * @module DragStartSensorEvent\r\n                                    * @extends SensorEvent\r\n                                    */\r\n\r\nclass DragStartSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStartSensorEvent = DragStartSensorEvent; /**\r\n                                                      * Drag move sensor event\r\n                                                      * @class DragMoveSensorEvent\r\n                                                      * @module DragMoveSensorEvent\r\n                                                      * @extends SensorEvent\r\n                                                      */\r\n\r\nDragStartSensorEvent.type = 'drag:start';\r\nclass DragMoveSensorEvent extends SensorEvent {}\r\n\r\nexports.DragMoveSensorEvent = DragMoveSensorEvent; /**\r\n                                                    * Drag stop sensor event\r\n                                                    * @class DragStopSensorEvent\r\n                                                    * @module DragStopSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragMoveSensorEvent.type = 'drag:move';\r\nclass DragStopSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStopSensorEvent = DragStopSensorEvent; /**\r\n                                                    * Drag pressure sensor event\r\n                                                    * @class DragPressureSensorEvent\r\n                                                    * @module DragPressureSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragStopSensorEvent.type = 'drag:stop';\r\nclass DragPressureSensorEvent extends SensorEvent {}\r\nexports.DragPressureSensorEvent = DragPressureSensorEvent;\r\nDragPressureSensorEvent.type = 'drag:pressure';\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __nested_webpack_require_61685__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_61685__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_61685__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_61685__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * This sensor picks up native browser mouse events and dictates drag operations\r\n * @class MouseSensor\r\n * @module MouseSensor\r\n * @extends Sensor\r\n */\r\nclass MouseSensor extends _Sensor2.default {\r\n  /**\r\n   * MouseSensor constructor.\r\n   * @constructs MouseSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up triggering the drag start operation\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onContextMenuWhileDragging] = this[onContextMenuWhileDragging].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (event.button !== 0 || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n\r\n    const { delay } = this;\r\n    const { pageX, pageY } = event;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onMouseDownAt = Date.now();\r\n    this.startEvent = event;\r\n\r\n    this.currentContainer = container;\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n    document.addEventListener('dragstart', preventNativeDragStart);\r\n    document.addEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    this.mouseDownTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ pageX: this.pageX, pageY: this.pageY });\r\n    }, delay.mouse);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n      document.addEventListener('mousemove', this[onMouseMove]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect change in distance, starting drag when both\r\n   * delay and distance requirements are met\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { pageX, pageY } = event;\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const timeElapsed = Date.now() - this.onMouseDownAt;\r\n    const distanceTravelled = (0, _utils.distance)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;\r\n\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (timeElapsed < delay.mouse) {\r\n      // moved during delay\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n    document.removeEventListener('dragstart', preventNativeDragStart);\r\n    document.removeEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n\r\n  /**\r\n   * Context menu handler\r\n   * @private\r\n   * @param {Event} event - Context menu event\r\n   */\r\n  [onContextMenuWhileDragging](event) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nexports.default = MouseSensor;\r\nfunction preventNativeDragStart(event) {\r\n  event.preventDefault();\r\n}\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __nested_webpack_require_68557__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_68557__(20);\r\n\r\nvar _MouseSensor2 = _interopRequireDefault(_MouseSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _MouseSensor2.default;\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst defaultDealy = {\r\n  mouse: 0,\r\n  drag: 0,\r\n  touch: 100\r\n};\r\n\r\n/**\r\n * Base sensor class. Extend from this class to create a new or custom sensor\r\n * @class Sensor\r\n * @module Sensor\r\n */\r\nclass Sensor {\r\n  /**\r\n   * Sensor constructor.\r\n   * @constructs Sensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    /**\r\n     * Current containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.containers = [...containers];\r\n\r\n    /**\r\n     * Current options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, options);\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Current container\r\n     * @property currentContainer\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentContainer = null;\r\n\r\n    /**\r\n     * The event of the initial sensor down\r\n     * @property startEvent\r\n     * @type {Event}\r\n     */\r\n    this.startEvent = null;\r\n\r\n    /**\r\n     * The delay of each sensor\r\n     * @property delay\r\n     * @type {Object}\r\n     */\r\n    this.delay = calcDelay(options.delay);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  attach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  detach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to this sensor\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n  }\r\n\r\n  /**\r\n   * Removes container from this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from this sensor\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n  }\r\n\r\n  /**\r\n   * Triggers event on target element\r\n   * @param {HTMLElement} element - Element to trigger event on\r\n   * @param {SensorEvent} sensorEvent - Sensor event to trigger\r\n   */\r\n  trigger(element, sensorEvent) {\r\n    const event = document.createEvent('Event');\r\n    event.detail = sensorEvent;\r\n    event.initEvent(sensorEvent.type, true, true);\r\n    element.dispatchEvent(event);\r\n    this.lastEvent = sensorEvent;\r\n\r\n    return sensorEvent;\r\n  }\r\n}\r\n\r\nexports.default = Sensor; /**\r\n                           * Calculate the delay of each sensor through the delay in the options\r\n                           * @param {undefined|Number|Object} optionsDelay - the delay in the options\r\n                           * @return {Object}\r\n                           */\r\n\r\nfunction calcDelay(optionsDelay) {\r\n  const delay = {};\r\n\r\n  if (optionsDelay === undefined) {\r\n    return _extends({}, defaultDealy);\r\n  }\r\n\r\n  if (typeof optionsDelay === 'number') {\r\n    for (const key in defaultDealy) {\r\n      if (defaultDealy.hasOwnProperty(key)) {\r\n        delay[key] = optionsDelay;\r\n      }\r\n    }\r\n    return delay;\r\n  }\r\n\r\n  for (const key in defaultDealy) {\r\n    if (defaultDealy.hasOwnProperty(key)) {\r\n      if (optionsDelay[key] === undefined) {\r\n        delay[key] = defaultDealy[key];\r\n      } else {\r\n        delay[key] = optionsDelay[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return delay;\r\n}\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_73514__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_73514__(23);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __nested_webpack_require_74535__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_74535__(25);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __nested_webpack_require_75294__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_75294__(27);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_77724__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_77724__(29);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __nested_webpack_require_78128__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_78128__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_78128__(2);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst scroll = exports.scroll = Symbol('scroll');\r\n\r\n/**\r\n * Scrollable default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.speed\r\n * @property {Number} defaultOptions.sensitivity\r\n * @property {HTMLElement[]} defaultOptions.scrollableElements\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  speed: 6,\r\n  sensitivity: 50,\r\n  scrollableElements: []\r\n};\r\n\r\n/**\r\n * Scrollable plugin which scrolls the closest scrollable parent\r\n * @class Scrollable\r\n * @module Scrollable\r\n * @extends AbstractPlugin\r\n */\r\nclass Scrollable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Scrollable constructor.\r\n   * @constructs Scrollable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Scrollable options\r\n     * @property {Object} options\r\n     * @property {Number} options.speed\r\n     * @property {Number} options.sensitivity\r\n     * @property {HTMLElement[]} options.scrollableElements\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Keeps current mouse position\r\n     * @property {Object} currentMousePosition\r\n     * @property {Number} currentMousePosition.clientX\r\n     * @property {Number} currentMousePosition.clientY\r\n     * @type {Object|null}\r\n     */\r\n    this.currentMousePosition = null;\r\n\r\n    /**\r\n     * Scroll animation frame\r\n     * @property scrollAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.scrollAnimationFrame = null;\r\n\r\n    /**\r\n     * Closest scrollable element\r\n     * @property scrollableElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.scrollableElement = null;\r\n\r\n    /**\r\n     * Animation frame looking for the closest scrollable element\r\n     * @property findScrollableElementFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.findScrollableElementFrame = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[scroll] = this[scroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.scrollable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns closest scrollable elements by element\r\n   * @param {HTMLElement} target\r\n   * @return {HTMLElement}\r\n   */\r\n  getScrollableElement(target) {\r\n    if (this.hasDefinedScrollableElements()) {\r\n      return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;\r\n    } else {\r\n      return closestScrollableElement(target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if at least one scrollable element have been defined via options\r\n   * @param {HTMLElement} target\r\n   * @return {Boolean}\r\n   */\r\n  hasDefinedScrollableElements() {\r\n    return Boolean(this.options.scrollableElements.length !== 0);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler. Finds closest scrollable parent in separate frame\r\n   * @param {DragStartEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragStart](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler. Remembers mouse position and initiates scrolling\r\n   * @param {DragMoveEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragMove](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.sensorEvent.target);\r\n    });\r\n\r\n    if (!this.scrollableElement) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = dragEvent.sensorEvent;\r\n    const scrollOffset = { x: 0, y: 0 };\r\n\r\n    if ('ontouchstart' in window) {\r\n      scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n      scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\r\n    }\r\n\r\n    this.currentMousePosition = {\r\n      clientX: sensorEvent.clientX - scrollOffset.x,\r\n      clientY: sensorEvent.clientY - scrollOffset.y\r\n    };\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler. Cancels scroll animations and resets state\r\n   * @private\r\n   */\r\n  [onDragStop]() {\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n    cancelAnimationFrame(this.findScrollableElementFrame);\r\n\r\n    this.scrollableElement = null;\r\n    this.scrollAnimationFrame = null;\r\n    this.findScrollableElementFrame = null;\r\n    this.currentMousePosition = null;\r\n  }\r\n\r\n  /**\r\n   * Scroll function that does the heavylifting\r\n   * @private\r\n   */\r\n  [scroll]() {\r\n    if (!this.scrollableElement || !this.currentMousePosition) {\r\n      return;\r\n    }\r\n\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n\r\n    const { speed, sensitivity } = this.options;\r\n\r\n    const rect = this.scrollableElement.getBoundingClientRect();\r\n    const bottomCutOff = rect.bottom > window.innerHeight;\r\n    const topCutOff = rect.top < 0;\r\n    const cutOff = topCutOff || bottomCutOff;\r\n\r\n    const documentScrollingElement = getDocumentScrollingElement();\r\n    const scrollableElement = this.scrollableElement;\r\n    const clientX = this.currentMousePosition.clientX;\r\n    const clientY = this.currentMousePosition.clientY;\r\n\r\n    if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {\r\n      const { offsetHeight, offsetWidth } = scrollableElement;\r\n\r\n      if (rect.top + offsetHeight - clientY < sensitivity) {\r\n        scrollableElement.scrollTop += speed;\r\n      } else if (clientY - rect.top < sensitivity) {\r\n        scrollableElement.scrollTop -= speed;\r\n      }\r\n\r\n      if (rect.left + offsetWidth - clientX < sensitivity) {\r\n        scrollableElement.scrollLeft += speed;\r\n      } else if (clientX - rect.left < sensitivity) {\r\n        scrollableElement.scrollLeft -= speed;\r\n      }\r\n    } else {\r\n      const { innerHeight, innerWidth } = window;\r\n\r\n      if (clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop -= speed;\r\n      } else if (innerHeight - clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop += speed;\r\n      }\r\n\r\n      if (clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft -= speed;\r\n      } else if (innerWidth - clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft += speed;\r\n      }\r\n    }\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n}\r\n\r\nexports.default = Scrollable; /**\r\n                               * Returns true if the passed element has overflow\r\n                               * @param {HTMLElement} element\r\n                               * @return {Boolean}\r\n                               * @private\r\n                               */\r\n\r\nfunction hasOverflow(element) {\r\n  const overflowRegex = /(auto|scroll)/;\r\n  const computedStyles = getComputedStyle(element, null);\r\n\r\n  const overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');\r\n\r\n  return overflowRegex.test(overflow);\r\n}\r\n\r\n/**\r\n * Returns true if the passed element is statically positioned\r\n * @param {HTMLElement} element\r\n * @return {Boolean}\r\n * @private\r\n */\r\nfunction isStaticallyPositioned(element) {\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  return position === 'static';\r\n}\r\n\r\n/**\r\n * Finds closest scrollable element\r\n * @param {HTMLElement} element\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction closestScrollableElement(element) {\r\n  if (!element) {\r\n    return getDocumentScrollingElement();\r\n  }\r\n\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  const excludeStaticParents = position === 'absolute';\r\n\r\n  const scrollableElement = (0, _utils.closest)(element, parent => {\r\n    if (excludeStaticParents && isStaticallyPositioned(parent)) {\r\n      return false;\r\n    }\r\n    return hasOverflow(parent);\r\n  });\r\n\r\n  if (position === 'fixed' || !scrollableElement) {\r\n    return getDocumentScrollingElement();\r\n  } else {\r\n    return scrollableElement;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns element that scrolls document\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction getDocumentScrollingElement() {\r\n  return document.scrollingElement || document.documentElement;\r\n}\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __nested_webpack_require_88050__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Scrollable = __nested_webpack_require_88050__(31);\r\n\r\nvar _Scrollable2 = _interopRequireDefault(_Scrollable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Scrollable2.default;\r\nexports.defaultOptions = _Scrollable.defaultOptions;\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_88557__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_88557__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base mirror event\r\n * @class MirrorEvent\r\n * @module MirrorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass MirrorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Drag event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.MirrorEvent = MirrorEvent; /**\r\n                                    * Mirror create event\r\n                                    * @class MirrorCreateEvent\r\n                                    * @module MirrorCreateEvent\r\n                                    * @extends MirrorEvent\r\n                                    */\r\n\r\nclass MirrorCreateEvent extends MirrorEvent {}\r\n\r\nexports.MirrorCreateEvent = MirrorCreateEvent; /**\r\n                                                * Mirror created event\r\n                                                * @class MirrorCreatedEvent\r\n                                                * @module MirrorCreatedEvent\r\n                                                * @extends MirrorEvent\r\n                                                */\r\n\r\nMirrorCreateEvent.type = 'mirror:create';\r\nclass MirrorCreatedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorCreatedEvent = MirrorCreatedEvent; /**\r\n                                                  * Mirror attached event\r\n                                                  * @class MirrorAttachedEvent\r\n                                                  * @module MirrorAttachedEvent\r\n                                                  * @extends MirrorEvent\r\n                                                  */\r\n\r\nMirrorCreatedEvent.type = 'mirror:created';\r\nclass MirrorAttachedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorAttachedEvent = MirrorAttachedEvent; /**\r\n                                                    * Mirror move event\r\n                                                    * @class MirrorMoveEvent\r\n                                                    * @module MirrorMoveEvent\r\n                                                    * @extends MirrorEvent\r\n                                                    */\r\n\r\nMirrorAttachedEvent.type = 'mirror:attached';\r\nclass MirrorMoveEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on x axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshX() {\r\n    return this.data.passedThreshX;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on y axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshY() {\r\n    return this.data.passedThreshY;\r\n  }\r\n}\r\n\r\nexports.MirrorMoveEvent = MirrorMoveEvent; /**\r\n                                            * Mirror destroy event\r\n                                            * @class MirrorDestroyEvent\r\n                                            * @module MirrorDestroyEvent\r\n                                            * @extends MirrorEvent\r\n                                            */\r\n\r\nMirrorMoveEvent.type = 'mirror:move';\r\nMirrorMoveEvent.cancelable = true;\r\nclass MirrorDestroyEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\nexports.MirrorDestroyEvent = MirrorDestroyEvent;\r\nMirrorDestroyEvent.type = 'mirror:destroy';\r\nMirrorDestroyEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __nested_webpack_require_94009__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MirrorEvent = __nested_webpack_require_94009__(33);\r\n\r\nObject.keys(_MirrorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _MirrorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __nested_webpack_require_94477__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_94477__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _MirrorEvent = __nested_webpack_require_94477__(34);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');\r\nconst onScroll = exports.onScroll = Symbol('onScroll');\r\nconst getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');\r\n\r\n/**\r\n * Mirror default options\r\n * @property {Object} defaultOptions\r\n * @property {Boolean} defaultOptions.constrainDimensions\r\n * @property {Boolean} defaultOptions.xAxis\r\n * @property {Boolean} defaultOptions.yAxis\r\n * @property {null} defaultOptions.cursorOffsetX\r\n * @property {null} defaultOptions.cursorOffsetY\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  constrainDimensions: false,\r\n  xAxis: true,\r\n  yAxis: true,\r\n  cursorOffsetX: null,\r\n  cursorOffsetY: null,\r\n  thresholdX: null,\r\n  thresholdY: null\r\n};\r\n\r\n/**\r\n * Mirror plugin which controls the mirror positioning while dragging\r\n * @class Mirror\r\n * @module Mirror\r\n * @extends AbstractPlugin\r\n */\r\nclass Mirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * Mirror constructor.\r\n   * @constructs Mirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Mirror options\r\n     * @property {Object} options\r\n     * @property {Boolean} options.constrainDimensions\r\n     * @property {Boolean} options.xAxis\r\n     * @property {Boolean} options.yAxis\r\n     * @property {Number|null} options.cursorOffsetX\r\n     * @property {Number|null} options.cursorOffsetY\r\n     * @property {String|HTMLElement|Function} options.appendTo\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Initial scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorMove] = this[onMirrorMove].bind(this);\r\n    this[onScroll] = this[onScroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.mirror || {};\r\n  }\r\n\r\n  [onDragStart](dragEvent) {\r\n    if (dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if ('ontouchstart' in window) {\r\n      document.addEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    // Last sensor position of mirror move\r\n    this.lastMirrorMovedClient = {\r\n      x: sensorEvent.clientX,\r\n      y: sensorEvent.clientY\r\n    };\r\n\r\n    const mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreateEvent);\r\n\r\n    if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const appendableContainer = this[getAppendableContainer](source) || sourceContainer;\r\n    this.mirror = source.cloneNode(true);\r\n\r\n    const mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    const mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreatedEvent);\r\n    appendableContainer.appendChild(this.mirror);\r\n    this.draggable.trigger(mirrorAttachedEvent);\r\n  }\r\n\r\n  [onDragMove](dragEvent) {\r\n    if (!this.mirror || dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    let passedThreshX = true;\r\n    let passedThreshY = true;\r\n\r\n    if (this.options.thresholdX || this.options.thresholdY) {\r\n      const { x: lastX, y: lastY } = this.lastMirrorMovedClient;\r\n\r\n      if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {\r\n        passedThreshX = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.x = sensorEvent.clientX;\r\n      }\r\n\r\n      if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {\r\n        passedThreshY = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.y = sensorEvent.clientY;\r\n      }\r\n\r\n      if (!passedThreshX && !passedThreshY) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror,\r\n      passedThreshX,\r\n      passedThreshY\r\n    });\r\n\r\n    this.draggable.trigger(mirrorMoveEvent);\r\n  }\r\n\r\n  [onDragStop](dragEvent) {\r\n    if ('ontouchstart' in window) {\r\n      document.removeEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = { x: 0, y: 0 };\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    if (!this.mirror) {\r\n      return;\r\n    }\r\n\r\n    const { source, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    const mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({\r\n      source,\r\n      mirror: this.mirror,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorDestroyEvent);\r\n\r\n    if (!mirrorDestroyEvent.canceled()) {\r\n      this.mirror.parentNode.removeChild(this.mirror);\r\n    }\r\n  }\r\n\r\n  [onScroll]() {\r\n    this.scrollOffset = {\r\n      x: window.scrollX - this.initialScrollOffset.x,\r\n      y: window.scrollY - this.initialScrollOffset.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror, source, sensorEvent }) {\r\n    const mirrorClasses = this.draggable.getClassNamesFor('mirror');\r\n\r\n    const setState = (_ref) => {\r\n      let { mirrorOffset, initialX, initialY } = _ref,\r\n          args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);\r\n\r\n      this.mirrorOffset = mirrorOffset;\r\n      this.initialX = initialX;\r\n      this.initialY = initialY;\r\n      this.lastMovedX = initialX;\r\n      this.lastMovedY = initialY;\r\n      return _extends({ mirrorOffset, initialX, initialY }, args);\r\n    };\r\n\r\n    mirror.style.display = 'none';\r\n\r\n    const initialState = {\r\n      mirror,\r\n      source,\r\n      sensorEvent,\r\n      mirrorClasses,\r\n      scrollOffset: this.scrollOffset,\r\n      options: this.options,\r\n      passedThreshX: true,\r\n      passedThreshY: true\r\n    };\r\n\r\n    return Promise.resolve(initialState)\r\n    // Fix reflow here\r\n    .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({ initial: true })).then(removeMirrorID).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Mirror move handler\r\n   * @param {MirrorMoveEvent} mirrorEvent\r\n   * @return {Promise|null}\r\n   * @private\r\n   */\r\n  [onMirrorMove](mirrorEvent) {\r\n    if (mirrorEvent.canceled()) {\r\n      return null;\r\n    }\r\n\r\n    const setState = (_ref2) => {\r\n      let { lastMovedX, lastMovedY } = _ref2,\r\n          args = _objectWithoutProperties(_ref2, ['lastMovedX', 'lastMovedY']);\r\n\r\n      this.lastMovedX = lastMovedX;\r\n      this.lastMovedY = lastMovedY;\r\n\r\n      return _extends({ lastMovedX, lastMovedY }, args);\r\n    };\r\n\r\n    const initialState = {\r\n      mirror: mirrorEvent.mirror,\r\n      sensorEvent: mirrorEvent.sensorEvent,\r\n      mirrorOffset: this.mirrorOffset,\r\n      options: this.options,\r\n      initialX: this.initialX,\r\n      initialY: this.initialY,\r\n      scrollOffset: this.scrollOffset,\r\n      passedThreshX: mirrorEvent.passedThreshX,\r\n      passedThreshY: mirrorEvent.passedThreshY,\r\n      lastMovedX: this.lastMovedX,\r\n      lastMovedY: this.lastMovedY\r\n    };\r\n\r\n    return Promise.resolve(initialState).then(positionMirror({ raf: true })).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Returns appendable container for mirror based on the appendTo option\r\n   * @private\r\n   * @param {Object} options\r\n   * @param {HTMLElement} options.source - Current source\r\n   * @return {HTMLElement}\r\n   */\r\n  [getAppendableContainer](source) {\r\n    const appendTo = this.options.appendTo;\r\n\r\n    if (typeof appendTo === 'string') {\r\n      return document.querySelector(appendTo);\r\n    } else if (appendTo instanceof HTMLElement) {\r\n      return appendTo;\r\n    } else if (typeof appendTo === 'function') {\r\n      return appendTo(source);\r\n    } else {\r\n      return source.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nexports.default = Mirror; /**\r\n                           * Computes mirror dimensions based on the source element\r\n                           * Adds sourceRect to state\r\n                           * @param {Object} state\r\n                           * @param {HTMLElement} state.source\r\n                           * @return {Promise}\r\n                           * @private\r\n                           */\r\n\r\nfunction computeMirrorDimensions(_ref3) {\r\n  let { source } = _ref3,\r\n      args = _objectWithoutProperties(_ref3, ['source']);\r\n\r\n  return withPromise(resolve => {\r\n    const sourceRect = source.getBoundingClientRect();\r\n    resolve(_extends({ source, sourceRect }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Calculates mirror offset\r\n * Adds mirrorOffset to state\r\n * @param {Object} state\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {DOMRect} state.sourceRect\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction calculateMirrorOffset(_ref4) {\r\n  let { sensorEvent, sourceRect, options } = _ref4,\r\n      args = _objectWithoutProperties(_ref4, ['sensorEvent', 'sourceRect', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    const top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;\r\n    const left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;\r\n\r\n    const mirrorOffset = { top, left };\r\n\r\n    resolve(_extends({ sensorEvent, sourceRect, mirrorOffset, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror styles\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {HTMLElement} state.source\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction resetMirror(_ref5) {\r\n  let { mirror, source, options } = _ref5,\r\n      args = _objectWithoutProperties(_ref5, ['mirror', 'source', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    let offsetHeight;\r\n    let offsetWidth;\r\n\r\n    if (options.constrainDimensions) {\r\n      const computedSourceStyles = getComputedStyle(source);\r\n      offsetHeight = computedSourceStyles.getPropertyValue('height');\r\n      offsetWidth = computedSourceStyles.getPropertyValue('width');\r\n    }\r\n\r\n    mirror.style.display = null;\r\n    mirror.style.position = 'fixed';\r\n    mirror.style.pointerEvents = 'none';\r\n    mirror.style.top = 0;\r\n    mirror.style.left = 0;\r\n    mirror.style.margin = 0;\r\n\r\n    if (options.constrainDimensions) {\r\n      mirror.style.height = offsetHeight;\r\n      mirror.style.width = offsetWidth;\r\n    }\r\n\r\n    resolve(_extends({ mirror, source, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror class on mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {String[]} state.mirrorClasses\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction addMirrorClasses(_ref6) {\r\n  let { mirror, mirrorClasses } = _ref6,\r\n      args = _objectWithoutProperties(_ref6, ['mirror', 'mirrorClasses']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.classList.add(...mirrorClasses);\r\n    resolve(_extends({ mirror, mirrorClasses }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Removes source ID from cloned mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction removeMirrorID(_ref7) {\r\n  let { mirror } = _ref7,\r\n      args = _objectWithoutProperties(_ref7, ['mirror']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.removeAttribute('id');\r\n    delete mirror.id;\r\n    resolve(_extends({ mirror }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Positions mirror with translate3d\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {Object} state.mirrorOffset\r\n * @param {Number} state.initialY\r\n * @param {Number} state.initialX\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction positionMirror({ withFrame = false, initial = false } = {}) {\r\n  return (_ref8) => {\r\n    let {\r\n      mirror,\r\n      sensorEvent,\r\n      mirrorOffset,\r\n      initialY,\r\n      initialX,\r\n      scrollOffset,\r\n      options,\r\n      passedThreshX,\r\n      passedThreshY,\r\n      lastMovedX,\r\n      lastMovedY\r\n    } = _ref8,\r\n        args = _objectWithoutProperties(_ref8, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options', 'passedThreshX', 'passedThreshY', 'lastMovedX', 'lastMovedY']);\r\n\r\n    return withPromise(resolve => {\r\n      const result = _extends({\r\n        mirror,\r\n        sensorEvent,\r\n        mirrorOffset,\r\n        options\r\n      }, args);\r\n\r\n      if (mirrorOffset) {\r\n        const x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);\r\n        const y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);\r\n\r\n        if (options.xAxis && options.yAxis || initial) {\r\n          mirror.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n        } else if (options.xAxis && !options.yAxis) {\r\n          mirror.style.transform = `translate3d(${x}px, ${initialY}px, 0)`;\r\n        } else if (options.yAxis && !options.xAxis) {\r\n          mirror.style.transform = `translate3d(${initialX}px, ${y}px, 0)`;\r\n        }\r\n\r\n        if (initial) {\r\n          result.initialX = x;\r\n          result.initialY = y;\r\n        }\r\n\r\n        result.lastMovedX = x;\r\n        result.lastMovedY = y;\r\n      }\r\n\r\n      resolve(result);\r\n    }, { frame: withFrame });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps functions in promise with potential animation frame option\r\n * @param {Function} callback\r\n * @param {Object} options\r\n * @param {Boolean} options.raf\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction withPromise(callback, { raf = false } = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    if (raf) {\r\n      requestAnimationFrame(() => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      callback(resolve, reject);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if the sensor event was triggered by a native browser drag event\r\n * @param {SensorEvent} sensorEvent\r\n */\r\nfunction isNativeDragEvent(sensorEvent) {\r\n  return (/^drag/.test(sensorEvent.originalEvent.type)\r\n  );\r\n}\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_111991__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Mirror = __nested_webpack_require_111991__(35);\r\n\r\nvar _Mirror2 = _interopRequireDefault(_Mirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Mirror2.default;\r\nexports.defaultOptions = _Mirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __nested_webpack_require_112478__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_112478__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\n\r\n/**\r\n * Focusable default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = {};\r\n\r\n/**\r\n * Focusable plugin\r\n * @class Focusable\r\n * @module Focusable\r\n * @extends AbstractPlugin\r\n */\r\nclass Focusable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Focusable constructor.\r\n   * @constructs Focusable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Focusable options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);\r\n\r\n    // Remove modified elements when detach\r\n    this[onDestroy]();\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.focusable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns draggable containers and elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getElements() {\r\n    return [...this.draggable.containers, ...this.draggable.getDraggableElements()];\r\n  }\r\n\r\n  /**\r\n   * Intialize handler\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => decorateElement(element));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy handler\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => stripElement(element));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = Focusable; /**\r\n                              * Keeps track of all the elements that are missing tabindex attributes\r\n                              * so they can be reset when draggable gets destroyed\r\n                              * @const {HTMLElement[]} elementsWithMissingTabIndex\r\n                              */\r\n\r\nconst elementsWithMissingTabIndex = [];\r\n\r\n/**\r\n * Decorates element with tabindex attributes\r\n * @param {HTMLElement} element\r\n * @return {Object}\r\n * @private\r\n */\r\nfunction decorateElement(element) {\r\n  const hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);\r\n\r\n  if (hasMissingTabIndex) {\r\n    elementsWithMissingTabIndex.push(element);\r\n    element.tabIndex = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Removes elements tabindex attributes\r\n * @param {HTMLElement} element\r\n * @private\r\n */\r\nfunction stripElement(element) {\r\n  const tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);\r\n\r\n  if (tabIndexElementPosition !== -1) {\r\n    element.tabIndex = -1;\r\n    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __nested_webpack_require_116390__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_116390__(37);\r\n\r\nvar _Focusable2 = _interopRequireDefault(_Focusable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Focusable2.default;\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __nested_webpack_require_117714__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_117714__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\nconst announceEvent = Symbol('announceEvent');\r\nconst announceMessage = Symbol('announceMessage');\r\n\r\nconst ARIA_RELEVANT = 'aria-relevant';\r\nconst ARIA_ATOMIC = 'aria-atomic';\r\nconst ARIA_LIVE = 'aria-live';\r\nconst ROLE = 'role';\r\n\r\n/**\r\n * Announcement default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.expire\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  expire: 7000\r\n};\r\n\r\n/**\r\n * Announcement plugin\r\n * @class Announcement\r\n * @module Announcement\r\n * @extends AbstractPlugin\r\n */\r\nclass Announcement extends _AbstractPlugin2.default {\r\n  /**\r\n   * Announcement constructor.\r\n   * @constructs Announcement\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Plugin options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Original draggable trigger method. Hack until we have onAll or on('all')\r\n     * @property originalTriggerMethod\r\n     * @type {Function}\r\n     */\r\n    this.originalTriggerMethod = this.draggable.trigger;\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Returns passed in options\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.announcements || {};\r\n  }\r\n\r\n  /**\r\n   * Announces event\r\n   * @private\r\n   * @param {AbstractEvent} event\r\n   */\r\n  [announceEvent](event) {\r\n    const message = this.options[event.type];\r\n\r\n    if (message && typeof message === 'string') {\r\n      this[announceMessage](message);\r\n    }\r\n\r\n    if (message && typeof message === 'function') {\r\n      this[announceMessage](message(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Announces message to screen reader\r\n   * @private\r\n   * @param {String} message\r\n   */\r\n  [announceMessage](message) {\r\n    announce(message, { expire: this.options.expire });\r\n  }\r\n\r\n  /**\r\n   * Initialize hander\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Hack until there is an api for listening for all events\r\n    this.draggable.trigger = event => {\r\n      try {\r\n        this[announceEvent](event);\r\n      } finally {\r\n        // Ensure that original trigger is called\r\n        this.originalTriggerMethod.call(this.draggable, event);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy hander\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    this.draggable.trigger = this.originalTriggerMethod;\r\n  }\r\n}\r\n\r\nexports.default = Announcement; /**\r\n                                 * @const {HTMLElement} liveRegion\r\n                                 */\r\n\r\nconst liveRegion = createRegion();\r\n\r\n/**\r\n * Announces message via live region\r\n * @param {String} message\r\n * @param {Object} options\r\n * @param {Number} options.expire\r\n */\r\nfunction announce(message, { expire }) {\r\n  const element = document.createElement('div');\r\n\r\n  element.textContent = message;\r\n  liveRegion.appendChild(element);\r\n\r\n  return setTimeout(() => {\r\n    liveRegion.removeChild(element);\r\n  }, expire);\r\n}\r\n\r\n/**\r\n * Creates region element\r\n * @return {HTMLElement}\r\n */\r\nfunction createRegion() {\r\n  const element = document.createElement('div');\r\n\r\n  element.setAttribute('id', 'draggable-live-region');\r\n  element.setAttribute(ARIA_RELEVANT, 'additions');\r\n  element.setAttribute(ARIA_ATOMIC, 'true');\r\n  element.setAttribute(ARIA_LIVE, 'assertive');\r\n  element.setAttribute(ROLE, 'log');\r\n\r\n  element.style.position = 'fixed';\r\n  element.style.width = '1px';\r\n  element.style.height = '1px';\r\n  element.style.top = '-1px';\r\n  element.style.overflow = 'hidden';\r\n\r\n  return element;\r\n}\r\n\r\n// Append live region element as early as possible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  document.body.appendChild(liveRegion);\r\n});\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __nested_webpack_require_122602__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Announcement = __nested_webpack_require_122602__(40);\r\n\r\nvar _Announcement2 = _interopRequireDefault(_Announcement);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Announcement2.default;\r\nexports.defaultOptions = _Announcement.defaultOptions;\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __nested_webpack_require_123119__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_123119__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base draggable event\r\n * @class DraggableEvent\r\n * @module DraggableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DraggableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggable instance\r\n   * @property draggable\r\n   * @type {Draggable}\r\n   * @readonly\r\n   */\r\n  get draggable() {\r\n    return this.data.draggable;\r\n  }\r\n}\r\n\r\nexports.DraggableEvent = DraggableEvent; /**\r\n                                          * Draggable initialized event\r\n                                          * @class DraggableInitializedEvent\r\n                                          * @module DraggableInitializedEvent\r\n                                          * @extends DraggableEvent\r\n                                          */\r\n\r\nDraggableEvent.type = 'draggable';\r\nclass DraggableInitializedEvent extends DraggableEvent {}\r\n\r\nexports.DraggableInitializedEvent = DraggableInitializedEvent; /**\r\n                                                                * Draggable destory event\r\n                                                                * @class DraggableInitializedEvent\r\n                                                                * @module DraggableDestroyEvent\r\n                                                                * @extends DraggableDestroyEvent\r\n                                                                */\r\n\r\nDraggableInitializedEvent.type = 'draggable:initialize';\r\nclass DraggableDestroyEvent extends DraggableEvent {}\r\nexports.DraggableDestroyEvent = DraggableDestroyEvent;\r\nDraggableDestroyEvent.type = 'draggable:destroy';\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __nested_webpack_require_125183__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragStoppedEvent = exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_125183__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base drag event\r\n * @class DragEvent\r\n * @module DragEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DragEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.DragEvent = DragEvent; /**\r\n                                * Drag start event\r\n                                * @class DragStartEvent\r\n                                * @module DragStartEvent\r\n                                * @extends DragEvent\r\n                                */\r\n\r\nDragEvent.type = 'drag';\r\nclass DragStartEvent extends DragEvent {}\r\n\r\nexports.DragStartEvent = DragStartEvent; /**\r\n                                          * Drag move event\r\n                                          * @class DragMoveEvent\r\n                                          * @module DragMoveEvent\r\n                                          * @extends DragEvent\r\n                                          */\r\n\r\nDragStartEvent.type = 'drag:start';\r\nDragStartEvent.cancelable = true;\r\nclass DragMoveEvent extends DragEvent {}\r\n\r\nexports.DragMoveEvent = DragMoveEvent; /**\r\n                                        * Drag over event\r\n                                        * @class DragOverEvent\r\n                                        * @module DragOverEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragMoveEvent.type = 'drag:move';\r\nclass DragOverEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOverEvent = DragOverEvent; /**\r\n                                        * Drag out event\r\n                                        * @class DragOutEvent\r\n                                        * @module DragOutEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragOverEvent.type = 'drag:over';\r\nDragOverEvent.cancelable = true;\r\nclass DragOutEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you left\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOutEvent = DragOutEvent; /**\r\n                                      * Drag over container event\r\n                                      * @class DragOverContainerEvent\r\n                                      * @module DragOverContainerEvent\r\n                                      * @extends DragEvent\r\n                                      */\r\n\r\nDragOutEvent.type = 'drag:out';\r\nclass DragOverContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOverContainerEvent = DragOverContainerEvent; /**\r\n                                                          * Drag out container event\r\n                                                          * @class DragOutContainerEvent\r\n                                                          * @module DragOutContainerEvent\r\n                                                          * @extends DragEvent\r\n                                                          */\r\n\r\nDragOverContainerEvent.type = 'drag:over:container';\r\nclass DragOutContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you left\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOutContainerEvent = DragOutContainerEvent; /**\r\n                                                        * Drag pressure event\r\n                                                        * @class DragPressureEvent\r\n                                                        * @module DragPressureEvent\r\n                                                        * @extends DragEvent\r\n                                                        */\r\n\r\nDragOutContainerEvent.type = 'drag:out:container';\r\nclass DragPressureEvent extends DragEvent {\r\n\r\n  /**\r\n   * Pressure applied on draggable element\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.DragPressureEvent = DragPressureEvent; /**\r\n                                                * Drag stop event\r\n                                                * @class DragStopEvent\r\n                                                * @module DragStopEvent\r\n                                                * @extends DragEvent\r\n                                                */\r\n\r\nDragPressureEvent.type = 'drag:pressure';\r\nclass DragStopEvent extends DragEvent {}\r\n\r\nexports.DragStopEvent = DragStopEvent; /**\r\n                                        * Drag stopped event\r\n                                        * @class DragStoppedEvent\r\n                                        * @module DragStoppedEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragStopEvent.type = 'drag:stop';\r\nclass DragStoppedEvent extends DragEvent {}\r\nexports.DragStoppedEvent = DragStoppedEvent;\r\nDragStoppedEvent.type = 'drag:stopped';\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_132708__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_132708__(8);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_132708__(7);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Plugins = __nested_webpack_require_132708__(6);\r\n\r\nObject.keys(_Plugins).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Plugins[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sensors = __nested_webpack_require_132708__(5);\r\n\r\nObject.keys(_Sensors).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Sensors[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Draggable = __nested_webpack_require_132708__(12);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Draggable2.default;\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __nested_webpack_require_134291__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _Draggable = __nested_webpack_require_134291__(44);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _SortableEvent = __nested_webpack_require_134291__(9);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOverContainer = Symbol('onDragOverContainer');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragStop = Symbol('onDragStop');\r\n\r\n/**\r\n * Returns announcement message when a Draggable element has been sorted with another Draggable element\r\n * or moved into a new container\r\n * @param {SortableSortedEvent} sortableEvent\r\n * @return {String}\r\n */\r\nfunction onSortableSortedDefaultAnnouncement({ dragEvent }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'sortable element';\r\n\r\n  if (dragEvent.over) {\r\n    const overText = dragEvent.over.textContent.trim() || dragEvent.over.id || 'sortable element';\r\n    const isFollowing = dragEvent.source.compareDocumentPosition(dragEvent.over) & Node.DOCUMENT_POSITION_FOLLOWING;\r\n\r\n    if (isFollowing) {\r\n      return `Placed ${sourceText} after ${overText}`;\r\n    } else {\r\n      return `Placed ${sourceText} before ${overText}`;\r\n    }\r\n  } else {\r\n    // need to figure out how to compute container name\r\n    return `Placed ${sourceText} into a different container`;\r\n  }\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['sortable:sorted']\r\n */\r\nconst defaultAnnouncements = {\r\n  'sortable:sorted': onSortableSortedDefaultAnnouncement\r\n};\r\n\r\n/**\r\n * Sortable is built on top of Draggable and allows sorting of draggable elements. Sortable will keep\r\n * track of the original index and emits the new index as you drag over draggable elements.\r\n * @class Sortable\r\n * @module Sortable\r\n * @extends Draggable\r\n */\r\nclass Sortable extends _Draggable2.default {\r\n  /**\r\n   * Sortable constructor.\r\n   * @constructs Sortable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Sortable containers\r\n   * @param {Object} options - Options for Sortable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, options, {\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * start index of source on drag start\r\n     * @property startIndex\r\n     * @type {Number}\r\n     */\r\n    this.startIndex = null;\r\n\r\n    /**\r\n     * start container on drag start\r\n     * @property startContainer\r\n     * @type {HTMLElement}\r\n     * @default null\r\n     */\r\n    this.startContainer = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOverContainer] = this[onDragOverContainer].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:over:container', this[onDragOverContainer]).on('drag:over', this[onDragOver]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Sortable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this[onDragStart]).off('drag:over:container', this[onDragOverContainer]).off('drag:over', this[onDragOver]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns true index of element within its container during drag operation, i.e. excluding mirror and original source\r\n   * @param {HTMLElement} element - An element\r\n   * @return {Number}\r\n   */\r\n  index(element) {\r\n    return this.getSortableElementsForContainer(element.parentNode).indexOf(element);\r\n  }\r\n\r\n  /**\r\n   * Returns sortable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getSortableElementsForContainer(container) {\r\n    const allSortableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allSortableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror && childElement.parentNode === container;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    this.startContainer = event.source.parentNode;\r\n    this.startIndex = this.index(event.source);\r\n\r\n    const sortableStartEvent = new _SortableEvent.SortableStartEvent({\r\n      dragEvent: event,\r\n      startIndex: this.startIndex,\r\n      startContainer: this.startContainer\r\n    });\r\n\r\n    this.trigger(sortableStartEvent);\r\n\r\n    if (sortableStartEvent.canceled()) {\r\n      event.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag over container handler\r\n   * @private\r\n   * @param {DragOverContainerEvent} event - Drag over container event\r\n   */\r\n  [onDragOverContainer](event) {\r\n    if (event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, over, overContainer } = event;\r\n    const oldIndex = this.index(source);\r\n\r\n    const sortableSortEvent = new _SortableEvent.SortableSortEvent({\r\n      dragEvent: event,\r\n      currentIndex: oldIndex,\r\n      source,\r\n      over\r\n    });\r\n\r\n    this.trigger(sortableSortEvent);\r\n\r\n    if (sortableSortEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const children = this.getSortableElementsForContainer(overContainer);\r\n    const moves = move({ source, over, overContainer, children });\r\n\r\n    if (!moves) {\r\n      return;\r\n    }\r\n\r\n    const { oldContainer, newContainer } = moves;\r\n    const newIndex = this.index(event.source);\r\n\r\n    const sortableSortedEvent = new _SortableEvent.SortableSortedEvent({\r\n      dragEvent: event,\r\n      oldIndex,\r\n      newIndex,\r\n      oldContainer,\r\n      newContainer\r\n    });\r\n\r\n    this.trigger(sortableSortedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.over === event.originalSource || event.over === event.source) {\r\n      return;\r\n    }\r\n\r\n    const { source, over, overContainer } = event;\r\n    const oldIndex = this.index(source);\r\n\r\n    const sortableSortEvent = new _SortableEvent.SortableSortEvent({\r\n      dragEvent: event,\r\n      currentIndex: oldIndex,\r\n      source,\r\n      over\r\n    });\r\n\r\n    this.trigger(sortableSortEvent);\r\n\r\n    if (sortableSortEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const children = this.getDraggableElementsForContainer(overContainer);\r\n    const moves = move({ source, over, overContainer, children });\r\n\r\n    if (!moves) {\r\n      return;\r\n    }\r\n\r\n    const { oldContainer, newContainer } = moves;\r\n    const newIndex = this.index(source);\r\n\r\n    const sortableSortedEvent = new _SortableEvent.SortableSortedEvent({\r\n      dragEvent: event,\r\n      oldIndex,\r\n      newIndex,\r\n      oldContainer,\r\n      newContainer\r\n    });\r\n\r\n    this.trigger(sortableSortedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const sortableStopEvent = new _SortableEvent.SortableStopEvent({\r\n      dragEvent: event,\r\n      oldIndex: this.startIndex,\r\n      newIndex: this.index(event.source),\r\n      oldContainer: this.startContainer,\r\n      newContainer: event.source.parentNode\r\n    });\r\n\r\n    this.trigger(sortableStopEvent);\r\n\r\n    this.startIndex = null;\r\n    this.startContainer = null;\r\n  }\r\n}\r\n\r\nexports.default = Sortable;\r\nfunction index(element) {\r\n  return Array.prototype.indexOf.call(element.parentNode.children, element);\r\n}\r\n\r\nfunction move({ source, over, overContainer, children }) {\r\n  const emptyOverContainer = !children.length;\r\n  const differentContainer = source.parentNode !== overContainer;\r\n  const sameContainer = over && source.parentNode === over.parentNode;\r\n\r\n  if (emptyOverContainer) {\r\n    return moveInsideEmptyContainer(source, overContainer);\r\n  } else if (sameContainer) {\r\n    return moveWithinContainer(source, over);\r\n  } else if (differentContainer) {\r\n    return moveOutsideContainer(source, over, overContainer);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction moveInsideEmptyContainer(source, overContainer) {\r\n  const oldContainer = source.parentNode;\r\n\r\n  overContainer.appendChild(source);\r\n\r\n  return { oldContainer, newContainer: overContainer };\r\n}\r\n\r\nfunction moveWithinContainer(source, over) {\r\n  const oldIndex = index(source);\r\n  const newIndex = index(over);\r\n\r\n  if (oldIndex < newIndex) {\r\n    source.parentNode.insertBefore(source, over.nextElementSibling);\r\n  } else {\r\n    source.parentNode.insertBefore(source, over);\r\n  }\r\n\r\n  return { oldContainer: source.parentNode, newContainer: source.parentNode };\r\n}\r\n\r\nfunction moveOutsideContainer(source, over, overContainer) {\r\n  const oldContainer = source.parentNode;\r\n\r\n  if (over) {\r\n    over.parentNode.insertBefore(source, over);\r\n  } else {\r\n    // need to figure out proper position\r\n    overContainer.appendChild(source);\r\n  }\r\n\r\n  return { oldContainer, newContainer: source.parentNode };\r\n}\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __nested_webpack_require_145868__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SortableStopEvent = exports.SortableSortedEvent = exports.SortableSortEvent = exports.SortableStartEvent = exports.SortableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_145868__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sortable event\r\n * @class SortableEvent\r\n * @module SortableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SortableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this sortable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.SortableEvent = SortableEvent; /**\r\n                                        * Sortable start event\r\n                                        * @class SortableStartEvent\r\n                                        * @module SortableStartEvent\r\n                                        * @extends SortableEvent\r\n                                        */\r\n\r\nSortableEvent.type = 'sortable';\r\nclass SortableStartEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Start index of source on sortable start\r\n   * @property startIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get startIndex() {\r\n    return this.data.startIndex;\r\n  }\r\n\r\n  /**\r\n   * Start container on sortable start\r\n   * @property startContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get startContainer() {\r\n    return this.data.startContainer;\r\n  }\r\n}\r\n\r\nexports.SortableStartEvent = SortableStartEvent; /**\r\n                                                  * Sortable sort event\r\n                                                  * @class SortableSortEvent\r\n                                                  * @module SortableSortEvent\r\n                                                  * @extends SortableEvent\r\n                                                  */\r\n\r\nSortableStartEvent.type = 'sortable:start';\r\nSortableStartEvent.cancelable = true;\r\nclass SortableSortEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Index of current draggable element\r\n   * @property currentIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get currentIndex() {\r\n    return this.data.currentIndex;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are hovering over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n\r\n  /**\r\n   * Draggable container element you are hovering over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.dragEvent.overContainer;\r\n  }\r\n}\r\n\r\nexports.SortableSortEvent = SortableSortEvent; /**\r\n                                                * Sortable sorted event\r\n                                                * @class SortableSortedEvent\r\n                                                * @module SortableSortedEvent\r\n                                                * @extends SortableEvent\r\n                                                */\r\n\r\nSortableSortEvent.type = 'sortable:sort';\r\nSortableSortEvent.cancelable = true;\r\nclass SortableSortedEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Index of last sorted event\r\n   * @property oldIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get oldIndex() {\r\n    return this.data.oldIndex;\r\n  }\r\n\r\n  /**\r\n   * New index of this sorted event\r\n   * @property newIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get newIndex() {\r\n    return this.data.newIndex;\r\n  }\r\n\r\n  /**\r\n   * Old container of draggable element\r\n   * @property oldContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get oldContainer() {\r\n    return this.data.oldContainer;\r\n  }\r\n\r\n  /**\r\n   * New container of draggable element\r\n   * @property newContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get newContainer() {\r\n    return this.data.newContainer;\r\n  }\r\n}\r\n\r\nexports.SortableSortedEvent = SortableSortedEvent; /**\r\n                                                    * Sortable stop event\r\n                                                    * @class SortableStopEvent\r\n                                                    * @module SortableStopEvent\r\n                                                    * @extends SortableEvent\r\n                                                    */\r\n\r\nSortableSortedEvent.type = 'sortable:sorted';\r\nclass SortableStopEvent extends SortableEvent {\r\n\r\n  /**\r\n   * Original index on sortable start\r\n   * @property oldIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get oldIndex() {\r\n    return this.data.oldIndex;\r\n  }\r\n\r\n  /**\r\n   * New index of draggable element\r\n   * @property newIndex\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get newIndex() {\r\n    return this.data.newIndex;\r\n  }\r\n\r\n  /**\r\n   * Original container of draggable element\r\n   * @property oldContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get oldContainer() {\r\n    return this.data.oldContainer;\r\n  }\r\n\r\n  /**\r\n   * New container of draggable element\r\n   * @property newContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get newContainer() {\r\n    return this.data.newContainer;\r\n  }\r\n}\r\nexports.SortableStopEvent = SortableStopEvent;\r\nSortableStopEvent.type = 'sortable:stop';\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __nested_webpack_require_151374__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SortableEvent = __nested_webpack_require_151374__(9);\r\n\r\nObject.keys(_SortableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SortableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sortable = __nested_webpack_require_151374__(45);\r\n\r\nvar _Sortable2 = _interopRequireDefault(_Sortable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sortable2.default;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/sortable.js\n");

/***/ }),

/***/ "./node_modules/@shopify/draggable/lib/swappable.js":
/*!**********************************************************!*\
  !*** ./node_modules/@shopify/draggable/lib/swappable.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_571__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_571__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_571__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_571__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_571__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_571__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_571__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_571__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_571__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_571__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_571__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_571__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_571__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_571__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_571__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_571__(__nested_webpack_require_571__.s = 48);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __nested_webpack_require_4119__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_4119__(19);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __nested_webpack_require_4586__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_4586__(22);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Sensor2.default;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __nested_webpack_require_4985__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_4985__(30);\r\n\r\nObject.defineProperty(exports, 'closest', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_closest).default;\r\n  }\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_4985__(28);\r\n\r\nObject.defineProperty(exports, 'requestNextAnimationFrame', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_requestNextAnimationFrame).default;\r\n  }\r\n});\r\n\r\nvar _distance = __nested_webpack_require_4985__(26);\r\n\r\nObject.defineProperty(exports, 'distance', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_distance).default;\r\n  }\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_4985__(24);\r\n\r\nObject.defineProperty(exports, 'touchCoords', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_touchCoords).default;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_6109__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractEvent = __nested_webpack_require_6109__(46);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractEvent2.default;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_6536__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_6536__(39);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _AbstractPlugin2.default;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6967__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_6967__(1);\r\n\r\nObject.defineProperty(exports, 'Sensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Sensor).default;\r\n  }\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_6967__(21);\r\n\r\nObject.defineProperty(exports, 'MouseSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_MouseSensor).default;\r\n  }\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_6967__(18);\r\n\r\nObject.defineProperty(exports, 'TouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_TouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_6967__(16);\r\n\r\nObject.defineProperty(exports, 'DragSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_DragSensor).default;\r\n  }\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_6967__(14);\r\n\r\nObject.defineProperty(exports, 'ForceTouchSensor', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_ForceTouchSensor).default;\r\n  }\r\n});\r\n\r\nvar _SensorEvent = __nested_webpack_require_6967__(0);\r\n\r\nObject.keys(_SensorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SensorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_8573__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Announcement = __nested_webpack_require_8573__(41);\r\n\r\nObject.defineProperty(exports, 'Announcement', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Announcement).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultAnnouncementOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Announcement.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_8573__(38);\r\n\r\nObject.defineProperty(exports, 'Focusable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Focusable).default;\r\n  }\r\n});\r\n\r\nvar _Mirror = __nested_webpack_require_8573__(36);\r\n\r\nObject.defineProperty(exports, 'Mirror', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Mirror).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultMirrorOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Mirror.defaultOptions;\r\n  }\r\n});\r\n\r\nvar _Scrollable = __nested_webpack_require_8573__(32);\r\n\r\nObject.defineProperty(exports, 'Scrollable', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _interopRequireDefault(_Scrollable).default;\r\n  }\r\n});\r\nObject.defineProperty(exports, 'defaultScrollableOptions', {\r\n  enumerable: true,\r\n  get: function () {\r\n    return _Scrollable.defaultOptions;\r\n  }\r\n});\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_10116__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_10116__(42);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_10592__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_10592__(43);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_11053__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SwappableEvent = __nested_webpack_require_11053__(47);\r\n\r\nObject.keys(_SwappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SwappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * The Emitter is a simple emitter class that provides you with `on()`, `off()` and `trigger()` methods\r\n * @class Emitter\r\n * @module Emitter\r\n */\r\nclass Emitter {\r\n  constructor() {\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks by event name\r\n   * @param {String} type\r\n   * @param {...Function} callbacks\r\n   */\r\n  on(type, ...callbacks) {\r\n    if (!this.callbacks[type]) {\r\n      this.callbacks[type] = [];\r\n    }\r\n\r\n    this.callbacks[type].push(...callbacks);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters callbacks by event name\r\n   * @param {String} type\r\n   * @param {Function} callback\r\n   */\r\n  off(type, callback) {\r\n    if (!this.callbacks[type]) {\r\n      return null;\r\n    }\r\n\r\n    const copy = this.callbacks[type].slice(0);\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n      if (callback === copy[i]) {\r\n        this.callbacks[type].splice(i, 1);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers event callbacks by event object\r\n   * @param {AbstractEvent} event\r\n   */\r\n  trigger(event) {\r\n    if (!this.callbacks[event.type]) {\r\n      return null;\r\n    }\r\n\r\n    const callbacks = [...this.callbacks[event.type]];\r\n    const caughtErrors = [];\r\n\r\n    for (let i = callbacks.length - 1; i >= 0; i--) {\r\n      const callback = callbacks[i];\r\n\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        caughtErrors.push(error);\r\n      }\r\n    }\r\n\r\n    if (caughtErrors.length) {\r\n      /* eslint-disable no-console */\r\n      console.error(`Draggable caught errors while triggering '${event.type}'`, caughtErrors);\r\n      /* eslint-disable no-console */\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\nexports.default = Emitter;\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_13394__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Emitter = __nested_webpack_require_13394__(10);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Emitter2.default;\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_13798__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _utils = __nested_webpack_require_13798__(2);\r\n\r\nvar _Plugins = __nested_webpack_require_13798__(6);\r\n\r\nvar _Emitter = __nested_webpack_require_13798__(11);\r\n\r\nvar _Emitter2 = _interopRequireDefault(_Emitter);\r\n\r\nvar _Sensors = __nested_webpack_require_13798__(5);\r\n\r\nvar _DraggableEvent = __nested_webpack_require_13798__(7);\r\n\r\nvar _DragEvent = __nested_webpack_require_13798__(8);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragMove = Symbol('onDragMove');\r\nconst onDragStop = Symbol('onDragStop');\r\nconst onDragPressure = Symbol('onDragPressure');\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['drag:start']\r\n * @const {Function} defaultAnnouncements['drag:stop']\r\n */\r\nconst defaultAnnouncements = {\r\n  'drag:start': event => `Picked up ${event.source.textContent.trim() || event.source.id || 'draggable element'}`,\r\n  'drag:stop': event => `Released ${event.source.textContent.trim() || event.source.id || 'draggable element'}`\r\n};\r\n\r\nconst defaultClasses = {\r\n  'container:dragging': 'draggable-container--is-dragging',\r\n  'source:dragging': 'draggable-source--is-dragging',\r\n  'source:placed': 'draggable-source--placed',\r\n  'container:placed': 'draggable-container--placed',\r\n  'body:dragging': 'draggable--is-dragging',\r\n  'draggable:over': 'draggable--over',\r\n  'container:over': 'draggable-container--over',\r\n  'source:original': 'draggable--original',\r\n  mirror: 'draggable-mirror'\r\n};\r\n\r\nconst defaultOptions = exports.defaultOptions = {\r\n  draggable: '.draggable-source',\r\n  handle: null,\r\n  delay: {},\r\n  distance: 0,\r\n  placedTimeout: 800,\r\n  plugins: [],\r\n  sensors: [],\r\n  exclude: {\r\n    plugins: [],\r\n    sensors: []\r\n  }\r\n};\r\n\r\n/**\r\n * This is the core draggable library that does the heavy lifting\r\n * @class Draggable\r\n * @module Draggable\r\n */\r\nclass Draggable {\r\n\r\n  /**\r\n   * Draggable constructor.\r\n   * @constructs Draggable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Draggable containers\r\n   * @param {Object} options - Options for draggable\r\n   */\r\n\r\n  /**\r\n   * Default plugins draggable uses\r\n   * @static\r\n   * @property {Object} Plugins\r\n   * @property {Announcement} Plugins.Announcement\r\n   * @property {Focusable} Plugins.Focusable\r\n   * @property {Mirror} Plugins.Mirror\r\n   * @property {Scrollable} Plugins.Scrollable\r\n   * @type {Object}\r\n   */\r\n  constructor(containers = [document.body], options = {}) {\r\n    /**\r\n     * Draggable containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    if (containers instanceof NodeList || containers instanceof Array) {\r\n      this.containers = [...containers];\r\n    } else if (containers instanceof HTMLElement) {\r\n      this.containers = [containers];\r\n    } else {\r\n      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');\r\n    }\r\n\r\n    this.options = _extends({}, defaultOptions, options, {\r\n      classes: _extends({}, defaultClasses, options.classes || {}),\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {}),\r\n      exclude: {\r\n        plugins: options.exclude && options.exclude.plugins || [],\r\n        sensors: options.exclude && options.exclude.sensors || []\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Draggables event emitter\r\n     * @property emitter\r\n     * @type {Emitter}\r\n     */\r\n    this.emitter = new _Emitter2.default();\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Active plugins\r\n     * @property plugins\r\n     * @type {Plugin[]}\r\n     */\r\n    this.plugins = [];\r\n\r\n    /**\r\n     * Active sensors\r\n     * @property sensors\r\n     * @type {Sensor[]}\r\n     */\r\n    this.sensors = [];\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onDragPressure] = this[onDragPressure].bind(this);\r\n\r\n    document.addEventListener('drag:start', this[onDragStart], true);\r\n    document.addEventListener('drag:move', this[onDragMove], true);\r\n    document.addEventListener('drag:stop', this[onDragStop], true);\r\n    document.addEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const defaultPlugins = Object.values(Draggable.Plugins).filter(Plugin => !this.options.exclude.plugins.includes(Plugin));\r\n    const defaultSensors = Object.values(Draggable.Sensors).filter(sensor => !this.options.exclude.sensors.includes(sensor));\r\n\r\n    this.addPlugin(...[...defaultPlugins, ...this.options.plugins]);\r\n    this.addSensor(...[...defaultSensors, ...this.options.sensors]);\r\n\r\n    const draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.on('mirror:created', ({ mirror }) => this.mirror = mirror);\r\n    this.on('mirror:destroy', () => this.mirror = null);\r\n\r\n    this.trigger(draggableInitializedEvent);\r\n  }\r\n\r\n  /**\r\n   * Destroys Draggable instance. This removes all internal event listeners and\r\n   * deactivates sensors and plugins\r\n   */\r\n\r\n\r\n  /**\r\n   * Default sensors draggable uses\r\n   * @static\r\n   * @property {Object} Sensors\r\n   * @property {MouseSensor} Sensors.MouseSensor\r\n   * @property {TouchSensor} Sensors.TouchSensor\r\n   * @type {Object}\r\n   */\r\n  destroy() {\r\n    document.removeEventListener('drag:start', this[onDragStart], true);\r\n    document.removeEventListener('drag:move', this[onDragMove], true);\r\n    document.removeEventListener('drag:stop', this[onDragStop], true);\r\n    document.removeEventListener('drag:pressure', this[onDragPressure], true);\r\n\r\n    const draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({\r\n      draggable: this\r\n    });\r\n\r\n    this.trigger(draggableDestroyEvent);\r\n\r\n    this.removePlugin(...this.plugins.map(plugin => plugin.constructor));\r\n    this.removeSensor(...this.sensors.map(sensor => sensor.constructor));\r\n  }\r\n\r\n  /**\r\n   * Adds plugin to this draggable instance. This will end up calling the attach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addPlugin(CustomA11yPlugin, CustomMirrorPlugin)\r\n   */\r\n  addPlugin(...plugins) {\r\n    const activePlugins = plugins.map(Plugin => new Plugin(this));\r\n\r\n    activePlugins.forEach(plugin => plugin.attach());\r\n    this.plugins = [...this.plugins, ...activePlugins];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes plugins that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the plugin\r\n   * @param {...typeof Plugin} plugins - Plugins that you want detached from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removePlugin(MirrorPlugin, CustomMirrorPlugin)\r\n   */\r\n  removePlugin(...plugins) {\r\n    const removedPlugins = this.plugins.filter(plugin => plugins.includes(plugin.constructor));\r\n\r\n    removedPlugins.forEach(plugin => plugin.detach());\r\n    this.plugins = this.plugins.filter(plugin => !plugins.includes(plugin.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds sensors to this draggable instance. This will end up calling the attach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addSensor(ForceTouchSensor, CustomSensor)\r\n   */\r\n  addSensor(...sensors) {\r\n    const activeSensors = sensors.map(Sensor => new Sensor(this.containers, this.options));\r\n\r\n    activeSensors.forEach(sensor => sensor.attach());\r\n    this.sensors = [...this.sensors, ...activeSensors];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes sensors that are already attached to this draggable instance. This will end up calling\r\n   * the detach method of the sensor\r\n   * @param {...typeof Sensor} sensors - Sensors that you want attached to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeSensor(TouchSensor, DragSensor)\r\n   */\r\n  removeSensor(...sensors) {\r\n    const removedSensors = this.sensors.filter(sensor => sensors.includes(sensor.constructor));\r\n\r\n    removedSensors.forEach(sensor => sensor.detach());\r\n    this.sensors = this.sensors.filter(sensor => !sensors.includes(sensor.constructor));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to draggable\r\n   * @return {Draggable}\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n    this.sensors.forEach(sensor => sensor.addContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes container from this draggable instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from draggable\r\n   * @return {Draggable}\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n    this.sensors.forEach(sensor => sensor.removeContainer(...containers));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds listener for draggable events\r\n   * @param {String} type - Event name\r\n   * @param {...Function} callbacks - Event callbacks\r\n   * @return {Draggable}\r\n   * @example draggable.on('drag:start', (dragEvent) => dragEvent.cancel());\r\n   */\r\n  on(type, ...callbacks) {\r\n    this.emitter.on(type, ...callbacks);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes listener from draggable\r\n   * @param {String} type - Event name\r\n   * @param {Function} callback - Event callback\r\n   * @return {Draggable}\r\n   * @example draggable.off('drag:start', handlerFunction);\r\n   */\r\n  off(type, callback) {\r\n    this.emitter.off(type, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Triggers draggable event\r\n   * @param {AbstractEvent} event - Event instance\r\n   * @return {Draggable}\r\n   * @example draggable.trigger(event);\r\n   */\r\n  trigger(event) {\r\n    this.emitter.trigger(event);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns class name for class identifier\r\n   * @param {String} name - Name of class identifier\r\n   * @return {String|null}\r\n   */\r\n  getClassNameFor(name) {\r\n    return this.getClassNamesFor(name)[0];\r\n  }\r\n\r\n  /**\r\n   * Returns class names for class identifier\r\n   * @return {String[]}\r\n   */\r\n  getClassNamesFor(name) {\r\n    const classNames = this.options.classes[name];\r\n\r\n    if (classNames instanceof Array) {\r\n      return classNames;\r\n    } else if (typeof classNames === 'string' || classNames instanceof String) {\r\n      return [classNames];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if this draggable instance is currently dragging\r\n   * @return {Boolean}\r\n   */\r\n  isDragging() {\r\n    return Boolean(this.dragging);\r\n  }\r\n\r\n  /**\r\n   * Returns all draggable elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElements() {\r\n    return this.containers.reduce((current, container) => {\r\n      return [...current, ...this.getDraggableElementsForContainer(container)];\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Returns draggable elements for a given container, excluding the mirror and\r\n   * original source element if present\r\n   * @param {HTMLElement} container\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getDraggableElementsForContainer(container) {\r\n    const allDraggableElements = container.querySelectorAll(this.options.draggable);\r\n\r\n    return [...allDraggableElements].filter(childElement => {\r\n      return childElement !== this.originalSource && childElement !== this.mirror;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStart](event) {\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { target, container } = sensorEvent;\r\n\r\n    if (!this.containers.includes(container)) {\r\n      return;\r\n    }\r\n\r\n    if (this.options.handle && target && !(0, _utils.closest)(target, this.options.handle)) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    // Find draggable source element\r\n    this.originalSource = (0, _utils.closest)(target, this.options.draggable);\r\n    this.sourceContainer = container;\r\n\r\n    if (!this.originalSource) {\r\n      sensorEvent.cancel();\r\n      return;\r\n    }\r\n\r\n    if (this.lastPlacedSource && this.lastPlacedContainer) {\r\n      clearTimeout(this.placedTimeoutID);\r\n      this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n    }\r\n\r\n    this.source = this.originalSource.cloneNode(true);\r\n    this.originalSource.parentNode.insertBefore(this.source, this.originalSource);\r\n    this.originalSource.style.display = 'none';\r\n\r\n    const dragEvent = new _DragEvent.DragStartEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragEvent);\r\n\r\n    this.dragging = !dragEvent.canceled();\r\n\r\n    if (dragEvent.canceled()) {\r\n      this.source.parentNode.removeChild(this.source);\r\n      this.originalSource.style.display = null;\r\n      return;\r\n    }\r\n\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:original'));\r\n    this.source.classList.add(...this.getClassNamesFor('source:dragging'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.add(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, 'none');\r\n\r\n    requestAnimationFrame(() => {\r\n      const oldSensorEvent = getSensorEvent(event);\r\n      const newSensorEvent = oldSensorEvent.clone({ target: this.source });\r\n\r\n      this[onDragMove](_extends({}, event, {\r\n        detail: newSensorEvent\r\n      }));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const { container } = sensorEvent;\r\n    let target = sensorEvent.target;\r\n\r\n    const dragMoveEvent = new _DragEvent.DragMoveEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sourceContainer: container,\r\n      sensorEvent\r\n    });\r\n\r\n    this.trigger(dragMoveEvent);\r\n\r\n    if (dragMoveEvent.canceled()) {\r\n      sensorEvent.cancel();\r\n    }\r\n\r\n    target = (0, _utils.closest)(target, this.options.draggable);\r\n    const withinCorrectContainer = (0, _utils.closest)(sensorEvent.target, this.containers);\r\n    const overContainer = sensorEvent.overContainer || withinCorrectContainer;\r\n    const isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;\r\n    const isLeavingDraggable = this.currentOver && target !== this.currentOver;\r\n    const isOverContainer = overContainer && this.currentOverContainer !== overContainer;\r\n    const isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;\r\n\r\n    if (isLeavingDraggable) {\r\n      const dragOutEvent = new _DragEvent.DragOutEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        over: this.currentOver,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n      this.currentOver = null;\r\n\r\n      this.trigger(dragOutEvent);\r\n    }\r\n\r\n    if (isLeavingContainer) {\r\n      const dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer: this.currentOverContainer\r\n      });\r\n\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n      this.currentOverContainer = null;\r\n\r\n      this.trigger(dragOutContainerEvent);\r\n    }\r\n\r\n    if (isOverContainer) {\r\n      overContainer.classList.add(...this.getClassNamesFor('container:over'));\r\n\r\n      const dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer\r\n      });\r\n\r\n      this.currentOverContainer = overContainer;\r\n\r\n      this.trigger(dragOverContainerEvent);\r\n    }\r\n\r\n    if (isOverDraggable) {\r\n      target.classList.add(...this.getClassNamesFor('draggable:over'));\r\n\r\n      const dragOverEvent = new _DragEvent.DragOverEvent({\r\n        source: this.source,\r\n        originalSource: this.originalSource,\r\n        sourceContainer: container,\r\n        sensorEvent,\r\n        overContainer,\r\n        over: target\r\n      });\r\n\r\n      this.currentOver = target;\r\n\r\n      this.trigger(dragOverEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragStop](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    this.dragging = false;\r\n\r\n    const dragStopEvent = new _DragEvent.DragStopEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStopEvent);\r\n\r\n    this.source.parentNode.insertBefore(this.originalSource, this.source);\r\n    this.source.parentNode.removeChild(this.source);\r\n    this.originalSource.style.display = '';\r\n\r\n    this.source.classList.remove(...this.getClassNamesFor('source:dragging'));\r\n    this.originalSource.classList.remove(...this.getClassNamesFor('source:original'));\r\n    this.originalSource.classList.add(...this.getClassNamesFor('source:placed'));\r\n    this.sourceContainer.classList.add(...this.getClassNamesFor('container:placed'));\r\n    this.sourceContainer.classList.remove(...this.getClassNamesFor('container:dragging'));\r\n    document.body.classList.remove(...this.getClassNamesFor('body:dragging'));\r\n    applyUserSelect(document.body, '');\r\n\r\n    if (this.currentOver) {\r\n      this.currentOver.classList.remove(...this.getClassNamesFor('draggable:over'));\r\n    }\r\n\r\n    if (this.currentOverContainer) {\r\n      this.currentOverContainer.classList.remove(...this.getClassNamesFor('container:over'));\r\n    }\r\n\r\n    this.lastPlacedSource = this.originalSource;\r\n    this.lastPlacedContainer = this.sourceContainer;\r\n\r\n    this.placedTimeoutID = setTimeout(() => {\r\n      if (this.lastPlacedSource) {\r\n        this.lastPlacedSource.classList.remove(...this.getClassNamesFor('source:placed'));\r\n      }\r\n\r\n      if (this.lastPlacedContainer) {\r\n        this.lastPlacedContainer.classList.remove(...this.getClassNamesFor('container:placed'));\r\n      }\r\n\r\n      this.lastPlacedSource = null;\r\n      this.lastPlacedContainer = null;\r\n    }, this.options.placedTimeout);\r\n\r\n    const dragStoppedEvent = new _DragEvent.DragStoppedEvent({\r\n      source: this.source,\r\n      originalSource: this.originalSource,\r\n      sensorEvent: event.sensorEvent,\r\n      sourceContainer: this.sourceContainer\r\n    });\r\n\r\n    this.trigger(dragStoppedEvent);\r\n\r\n    this.source = null;\r\n    this.originalSource = null;\r\n    this.currentOverContainer = null;\r\n    this.currentOver = null;\r\n    this.sourceContainer = null;\r\n  }\r\n\r\n  /**\r\n   * Drag pressure handler\r\n   * @private\r\n   * @param {Event} event - DOM Drag event\r\n   */\r\n  [onDragPressure](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = getSensorEvent(event);\r\n    const source = this.source || (0, _utils.closest)(sensorEvent.originalEvent.target, this.options.draggable);\r\n\r\n    const dragPressureEvent = new _DragEvent.DragPressureEvent({\r\n      sensorEvent,\r\n      source,\r\n      pressure: sensorEvent.pressure\r\n    });\r\n\r\n    this.trigger(dragPressureEvent);\r\n  }\r\n}\r\n\r\nexports.default = Draggable;\r\nDraggable.Plugins = { Announcement: _Plugins.Announcement, Focusable: _Plugins.Focusable, Mirror: _Plugins.Mirror, Scrollable: _Plugins.Scrollable };\r\nDraggable.Sensors = { MouseSensor: _Sensors.MouseSensor, TouchSensor: _Sensors.TouchSensor };\r\nfunction getSensorEvent(event) {\r\n  return event.detail;\r\n}\r\n\r\nfunction applyUserSelect(element, value) {\r\n  element.style.webkitUserSelect = value;\r\n  element.style.mozUserSelect = value;\r\n  element.style.msUserSelect = value;\r\n  element.style.oUserSelect = value;\r\n  element.style.userSelect = value;\r\n}\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_34931__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Sensor = __nested_webpack_require_34931__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_34931__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseForceWillBegin = Symbol('onMouseForceWillBegin');\r\nconst onMouseForceDown = Symbol('onMouseForceDown');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseForceChange = Symbol('onMouseForceChange');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');\r\n\r\n/**\r\n * This sensor picks up native force touch events and dictates drag operations\r\n * @class ForceTouchSensor\r\n * @module ForceTouchSensor\r\n * @extends Sensor\r\n */\r\nclass ForceTouchSensor extends _Sensor2.default {\r\n  /**\r\n   * ForceTouchSensor constructor.\r\n   * @constructs ForceTouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property mightDrag\r\n     * @type {Boolean}\r\n     */\r\n    this.mightDrag = false;\r\n\r\n    this[onMouseForceWillBegin] = this[onMouseForceWillBegin].bind(this);\r\n    this[onMouseForceDown] = this[onMouseForceDown].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseForceChange] = this[onMouseForceChange].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    for (const container of this.containers) {\r\n      container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.addEventListener('mousedown', this[onMouseDown], true);\r\n      container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.addEventListener('mousemove', this[onMouseMove]);\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    for (const container of this.containers) {\r\n      container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);\r\n      container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);\r\n      container.removeEventListener('mousedown', this[onMouseDown], true);\r\n      container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n  }\r\n\r\n  /**\r\n   * Mouse force will begin handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseForceWillBegin](event) {\r\n    event.preventDefault();\r\n    this.mightDrag = true;\r\n  }\r\n\r\n  /**\r\n   * Mouse force down handler\r\n   * @private\r\n   * @param {Event} event - Mouse force down event\r\n   */\r\n  [onMouseForceDown](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = event.currentTarget;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStartEvent);\r\n\r\n    this.currentContainer = container;\r\n    this.dragging = !dragStartEvent.canceled();\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target: null,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.mightDrag = false;\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (!this.mightDrag) {\r\n      return;\r\n    }\r\n\r\n    // Need workaround for real click\r\n    // Cancel potential drag events\r\n    event.stopPropagation();\r\n    event.stopImmediatePropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse force will begin event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force change event\r\n   */\r\n  [onMouseForceChange](event) {\r\n    if (this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n    const container = event.currentTarget;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragPressureEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse force global change handler\r\n   * @private\r\n   * @param {Event} event - Mouse force global change event\r\n   */\r\n  [onMouseForceGlobalChange](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = event.target;\r\n\r\n    const dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({\r\n      pressure: event.webkitForce,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragPressureEvent);\r\n  }\r\n}\r\nexports.default = ForceTouchSensor;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_41671__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _ForceTouchSensor = __nested_webpack_require_41671__(13);\r\n\r\nvar _ForceTouchSensor2 = _interopRequireDefault(_ForceTouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _ForceTouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_42111__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_42111__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_42111__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_42111__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragEnd = Symbol('onDragEnd');\r\nconst onDrop = Symbol('onDrop');\r\nconst reset = Symbol('reset');\r\n\r\n/**\r\n * This sensor picks up native browser drag events and dictates drag operations\r\n * @class DragSensor\r\n * @module DragSensor\r\n * @extends Sensor\r\n */\r\nclass DragSensor extends _Sensor2.default {\r\n  /**\r\n   * DragSensor constructor.\r\n   * @constructs DragSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up setting the draggable attribute, unless canceled\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Draggable element needs to be remembered to unset the draggable attribute after drag operation has completed\r\n     * @property draggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.draggableElement = null;\r\n\r\n    /**\r\n     * Native draggable element could be links or images, their draggable state will be disabled during drag operation\r\n     * @property nativeDraggableElement\r\n     * @type {HTMLElement}\r\n     */\r\n    this.nativeDraggableElement = null;\r\n\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragEnd] = this[onDragEnd].bind(this);\r\n    this[onDrop] = this[onDrop].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {Event} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    // Need for firefox. \"text\" key is needed for IE\r\n    event.dataTransfer.setData('text', '');\r\n    event.dataTransfer.effectAllowed = this.options.type;\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    this.currentContainer = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    // Workaround\r\n    setTimeout(() => {\r\n      this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n      if (dragStartEvent.canceled()) {\r\n        this.dragging = false;\r\n      } else {\r\n        this.dragging = true;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {Event} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragMoveEvent);\r\n\r\n    if (!dragMoveEvent.canceled()) {\r\n      event.preventDefault();\r\n      event.dataTransfer.dropEffect = this.options.type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag end handler\r\n   * @private\r\n   * @param {Event} event - Drag end event\r\n   */\r\n  [onDragEnd](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n    const container = this.currentContainer;\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(container, dragStopEvent);\r\n\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Drop handler\r\n   * @private\r\n   * @param {Event} event - Drop event\r\n   */\r\n  [onDrop](event) {\r\n    // eslint-disable-line class-methods-use-this\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    // Firefox bug for inputs within draggables https://bugzilla.mozilla.org/show_bug.cgi?id=739071\r\n    if (event.target && (event.target.form || event.target.contenteditable)) {\r\n      return;\r\n    }\r\n\r\n    const nativeDraggableElement = (0, _utils.closest)(event.target, element => element.draggable);\r\n\r\n    if (nativeDraggableElement) {\r\n      nativeDraggableElement.draggable = false;\r\n      this.nativeDraggableElement = nativeDraggableElement;\r\n    }\r\n\r\n    document.addEventListener('mouseup', this[onMouseUp], true);\r\n    document.addEventListener('dragstart', this[onDragStart], false);\r\n    document.addEventListener('dragover', this[onDragOver], false);\r\n    document.addEventListener('dragend', this[onDragEnd], false);\r\n    document.addEventListener('drop', this[onDrop], false);\r\n\r\n    const target = (0, _utils.closest)(event.target, this.options.draggable);\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.startEvent = event;\r\n\r\n    this.mouseDownTimeout = setTimeout(() => {\r\n      target.draggable = true;\r\n      this.draggableElement = target;\r\n    }, this.delay.drag);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp]() {\r\n    this[reset]();\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [reset]() {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp], true);\r\n    document.removeEventListener('dragstart', this[onDragStart], false);\r\n    document.removeEventListener('dragover', this[onDragOver], false);\r\n    document.removeEventListener('dragend', this[onDragEnd], false);\r\n    document.removeEventListener('drop', this[onDrop], false);\r\n\r\n    if (this.nativeDraggableElement) {\r\n      this.nativeDraggableElement.draggable = true;\r\n      this.nativeDraggableElement = null;\r\n    }\r\n\r\n    if (this.draggableElement) {\r\n      this.draggableElement.draggable = false;\r\n      this.draggableElement = null;\r\n    }\r\n  }\r\n}\r\nexports.default = DragSensor;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __nested_webpack_require_49384__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragSensor = __nested_webpack_require_49384__(15);\r\n\r\nvar _DragSensor2 = _interopRequireDefault(_DragSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _DragSensor2.default;\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_49800__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_49800__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_49800__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_49800__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onTouchStart = Symbol('onTouchStart');\r\nconst onTouchEnd = Symbol('onTouchEnd');\r\nconst onTouchMove = Symbol('onTouchMove');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * Prevents scrolling when set to true\r\n * @var {Boolean} preventScrolling\r\n */\r\nlet preventScrolling = false;\r\n\r\n// WebKit requires cancelable `touchmove` events to be added as early as possible\r\nwindow.addEventListener('touchmove', event => {\r\n  if (!preventScrolling) {\r\n    return;\r\n  }\r\n\r\n  // Prevent scrolling\r\n  event.preventDefault();\r\n}, { passive: false });\r\n\r\n/**\r\n * This sensor picks up native browser touch events and dictates drag operations\r\n * @class TouchSensor\r\n * @module TouchSensor\r\n * @extends Sensor\r\n */\r\nclass TouchSensor extends _Sensor2.default {\r\n  /**\r\n   * TouchSensor constructor.\r\n   * @constructs TouchSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Closest scrollable container so accidental scroll can cancel long touch\r\n     * @property currentScrollableParent\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentScrollableParent = null;\r\n\r\n    /**\r\n     * TimeoutID for managing delay\r\n     * @property tapTimeout\r\n     * @type {Number}\r\n     */\r\n    this.tapTimeout = null;\r\n\r\n    /**\r\n     * touchMoved indicates if touch has moved during tapTimeout\r\n     * @property touchMoved\r\n     * @type {Boolean}\r\n     */\r\n    this.touchMoved = false;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onTouchStart] = this[onTouchStart].bind(this);\r\n    this[onTouchEnd] = this[onTouchEnd].bind(this);\r\n    this[onTouchMove] = this[onTouchMove].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('touchstart', this[onTouchStart]);\r\n  }\r\n\r\n  /**\r\n   * Touch start handler\r\n   * @private\r\n   * @param {Event} event - Touch start event\r\n   */\r\n  [onTouchStart](event) {\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n    const { distance = 0 } = this.options;\r\n    const { delay } = this;\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onTouchStartAt = Date.now();\r\n    this.startEvent = event;\r\n    this.currentContainer = container;\r\n\r\n    document.addEventListener('touchend', this[onTouchEnd]);\r\n    document.addEventListener('touchcancel', this[onTouchEnd]);\r\n    document.addEventListener('touchmove', this[onDistanceChange]);\r\n    container.addEventListener('contextmenu', onContextMenu);\r\n\r\n    if (distance) {\r\n      preventScrolling = true;\r\n    }\r\n\r\n    this.tapTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ touches: [{ pageX: this.pageX, pageY: this.pageY }] });\r\n    }, delay.touch);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n    const touch = (0, _utils.touchCoords)(startEvent);\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: touch.pageX,\r\n      clientY: touch.pageY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('touchmove', this[onTouchMove]);\r\n    }\r\n    preventScrolling = this.dragging;\r\n  }\r\n\r\n  /**\r\n   * Touch move handler prior to drag start.\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n    const start = (0, _utils.touchCoords)(startEvent);\r\n    const current = (0, _utils.touchCoords)(event);\r\n    const timeElapsed = Date.now() - this.onTouchStartAt;\r\n    const distanceTravelled = (0, _utils.distance)(start.pageX, start.pageY, current.pageX, current.pageY);\r\n\r\n    Object.assign(this, current);\r\n\r\n    clearTimeout(this.tapTimeout);\r\n\r\n    if (timeElapsed < delay.touch) {\r\n      // moved during delay\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('touchmove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler while dragging\r\n   * @private\r\n   * @param {Event} event - Touch move event\r\n   */\r\n  [onTouchMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Touch end handler\r\n   * @private\r\n   * @param {Event} event - Touch end event\r\n   */\r\n  [onTouchEnd](event) {\r\n    clearTimeout(this.tapTimeout);\r\n    preventScrolling = false;\r\n\r\n    document.removeEventListener('touchend', this[onTouchEnd]);\r\n    document.removeEventListener('touchcancel', this[onTouchEnd]);\r\n    document.removeEventListener('touchmove', this[onDistanceChange]);\r\n\r\n    if (this.currentContainer) {\r\n      this.currentContainer.removeEventListener('contextmenu', onContextMenu);\r\n    }\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('touchmove', this[onTouchMove]);\r\n\r\n    const { pageX, pageY } = (0, _utils.touchCoords)(event);\r\n    const target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);\r\n\r\n    event.preventDefault();\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: pageX,\r\n      clientY: pageY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n}\r\n\r\nexports.default = TouchSensor;\r\nfunction onContextMenu(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_57280__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _TouchSensor = __nested_webpack_require_57280__(17);\r\n\r\nvar _TouchSensor2 = _interopRequireDefault(_TouchSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _TouchSensor2.default;\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_57700__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragPressureSensorEvent = exports.DragStopSensorEvent = exports.DragMoveSensorEvent = exports.DragStartSensorEvent = exports.SensorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_57700__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base sensor event\r\n * @class SensorEvent\r\n * @module SensorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SensorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Original browser event that triggered a sensor\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    return this.data.originalEvent;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientX for both touch and mouse events\r\n   * @property clientX\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientX() {\r\n    return this.data.clientX;\r\n  }\r\n\r\n  /**\r\n   * Normalized clientY for both touch and mouse events\r\n   * @property clientY\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get clientY() {\r\n    return this.data.clientY;\r\n  }\r\n\r\n  /**\r\n   * Normalized target for both touch and mouse events\r\n   * Returns the element that is behind cursor or touch pointer\r\n   * @property target\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get target() {\r\n    return this.data.target;\r\n  }\r\n\r\n  /**\r\n   * Container that initiated the sensor\r\n   * @property container\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get container() {\r\n    return this.data.container;\r\n  }\r\n\r\n  /**\r\n   * Trackpad pressure\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.SensorEvent = SensorEvent; /**\r\n                                    * Drag start sensor event\r\n                                    * @class DragStartSensorEvent\r\n                                    * @module DragStartSensorEvent\r\n                                    * @extends SensorEvent\r\n                                    */\r\n\r\nclass DragStartSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStartSensorEvent = DragStartSensorEvent; /**\r\n                                                      * Drag move sensor event\r\n                                                      * @class DragMoveSensorEvent\r\n                                                      * @module DragMoveSensorEvent\r\n                                                      * @extends SensorEvent\r\n                                                      */\r\n\r\nDragStartSensorEvent.type = 'drag:start';\r\nclass DragMoveSensorEvent extends SensorEvent {}\r\n\r\nexports.DragMoveSensorEvent = DragMoveSensorEvent; /**\r\n                                                    * Drag stop sensor event\r\n                                                    * @class DragStopSensorEvent\r\n                                                    * @module DragStopSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragMoveSensorEvent.type = 'drag:move';\r\nclass DragStopSensorEvent extends SensorEvent {}\r\n\r\nexports.DragStopSensorEvent = DragStopSensorEvent; /**\r\n                                                    * Drag pressure sensor event\r\n                                                    * @class DragPressureSensorEvent\r\n                                                    * @module DragPressureSensorEvent\r\n                                                    * @extends SensorEvent\r\n                                                    */\r\n\r\nDragStopSensorEvent.type = 'drag:stop';\r\nclass DragPressureSensorEvent extends SensorEvent {}\r\nexports.DragPressureSensorEvent = DragPressureSensorEvent;\r\nDragPressureSensorEvent.type = 'drag:pressure';\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __nested_webpack_require_61691__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _utils = __nested_webpack_require_61691__(2);\r\n\r\nvar _Sensor = __nested_webpack_require_61691__(1);\r\n\r\nvar _Sensor2 = _interopRequireDefault(_Sensor);\r\n\r\nvar _SensorEvent = __nested_webpack_require_61691__(0);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');\r\nconst onMouseDown = Symbol('onMouseDown');\r\nconst onMouseMove = Symbol('onMouseMove');\r\nconst onMouseUp = Symbol('onMouseUp');\r\nconst startDrag = Symbol('startDrag');\r\nconst onDistanceChange = Symbol('onDistanceChange');\r\n\r\n/**\r\n * This sensor picks up native browser mouse events and dictates drag operations\r\n * @class MouseSensor\r\n * @module MouseSensor\r\n * @extends Sensor\r\n */\r\nclass MouseSensor extends _Sensor2.default {\r\n  /**\r\n   * MouseSensor constructor.\r\n   * @constructs MouseSensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, options);\r\n\r\n    /**\r\n     * Mouse down timer which will end up triggering the drag start operation\r\n     * @property mouseDownTimeout\r\n     * @type {Number}\r\n     */\r\n    this.mouseDownTimeout = null;\r\n\r\n    /**\r\n     * Save pageX coordinates for delay drag\r\n     * @property {Numbre} pageX\r\n     * @private\r\n     */\r\n    this.pageX = null;\r\n\r\n    /**\r\n     * Save pageY coordinates for delay drag\r\n     * @property {Numbre} pageY\r\n     * @private\r\n     */\r\n    this.pageY = null;\r\n\r\n    this[onContextMenuWhileDragging] = this[onContextMenuWhileDragging].bind(this);\r\n    this[onMouseDown] = this[onMouseDown].bind(this);\r\n    this[onMouseMove] = this[onMouseMove].bind(this);\r\n    this[onMouseUp] = this[onMouseUp].bind(this);\r\n    this[startDrag] = this[startDrag].bind(this);\r\n    this[onDistanceChange] = this[onDistanceChange].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   */\r\n  attach() {\r\n    document.addEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   */\r\n  detach() {\r\n    document.removeEventListener('mousedown', this[onMouseDown], true);\r\n  }\r\n\r\n  /**\r\n   * Mouse down handler\r\n   * @private\r\n   * @param {Event} event - Mouse down event\r\n   */\r\n  [onMouseDown](event) {\r\n    if (event.button !== 0 || event.ctrlKey || event.metaKey) {\r\n      return;\r\n    }\r\n    const container = (0, _utils.closest)(event.target, this.containers);\r\n\r\n    if (!container) {\r\n      return;\r\n    }\r\n\r\n    const { delay } = this;\r\n    const { pageX, pageY } = event;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n    this.onMouseDownAt = Date.now();\r\n    this.startEvent = event;\r\n\r\n    this.currentContainer = container;\r\n    document.addEventListener('mouseup', this[onMouseUp]);\r\n    document.addEventListener('dragstart', preventNativeDragStart);\r\n    document.addEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    this.mouseDownTimeout = window.setTimeout(() => {\r\n      this[onDistanceChange]({ pageX: this.pageX, pageY: this.pageY });\r\n    }, delay.mouse);\r\n  }\r\n\r\n  /**\r\n   * Start the drag\r\n   * @private\r\n   */\r\n  [startDrag]() {\r\n    const startEvent = this.startEvent;\r\n    const container = this.currentContainer;\r\n\r\n    const dragStartEvent = new _SensorEvent.DragStartSensorEvent({\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n      target: startEvent.target,\r\n      container,\r\n      originalEvent: startEvent\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStartEvent);\r\n\r\n    this.dragging = !dragStartEvent.canceled();\r\n\r\n    if (this.dragging) {\r\n      document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n      document.addEventListener('mousemove', this[onMouseMove]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detect change in distance, starting drag when both\r\n   * delay and distance requirements are met\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onDistanceChange](event) {\r\n    const { pageX, pageY } = event;\r\n    const { distance } = this.options;\r\n    const { startEvent, delay } = this;\r\n\r\n    Object.assign(this, { pageX, pageY });\r\n\r\n    if (!this.currentContainer) {\r\n      return;\r\n    }\r\n\r\n    const timeElapsed = Date.now() - this.onMouseDownAt;\r\n    const distanceTravelled = (0, _utils.distance)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;\r\n\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (timeElapsed < delay.mouse) {\r\n      // moved during delay\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n    } else if (distanceTravelled >= distance) {\r\n      document.removeEventListener('mousemove', this[onDistanceChange]);\r\n      this[startDrag]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mouse move handler\r\n   * @private\r\n   * @param {Event} event - Mouse move event\r\n   */\r\n  [onMouseMove](event) {\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragMoveEvent);\r\n  }\r\n\r\n  /**\r\n   * Mouse up handler\r\n   * @private\r\n   * @param {Event} event - Mouse up event\r\n   */\r\n  [onMouseUp](event) {\r\n    clearTimeout(this.mouseDownTimeout);\r\n\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mouseup', this[onMouseUp]);\r\n    document.removeEventListener('dragstart', preventNativeDragStart);\r\n    document.removeEventListener('mousemove', this[onDistanceChange]);\r\n\r\n    if (!this.dragging) {\r\n      return;\r\n    }\r\n\r\n    const target = document.elementFromPoint(event.clientX, event.clientY);\r\n\r\n    const dragStopEvent = new _SensorEvent.DragStopSensorEvent({\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      target,\r\n      container: this.currentContainer,\r\n      originalEvent: event\r\n    });\r\n\r\n    this.trigger(this.currentContainer, dragStopEvent);\r\n\r\n    document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);\r\n    document.removeEventListener('mousemove', this[onMouseMove]);\r\n\r\n    this.currentContainer = null;\r\n    this.dragging = false;\r\n    this.startEvent = null;\r\n  }\r\n\r\n  /**\r\n   * Context menu handler\r\n   * @private\r\n   * @param {Event} event - Context menu event\r\n   */\r\n  [onContextMenuWhileDragging](event) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nexports.default = MouseSensor;\r\nfunction preventNativeDragStart(event) {\r\n  event.preventDefault();\r\n}\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __nested_webpack_require_68563__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MouseSensor = __nested_webpack_require_68563__(20);\r\n\r\nvar _MouseSensor2 = _interopRequireDefault(_MouseSensor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _MouseSensor2.default;\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst defaultDealy = {\r\n  mouse: 0,\r\n  drag: 0,\r\n  touch: 100\r\n};\r\n\r\n/**\r\n * Base sensor class. Extend from this class to create a new or custom sensor\r\n * @class Sensor\r\n * @module Sensor\r\n */\r\nclass Sensor {\r\n  /**\r\n   * Sensor constructor.\r\n   * @constructs Sensor\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Containers\r\n   * @param {Object} options - Options\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    /**\r\n     * Current containers\r\n     * @property containers\r\n     * @type {HTMLElement[]}\r\n     */\r\n    this.containers = [...containers];\r\n\r\n    /**\r\n     * Current options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, options);\r\n\r\n    /**\r\n     * Current drag state\r\n     * @property dragging\r\n     * @type {Boolean}\r\n     */\r\n    this.dragging = false;\r\n\r\n    /**\r\n     * Current container\r\n     * @property currentContainer\r\n     * @type {HTMLElement}\r\n     */\r\n    this.currentContainer = null;\r\n\r\n    /**\r\n     * The event of the initial sensor down\r\n     * @property startEvent\r\n     * @type {Event}\r\n     */\r\n    this.startEvent = null;\r\n\r\n    /**\r\n     * The delay of each sensor\r\n     * @property delay\r\n     * @type {Object}\r\n     */\r\n    this.delay = calcDelay(options.delay);\r\n  }\r\n\r\n  /**\r\n   * Attaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  attach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Detaches sensors event listeners to the DOM\r\n   * @return {Sensor}\r\n   */\r\n  detach() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds container to this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to add to this sensor\r\n   * @example draggable.addContainer(document.body)\r\n   */\r\n  addContainer(...containers) {\r\n    this.containers = [...this.containers, ...containers];\r\n  }\r\n\r\n  /**\r\n   * Removes container from this sensor instance\r\n   * @param {...HTMLElement} containers - Containers you want to remove from this sensor\r\n   * @example draggable.removeContainer(document.body)\r\n   */\r\n  removeContainer(...containers) {\r\n    this.containers = this.containers.filter(container => !containers.includes(container));\r\n  }\r\n\r\n  /**\r\n   * Triggers event on target element\r\n   * @param {HTMLElement} element - Element to trigger event on\r\n   * @param {SensorEvent} sensorEvent - Sensor event to trigger\r\n   */\r\n  trigger(element, sensorEvent) {\r\n    const event = document.createEvent('Event');\r\n    event.detail = sensorEvent;\r\n    event.initEvent(sensorEvent.type, true, true);\r\n    element.dispatchEvent(event);\r\n    this.lastEvent = sensorEvent;\r\n\r\n    return sensorEvent;\r\n  }\r\n}\r\n\r\nexports.default = Sensor; /**\r\n                           * Calculate the delay of each sensor through the delay in the options\r\n                           * @param {undefined|Number|Object} optionsDelay - the delay in the options\r\n                           * @return {Object}\r\n                           */\r\n\r\nfunction calcDelay(optionsDelay) {\r\n  const delay = {};\r\n\r\n  if (optionsDelay === undefined) {\r\n    return _extends({}, defaultDealy);\r\n  }\r\n\r\n  if (typeof optionsDelay === 'number') {\r\n    for (const key in defaultDealy) {\r\n      if (defaultDealy.hasOwnProperty(key)) {\r\n        delay[key] = optionsDelay;\r\n      }\r\n    }\r\n    return delay;\r\n  }\r\n\r\n  for (const key in defaultDealy) {\r\n    if (defaultDealy.hasOwnProperty(key)) {\r\n      if (optionsDelay[key] === undefined) {\r\n        delay[key] = defaultDealy[key];\r\n      } else {\r\n        delay[key] = optionsDelay[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return delay;\r\n}\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = touchCoords;\r\n/**\r\n * Returns the first touch event found in touches or changedTouches of a touch events.\r\n * @param {TouchEvent} event a touch event\r\n * @return {Touch} a touch object\r\n */\r\nfunction touchCoords(event = {}) {\r\n  const { touches, changedTouches } = event;\r\n  return touches && touches[0] || changedTouches && changedTouches[0];\r\n}\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_73520__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _touchCoords = __nested_webpack_require_73520__(23);\r\n\r\nvar _touchCoords2 = _interopRequireDefault(_touchCoords);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _touchCoords2.default;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = distance;\r\n/**\r\n * Returns the distance between two points\r\n * @param  {Number} x1 The X position of the first point\r\n * @param  {Number} y1 The Y position of the first point\r\n * @param  {Number} x2 The X position of the second point\r\n * @param  {Number} y2 The Y position of the second point\r\n * @return {Number}\r\n */\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __nested_webpack_require_74541__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _distance = __nested_webpack_require_74541__(25);\r\n\r\nvar _distance2 = _interopRequireDefault(_distance);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _distance2.default;\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = requestNextAnimationFrame;\r\nfunction requestNextAnimationFrame(callback) {\r\n  return requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __nested_webpack_require_75300__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _requestNextAnimationFrame = __nested_webpack_require_75300__(27);\r\n\r\nvar _requestNextAnimationFrame2 = _interopRequireDefault(_requestNextAnimationFrame);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _requestNextAnimationFrame2.default;\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = closest;\r\nconst matchFunction = Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\r\n\r\n/**\r\n * Get the closest parent element of a given element that matches the given\r\n * selector string or matching function\r\n *\r\n * @param {Element} element The child element to find a parent of\r\n * @param {String|Function} selector The string or function to use to match\r\n *     the parent element\r\n * @return {Element|null}\r\n */\r\nfunction closest(element, value) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  const selector = value;\r\n  const callback = value;\r\n  const nodeList = value;\r\n  const singleElement = value;\r\n\r\n  const isSelector = Boolean(typeof value === 'string');\r\n  const isFunction = Boolean(typeof value === 'function');\r\n  const isNodeList = Boolean(value instanceof NodeList || value instanceof Array);\r\n  const isElement = Boolean(value instanceof HTMLElement);\r\n\r\n  function conditionFn(currentElement) {\r\n    if (!currentElement) {\r\n      return currentElement;\r\n    } else if (isSelector) {\r\n      return matchFunction.call(currentElement, selector);\r\n    } else if (isNodeList) {\r\n      return [...nodeList].includes(currentElement);\r\n    } else if (isElement) {\r\n      return singleElement === currentElement;\r\n    } else if (isFunction) {\r\n      return callback(currentElement);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let current = element;\r\n\r\n  do {\r\n    current = current.correspondingUseElement || current.correspondingElement || current;\r\n\r\n    if (conditionFn(current)) {\r\n      return current;\r\n    }\r\n\r\n    current = current.parentNode;\r\n  } while (current && current !== document.body && current !== document);\r\n\r\n  return null;\r\n}\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_77730__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _closest = __nested_webpack_require_77730__(29);\r\n\r\nvar _closest2 = _interopRequireDefault(_closest);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _closest2.default;\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __nested_webpack_require_78134__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.scroll = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_78134__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _utils = __nested_webpack_require_78134__(2);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst scroll = exports.scroll = Symbol('scroll');\r\n\r\n/**\r\n * Scrollable default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.speed\r\n * @property {Number} defaultOptions.sensitivity\r\n * @property {HTMLElement[]} defaultOptions.scrollableElements\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  speed: 6,\r\n  sensitivity: 50,\r\n  scrollableElements: []\r\n};\r\n\r\n/**\r\n * Scrollable plugin which scrolls the closest scrollable parent\r\n * @class Scrollable\r\n * @module Scrollable\r\n * @extends AbstractPlugin\r\n */\r\nclass Scrollable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Scrollable constructor.\r\n   * @constructs Scrollable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Scrollable options\r\n     * @property {Object} options\r\n     * @property {Number} options.speed\r\n     * @property {Number} options.sensitivity\r\n     * @property {HTMLElement[]} options.scrollableElements\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Keeps current mouse position\r\n     * @property {Object} currentMousePosition\r\n     * @property {Number} currentMousePosition.clientX\r\n     * @property {Number} currentMousePosition.clientY\r\n     * @type {Object|null}\r\n     */\r\n    this.currentMousePosition = null;\r\n\r\n    /**\r\n     * Scroll animation frame\r\n     * @property scrollAnimationFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.scrollAnimationFrame = null;\r\n\r\n    /**\r\n     * Closest scrollable element\r\n     * @property scrollableElement\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.scrollableElement = null;\r\n\r\n    /**\r\n     * Animation frame looking for the closest scrollable element\r\n     * @property findScrollableElementFrame\r\n     * @type {Number|null}\r\n     */\r\n    this.findScrollableElementFrame = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[scroll] = this[scroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.scrollable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns closest scrollable elements by element\r\n   * @param {HTMLElement} target\r\n   * @return {HTMLElement}\r\n   */\r\n  getScrollableElement(target) {\r\n    if (this.hasDefinedScrollableElements()) {\r\n      return (0, _utils.closest)(target, this.options.scrollableElements) || document.documentElement;\r\n    } else {\r\n      return closestScrollableElement(target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if at least one scrollable element have been defined via options\r\n   * @param {HTMLElement} target\r\n   * @return {Boolean}\r\n   */\r\n  hasDefinedScrollableElements() {\r\n    return Boolean(this.options.scrollableElements.length !== 0);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler. Finds closest scrollable parent in separate frame\r\n   * @param {DragStartEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragStart](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.source);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Drag move handler. Remembers mouse position and initiates scrolling\r\n   * @param {DragMoveEvent} dragEvent\r\n   * @private\r\n   */\r\n  [onDragMove](dragEvent) {\r\n    this.findScrollableElementFrame = requestAnimationFrame(() => {\r\n      this.scrollableElement = this.getScrollableElement(dragEvent.sensorEvent.target);\r\n    });\r\n\r\n    if (!this.scrollableElement) {\r\n      return;\r\n    }\r\n\r\n    const sensorEvent = dragEvent.sensorEvent;\r\n    const scrollOffset = { x: 0, y: 0 };\r\n\r\n    if ('ontouchstart' in window) {\r\n      scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n      scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\r\n    }\r\n\r\n    this.currentMousePosition = {\r\n      clientX: sensorEvent.clientX - scrollOffset.x,\r\n      clientY: sensorEvent.clientY - scrollOffset.y\r\n    };\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler. Cancels scroll animations and resets state\r\n   * @private\r\n   */\r\n  [onDragStop]() {\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n    cancelAnimationFrame(this.findScrollableElementFrame);\r\n\r\n    this.scrollableElement = null;\r\n    this.scrollAnimationFrame = null;\r\n    this.findScrollableElementFrame = null;\r\n    this.currentMousePosition = null;\r\n  }\r\n\r\n  /**\r\n   * Scroll function that does the heavylifting\r\n   * @private\r\n   */\r\n  [scroll]() {\r\n    if (!this.scrollableElement || !this.currentMousePosition) {\r\n      return;\r\n    }\r\n\r\n    cancelAnimationFrame(this.scrollAnimationFrame);\r\n\r\n    const { speed, sensitivity } = this.options;\r\n\r\n    const rect = this.scrollableElement.getBoundingClientRect();\r\n    const bottomCutOff = rect.bottom > window.innerHeight;\r\n    const topCutOff = rect.top < 0;\r\n    const cutOff = topCutOff || bottomCutOff;\r\n\r\n    const documentScrollingElement = getDocumentScrollingElement();\r\n    const scrollableElement = this.scrollableElement;\r\n    const clientX = this.currentMousePosition.clientX;\r\n    const clientY = this.currentMousePosition.clientY;\r\n\r\n    if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {\r\n      const { offsetHeight, offsetWidth } = scrollableElement;\r\n\r\n      if (rect.top + offsetHeight - clientY < sensitivity) {\r\n        scrollableElement.scrollTop += speed;\r\n      } else if (clientY - rect.top < sensitivity) {\r\n        scrollableElement.scrollTop -= speed;\r\n      }\r\n\r\n      if (rect.left + offsetWidth - clientX < sensitivity) {\r\n        scrollableElement.scrollLeft += speed;\r\n      } else if (clientX - rect.left < sensitivity) {\r\n        scrollableElement.scrollLeft -= speed;\r\n      }\r\n    } else {\r\n      const { innerHeight, innerWidth } = window;\r\n\r\n      if (clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop -= speed;\r\n      } else if (innerHeight - clientY < sensitivity) {\r\n        documentScrollingElement.scrollTop += speed;\r\n      }\r\n\r\n      if (clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft -= speed;\r\n      } else if (innerWidth - clientX < sensitivity) {\r\n        documentScrollingElement.scrollLeft += speed;\r\n      }\r\n    }\r\n\r\n    this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);\r\n  }\r\n}\r\n\r\nexports.default = Scrollable; /**\r\n                               * Returns true if the passed element has overflow\r\n                               * @param {HTMLElement} element\r\n                               * @return {Boolean}\r\n                               * @private\r\n                               */\r\n\r\nfunction hasOverflow(element) {\r\n  const overflowRegex = /(auto|scroll)/;\r\n  const computedStyles = getComputedStyle(element, null);\r\n\r\n  const overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');\r\n\r\n  return overflowRegex.test(overflow);\r\n}\r\n\r\n/**\r\n * Returns true if the passed element is statically positioned\r\n * @param {HTMLElement} element\r\n * @return {Boolean}\r\n * @private\r\n */\r\nfunction isStaticallyPositioned(element) {\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  return position === 'static';\r\n}\r\n\r\n/**\r\n * Finds closest scrollable element\r\n * @param {HTMLElement} element\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction closestScrollableElement(element) {\r\n  if (!element) {\r\n    return getDocumentScrollingElement();\r\n  }\r\n\r\n  const position = getComputedStyle(element).getPropertyValue('position');\r\n  const excludeStaticParents = position === 'absolute';\r\n\r\n  const scrollableElement = (0, _utils.closest)(element, parent => {\r\n    if (excludeStaticParents && isStaticallyPositioned(parent)) {\r\n      return false;\r\n    }\r\n    return hasOverflow(parent);\r\n  });\r\n\r\n  if (position === 'fixed' || !scrollableElement) {\r\n    return getDocumentScrollingElement();\r\n  } else {\r\n    return scrollableElement;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns element that scrolls document\r\n * @return {HTMLElement}\r\n * @private\r\n */\r\nfunction getDocumentScrollingElement() {\r\n  return document.scrollingElement || document.documentElement;\r\n}\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __nested_webpack_require_88056__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Scrollable = __nested_webpack_require_88056__(31);\r\n\r\nvar _Scrollable2 = _interopRequireDefault(_Scrollable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Scrollable2.default;\r\nexports.defaultOptions = _Scrollable.defaultOptions;\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_88563__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.MirrorDestroyEvent = exports.MirrorMoveEvent = exports.MirrorAttachedEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_88563__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base mirror event\r\n * @class MirrorEvent\r\n * @module MirrorEvent\r\n * @extends AbstractEvent\r\n */\r\nclass MirrorEvent extends _AbstractEvent2.default {\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Drag event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.MirrorEvent = MirrorEvent; /**\r\n                                    * Mirror create event\r\n                                    * @class MirrorCreateEvent\r\n                                    * @module MirrorCreateEvent\r\n                                    * @extends MirrorEvent\r\n                                    */\r\n\r\nclass MirrorCreateEvent extends MirrorEvent {}\r\n\r\nexports.MirrorCreateEvent = MirrorCreateEvent; /**\r\n                                                * Mirror created event\r\n                                                * @class MirrorCreatedEvent\r\n                                                * @module MirrorCreatedEvent\r\n                                                * @extends MirrorEvent\r\n                                                */\r\n\r\nMirrorCreateEvent.type = 'mirror:create';\r\nclass MirrorCreatedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorCreatedEvent = MirrorCreatedEvent; /**\r\n                                                  * Mirror attached event\r\n                                                  * @class MirrorAttachedEvent\r\n                                                  * @module MirrorAttachedEvent\r\n                                                  * @extends MirrorEvent\r\n                                                  */\r\n\r\nMirrorCreatedEvent.type = 'mirror:created';\r\nclass MirrorAttachedEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\n\r\nexports.MirrorAttachedEvent = MirrorAttachedEvent; /**\r\n                                                    * Mirror move event\r\n                                                    * @class MirrorMoveEvent\r\n                                                    * @module MirrorMoveEvent\r\n                                                    * @extends MirrorEvent\r\n                                                    */\r\n\r\nMirrorAttachedEvent.type = 'mirror:attached';\r\nclass MirrorMoveEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on x axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshX() {\r\n    return this.data.passedThreshX;\r\n  }\r\n\r\n  /**\r\n   * Sensor has exceeded mirror's threshold on y axis\r\n   * @type {Boolean}\r\n   * @readonly\r\n   */\r\n  get passedThreshY() {\r\n    return this.data.passedThreshY;\r\n  }\r\n}\r\n\r\nexports.MirrorMoveEvent = MirrorMoveEvent; /**\r\n                                            * Mirror destroy event\r\n                                            * @class MirrorDestroyEvent\r\n                                            * @module MirrorDestroyEvent\r\n                                            * @extends MirrorEvent\r\n                                            */\r\n\r\nMirrorMoveEvent.type = 'mirror:move';\r\nMirrorMoveEvent.cancelable = true;\r\nclass MirrorDestroyEvent extends MirrorEvent {\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n}\r\nexports.MirrorDestroyEvent = MirrorDestroyEvent;\r\nMirrorDestroyEvent.type = 'mirror:destroy';\r\nMirrorDestroyEvent.cancelable = true;\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __nested_webpack_require_94015__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _MirrorEvent = __nested_webpack_require_94015__(33);\r\n\r\nObject.keys(_MirrorEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _MirrorEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __nested_webpack_require_94483__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = exports.getAppendableContainer = exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragMove = exports.onDragStart = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_94483__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nvar _MirrorEvent = __nested_webpack_require_94483__(34);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\r\n\r\nconst onDragStart = exports.onDragStart = Symbol('onDragStart');\r\nconst onDragMove = exports.onDragMove = Symbol('onDragMove');\r\nconst onDragStop = exports.onDragStop = Symbol('onDragStop');\r\nconst onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');\r\nconst onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');\r\nconst onScroll = exports.onScroll = Symbol('onScroll');\r\nconst getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');\r\n\r\n/**\r\n * Mirror default options\r\n * @property {Object} defaultOptions\r\n * @property {Boolean} defaultOptions.constrainDimensions\r\n * @property {Boolean} defaultOptions.xAxis\r\n * @property {Boolean} defaultOptions.yAxis\r\n * @property {null} defaultOptions.cursorOffsetX\r\n * @property {null} defaultOptions.cursorOffsetY\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  constrainDimensions: false,\r\n  xAxis: true,\r\n  yAxis: true,\r\n  cursorOffsetX: null,\r\n  cursorOffsetY: null,\r\n  thresholdX: null,\r\n  thresholdY: null\r\n};\r\n\r\n/**\r\n * Mirror plugin which controls the mirror positioning while dragging\r\n * @class Mirror\r\n * @module Mirror\r\n * @extends AbstractPlugin\r\n */\r\nclass Mirror extends _AbstractPlugin2.default {\r\n  /**\r\n   * Mirror constructor.\r\n   * @constructs Mirror\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Mirror options\r\n     * @property {Object} options\r\n     * @property {Boolean} options.constrainDimensions\r\n     * @property {Boolean} options.xAxis\r\n     * @property {Boolean} options.yAxis\r\n     * @property {Number|null} options.cursorOffsetX\r\n     * @property {Number|null} options.cursorOffsetY\r\n     * @property {String|HTMLElement|Function} options.appendTo\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Initial scroll offset for touch devices because the mirror is positioned fixed\r\n     * @property {Object} scrollOffset\r\n     * @property {Number} scrollOffset.x\r\n     * @property {Number} scrollOffset.y\r\n     */\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragMove] = this[onDragMove].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n    this[onMirrorCreated] = this[onMirrorCreated].bind(this);\r\n    this[onMirrorMove] = this[onMirrorMove].bind(this);\r\n    this[onScroll] = this[onScroll].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches plugins event listeners\r\n   */\r\n  attach() {\r\n    this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Detaches plugins event listeners\r\n   */\r\n  detach() {\r\n    this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.mirror || {};\r\n  }\r\n\r\n  [onDragStart](dragEvent) {\r\n    if (dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    if ('ontouchstart' in window) {\r\n      document.addEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = {\r\n      x: window.scrollX,\r\n      y: window.scrollY\r\n    };\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    // Last sensor position of mirror move\r\n    this.lastMirrorMovedClient = {\r\n      x: sensorEvent.clientX,\r\n      y: sensorEvent.clientY\r\n    };\r\n\r\n    const mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreateEvent);\r\n\r\n    if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const appendableContainer = this[getAppendableContainer](source) || sourceContainer;\r\n    this.mirror = source.cloneNode(true);\r\n\r\n    const mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    const mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror\r\n    });\r\n\r\n    this.draggable.trigger(mirrorCreatedEvent);\r\n    appendableContainer.appendChild(this.mirror);\r\n    this.draggable.trigger(mirrorAttachedEvent);\r\n  }\r\n\r\n  [onDragMove](dragEvent) {\r\n    if (!this.mirror || dragEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const { source, originalSource, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    let passedThreshX = true;\r\n    let passedThreshY = true;\r\n\r\n    if (this.options.thresholdX || this.options.thresholdY) {\r\n      const { x: lastX, y: lastY } = this.lastMirrorMovedClient;\r\n\r\n      if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {\r\n        passedThreshX = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.x = sensorEvent.clientX;\r\n      }\r\n\r\n      if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {\r\n        passedThreshY = false;\r\n      } else {\r\n        this.lastMirrorMovedClient.y = sensorEvent.clientY;\r\n      }\r\n\r\n      if (!passedThreshX && !passedThreshY) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({\r\n      source,\r\n      originalSource,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent,\r\n      mirror: this.mirror,\r\n      passedThreshX,\r\n      passedThreshY\r\n    });\r\n\r\n    this.draggable.trigger(mirrorMoveEvent);\r\n  }\r\n\r\n  [onDragStop](dragEvent) {\r\n    if ('ontouchstart' in window) {\r\n      document.removeEventListener('scroll', this[onScroll], true);\r\n    }\r\n\r\n    this.initialScrollOffset = { x: 0, y: 0 };\r\n    this.scrollOffset = { x: 0, y: 0 };\r\n\r\n    if (!this.mirror) {\r\n      return;\r\n    }\r\n\r\n    const { source, sourceContainer, sensorEvent } = dragEvent;\r\n\r\n    const mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({\r\n      source,\r\n      mirror: this.mirror,\r\n      sourceContainer,\r\n      sensorEvent,\r\n      dragEvent\r\n    });\r\n\r\n    this.draggable.trigger(mirrorDestroyEvent);\r\n\r\n    if (!mirrorDestroyEvent.canceled()) {\r\n      this.mirror.parentNode.removeChild(this.mirror);\r\n    }\r\n  }\r\n\r\n  [onScroll]() {\r\n    this.scrollOffset = {\r\n      x: window.scrollX - this.initialScrollOffset.x,\r\n      y: window.scrollY - this.initialScrollOffset.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mirror created handler\r\n   * @param {MirrorCreatedEvent} mirrorEvent\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  [onMirrorCreated]({ mirror, source, sensorEvent }) {\r\n    const mirrorClasses = this.draggable.getClassNamesFor('mirror');\r\n\r\n    const setState = (_ref) => {\r\n      let { mirrorOffset, initialX, initialY } = _ref,\r\n          args = _objectWithoutProperties(_ref, ['mirrorOffset', 'initialX', 'initialY']);\r\n\r\n      this.mirrorOffset = mirrorOffset;\r\n      this.initialX = initialX;\r\n      this.initialY = initialY;\r\n      this.lastMovedX = initialX;\r\n      this.lastMovedY = initialY;\r\n      return _extends({ mirrorOffset, initialX, initialY }, args);\r\n    };\r\n\r\n    mirror.style.display = 'none';\r\n\r\n    const initialState = {\r\n      mirror,\r\n      source,\r\n      sensorEvent,\r\n      mirrorClasses,\r\n      scrollOffset: this.scrollOffset,\r\n      options: this.options,\r\n      passedThreshX: true,\r\n      passedThreshY: true\r\n    };\r\n\r\n    return Promise.resolve(initialState)\r\n    // Fix reflow here\r\n    .then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({ initial: true })).then(removeMirrorID).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Mirror move handler\r\n   * @param {MirrorMoveEvent} mirrorEvent\r\n   * @return {Promise|null}\r\n   * @private\r\n   */\r\n  [onMirrorMove](mirrorEvent) {\r\n    if (mirrorEvent.canceled()) {\r\n      return null;\r\n    }\r\n\r\n    const setState = (_ref2) => {\r\n      let { lastMovedX, lastMovedY } = _ref2,\r\n          args = _objectWithoutProperties(_ref2, ['lastMovedX', 'lastMovedY']);\r\n\r\n      this.lastMovedX = lastMovedX;\r\n      this.lastMovedY = lastMovedY;\r\n\r\n      return _extends({ lastMovedX, lastMovedY }, args);\r\n    };\r\n\r\n    const initialState = {\r\n      mirror: mirrorEvent.mirror,\r\n      sensorEvent: mirrorEvent.sensorEvent,\r\n      mirrorOffset: this.mirrorOffset,\r\n      options: this.options,\r\n      initialX: this.initialX,\r\n      initialY: this.initialY,\r\n      scrollOffset: this.scrollOffset,\r\n      passedThreshX: mirrorEvent.passedThreshX,\r\n      passedThreshY: mirrorEvent.passedThreshY,\r\n      lastMovedX: this.lastMovedX,\r\n      lastMovedY: this.lastMovedY\r\n    };\r\n\r\n    return Promise.resolve(initialState).then(positionMirror({ raf: true })).then(setState);\r\n  }\r\n\r\n  /**\r\n   * Returns appendable container for mirror based on the appendTo option\r\n   * @private\r\n   * @param {Object} options\r\n   * @param {HTMLElement} options.source - Current source\r\n   * @return {HTMLElement}\r\n   */\r\n  [getAppendableContainer](source) {\r\n    const appendTo = this.options.appendTo;\r\n\r\n    if (typeof appendTo === 'string') {\r\n      return document.querySelector(appendTo);\r\n    } else if (appendTo instanceof HTMLElement) {\r\n      return appendTo;\r\n    } else if (typeof appendTo === 'function') {\r\n      return appendTo(source);\r\n    } else {\r\n      return source.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nexports.default = Mirror; /**\r\n                           * Computes mirror dimensions based on the source element\r\n                           * Adds sourceRect to state\r\n                           * @param {Object} state\r\n                           * @param {HTMLElement} state.source\r\n                           * @return {Promise}\r\n                           * @private\r\n                           */\r\n\r\nfunction computeMirrorDimensions(_ref3) {\r\n  let { source } = _ref3,\r\n      args = _objectWithoutProperties(_ref3, ['source']);\r\n\r\n  return withPromise(resolve => {\r\n    const sourceRect = source.getBoundingClientRect();\r\n    resolve(_extends({ source, sourceRect }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Calculates mirror offset\r\n * Adds mirrorOffset to state\r\n * @param {Object} state\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {DOMRect} state.sourceRect\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction calculateMirrorOffset(_ref4) {\r\n  let { sensorEvent, sourceRect, options } = _ref4,\r\n      args = _objectWithoutProperties(_ref4, ['sensorEvent', 'sourceRect', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    const top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;\r\n    const left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;\r\n\r\n    const mirrorOffset = { top, left };\r\n\r\n    resolve(_extends({ sensorEvent, sourceRect, mirrorOffset, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror styles\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {HTMLElement} state.source\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction resetMirror(_ref5) {\r\n  let { mirror, source, options } = _ref5,\r\n      args = _objectWithoutProperties(_ref5, ['mirror', 'source', 'options']);\r\n\r\n  return withPromise(resolve => {\r\n    let offsetHeight;\r\n    let offsetWidth;\r\n\r\n    if (options.constrainDimensions) {\r\n      const computedSourceStyles = getComputedStyle(source);\r\n      offsetHeight = computedSourceStyles.getPropertyValue('height');\r\n      offsetWidth = computedSourceStyles.getPropertyValue('width');\r\n    }\r\n\r\n    mirror.style.display = null;\r\n    mirror.style.position = 'fixed';\r\n    mirror.style.pointerEvents = 'none';\r\n    mirror.style.top = 0;\r\n    mirror.style.left = 0;\r\n    mirror.style.margin = 0;\r\n\r\n    if (options.constrainDimensions) {\r\n      mirror.style.height = offsetHeight;\r\n      mirror.style.width = offsetWidth;\r\n    }\r\n\r\n    resolve(_extends({ mirror, source, options }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Applys mirror class on mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {String[]} state.mirrorClasses\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction addMirrorClasses(_ref6) {\r\n  let { mirror, mirrorClasses } = _ref6,\r\n      args = _objectWithoutProperties(_ref6, ['mirror', 'mirrorClasses']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.classList.add(...mirrorClasses);\r\n    resolve(_extends({ mirror, mirrorClasses }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Removes source ID from cloned mirror element\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction removeMirrorID(_ref7) {\r\n  let { mirror } = _ref7,\r\n      args = _objectWithoutProperties(_ref7, ['mirror']);\r\n\r\n  return withPromise(resolve => {\r\n    mirror.removeAttribute('id');\r\n    delete mirror.id;\r\n    resolve(_extends({ mirror }, args));\r\n  });\r\n}\r\n\r\n/**\r\n * Positions mirror with translate3d\r\n * @param {Object} state\r\n * @param {HTMLElement} state.mirror\r\n * @param {SensorEvent} state.sensorEvent\r\n * @param {Object} state.mirrorOffset\r\n * @param {Number} state.initialY\r\n * @param {Number} state.initialX\r\n * @param {Object} state.options\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction positionMirror({ withFrame = false, initial = false } = {}) {\r\n  return (_ref8) => {\r\n    let {\r\n      mirror,\r\n      sensorEvent,\r\n      mirrorOffset,\r\n      initialY,\r\n      initialX,\r\n      scrollOffset,\r\n      options,\r\n      passedThreshX,\r\n      passedThreshY,\r\n      lastMovedX,\r\n      lastMovedY\r\n    } = _ref8,\r\n        args = _objectWithoutProperties(_ref8, ['mirror', 'sensorEvent', 'mirrorOffset', 'initialY', 'initialX', 'scrollOffset', 'options', 'passedThreshX', 'passedThreshY', 'lastMovedX', 'lastMovedY']);\r\n\r\n    return withPromise(resolve => {\r\n      const result = _extends({\r\n        mirror,\r\n        sensorEvent,\r\n        mirrorOffset,\r\n        options\r\n      }, args);\r\n\r\n      if (mirrorOffset) {\r\n        const x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);\r\n        const y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);\r\n\r\n        if (options.xAxis && options.yAxis || initial) {\r\n          mirror.style.transform = `translate3d(${x}px, ${y}px, 0)`;\r\n        } else if (options.xAxis && !options.yAxis) {\r\n          mirror.style.transform = `translate3d(${x}px, ${initialY}px, 0)`;\r\n        } else if (options.yAxis && !options.xAxis) {\r\n          mirror.style.transform = `translate3d(${initialX}px, ${y}px, 0)`;\r\n        }\r\n\r\n        if (initial) {\r\n          result.initialX = x;\r\n          result.initialY = y;\r\n        }\r\n\r\n        result.lastMovedX = x;\r\n        result.lastMovedY = y;\r\n      }\r\n\r\n      resolve(result);\r\n    }, { frame: withFrame });\r\n  };\r\n}\r\n\r\n/**\r\n * Wraps functions in promise with potential animation frame option\r\n * @param {Function} callback\r\n * @param {Object} options\r\n * @param {Boolean} options.raf\r\n * @return {Promise}\r\n * @private\r\n */\r\nfunction withPromise(callback, { raf = false } = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    if (raf) {\r\n      requestAnimationFrame(() => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      callback(resolve, reject);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if the sensor event was triggered by a native browser drag event\r\n * @param {SensorEvent} sensorEvent\r\n */\r\nfunction isNativeDragEvent(sensorEvent) {\r\n  return (/^drag/.test(sensorEvent.originalEvent.type)\r\n  );\r\n}\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_111997__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Mirror = __nested_webpack_require_111997__(35);\r\n\r\nvar _Mirror2 = _interopRequireDefault(_Mirror);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Mirror2.default;\r\nexports.defaultOptions = _Mirror.defaultOptions;\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __nested_webpack_require_112484__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_112484__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\n\r\n/**\r\n * Focusable default options\r\n * @property {Object} defaultOptions\r\n * @type {Object}\r\n */\r\nconst defaultOptions = {};\r\n\r\n/**\r\n * Focusable plugin\r\n * @class Focusable\r\n * @module Focusable\r\n * @extends AbstractPlugin\r\n */\r\nclass Focusable extends _AbstractPlugin2.default {\r\n  /**\r\n   * Focusable constructor.\r\n   * @constructs Focusable\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Focusable options\r\n     * @property {Object} options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);\r\n\r\n    // Remove modified elements when detach\r\n    this[onDestroy]();\r\n  }\r\n\r\n  /**\r\n   * Returns options passed through draggable\r\n   * @return {Object}\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.focusable || {};\r\n  }\r\n\r\n  /**\r\n   * Returns draggable containers and elements\r\n   * @return {HTMLElement[]}\r\n   */\r\n  getElements() {\r\n    return [...this.draggable.containers, ...this.draggable.getDraggableElements()];\r\n  }\r\n\r\n  /**\r\n   * Intialize handler\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => decorateElement(element));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy handler\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    // Can wait until the next best frame is available\r\n    requestAnimationFrame(() => {\r\n      this.getElements().forEach(element => stripElement(element));\r\n    });\r\n  }\r\n}\r\n\r\nexports.default = Focusable; /**\r\n                              * Keeps track of all the elements that are missing tabindex attributes\r\n                              * so they can be reset when draggable gets destroyed\r\n                              * @const {HTMLElement[]} elementsWithMissingTabIndex\r\n                              */\r\n\r\nconst elementsWithMissingTabIndex = [];\r\n\r\n/**\r\n * Decorates element with tabindex attributes\r\n * @param {HTMLElement} element\r\n * @return {Object}\r\n * @private\r\n */\r\nfunction decorateElement(element) {\r\n  const hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);\r\n\r\n  if (hasMissingTabIndex) {\r\n    elementsWithMissingTabIndex.push(element);\r\n    element.tabIndex = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Removes elements tabindex attributes\r\n * @param {HTMLElement} element\r\n * @private\r\n */\r\nfunction stripElement(element) {\r\n  const tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);\r\n\r\n  if (tabIndexElementPosition !== -1) {\r\n    element.tabIndex = -1;\r\n    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __nested_webpack_require_116396__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _Focusable = __nested_webpack_require_116396__(37);\r\n\r\nvar _Focusable2 = _interopRequireDefault(_Focusable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Focusable2.default;\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n/**\r\n * All draggable plugins inherit from this class.\r\n * @abstract\r\n * @class AbstractPlugin\r\n * @module AbstractPlugin\r\n */\r\nclass AbstractPlugin {\r\n  /**\r\n   * AbstractPlugin constructor.\r\n   * @constructs AbstractPlugin\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    /**\r\n     * Draggable instance\r\n     * @property draggable\r\n     * @type {Draggable}\r\n     */\r\n    this.draggable = draggable;\r\n  }\r\n\r\n  /**\r\n   * Override to add listeners\r\n   * @abstract\r\n   */\r\n  attach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * Override to remove listeners\r\n   * @abstract\r\n   */\r\n  detach() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\nexports.default = AbstractPlugin;\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __nested_webpack_require_117720__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _AbstractPlugin = __nested_webpack_require_117720__(4);\r\n\r\nvar _AbstractPlugin2 = _interopRequireDefault(_AbstractPlugin);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onInitialize = Symbol('onInitialize');\r\nconst onDestroy = Symbol('onDestroy');\r\nconst announceEvent = Symbol('announceEvent');\r\nconst announceMessage = Symbol('announceMessage');\r\n\r\nconst ARIA_RELEVANT = 'aria-relevant';\r\nconst ARIA_ATOMIC = 'aria-atomic';\r\nconst ARIA_LIVE = 'aria-live';\r\nconst ROLE = 'role';\r\n\r\n/**\r\n * Announcement default options\r\n * @property {Object} defaultOptions\r\n * @property {Number} defaultOptions.expire\r\n * @type {Object}\r\n */\r\nconst defaultOptions = exports.defaultOptions = {\r\n  expire: 7000\r\n};\r\n\r\n/**\r\n * Announcement plugin\r\n * @class Announcement\r\n * @module Announcement\r\n * @extends AbstractPlugin\r\n */\r\nclass Announcement extends _AbstractPlugin2.default {\r\n  /**\r\n   * Announcement constructor.\r\n   * @constructs Announcement\r\n   * @param {Draggable} draggable - Draggable instance\r\n   */\r\n  constructor(draggable) {\r\n    super(draggable);\r\n\r\n    /**\r\n     * Plugin options\r\n     * @property options\r\n     * @type {Object}\r\n     */\r\n    this.options = _extends({}, defaultOptions, this.getOptions());\r\n\r\n    /**\r\n     * Original draggable trigger method. Hack until we have onAll or on('all')\r\n     * @property originalTriggerMethod\r\n     * @type {Function}\r\n     */\r\n    this.originalTriggerMethod = this.draggable.trigger;\r\n\r\n    this[onInitialize] = this[onInitialize].bind(this);\r\n    this[onDestroy] = this[onDestroy].bind(this);\r\n  }\r\n\r\n  /**\r\n   * Attaches listeners to draggable\r\n   */\r\n  attach() {\r\n    this.draggable.on('draggable:initialize', this[onInitialize]);\r\n  }\r\n\r\n  /**\r\n   * Detaches listeners from draggable\r\n   */\r\n  detach() {\r\n    this.draggable.off('draggable:destroy', this[onDestroy]);\r\n  }\r\n\r\n  /**\r\n   * Returns passed in options\r\n   */\r\n  getOptions() {\r\n    return this.draggable.options.announcements || {};\r\n  }\r\n\r\n  /**\r\n   * Announces event\r\n   * @private\r\n   * @param {AbstractEvent} event\r\n   */\r\n  [announceEvent](event) {\r\n    const message = this.options[event.type];\r\n\r\n    if (message && typeof message === 'string') {\r\n      this[announceMessage](message);\r\n    }\r\n\r\n    if (message && typeof message === 'function') {\r\n      this[announceMessage](message(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Announces message to screen reader\r\n   * @private\r\n   * @param {String} message\r\n   */\r\n  [announceMessage](message) {\r\n    announce(message, { expire: this.options.expire });\r\n  }\r\n\r\n  /**\r\n   * Initialize hander\r\n   * @private\r\n   */\r\n  [onInitialize]() {\r\n    // Hack until there is an api for listening for all events\r\n    this.draggable.trigger = event => {\r\n      try {\r\n        this[announceEvent](event);\r\n      } finally {\r\n        // Ensure that original trigger is called\r\n        this.originalTriggerMethod.call(this.draggable, event);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy hander\r\n   * @private\r\n   */\r\n  [onDestroy]() {\r\n    this.draggable.trigger = this.originalTriggerMethod;\r\n  }\r\n}\r\n\r\nexports.default = Announcement; /**\r\n                                 * @const {HTMLElement} liveRegion\r\n                                 */\r\n\r\nconst liveRegion = createRegion();\r\n\r\n/**\r\n * Announces message via live region\r\n * @param {String} message\r\n * @param {Object} options\r\n * @param {Number} options.expire\r\n */\r\nfunction announce(message, { expire }) {\r\n  const element = document.createElement('div');\r\n\r\n  element.textContent = message;\r\n  liveRegion.appendChild(element);\r\n\r\n  return setTimeout(() => {\r\n    liveRegion.removeChild(element);\r\n  }, expire);\r\n}\r\n\r\n/**\r\n * Creates region element\r\n * @return {HTMLElement}\r\n */\r\nfunction createRegion() {\r\n  const element = document.createElement('div');\r\n\r\n  element.setAttribute('id', 'draggable-live-region');\r\n  element.setAttribute(ARIA_RELEVANT, 'additions');\r\n  element.setAttribute(ARIA_ATOMIC, 'true');\r\n  element.setAttribute(ARIA_LIVE, 'assertive');\r\n  element.setAttribute(ROLE, 'log');\r\n\r\n  element.style.position = 'fixed';\r\n  element.style.width = '1px';\r\n  element.style.height = '1px';\r\n  element.style.top = '-1px';\r\n  element.style.overflow = 'hidden';\r\n\r\n  return element;\r\n}\r\n\r\n// Append live region element as early as possible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  document.body.appendChild(liveRegion);\r\n});\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __nested_webpack_require_122608__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.defaultOptions = undefined;\r\n\r\nvar _Announcement = __nested_webpack_require_122608__(40);\r\n\r\nvar _Announcement2 = _interopRequireDefault(_Announcement);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Announcement2.default;\r\nexports.defaultOptions = _Announcement.defaultOptions;\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __nested_webpack_require_123125__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DraggableDestroyEvent = exports.DraggableInitializedEvent = exports.DraggableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_123125__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base draggable event\r\n * @class DraggableEvent\r\n * @module DraggableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DraggableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggable instance\r\n   * @property draggable\r\n   * @type {Draggable}\r\n   * @readonly\r\n   */\r\n  get draggable() {\r\n    return this.data.draggable;\r\n  }\r\n}\r\n\r\nexports.DraggableEvent = DraggableEvent; /**\r\n                                          * Draggable initialized event\r\n                                          * @class DraggableInitializedEvent\r\n                                          * @module DraggableInitializedEvent\r\n                                          * @extends DraggableEvent\r\n                                          */\r\n\r\nDraggableEvent.type = 'draggable';\r\nclass DraggableInitializedEvent extends DraggableEvent {}\r\n\r\nexports.DraggableInitializedEvent = DraggableInitializedEvent; /**\r\n                                                                * Draggable destory event\r\n                                                                * @class DraggableInitializedEvent\r\n                                                                * @module DraggableDestroyEvent\r\n                                                                * @extends DraggableDestroyEvent\r\n                                                                */\r\n\r\nDraggableInitializedEvent.type = 'draggable:initialize';\r\nclass DraggableDestroyEvent extends DraggableEvent {}\r\nexports.DraggableDestroyEvent = DraggableDestroyEvent;\r\nDraggableDestroyEvent.type = 'draggable:destroy';\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __nested_webpack_require_125189__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.DragStoppedEvent = exports.DragStopEvent = exports.DragPressureEvent = exports.DragOutContainerEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOverEvent = exports.DragMoveEvent = exports.DragStartEvent = exports.DragEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_125189__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base drag event\r\n * @class DragEvent\r\n * @module DragEvent\r\n * @extends AbstractEvent\r\n */\r\nclass DragEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Draggables source element\r\n   * @property source\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get source() {\r\n    return this.data.source;\r\n  }\r\n\r\n  /**\r\n   * Draggables original source element\r\n   * @property originalSource\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get originalSource() {\r\n    return this.data.originalSource;\r\n  }\r\n\r\n  /**\r\n   * Draggables mirror element\r\n   * @property mirror\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get mirror() {\r\n    return this.data.mirror;\r\n  }\r\n\r\n  /**\r\n   * Draggables source container element\r\n   * @property sourceContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get sourceContainer() {\r\n    return this.data.sourceContainer;\r\n  }\r\n\r\n  /**\r\n   * Sensor event\r\n   * @property sensorEvent\r\n   * @type {SensorEvent}\r\n   * @readonly\r\n   */\r\n  get sensorEvent() {\r\n    return this.data.sensorEvent;\r\n  }\r\n\r\n  /**\r\n   * Original event that triggered sensor event\r\n   * @property originalEvent\r\n   * @type {Event}\r\n   * @readonly\r\n   */\r\n  get originalEvent() {\r\n    if (this.sensorEvent) {\r\n      return this.sensorEvent.originalEvent;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.DragEvent = DragEvent; /**\r\n                                * Drag start event\r\n                                * @class DragStartEvent\r\n                                * @module DragStartEvent\r\n                                * @extends DragEvent\r\n                                */\r\n\r\nDragEvent.type = 'drag';\r\nclass DragStartEvent extends DragEvent {}\r\n\r\nexports.DragStartEvent = DragStartEvent; /**\r\n                                          * Drag move event\r\n                                          * @class DragMoveEvent\r\n                                          * @module DragMoveEvent\r\n                                          * @extends DragEvent\r\n                                          */\r\n\r\nDragStartEvent.type = 'drag:start';\r\nDragStartEvent.cancelable = true;\r\nclass DragMoveEvent extends DragEvent {}\r\n\r\nexports.DragMoveEvent = DragMoveEvent; /**\r\n                                        * Drag over event\r\n                                        * @class DragOverEvent\r\n                                        * @module DragOverEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragMoveEvent.type = 'drag:move';\r\nclass DragOverEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOverEvent = DragOverEvent; /**\r\n                                        * Drag out event\r\n                                        * @class DragOutEvent\r\n                                        * @module DragOutEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragOverEvent.type = 'drag:over';\r\nDragOverEvent.cancelable = true;\r\nclass DragOutEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n\r\n  /**\r\n   * Draggable element you left\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n}\r\n\r\nexports.DragOutEvent = DragOutEvent; /**\r\n                                      * Drag over container event\r\n                                      * @class DragOverContainerEvent\r\n                                      * @module DragOverContainerEvent\r\n                                      * @extends DragEvent\r\n                                      */\r\n\r\nDragOutEvent.type = 'drag:out';\r\nclass DragOverContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOverContainerEvent = DragOverContainerEvent; /**\r\n                                                          * Drag out container event\r\n                                                          * @class DragOutContainerEvent\r\n                                                          * @module DragOutContainerEvent\r\n                                                          * @extends DragEvent\r\n                                                          */\r\n\r\nDragOverContainerEvent.type = 'drag:over:container';\r\nclass DragOutContainerEvent extends DragEvent {\r\n\r\n  /**\r\n   * Draggable container you left\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.DragOutContainerEvent = DragOutContainerEvent; /**\r\n                                                        * Drag pressure event\r\n                                                        * @class DragPressureEvent\r\n                                                        * @module DragPressureEvent\r\n                                                        * @extends DragEvent\r\n                                                        */\r\n\r\nDragOutContainerEvent.type = 'drag:out:container';\r\nclass DragPressureEvent extends DragEvent {\r\n\r\n  /**\r\n   * Pressure applied on draggable element\r\n   * @property pressure\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  get pressure() {\r\n    return this.data.pressure;\r\n  }\r\n}\r\n\r\nexports.DragPressureEvent = DragPressureEvent; /**\r\n                                                * Drag stop event\r\n                                                * @class DragStopEvent\r\n                                                * @module DragStopEvent\r\n                                                * @extends DragEvent\r\n                                                */\r\n\r\nDragPressureEvent.type = 'drag:pressure';\r\nclass DragStopEvent extends DragEvent {}\r\n\r\nexports.DragStopEvent = DragStopEvent; /**\r\n                                        * Drag stopped event\r\n                                        * @class DragStoppedEvent\r\n                                        * @module DragStoppedEvent\r\n                                        * @extends DragEvent\r\n                                        */\r\n\r\nDragStopEvent.type = 'drag:stop';\r\nclass DragStoppedEvent extends DragEvent {}\r\nexports.DragStoppedEvent = DragStoppedEvent;\r\nDragStoppedEvent.type = 'drag:stopped';\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_132714__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _DragEvent = __nested_webpack_require_132714__(8);\r\n\r\nObject.keys(_DragEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DragEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _DraggableEvent = __nested_webpack_require_132714__(7);\r\n\r\nObject.keys(_DraggableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _DraggableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Plugins = __nested_webpack_require_132714__(6);\r\n\r\nObject.keys(_Plugins).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Plugins[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Sensors = __nested_webpack_require_132714__(5);\r\n\r\nObject.keys(_Sensors).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _Sensors[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Draggable = __nested_webpack_require_132714__(12);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Draggable2.default;\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __nested_webpack_require_134297__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _Draggable = __nested_webpack_require_134297__(44);\r\n\r\nvar _Draggable2 = _interopRequireDefault(_Draggable);\r\n\r\nvar _SwappableEvent = __nested_webpack_require_134297__(9);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst onDragStart = Symbol('onDragStart');\r\nconst onDragOver = Symbol('onDragOver');\r\nconst onDragStop = Symbol('onDragStop');\r\n\r\n/**\r\n * Returns an announcement message when the Draggable element is swapped with another draggable element\r\n * @param {SwappableSwappedEvent} swappableEvent\r\n * @return {String}\r\n */\r\nfunction onSwappableSwappedDefaultAnnouncement({ dragEvent, swappedElement }) {\r\n  const sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'swappable element';\r\n  const overText = swappedElement.textContent.trim() || swappedElement.id || 'swappable element';\r\n\r\n  return `Swapped ${sourceText} with ${overText}`;\r\n}\r\n\r\n/**\r\n * @const {Object} defaultAnnouncements\r\n * @const {Function} defaultAnnouncements['swappabled:swapped']\r\n */\r\nconst defaultAnnouncements = {\r\n  'swappabled:swapped': onSwappableSwappedDefaultAnnouncement\r\n};\r\n\r\n/**\r\n * Swappable is built on top of Draggable and allows swapping of draggable elements.\r\n * Order is irrelevant to Swappable.\r\n * @class Swappable\r\n * @module Swappable\r\n * @extends Draggable\r\n */\r\nclass Swappable extends _Draggable2.default {\r\n  /**\r\n   * Swappable constructor.\r\n   * @constructs Swappable\r\n   * @param {HTMLElement[]|NodeList|HTMLElement} containers - Swappable containers\r\n   * @param {Object} options - Options for Swappable\r\n   */\r\n  constructor(containers = [], options = {}) {\r\n    super(containers, _extends({}, options, {\r\n      announcements: _extends({}, defaultAnnouncements, options.announcements || {})\r\n    }));\r\n\r\n    /**\r\n     * Last draggable element that was dragged over\r\n     * @property lastOver\r\n     * @type {HTMLElement}\r\n     */\r\n    this.lastOver = null;\r\n\r\n    this[onDragStart] = this[onDragStart].bind(this);\r\n    this[onDragOver] = this[onDragOver].bind(this);\r\n    this[onDragStop] = this[onDragStop].bind(this);\r\n\r\n    this.on('drag:start', this[onDragStart]).on('drag:over', this[onDragOver]).on('drag:stop', this[onDragStop]);\r\n  }\r\n\r\n  /**\r\n   * Destroys Swappable instance.\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n\r\n    this.off('drag:start', this._onDragStart).off('drag:over', this._onDragOver).off('drag:stop', this._onDragStop);\r\n  }\r\n\r\n  /**\r\n   * Drag start handler\r\n   * @private\r\n   * @param {DragStartEvent} event - Drag start event\r\n   */\r\n  [onDragStart](event) {\r\n    const swappableStartEvent = new _SwappableEvent.SwappableStartEvent({\r\n      dragEvent: event\r\n    });\r\n\r\n    this.trigger(swappableStartEvent);\r\n\r\n    if (swappableStartEvent.canceled()) {\r\n      event.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drag over handler\r\n   * @private\r\n   * @param {DragOverEvent} event - Drag over event\r\n   */\r\n  [onDragOver](event) {\r\n    if (event.over === event.originalSource || event.over === event.source || event.canceled()) {\r\n      return;\r\n    }\r\n\r\n    const swappableSwapEvent = new _SwappableEvent.SwappableSwapEvent({\r\n      dragEvent: event,\r\n      over: event.over,\r\n      overContainer: event.overContainer\r\n    });\r\n\r\n    this.trigger(swappableSwapEvent);\r\n\r\n    if (swappableSwapEvent.canceled()) {\r\n      return;\r\n    }\r\n\r\n    // swap originally swapped element back\r\n    if (this.lastOver && this.lastOver !== event.over) {\r\n      swap(this.lastOver, event.source);\r\n    }\r\n\r\n    if (this.lastOver === event.over) {\r\n      this.lastOver = null;\r\n    } else {\r\n      this.lastOver = event.over;\r\n    }\r\n\r\n    swap(event.source, event.over);\r\n\r\n    const swappableSwappedEvent = new _SwappableEvent.SwappableSwappedEvent({\r\n      dragEvent: event,\r\n      swappedElement: event.over\r\n    });\r\n\r\n    this.trigger(swappableSwappedEvent);\r\n  }\r\n\r\n  /**\r\n   * Drag stop handler\r\n   * @private\r\n   * @param {DragStopEvent} event - Drag stop event\r\n   */\r\n  [onDragStop](event) {\r\n    const swappableStopEvent = new _SwappableEvent.SwappableStopEvent({\r\n      dragEvent: event\r\n    });\r\n\r\n    this.trigger(swappableStopEvent);\r\n    this.lastOver = null;\r\n  }\r\n}\r\n\r\nexports.default = Swappable;\r\nfunction withTempElement(callback) {\r\n  const tmpElement = document.createElement('div');\r\n  callback(tmpElement);\r\n  tmpElement.parentNode.removeChild(tmpElement);\r\n}\r\n\r\nfunction swap(source, over) {\r\n  const overParent = over.parentNode;\r\n  const sourceParent = source.parentNode;\r\n\r\n  withTempElement(tmpElement => {\r\n    sourceParent.insertBefore(tmpElement, source);\r\n    overParent.insertBefore(source, over);\r\n    sourceParent.insertBefore(over, tmpElement);\r\n  });\r\n}\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nconst canceled = Symbol('canceled');\r\n\r\n/**\r\n * All events fired by draggable inherit this class. You can call `cancel()` to\r\n * cancel a specific event or you can check if an event has been canceled by\r\n * calling `canceled()`.\r\n * @abstract\r\n * @class AbstractEvent\r\n * @module AbstractEvent\r\n */\r\nclass AbstractEvent {\r\n\r\n  /**\r\n   * AbstractEvent constructor.\r\n   * @constructs AbstractEvent\r\n   * @param {object} data - Event data\r\n   */\r\n\r\n  /**\r\n   * Event type\r\n   * @static\r\n   * @abstract\r\n   * @property type\r\n   * @type {String}\r\n   */\r\n  constructor(data) {\r\n    this[canceled] = false;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * Read-only type\r\n   * @abstract\r\n   * @return {String}\r\n   */\r\n\r\n\r\n  /**\r\n   * Event cancelable\r\n   * @static\r\n   * @abstract\r\n   * @property cancelable\r\n   * @type {Boolean}\r\n   */\r\n  get type() {\r\n    return this.constructor.type;\r\n  }\r\n\r\n  /**\r\n   * Read-only cancelable\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  get cancelable() {\r\n    return this.constructor.cancelable;\r\n  }\r\n\r\n  /**\r\n   * Cancels the event instance\r\n   * @abstract\r\n   */\r\n  cancel() {\r\n    this[canceled] = true;\r\n  }\r\n\r\n  /**\r\n   * Check if event has been canceled\r\n   * @abstract\r\n   * @return {Boolean}\r\n   */\r\n  canceled() {\r\n    return Boolean(this[canceled]);\r\n  }\r\n\r\n  /**\r\n   * Returns new event instance with existing event data.\r\n   * This method allows for overriding of event data.\r\n   * @param {Object} data\r\n   * @return {AbstractEvent}\r\n   */\r\n  clone(data) {\r\n    return new this.constructor(_extends({}, this.data, data));\r\n  }\r\n}\r\nexports.default = AbstractEvent;\r\nAbstractEvent.type = 'event';\r\nAbstractEvent.cancelable = false;\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __nested_webpack_require_141509__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.SwappableStopEvent = exports.SwappableSwappedEvent = exports.SwappableSwapEvent = exports.SwappableStartEvent = exports.SwappableEvent = undefined;\r\n\r\nvar _AbstractEvent = __nested_webpack_require_141509__(3);\r\n\r\nvar _AbstractEvent2 = _interopRequireDefault(_AbstractEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Base swappable event\r\n * @class SwappableEvent\r\n * @module SwappableEvent\r\n * @extends AbstractEvent\r\n */\r\nclass SwappableEvent extends _AbstractEvent2.default {\r\n\r\n  /**\r\n   * Original drag event that triggered this swappable event\r\n   * @property dragEvent\r\n   * @type {DragEvent}\r\n   * @readonly\r\n   */\r\n  get dragEvent() {\r\n    return this.data.dragEvent;\r\n  }\r\n}\r\n\r\nexports.SwappableEvent = SwappableEvent; /**\r\n                                          * Swappable start event\r\n                                          * @class SwappableStartEvent\r\n                                          * @module SwappableStartEvent\r\n                                          * @extends SwappableEvent\r\n                                          */\r\n\r\nSwappableEvent.type = 'swappable';\r\nclass SwappableStartEvent extends SwappableEvent {}\r\n\r\nexports.SwappableStartEvent = SwappableStartEvent; /**\r\n                                                    * Swappable swap event\r\n                                                    * @class SwappableSwapEvent\r\n                                                    * @module SwappableSwapEvent\r\n                                                    * @extends SwappableEvent\r\n                                                    */\r\n\r\nSwappableStartEvent.type = 'swappable:start';\r\nSwappableStartEvent.cancelable = true;\r\nclass SwappableSwapEvent extends SwappableEvent {\r\n\r\n  /**\r\n   * Draggable element you are over\r\n   * @property over\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get over() {\r\n    return this.data.over;\r\n  }\r\n\r\n  /**\r\n   * Draggable container you are over\r\n   * @property overContainer\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get overContainer() {\r\n    return this.data.overContainer;\r\n  }\r\n}\r\n\r\nexports.SwappableSwapEvent = SwappableSwapEvent; /**\r\n                                                  * Swappable swapped event\r\n                                                  * @class SwappableSwappedEvent\r\n                                                  * @module SwappableSwappedEvent\r\n                                                  * @extends SwappableEvent\r\n                                                  */\r\n\r\nSwappableSwapEvent.type = 'swappable:swap';\r\nSwappableSwapEvent.cancelable = true;\r\nclass SwappableSwappedEvent extends SwappableEvent {\r\n\r\n  /**\r\n   * The draggable element that you swapped with\r\n   * @property swappedElement\r\n   * @type {HTMLElement}\r\n   * @readonly\r\n   */\r\n  get swappedElement() {\r\n    return this.data.swappedElement;\r\n  }\r\n}\r\n\r\nexports.SwappableSwappedEvent = SwappableSwappedEvent; /**\r\n                                                        * Swappable stop event\r\n                                                        * @class SwappableStopEvent\r\n                                                        * @module SwappableStopEvent\r\n                                                        * @extends SwappableEvent\r\n                                                        */\r\n\r\nSwappableSwappedEvent.type = 'swappable:swapped';\r\nclass SwappableStopEvent extends SwappableEvent {}\r\nexports.SwappableStopEvent = SwappableStopEvent;\r\nSwappableStopEvent.type = 'swappable:stop';\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __nested_webpack_require_145262__) {\r\n\r\n\"use strict\";\r\n\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _SwappableEvent = __nested_webpack_require_145262__(9);\r\n\r\nObject.keys(_SwappableEvent).forEach(function (key) {\r\n  if (key === \"default\" || key === \"__esModule\") return;\r\n  Object.defineProperty(exports, key, {\r\n    enumerable: true,\r\n    get: function () {\r\n      return _SwappableEvent[key];\r\n    }\r\n  });\r\n});\r\n\r\nvar _Swappable = __nested_webpack_require_145262__(45);\r\n\r\nvar _Swappable2 = _interopRequireDefault(_Swappable);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nexports.default = _Swappable2.default;\r\n\r\n/***/ })\r\n/******/ ]);\r\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@shopify/draggable/lib/swappable.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/draggable/draggable.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/draggable/draggable.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Draggable - a lightweight, responsive, modern drag & drop library: https://shopify.github.io/draggable/\n__webpack_require__(/*! @shopify/draggable/lib/draggable.bundle.js */ \"./node_modules/@shopify/draggable/lib/draggable.bundle.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/draggable.bundle.legacy.js */ \"./node_modules/@shopify/draggable/lib/draggable.bundle.legacy.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/draggable.js */ \"./node_modules/@shopify/draggable/lib/draggable.js\");\n\nwindow.Sortable = __webpack_require__(/*! @shopify/draggable/lib/sortable.js */ \"./node_modules/@shopify/draggable/lib/sortable.js\");\nwindow.Droppable = __webpack_require__(/*! @shopify/draggable/lib/droppable.js */ \"./node_modules/@shopify/draggable/lib/droppable.js\");\nwindow.Swappable = __webpack_require__(/*! @shopify/draggable/lib/swappable.js */ \"./node_modules/@shopify/draggable/lib/swappable.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/plugins.js */ \"./node_modules/@shopify/draggable/lib/plugins.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/plugins/collidable.js */ \"./node_modules/@shopify/draggable/lib/plugins/collidable.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/plugins/resize-mirror.js */ \"./node_modules/@shopify/draggable/lib/plugins/resize-mirror.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/plugins/snappable.js */ \"./node_modules/@shopify/draggable/lib/plugins/snappable.js\");\n\n__webpack_require__(/*! @shopify/draggable/lib/plugins/swap-animation.js */ \"./node_modules/@shopify/draggable/lib/plugins/swap-animation.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vZHJhZ2dhYmxlL2RyYWdnYWJsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxtQkFBTyxDQUFDLDZHQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsMkhBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQywrRkFBRCxDQUFQOztBQUNBQyxNQUFNLENBQUNDLFFBQVAsR0FBa0JGLG1CQUFPLENBQUMsNkZBQUQsQ0FBekI7QUFDQUMsTUFBTSxDQUFDRSxTQUFQLEdBQW1CSCxtQkFBTyxDQUFDLCtGQUFELENBQTFCO0FBQ0FDLE1BQU0sQ0FBQ0csU0FBUCxHQUFtQkosbUJBQU8sQ0FBQywrRkFBRCxDQUExQjs7QUFDQUEsbUJBQU8sQ0FBQywyRkFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLGlIQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsdUhBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQywrR0FBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLHlIQUFELENBQVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vZHJhZ2dhYmxlL2RyYWdnYWJsZS5qcz9hMWRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERyYWdnYWJsZSAtIGEgbGlnaHR3ZWlnaHQsIHJlc3BvbnNpdmUsIG1vZGVybiBkcmFnICYgZHJvcCBsaWJyYXJ5OiBodHRwczovL3Nob3BpZnkuZ2l0aHViLmlvL2RyYWdnYWJsZS9cclxuXHJcbnJlcXVpcmUoJ0BzaG9waWZ5L2RyYWdnYWJsZS9saWIvZHJhZ2dhYmxlLmJ1bmRsZS5qcycpO1xyXG5yZXF1aXJlKCdAc2hvcGlmeS9kcmFnZ2FibGUvbGliL2RyYWdnYWJsZS5idW5kbGUubGVnYWN5LmpzJyk7XHJcbnJlcXVpcmUoJ0BzaG9waWZ5L2RyYWdnYWJsZS9saWIvZHJhZ2dhYmxlLmpzJyk7XHJcbndpbmRvdy5Tb3J0YWJsZSA9IHJlcXVpcmUoJ0BzaG9waWZ5L2RyYWdnYWJsZS9saWIvc29ydGFibGUuanMnKTtcclxud2luZG93LkRyb3BwYWJsZSA9IHJlcXVpcmUoJ0BzaG9waWZ5L2RyYWdnYWJsZS9saWIvZHJvcHBhYmxlLmpzJyk7XHJcbndpbmRvdy5Td2FwcGFibGUgPSByZXF1aXJlKCdAc2hvcGlmeS9kcmFnZ2FibGUvbGliL3N3YXBwYWJsZS5qcycpO1xyXG5yZXF1aXJlKCdAc2hvcGlmeS9kcmFnZ2FibGUvbGliL3BsdWdpbnMuanMnKTtcclxucmVxdWlyZSgnQHNob3BpZnkvZHJhZ2dhYmxlL2xpYi9wbHVnaW5zL2NvbGxpZGFibGUuanMnKTtcclxucmVxdWlyZSgnQHNob3BpZnkvZHJhZ2dhYmxlL2xpYi9wbHVnaW5zL3Jlc2l6ZS1taXJyb3IuanMnKTtcclxucmVxdWlyZSgnQHNob3BpZnkvZHJhZ2dhYmxlL2xpYi9wbHVnaW5zL3NuYXBwYWJsZS5qcycpO1xyXG5yZXF1aXJlKCdAc2hvcGlmeS9kcmFnZ2FibGUvbGliL3BsdWdpbnMvc3dhcC1hbmltYXRpb24uanMnKTtcclxuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ3aW5kb3ciLCJTb3J0YWJsZSIsIkRyb3BwYWJsZSIsIlN3YXBwYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/draggable/draggable.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/draggable/draggable.js");
/******/ 	
/******/ })()
;