/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/cropper/cropper.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/cropper/cropper.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Cropper -  A simple jQuery image cropping plugin: https://fengyuanchen.github.io/cropper/\nwindow.Cropper = __webpack_require__(/*! cropperjs/dist/cropper.js */ \"./node_modules/cropperjs/dist/cropper.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vY3JvcHBlci9jcm9wcGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQywyRUFBRCxDQUF4QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9wbHVnaW5zL2N1c3RvbS9jcm9wcGVyL2Nyb3BwZXIuanM/MjA0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDcm9wcGVyIC0gIEEgc2ltcGxlIGpRdWVyeSBpbWFnZSBjcm9wcGluZyBwbHVnaW46IGh0dHBzOi8vZmVuZ3l1YW5jaGVuLmdpdGh1Yi5pby9jcm9wcGVyL1xyXG5cclxud2luZG93LkNyb3BwZXIgPSByZXF1aXJlKCdjcm9wcGVyanMvZGlzdC9jcm9wcGVyLmpzJyk7XHJcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJDcm9wcGVyIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/cropper/cropper.js\n");

/***/ }),

/***/ "./node_modules/cropperjs/dist/cropper.js":
/*!************************************************!*\
  !*** ./node_modules/cropperjs/dist/cropper.js ***!
  \************************************************/
/***/ (function(module) {

eval("/*!\r\n * Cropper.js v1.5.12\r\n * https://fengyuanchen.github.io/cropperjs\r\n *\r\n * Copyright 2015-present Chen Fengyuan\r\n * Released under the MIT license\r\n *\r\n * Date: 2021-06-12T08:00:17.411Z\r\n */\r\n\r\n(function (global, factory) {\r\n   true ? module.exports = factory() :\r\n  0;\r\n}(this, (function () { 'use strict';\r\n\r\n  function ownKeys(object, enumerableOnly) {\r\n    var keys = Object.keys(object);\r\n\r\n    if (Object.getOwnPropertySymbols) {\r\n      var symbols = Object.getOwnPropertySymbols(object);\r\n\r\n      if (enumerableOnly) {\r\n        symbols = symbols.filter(function (sym) {\r\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\r\n        });\r\n      }\r\n\r\n      keys.push.apply(keys, symbols);\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  function _objectSpread2(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i] != null ? arguments[i] : {};\r\n\r\n      if (i % 2) {\r\n        ownKeys(Object(source), true).forEach(function (key) {\r\n          _defineProperty(target, key, source[key]);\r\n        });\r\n      } else if (Object.getOwnPropertyDescriptors) {\r\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\r\n      } else {\r\n        ownKeys(Object(source)).forEach(function (key) {\r\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\r\n        });\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  function _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n\r\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n      _typeof = function (obj) {\r\n        return typeof obj;\r\n      };\r\n    } else {\r\n      _typeof = function (obj) {\r\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n      };\r\n    }\r\n\r\n    return _typeof(obj);\r\n  }\r\n\r\n  function _classCallCheck(instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n      throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n  }\r\n\r\n  function _defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  function _createClass(Constructor, protoProps, staticProps) {\r\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) _defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  }\r\n\r\n  function _defineProperty(obj, key, value) {\r\n    if (key in obj) {\r\n      Object.defineProperty(obj, key, {\r\n        value: value,\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true\r\n      });\r\n    } else {\r\n      obj[key] = value;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  function _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\r\n  }\r\n\r\n  function _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n  }\r\n\r\n  function _iterableToArray(iter) {\r\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\r\n  }\r\n\r\n  function _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) return;\r\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n  }\r\n\r\n  function _arrayLikeToArray(arr, len) {\r\n    if (len == null || len > arr.length) len = arr.length;\r\n\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n    return arr2;\r\n  }\r\n\r\n  function _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n  }\r\n\r\n  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n  var WINDOW = IS_BROWSER ? window : {};\r\n  var IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? 'ontouchstart' in WINDOW.document.documentElement : false;\r\n  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\r\n  var NAMESPACE = 'cropper'; // Actions\r\n\r\n  var ACTION_ALL = 'all';\r\n  var ACTION_CROP = 'crop';\r\n  var ACTION_MOVE = 'move';\r\n  var ACTION_ZOOM = 'zoom';\r\n  var ACTION_EAST = 'e';\r\n  var ACTION_WEST = 'w';\r\n  var ACTION_SOUTH = 's';\r\n  var ACTION_NORTH = 'n';\r\n  var ACTION_NORTH_EAST = 'ne';\r\n  var ACTION_NORTH_WEST = 'nw';\r\n  var ACTION_SOUTH_EAST = 'se';\r\n  var ACTION_SOUTH_WEST = 'sw'; // Classes\r\n\r\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\r\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\r\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\r\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\r\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\r\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\r\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\"); // Data keys\r\n\r\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\r\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\"); // Drag modes\r\n\r\n  var DRAG_MODE_CROP = 'crop';\r\n  var DRAG_MODE_MOVE = 'move';\r\n  var DRAG_MODE_NONE = 'none'; // Events\r\n\r\n  var EVENT_CROP = 'crop';\r\n  var EVENT_CROP_END = 'cropend';\r\n  var EVENT_CROP_MOVE = 'cropmove';\r\n  var EVENT_CROP_START = 'cropstart';\r\n  var EVENT_DBLCLICK = 'dblclick';\r\n  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\r\n  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\r\n  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\r\n  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\r\n  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\r\n  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\r\n  var EVENT_READY = 'ready';\r\n  var EVENT_RESIZE = 'resize';\r\n  var EVENT_WHEEL = 'wheel';\r\n  var EVENT_ZOOM = 'zoom'; // Mime types\r\n\r\n  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps\r\n\r\n  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\r\n  var REGEXP_DATA_URL = /^data:/;\r\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\r\n  var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc\r\n  // Inspired by the default width and height of a canvas element.\r\n\r\n  var MIN_CONTAINER_WIDTH = 200;\r\n  var MIN_CONTAINER_HEIGHT = 100;\r\n\r\n  var DEFAULTS = {\r\n    // Define the view mode of the cropper\r\n    viewMode: 0,\r\n    // 0, 1, 2, 3\r\n    // Define the dragging mode of the cropper\r\n    dragMode: DRAG_MODE_CROP,\r\n    // 'crop', 'move' or 'none'\r\n    // Define the initial aspect ratio of the crop box\r\n    initialAspectRatio: NaN,\r\n    // Define the aspect ratio of the crop box\r\n    aspectRatio: NaN,\r\n    // An object with the previous cropping result data\r\n    data: null,\r\n    // A selector for adding extra containers to preview\r\n    preview: '',\r\n    // Re-render the cropper when resize the window\r\n    responsive: true,\r\n    // Restore the cropped area after resize the window\r\n    restore: true,\r\n    // Check if the current image is a cross-origin image\r\n    checkCrossOrigin: true,\r\n    // Check the current image's Exif Orientation information\r\n    checkOrientation: true,\r\n    // Show the black modal\r\n    modal: true,\r\n    // Show the dashed lines for guiding\r\n    guides: true,\r\n    // Show the center indicator for guiding\r\n    center: true,\r\n    // Show the white modal to highlight the crop box\r\n    highlight: true,\r\n    // Show the grid background\r\n    background: true,\r\n    // Enable to crop the image automatically when initialize\r\n    autoCrop: true,\r\n    // Define the percentage of automatic cropping area when initializes\r\n    autoCropArea: 0.8,\r\n    // Enable to move the image\r\n    movable: true,\r\n    // Enable to rotate the image\r\n    rotatable: true,\r\n    // Enable to scale the image\r\n    scalable: true,\r\n    // Enable to zoom the image\r\n    zoomable: true,\r\n    // Enable to zoom the image by dragging touch\r\n    zoomOnTouch: true,\r\n    // Enable to zoom the image by wheeling mouse\r\n    zoomOnWheel: true,\r\n    // Define zoom ratio when zoom the image by wheeling mouse\r\n    wheelZoomRatio: 0.1,\r\n    // Enable to move the crop box\r\n    cropBoxMovable: true,\r\n    // Enable to resize the crop box\r\n    cropBoxResizable: true,\r\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\r\n    toggleDragModeOnDblclick: true,\r\n    // Size limitation\r\n    minCanvasWidth: 0,\r\n    minCanvasHeight: 0,\r\n    minCropBoxWidth: 0,\r\n    minCropBoxHeight: 0,\r\n    minContainerWidth: MIN_CONTAINER_WIDTH,\r\n    minContainerHeight: MIN_CONTAINER_HEIGHT,\r\n    // Shortcuts of events\r\n    ready: null,\r\n    cropstart: null,\r\n    cropmove: null,\r\n    cropend: null,\r\n    crop: null,\r\n    zoom: null\r\n  };\r\n\r\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\r\n\r\n  /**\r\n   * Check if the given value is not a number.\r\n   */\r\n\r\n  var isNaN = Number.isNaN || WINDOW.isNaN;\r\n  /**\r\n   * Check if the given value is a number.\r\n   * @param {*} value - The value to check.\r\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\r\n   */\r\n\r\n  function isNumber(value) {\r\n    return typeof value === 'number' && !isNaN(value);\r\n  }\r\n  /**\r\n   * Check if the given value is a positive number.\r\n   * @param {*} value - The value to check.\r\n   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\r\n   */\r\n\r\n  var isPositiveNumber = function isPositiveNumber(value) {\r\n    return value > 0 && value < Infinity;\r\n  };\r\n  /**\r\n   * Check if the given value is undefined.\r\n   * @param {*} value - The value to check.\r\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\r\n   */\r\n\r\n  function isUndefined(value) {\r\n    return typeof value === 'undefined';\r\n  }\r\n  /**\r\n   * Check if the given value is an object.\r\n   * @param {*} value - The value to check.\r\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\r\n   */\r\n\r\n  function isObject(value) {\r\n    return _typeof(value) === 'object' && value !== null;\r\n  }\r\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n  /**\r\n   * Check if the given value is a plain object.\r\n   * @param {*} value - The value to check.\r\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\r\n   */\r\n\r\n  function isPlainObject(value) {\r\n    if (!isObject(value)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      var _constructor = value.constructor;\r\n      var prototype = _constructor.prototype;\r\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Check if the given value is a function.\r\n   * @param {*} value - The value to check.\r\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\r\n   */\r\n\r\n  function isFunction(value) {\r\n    return typeof value === 'function';\r\n  }\r\n  var slice = Array.prototype.slice;\r\n  /**\r\n   * Convert array-like or iterable object to an array.\r\n   * @param {*} value - The value to convert.\r\n   * @returns {Array} Returns a new array.\r\n   */\r\n\r\n  function toArray(value) {\r\n    return Array.from ? Array.from(value) : slice.call(value);\r\n  }\r\n  /**\r\n   * Iterate the given data.\r\n   * @param {*} data - The data to iterate.\r\n   * @param {Function} callback - The process function for each element.\r\n   * @returns {*} The original data.\r\n   */\r\n\r\n  function forEach(data, callback) {\r\n    if (data && isFunction(callback)) {\r\n      if (Array.isArray(data) || isNumber(data.length)\r\n      /* array-like */\r\n      ) {\r\n          toArray(data).forEach(function (value, key) {\r\n            callback.call(data, value, key, data);\r\n          });\r\n        } else if (isObject(data)) {\r\n        Object.keys(data).forEach(function (key) {\r\n          callback.call(data, data[key], key, data);\r\n        });\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n  /**\r\n   * Extend the given object.\r\n   * @param {*} target - The target object to extend.\r\n   * @param {*} args - The rest objects for merging to the target object.\r\n   * @returns {Object} The extended object.\r\n   */\r\n\r\n  var assign = Object.assign || function assign(target) {\r\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n      args[_key - 1] = arguments[_key];\r\n    }\r\n\r\n    if (isObject(target) && args.length > 0) {\r\n      args.forEach(function (arg) {\r\n        if (isObject(arg)) {\r\n          Object.keys(arg).forEach(function (key) {\r\n            target[key] = arg[key];\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  };\r\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\r\n  /**\r\n   * Normalize decimal number.\r\n   * Check out {@link https://0.30000000000000004.com/}\r\n   * @param {number} value - The value to normalize.\r\n   * @param {number} [times=100000000000] - The times for normalizing.\r\n   * @returns {number} Returns the normalized number.\r\n   */\r\n\r\n  function normalizeDecimalNumber(value) {\r\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\r\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\r\n  }\r\n  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\r\n  /**\r\n   * Apply styles to the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {Object} styles - The styles for applying.\r\n   */\r\n\r\n  function setStyle(element, styles) {\r\n    var style = element.style;\r\n    forEach(styles, function (value, property) {\r\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\r\n        value = \"\".concat(value, \"px\");\r\n      }\r\n\r\n      style[property] = value;\r\n    });\r\n  }\r\n  /**\r\n   * Check if the given element has a special class.\r\n   * @param {Element} element - The element to check.\r\n   * @param {string} value - The class to search.\r\n   * @returns {boolean} Returns `true` if the special class was found.\r\n   */\r\n\r\n  function hasClass(element, value) {\r\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\r\n  }\r\n  /**\r\n   * Add classes to the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {string} value - The classes to be added.\r\n   */\r\n\r\n  function addClass(element, value) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (isNumber(element.length)) {\r\n      forEach(element, function (elem) {\r\n        addClass(elem, value);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (element.classList) {\r\n      element.classList.add(value);\r\n      return;\r\n    }\r\n\r\n    var className = element.className.trim();\r\n\r\n    if (!className) {\r\n      element.className = value;\r\n    } else if (className.indexOf(value) < 0) {\r\n      element.className = \"\".concat(className, \" \").concat(value);\r\n    }\r\n  }\r\n  /**\r\n   * Remove classes from the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {string} value - The classes to be removed.\r\n   */\r\n\r\n  function removeClass(element, value) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (isNumber(element.length)) {\r\n      forEach(element, function (elem) {\r\n        removeClass(elem, value);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (element.classList) {\r\n      element.classList.remove(value);\r\n      return;\r\n    }\r\n\r\n    if (element.className.indexOf(value) >= 0) {\r\n      element.className = element.className.replace(value, '');\r\n    }\r\n  }\r\n  /**\r\n   * Add or remove classes from the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {string} value - The classes to be toggled.\r\n   * @param {boolean} added - Add only.\r\n   */\r\n\r\n  function toggleClass(element, value, added) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    if (isNumber(element.length)) {\r\n      forEach(element, function (elem) {\r\n        toggleClass(elem, value, added);\r\n      });\r\n      return;\r\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\r\n\r\n\r\n    if (added) {\r\n      addClass(element, value);\r\n    } else {\r\n      removeClass(element, value);\r\n    }\r\n  }\r\n  var REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\r\n  /**\r\n   * Transform the given string from camelCase to kebab-case\r\n   * @param {string} value - The value to transform.\r\n   * @returns {string} The transformed value.\r\n   */\r\n\r\n  function toParamCase(value) {\r\n    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\r\n  }\r\n  /**\r\n   * Get data from the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {string} name - The data key to get.\r\n   * @returns {string} The data value.\r\n   */\r\n\r\n  function getData(element, name) {\r\n    if (isObject(element[name])) {\r\n      return element[name];\r\n    }\r\n\r\n    if (element.dataset) {\r\n      return element.dataset[name];\r\n    }\r\n\r\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\r\n  }\r\n  /**\r\n   * Set data to the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {string} name - The data key to set.\r\n   * @param {string} data - The data value.\r\n   */\r\n\r\n  function setData(element, name, data) {\r\n    if (isObject(data)) {\r\n      element[name] = data;\r\n    } else if (element.dataset) {\r\n      element.dataset[name] = data;\r\n    } else {\r\n      element.setAttribute(\"data-\".concat(toParamCase(name)), data);\r\n    }\r\n  }\r\n  /**\r\n   * Remove data from the given element.\r\n   * @param {Element} element - The target element.\r\n   * @param {string} name - The data key to remove.\r\n   */\r\n\r\n  function removeData(element, name) {\r\n    if (isObject(element[name])) {\r\n      try {\r\n        delete element[name];\r\n      } catch (error) {\r\n        element[name] = undefined;\r\n      }\r\n    } else if (element.dataset) {\r\n      // #128 Safari not allows to delete dataset property\r\n      try {\r\n        delete element.dataset[name];\r\n      } catch (error) {\r\n        element.dataset[name] = undefined;\r\n      }\r\n    } else {\r\n      element.removeAttribute(\"data-\".concat(toParamCase(name)));\r\n    }\r\n  }\r\n  var REGEXP_SPACES = /\\s\\s*/;\r\n\r\n  var onceSupported = function () {\r\n    var supported = false;\r\n\r\n    if (IS_BROWSER) {\r\n      var once = false;\r\n\r\n      var listener = function listener() {};\r\n\r\n      var options = Object.defineProperty({}, 'once', {\r\n        get: function get() {\r\n          supported = true;\r\n          return once;\r\n        },\r\n\r\n        /**\r\n         * This setter can fix a `TypeError` in strict mode\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\r\n         * @param {boolean} value - The value to set\r\n         */\r\n        set: function set(value) {\r\n          once = value;\r\n        }\r\n      });\r\n      WINDOW.addEventListener('test', listener, options);\r\n      WINDOW.removeEventListener('test', listener, options);\r\n    }\r\n\r\n    return supported;\r\n  }();\r\n  /**\r\n   * Remove event listener from the target element.\r\n   * @param {Element} element - The event target.\r\n   * @param {string} type - The event type(s).\r\n   * @param {Function} listener - The event listener.\r\n   * @param {Object} options - The event options.\r\n   */\r\n\r\n\r\n  function removeListener(element, type, listener) {\r\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n    var handler = listener;\r\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\r\n      if (!onceSupported) {\r\n        var listeners = element.listeners;\r\n\r\n        if (listeners && listeners[event] && listeners[event][listener]) {\r\n          handler = listeners[event][listener];\r\n          delete listeners[event][listener];\r\n\r\n          if (Object.keys(listeners[event]).length === 0) {\r\n            delete listeners[event];\r\n          }\r\n\r\n          if (Object.keys(listeners).length === 0) {\r\n            delete element.listeners;\r\n          }\r\n        }\r\n      }\r\n\r\n      element.removeEventListener(event, handler, options);\r\n    });\r\n  }\r\n  /**\r\n   * Add event listener to the target element.\r\n   * @param {Element} element - The event target.\r\n   * @param {string} type - The event type(s).\r\n   * @param {Function} listener - The event listener.\r\n   * @param {Object} options - The event options.\r\n   */\r\n\r\n  function addListener(element, type, listener) {\r\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n    var _handler = listener;\r\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\r\n      if (options.once && !onceSupported) {\r\n        var _element$listeners = element.listeners,\r\n            listeners = _element$listeners === void 0 ? {} : _element$listeners;\r\n\r\n        _handler = function handler() {\r\n          delete listeners[event][listener];\r\n          element.removeEventListener(event, _handler, options);\r\n\r\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n            args[_key2] = arguments[_key2];\r\n          }\r\n\r\n          listener.apply(element, args);\r\n        };\r\n\r\n        if (!listeners[event]) {\r\n          listeners[event] = {};\r\n        }\r\n\r\n        if (listeners[event][listener]) {\r\n          element.removeEventListener(event, listeners[event][listener], options);\r\n        }\r\n\r\n        listeners[event][listener] = _handler;\r\n        element.listeners = listeners;\r\n      }\r\n\r\n      element.addEventListener(event, _handler, options);\r\n    });\r\n  }\r\n  /**\r\n   * Dispatch event on the target element.\r\n   * @param {Element} element - The event target.\r\n   * @param {string} type - The event type(s).\r\n   * @param {Object} data - The additional event data.\r\n   * @returns {boolean} Indicate if the event is default prevented or not.\r\n   */\r\n\r\n  function dispatchEvent(element, type, data) {\r\n    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\r\n\r\n    if (isFunction(Event) && isFunction(CustomEvent)) {\r\n      event = new CustomEvent(type, {\r\n        detail: data,\r\n        bubbles: true,\r\n        cancelable: true\r\n      });\r\n    } else {\r\n      event = document.createEvent('CustomEvent');\r\n      event.initCustomEvent(type, true, true, data);\r\n    }\r\n\r\n    return element.dispatchEvent(event);\r\n  }\r\n  /**\r\n   * Get the offset base on the document.\r\n   * @param {Element} element - The target element.\r\n   * @returns {Object} The offset data.\r\n   */\r\n\r\n  function getOffset(element) {\r\n    var box = element.getBoundingClientRect();\r\n    return {\r\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\r\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\r\n    };\r\n  }\r\n  var location = WINDOW.location;\r\n  var REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\r\n  /**\r\n   * Check if the given URL is a cross origin URL.\r\n   * @param {string} url - The target URL.\r\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\r\n   */\r\n\r\n  function isCrossOriginURL(url) {\r\n    var parts = url.match(REGEXP_ORIGINS);\r\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\r\n  }\r\n  /**\r\n   * Add timestamp to the given URL.\r\n   * @param {string} url - The target URL.\r\n   * @returns {string} The result URL.\r\n   */\r\n\r\n  function addTimestamp(url) {\r\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\r\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\r\n  }\r\n  /**\r\n   * Get transforms base on the given object.\r\n   * @param {Object} obj - The target object.\r\n   * @returns {string} A string contains transform values.\r\n   */\r\n\r\n  function getTransforms(_ref) {\r\n    var rotate = _ref.rotate,\r\n        scaleX = _ref.scaleX,\r\n        scaleY = _ref.scaleY,\r\n        translateX = _ref.translateX,\r\n        translateY = _ref.translateY;\r\n    var values = [];\r\n\r\n    if (isNumber(translateX) && translateX !== 0) {\r\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\r\n    }\r\n\r\n    if (isNumber(translateY) && translateY !== 0) {\r\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\r\n    } // Rotate should come first before scale to match orientation transform\r\n\r\n\r\n    if (isNumber(rotate) && rotate !== 0) {\r\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\r\n    }\r\n\r\n    if (isNumber(scaleX) && scaleX !== 1) {\r\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\r\n    }\r\n\r\n    if (isNumber(scaleY) && scaleY !== 1) {\r\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\r\n    }\r\n\r\n    var transform = values.length ? values.join(' ') : 'none';\r\n    return {\r\n      WebkitTransform: transform,\r\n      msTransform: transform,\r\n      transform: transform\r\n    };\r\n  }\r\n  /**\r\n   * Get the max ratio of a group of pointers.\r\n   * @param {string} pointers - The target pointers.\r\n   * @returns {number} The result ratio.\r\n   */\r\n\r\n  function getMaxZoomRatio(pointers) {\r\n    var pointers2 = _objectSpread2({}, pointers);\r\n\r\n    var maxRatio = 0;\r\n    forEach(pointers, function (pointer, pointerId) {\r\n      delete pointers2[pointerId];\r\n      forEach(pointers2, function (pointer2) {\r\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\r\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\r\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\r\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\r\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\r\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\r\n        var ratio = (z2 - z1) / z1;\r\n\r\n        if (Math.abs(ratio) > Math.abs(maxRatio)) {\r\n          maxRatio = ratio;\r\n        }\r\n      });\r\n    });\r\n    return maxRatio;\r\n  }\r\n  /**\r\n   * Get a pointer from an event object.\r\n   * @param {Object} event - The target event object.\r\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\r\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\r\n   */\r\n\r\n  function getPointer(_ref2, endOnly) {\r\n    var pageX = _ref2.pageX,\r\n        pageY = _ref2.pageY;\r\n    var end = {\r\n      endX: pageX,\r\n      endY: pageY\r\n    };\r\n    return endOnly ? end : _objectSpread2({\r\n      startX: pageX,\r\n      startY: pageY\r\n    }, end);\r\n  }\r\n  /**\r\n   * Get the center point coordinate of a group of pointers.\r\n   * @param {Object} pointers - The target pointers.\r\n   * @returns {Object} The center point coordinate.\r\n   */\r\n\r\n  function getPointersCenter(pointers) {\r\n    var pageX = 0;\r\n    var pageY = 0;\r\n    var count = 0;\r\n    forEach(pointers, function (_ref3) {\r\n      var startX = _ref3.startX,\r\n          startY = _ref3.startY;\r\n      pageX += startX;\r\n      pageY += startY;\r\n      count += 1;\r\n    });\r\n    pageX /= count;\r\n    pageY /= count;\r\n    return {\r\n      pageX: pageX,\r\n      pageY: pageY\r\n    };\r\n  }\r\n  /**\r\n   * Get the max sizes in a rectangle under the given aspect ratio.\r\n   * @param {Object} data - The original sizes.\r\n   * @param {string} [type='contain'] - The adjust type.\r\n   * @returns {Object} The result sizes.\r\n   */\r\n\r\n  function getAdjustedSizes(_ref4) // or 'cover'\r\n  {\r\n    var aspectRatio = _ref4.aspectRatio,\r\n        height = _ref4.height,\r\n        width = _ref4.width;\r\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\r\n    var isValidWidth = isPositiveNumber(width);\r\n    var isValidHeight = isPositiveNumber(height);\r\n\r\n    if (isValidWidth && isValidHeight) {\r\n      var adjustedWidth = height * aspectRatio;\r\n\r\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\r\n        height = width / aspectRatio;\r\n      } else {\r\n        width = height * aspectRatio;\r\n      }\r\n    } else if (isValidWidth) {\r\n      height = width / aspectRatio;\r\n    } else if (isValidHeight) {\r\n      width = height * aspectRatio;\r\n    }\r\n\r\n    return {\r\n      width: width,\r\n      height: height\r\n    };\r\n  }\r\n  /**\r\n   * Get the new sizes of a rectangle after rotated.\r\n   * @param {Object} data - The original sizes.\r\n   * @returns {Object} The result sizes.\r\n   */\r\n\r\n  function getRotatedSizes(_ref5) {\r\n    var width = _ref5.width,\r\n        height = _ref5.height,\r\n        degree = _ref5.degree;\r\n    degree = Math.abs(degree) % 180;\r\n\r\n    if (degree === 90) {\r\n      return {\r\n        width: height,\r\n        height: width\r\n      };\r\n    }\r\n\r\n    var arc = degree % 90 * Math.PI / 180;\r\n    var sinArc = Math.sin(arc);\r\n    var cosArc = Math.cos(arc);\r\n    var newWidth = width * cosArc + height * sinArc;\r\n    var newHeight = width * sinArc + height * cosArc;\r\n    return degree > 90 ? {\r\n      width: newHeight,\r\n      height: newWidth\r\n    } : {\r\n      width: newWidth,\r\n      height: newHeight\r\n    };\r\n  }\r\n  /**\r\n   * Get a canvas which drew the given image.\r\n   * @param {HTMLImageElement} image - The image for drawing.\r\n   * @param {Object} imageData - The image data.\r\n   * @param {Object} canvasData - The canvas data.\r\n   * @param {Object} options - The options.\r\n   * @returns {HTMLCanvasElement} The result canvas.\r\n   */\r\n\r\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\r\n    var imageAspectRatio = _ref6.aspectRatio,\r\n        imageNaturalWidth = _ref6.naturalWidth,\r\n        imageNaturalHeight = _ref6.naturalHeight,\r\n        _ref6$rotate = _ref6.rotate,\r\n        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\r\n        _ref6$scaleX = _ref6.scaleX,\r\n        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\r\n        _ref6$scaleY = _ref6.scaleY,\r\n        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\r\n    var aspectRatio = _ref7.aspectRatio,\r\n        naturalWidth = _ref7.naturalWidth,\r\n        naturalHeight = _ref7.naturalHeight;\r\n    var _ref8$fillColor = _ref8.fillColor,\r\n        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\r\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\r\n        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\r\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\r\n        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\r\n        _ref8$maxWidth = _ref8.maxWidth,\r\n        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\r\n        _ref8$maxHeight = _ref8.maxHeight,\r\n        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\r\n        _ref8$minWidth = _ref8.minWidth,\r\n        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\r\n        _ref8$minHeight = _ref8.minHeight,\r\n        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    var maxSizes = getAdjustedSizes({\r\n      aspectRatio: aspectRatio,\r\n      width: maxWidth,\r\n      height: maxHeight\r\n    });\r\n    var minSizes = getAdjustedSizes({\r\n      aspectRatio: aspectRatio,\r\n      width: minWidth,\r\n      height: minHeight\r\n    }, 'cover');\r\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\r\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\r\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\r\n\r\n    var destMaxSizes = getAdjustedSizes({\r\n      aspectRatio: imageAspectRatio,\r\n      width: maxWidth,\r\n      height: maxHeight\r\n    });\r\n    var destMinSizes = getAdjustedSizes({\r\n      aspectRatio: imageAspectRatio,\r\n      width: minWidth,\r\n      height: minHeight\r\n    }, 'cover');\r\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\r\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\r\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\r\n    canvas.width = normalizeDecimalNumber(width);\r\n    canvas.height = normalizeDecimalNumber(height);\r\n    context.fillStyle = fillColor;\r\n    context.fillRect(0, 0, width, height);\r\n    context.save();\r\n    context.translate(width / 2, height / 2);\r\n    context.rotate(rotate * Math.PI / 180);\r\n    context.scale(scaleX, scaleY);\r\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\r\n    context.imageSmoothingQuality = imageSmoothingQuality;\r\n    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\r\n      return Math.floor(normalizeDecimalNumber(param));\r\n    }))));\r\n    context.restore();\r\n    return canvas;\r\n  }\r\n  var fromCharCode = String.fromCharCode;\r\n  /**\r\n   * Get string from char code in data view.\r\n   * @param {DataView} dataView - The data view for read.\r\n   * @param {number} start - The start index.\r\n   * @param {number} length - The read length.\r\n   * @returns {string} The read result.\r\n   */\r\n\r\n  function getStringFromCharCode(dataView, start, length) {\r\n    var str = '';\r\n    length += start;\r\n\r\n    for (var i = start; i < length; i += 1) {\r\n      str += fromCharCode(dataView.getUint8(i));\r\n    }\r\n\r\n    return str;\r\n  }\r\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\r\n  /**\r\n   * Transform Data URL to array buffer.\r\n   * @param {string} dataURL - The Data URL to transform.\r\n   * @returns {ArrayBuffer} The result array buffer.\r\n   */\r\n\r\n  function dataURLToArrayBuffer(dataURL) {\r\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\r\n    var binary = atob(base64);\r\n    var arrayBuffer = new ArrayBuffer(binary.length);\r\n    var uint8 = new Uint8Array(arrayBuffer);\r\n    forEach(uint8, function (value, i) {\r\n      uint8[i] = binary.charCodeAt(i);\r\n    });\r\n    return arrayBuffer;\r\n  }\r\n  /**\r\n   * Transform array buffer to Data URL.\r\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\r\n   * @param {string} mimeType - The mime type of the Data URL.\r\n   * @returns {string} The result Data URL.\r\n   */\r\n\r\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\r\n    var chunks = []; // Chunk Typed Array for better performance (#435)\r\n\r\n    var chunkSize = 8192;\r\n    var uint8 = new Uint8Array(arrayBuffer);\r\n\r\n    while (uint8.length > 0) {\r\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\r\n      // eslint-disable-next-line prefer-spread\r\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\r\n      uint8 = uint8.subarray(chunkSize);\r\n    }\r\n\r\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\r\n  }\r\n  /**\r\n   * Get orientation value from given array buffer.\r\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\r\n   * @returns {number} The read orientation value.\r\n   */\r\n\r\n  function resetAndGetOrientation(arrayBuffer) {\r\n    var dataView = new DataView(arrayBuffer);\r\n    var orientation; // Ignores range error when the image does not have correct Exif information\r\n\r\n    try {\r\n      var littleEndian;\r\n      var app1Start;\r\n      var ifdStart; // Only handle JPEG image (start by 0xFFD8)\r\n\r\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\r\n        var length = dataView.byteLength;\r\n        var offset = 2;\r\n\r\n        while (offset + 1 < length) {\r\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\r\n            app1Start = offset;\r\n            break;\r\n          }\r\n\r\n          offset += 1;\r\n        }\r\n      }\r\n\r\n      if (app1Start) {\r\n        var exifIDCode = app1Start + 4;\r\n        var tiffOffset = app1Start + 10;\r\n\r\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\r\n          var endianness = dataView.getUint16(tiffOffset);\r\n          littleEndian = endianness === 0x4949;\r\n\r\n          if (littleEndian || endianness === 0x4D4D\r\n          /* bigEndian */\r\n          ) {\r\n              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\r\n                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\r\n\r\n                if (firstIFDOffset >= 0x00000008) {\r\n                  ifdStart = tiffOffset + firstIFDOffset;\r\n                }\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      if (ifdStart) {\r\n        var _length = dataView.getUint16(ifdStart, littleEndian);\r\n\r\n        var _offset;\r\n\r\n        var i;\r\n\r\n        for (i = 0; i < _length; i += 1) {\r\n          _offset = ifdStart + i * 12 + 2;\r\n\r\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112\r\n          /* Orientation */\r\n          ) {\r\n              // 8 is the offset of the current tag's value\r\n              _offset += 8; // Get the original orientation value\r\n\r\n              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\r\n\r\n              dataView.setUint16(_offset, 1, littleEndian);\r\n              break;\r\n            }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      orientation = 1;\r\n    }\r\n\r\n    return orientation;\r\n  }\r\n  /**\r\n   * Parse Exif Orientation value.\r\n   * @param {number} orientation - The orientation to parse.\r\n   * @returns {Object} The parsed result.\r\n   */\r\n\r\n  function parseOrientation(orientation) {\r\n    var rotate = 0;\r\n    var scaleX = 1;\r\n    var scaleY = 1;\r\n\r\n    switch (orientation) {\r\n      // Flip horizontal\r\n      case 2:\r\n        scaleX = -1;\r\n        break;\r\n      // Rotate left 180°\r\n\r\n      case 3:\r\n        rotate = -180;\r\n        break;\r\n      // Flip vertical\r\n\r\n      case 4:\r\n        scaleY = -1;\r\n        break;\r\n      // Flip vertical and rotate right 90°\r\n\r\n      case 5:\r\n        rotate = 90;\r\n        scaleY = -1;\r\n        break;\r\n      // Rotate right 90°\r\n\r\n      case 6:\r\n        rotate = 90;\r\n        break;\r\n      // Flip horizontal and rotate right 90°\r\n\r\n      case 7:\r\n        rotate = 90;\r\n        scaleX = -1;\r\n        break;\r\n      // Rotate left 90°\r\n\r\n      case 8:\r\n        rotate = -90;\r\n        break;\r\n    }\r\n\r\n    return {\r\n      rotate: rotate,\r\n      scaleX: scaleX,\r\n      scaleY: scaleY\r\n    };\r\n  }\r\n\r\n  var render = {\r\n    render: function render() {\r\n      this.initContainer();\r\n      this.initCanvas();\r\n      this.initCropBox();\r\n      this.renderCanvas();\r\n\r\n      if (this.cropped) {\r\n        this.renderCropBox();\r\n      }\r\n    },\r\n    initContainer: function initContainer() {\r\n      var element = this.element,\r\n          options = this.options,\r\n          container = this.container,\r\n          cropper = this.cropper;\r\n      var minWidth = Number(options.minContainerWidth);\r\n      var minHeight = Number(options.minContainerHeight);\r\n      addClass(cropper, CLASS_HIDDEN);\r\n      removeClass(element, CLASS_HIDDEN);\r\n      var containerData = {\r\n        width: Math.max(container.offsetWidth, minWidth >= 0 ? minWidth : MIN_CONTAINER_WIDTH),\r\n        height: Math.max(container.offsetHeight, minHeight >= 0 ? minHeight : MIN_CONTAINER_HEIGHT)\r\n      };\r\n      this.containerData = containerData;\r\n      setStyle(cropper, {\r\n        width: containerData.width,\r\n        height: containerData.height\r\n      });\r\n      addClass(element, CLASS_HIDDEN);\r\n      removeClass(cropper, CLASS_HIDDEN);\r\n    },\r\n    // Canvas (image wrapper)\r\n    initCanvas: function initCanvas() {\r\n      var containerData = this.containerData,\r\n          imageData = this.imageData;\r\n      var viewMode = this.options.viewMode;\r\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\r\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\r\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\r\n      var aspectRatio = naturalWidth / naturalHeight;\r\n      var canvasWidth = containerData.width;\r\n      var canvasHeight = containerData.height;\r\n\r\n      if (containerData.height * aspectRatio > containerData.width) {\r\n        if (viewMode === 3) {\r\n          canvasWidth = containerData.height * aspectRatio;\r\n        } else {\r\n          canvasHeight = containerData.width / aspectRatio;\r\n        }\r\n      } else if (viewMode === 3) {\r\n        canvasHeight = containerData.width / aspectRatio;\r\n      } else {\r\n        canvasWidth = containerData.height * aspectRatio;\r\n      }\r\n\r\n      var canvasData = {\r\n        aspectRatio: aspectRatio,\r\n        naturalWidth: naturalWidth,\r\n        naturalHeight: naturalHeight,\r\n        width: canvasWidth,\r\n        height: canvasHeight\r\n      };\r\n      this.canvasData = canvasData;\r\n      this.limited = viewMode === 1 || viewMode === 2;\r\n      this.limitCanvas(true, true);\r\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\r\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\r\n      canvasData.left = (containerData.width - canvasData.width) / 2;\r\n      canvasData.top = (containerData.height - canvasData.height) / 2;\r\n      canvasData.oldLeft = canvasData.left;\r\n      canvasData.oldTop = canvasData.top;\r\n      this.initialCanvasData = assign({}, canvasData);\r\n    },\r\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\r\n      var options = this.options,\r\n          containerData = this.containerData,\r\n          canvasData = this.canvasData,\r\n          cropBoxData = this.cropBoxData;\r\n      var viewMode = options.viewMode;\r\n      var aspectRatio = canvasData.aspectRatio;\r\n      var cropped = this.cropped && cropBoxData;\r\n\r\n      if (sizeLimited) {\r\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\r\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\r\n\r\n        if (viewMode > 1) {\r\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\r\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\r\n\r\n          if (viewMode === 3) {\r\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\r\n              minCanvasWidth = minCanvasHeight * aspectRatio;\r\n            } else {\r\n              minCanvasHeight = minCanvasWidth / aspectRatio;\r\n            }\r\n          }\r\n        } else if (viewMode > 0) {\r\n          if (minCanvasWidth) {\r\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\r\n          } else if (minCanvasHeight) {\r\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\r\n          } else if (cropped) {\r\n            minCanvasWidth = cropBoxData.width;\r\n            minCanvasHeight = cropBoxData.height;\r\n\r\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\r\n              minCanvasWidth = minCanvasHeight * aspectRatio;\r\n            } else {\r\n              minCanvasHeight = minCanvasWidth / aspectRatio;\r\n            }\r\n          }\r\n        }\r\n\r\n        var _getAdjustedSizes = getAdjustedSizes({\r\n          aspectRatio: aspectRatio,\r\n          width: minCanvasWidth,\r\n          height: minCanvasHeight\r\n        });\r\n\r\n        minCanvasWidth = _getAdjustedSizes.width;\r\n        minCanvasHeight = _getAdjustedSizes.height;\r\n        canvasData.minWidth = minCanvasWidth;\r\n        canvasData.minHeight = minCanvasHeight;\r\n        canvasData.maxWidth = Infinity;\r\n        canvasData.maxHeight = Infinity;\r\n      }\r\n\r\n      if (positionLimited) {\r\n        if (viewMode > (cropped ? 0 : 1)) {\r\n          var newCanvasLeft = containerData.width - canvasData.width;\r\n          var newCanvasTop = containerData.height - canvasData.height;\r\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\r\n          canvasData.minTop = Math.min(0, newCanvasTop);\r\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\r\n          canvasData.maxTop = Math.max(0, newCanvasTop);\r\n\r\n          if (cropped && this.limited) {\r\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\r\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\r\n            canvasData.maxLeft = cropBoxData.left;\r\n            canvasData.maxTop = cropBoxData.top;\r\n\r\n            if (viewMode === 2) {\r\n              if (canvasData.width >= containerData.width) {\r\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\r\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\r\n              }\r\n\r\n              if (canvasData.height >= containerData.height) {\r\n                canvasData.minTop = Math.min(0, newCanvasTop);\r\n                canvasData.maxTop = Math.max(0, newCanvasTop);\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          canvasData.minLeft = -canvasData.width;\r\n          canvasData.minTop = -canvasData.height;\r\n          canvasData.maxLeft = containerData.width;\r\n          canvasData.maxTop = containerData.height;\r\n        }\r\n      }\r\n    },\r\n    renderCanvas: function renderCanvas(changed, transformed) {\r\n      var canvasData = this.canvasData,\r\n          imageData = this.imageData;\r\n\r\n      if (transformed) {\r\n        var _getRotatedSizes = getRotatedSizes({\r\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\r\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\r\n          degree: imageData.rotate || 0\r\n        }),\r\n            naturalWidth = _getRotatedSizes.width,\r\n            naturalHeight = _getRotatedSizes.height;\r\n\r\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\r\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\r\n        canvasData.left -= (width - canvasData.width) / 2;\r\n        canvasData.top -= (height - canvasData.height) / 2;\r\n        canvasData.width = width;\r\n        canvasData.height = height;\r\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\r\n        canvasData.naturalWidth = naturalWidth;\r\n        canvasData.naturalHeight = naturalHeight;\r\n        this.limitCanvas(true, false);\r\n      }\r\n\r\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\r\n        canvasData.left = canvasData.oldLeft;\r\n      }\r\n\r\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\r\n        canvasData.top = canvasData.oldTop;\r\n      }\r\n\r\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\r\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\r\n      this.limitCanvas(false, true);\r\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\r\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\r\n      canvasData.oldLeft = canvasData.left;\r\n      canvasData.oldTop = canvasData.top;\r\n      setStyle(this.canvas, assign({\r\n        width: canvasData.width,\r\n        height: canvasData.height\r\n      }, getTransforms({\r\n        translateX: canvasData.left,\r\n        translateY: canvasData.top\r\n      })));\r\n      this.renderImage(changed);\r\n\r\n      if (this.cropped && this.limited) {\r\n        this.limitCropBox(true, true);\r\n      }\r\n    },\r\n    renderImage: function renderImage(changed) {\r\n      var canvasData = this.canvasData,\r\n          imageData = this.imageData;\r\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\r\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\r\n      assign(imageData, {\r\n        width: width,\r\n        height: height,\r\n        left: (canvasData.width - width) / 2,\r\n        top: (canvasData.height - height) / 2\r\n      });\r\n      setStyle(this.image, assign({\r\n        width: imageData.width,\r\n        height: imageData.height\r\n      }, getTransforms(assign({\r\n        translateX: imageData.left,\r\n        translateY: imageData.top\r\n      }, imageData))));\r\n\r\n      if (changed) {\r\n        this.output();\r\n      }\r\n    },\r\n    initCropBox: function initCropBox() {\r\n      var options = this.options,\r\n          canvasData = this.canvasData;\r\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\r\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\r\n      var cropBoxData = {\r\n        width: canvasData.width,\r\n        height: canvasData.height\r\n      };\r\n\r\n      if (aspectRatio) {\r\n        if (canvasData.height * aspectRatio > canvasData.width) {\r\n          cropBoxData.height = cropBoxData.width / aspectRatio;\r\n        } else {\r\n          cropBoxData.width = cropBoxData.height * aspectRatio;\r\n        }\r\n      }\r\n\r\n      this.cropBoxData = cropBoxData;\r\n      this.limitCropBox(true, true); // Initialize auto crop area\r\n\r\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\r\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\r\n\r\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\r\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\r\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\r\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\r\n      cropBoxData.oldLeft = cropBoxData.left;\r\n      cropBoxData.oldTop = cropBoxData.top;\r\n      this.initialCropBoxData = assign({}, cropBoxData);\r\n    },\r\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\r\n      var options = this.options,\r\n          containerData = this.containerData,\r\n          canvasData = this.canvasData,\r\n          cropBoxData = this.cropBoxData,\r\n          limited = this.limited;\r\n      var aspectRatio = options.aspectRatio;\r\n\r\n      if (sizeLimited) {\r\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\r\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\r\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\r\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height\r\n\r\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\r\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\r\n\r\n        if (aspectRatio) {\r\n          if (minCropBoxWidth && minCropBoxHeight) {\r\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\r\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\r\n            } else {\r\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\r\n            }\r\n          } else if (minCropBoxWidth) {\r\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\r\n          } else if (minCropBoxHeight) {\r\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\r\n          }\r\n\r\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\r\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\r\n          } else {\r\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\r\n          }\r\n        } // The minWidth/Height must be less than maxWidth/Height\r\n\r\n\r\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\r\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\r\n        cropBoxData.maxWidth = maxCropBoxWidth;\r\n        cropBoxData.maxHeight = maxCropBoxHeight;\r\n      }\r\n\r\n      if (positionLimited) {\r\n        if (limited) {\r\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\r\n          cropBoxData.minTop = Math.max(0, canvasData.top);\r\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\r\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\r\n        } else {\r\n          cropBoxData.minLeft = 0;\r\n          cropBoxData.minTop = 0;\r\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\r\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\r\n        }\r\n      }\r\n    },\r\n    renderCropBox: function renderCropBox() {\r\n      var options = this.options,\r\n          containerData = this.containerData,\r\n          cropBoxData = this.cropBoxData;\r\n\r\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\r\n        cropBoxData.left = cropBoxData.oldLeft;\r\n      }\r\n\r\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\r\n        cropBoxData.top = cropBoxData.oldTop;\r\n      }\r\n\r\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\r\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\r\n      this.limitCropBox(false, true);\r\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\r\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\r\n      cropBoxData.oldLeft = cropBoxData.left;\r\n      cropBoxData.oldTop = cropBoxData.top;\r\n\r\n      if (options.movable && options.cropBoxMovable) {\r\n        // Turn to move the canvas when the crop box is equal to the container\r\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\r\n      }\r\n\r\n      setStyle(this.cropBox, assign({\r\n        width: cropBoxData.width,\r\n        height: cropBoxData.height\r\n      }, getTransforms({\r\n        translateX: cropBoxData.left,\r\n        translateY: cropBoxData.top\r\n      })));\r\n\r\n      if (this.cropped && this.limited) {\r\n        this.limitCanvas(true, true);\r\n      }\r\n\r\n      if (!this.disabled) {\r\n        this.output();\r\n      }\r\n    },\r\n    output: function output() {\r\n      this.preview();\r\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\r\n    }\r\n  };\r\n\r\n  var preview = {\r\n    initPreview: function initPreview() {\r\n      var element = this.element,\r\n          crossOrigin = this.crossOrigin;\r\n      var preview = this.options.preview;\r\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\r\n      var alt = element.alt || 'The image to preview';\r\n      var image = document.createElement('img');\r\n\r\n      if (crossOrigin) {\r\n        image.crossOrigin = crossOrigin;\r\n      }\r\n\r\n      image.src = url;\r\n      image.alt = alt;\r\n      this.viewBox.appendChild(image);\r\n      this.viewBoxImage = image;\r\n\r\n      if (!preview) {\r\n        return;\r\n      }\r\n\r\n      var previews = preview;\r\n\r\n      if (typeof preview === 'string') {\r\n        previews = element.ownerDocument.querySelectorAll(preview);\r\n      } else if (preview.querySelector) {\r\n        previews = [preview];\r\n      }\r\n\r\n      this.previews = previews;\r\n      forEach(previews, function (el) {\r\n        var img = document.createElement('img'); // Save the original size for recover\r\n\r\n        setData(el, DATA_PREVIEW, {\r\n          width: el.offsetWidth,\r\n          height: el.offsetHeight,\r\n          html: el.innerHTML\r\n        });\r\n\r\n        if (crossOrigin) {\r\n          img.crossOrigin = crossOrigin;\r\n        }\r\n\r\n        img.src = url;\r\n        img.alt = alt;\r\n        /**\r\n         * Override img element styles\r\n         * Add `display:block` to avoid margin top issue\r\n         * Add `height:auto` to override `height` attribute on IE8\r\n         * (Occur only when margin-top <= -height)\r\n         */\r\n\r\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\r\n        el.innerHTML = '';\r\n        el.appendChild(img);\r\n      });\r\n    },\r\n    resetPreview: function resetPreview() {\r\n      forEach(this.previews, function (element) {\r\n        var data = getData(element, DATA_PREVIEW);\r\n        setStyle(element, {\r\n          width: data.width,\r\n          height: data.height\r\n        });\r\n        element.innerHTML = data.html;\r\n        removeData(element, DATA_PREVIEW);\r\n      });\r\n    },\r\n    preview: function preview() {\r\n      var imageData = this.imageData,\r\n          canvasData = this.canvasData,\r\n          cropBoxData = this.cropBoxData;\r\n      var cropBoxWidth = cropBoxData.width,\r\n          cropBoxHeight = cropBoxData.height;\r\n      var width = imageData.width,\r\n          height = imageData.height;\r\n      var left = cropBoxData.left - canvasData.left - imageData.left;\r\n      var top = cropBoxData.top - canvasData.top - imageData.top;\r\n\r\n      if (!this.cropped || this.disabled) {\r\n        return;\r\n      }\r\n\r\n      setStyle(this.viewBoxImage, assign({\r\n        width: width,\r\n        height: height\r\n      }, getTransforms(assign({\r\n        translateX: -left,\r\n        translateY: -top\r\n      }, imageData))));\r\n      forEach(this.previews, function (element) {\r\n        var data = getData(element, DATA_PREVIEW);\r\n        var originalWidth = data.width;\r\n        var originalHeight = data.height;\r\n        var newWidth = originalWidth;\r\n        var newHeight = originalHeight;\r\n        var ratio = 1;\r\n\r\n        if (cropBoxWidth) {\r\n          ratio = originalWidth / cropBoxWidth;\r\n          newHeight = cropBoxHeight * ratio;\r\n        }\r\n\r\n        if (cropBoxHeight && newHeight > originalHeight) {\r\n          ratio = originalHeight / cropBoxHeight;\r\n          newWidth = cropBoxWidth * ratio;\r\n          newHeight = originalHeight;\r\n        }\r\n\r\n        setStyle(element, {\r\n          width: newWidth,\r\n          height: newHeight\r\n        });\r\n        setStyle(element.getElementsByTagName('img')[0], assign({\r\n          width: width * ratio,\r\n          height: height * ratio\r\n        }, getTransforms(assign({\r\n          translateX: -left * ratio,\r\n          translateY: -top * ratio\r\n        }, imageData))));\r\n      });\r\n    }\r\n  };\r\n\r\n  var events = {\r\n    bind: function bind() {\r\n      var element = this.element,\r\n          options = this.options,\r\n          cropper = this.cropper;\r\n\r\n      if (isFunction(options.cropstart)) {\r\n        addListener(element, EVENT_CROP_START, options.cropstart);\r\n      }\r\n\r\n      if (isFunction(options.cropmove)) {\r\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\r\n      }\r\n\r\n      if (isFunction(options.cropend)) {\r\n        addListener(element, EVENT_CROP_END, options.cropend);\r\n      }\r\n\r\n      if (isFunction(options.crop)) {\r\n        addListener(element, EVENT_CROP, options.crop);\r\n      }\r\n\r\n      if (isFunction(options.zoom)) {\r\n        addListener(element, EVENT_ZOOM, options.zoom);\r\n      }\r\n\r\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\r\n\r\n      if (options.zoomable && options.zoomOnWheel) {\r\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\r\n          passive: false,\r\n          capture: true\r\n        });\r\n      }\r\n\r\n      if (options.toggleDragModeOnDblclick) {\r\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\r\n      }\r\n\r\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\r\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\r\n\r\n      if (options.responsive) {\r\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\r\n      }\r\n    },\r\n    unbind: function unbind() {\r\n      var element = this.element,\r\n          options = this.options,\r\n          cropper = this.cropper;\r\n\r\n      if (isFunction(options.cropstart)) {\r\n        removeListener(element, EVENT_CROP_START, options.cropstart);\r\n      }\r\n\r\n      if (isFunction(options.cropmove)) {\r\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\r\n      }\r\n\r\n      if (isFunction(options.cropend)) {\r\n        removeListener(element, EVENT_CROP_END, options.cropend);\r\n      }\r\n\r\n      if (isFunction(options.crop)) {\r\n        removeListener(element, EVENT_CROP, options.crop);\r\n      }\r\n\r\n      if (isFunction(options.zoom)) {\r\n        removeListener(element, EVENT_ZOOM, options.zoom);\r\n      }\r\n\r\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\r\n\r\n      if (options.zoomable && options.zoomOnWheel) {\r\n        removeListener(cropper, EVENT_WHEEL, this.onWheel, {\r\n          passive: false,\r\n          capture: true\r\n        });\r\n      }\r\n\r\n      if (options.toggleDragModeOnDblclick) {\r\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\r\n      }\r\n\r\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\r\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\r\n\r\n      if (options.responsive) {\r\n        removeListener(window, EVENT_RESIZE, this.onResize);\r\n      }\r\n    }\r\n  };\r\n\r\n  var handlers = {\r\n    resize: function resize() {\r\n      if (this.disabled) {\r\n        return;\r\n      }\r\n\r\n      var options = this.options,\r\n          container = this.container,\r\n          containerData = this.containerData;\r\n      var ratioX = container.offsetWidth / containerData.width;\r\n      var ratioY = container.offsetHeight / containerData.height;\r\n      var ratio = Math.abs(ratioX - 1) > Math.abs(ratioY - 1) ? ratioX : ratioY; // Resize when width changed or height changed\r\n\r\n      if (ratio !== 1) {\r\n        var canvasData;\r\n        var cropBoxData;\r\n\r\n        if (options.restore) {\r\n          canvasData = this.getCanvasData();\r\n          cropBoxData = this.getCropBoxData();\r\n        }\r\n\r\n        this.render();\r\n\r\n        if (options.restore) {\r\n          this.setCanvasData(forEach(canvasData, function (n, i) {\r\n            canvasData[i] = n * ratio;\r\n          }));\r\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\r\n            cropBoxData[i] = n * ratio;\r\n          }));\r\n        }\r\n      }\r\n    },\r\n    dblclick: function dblclick() {\r\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\r\n        return;\r\n      }\r\n\r\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\r\n    },\r\n    wheel: function wheel(event) {\r\n      var _this = this;\r\n\r\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\r\n      var delta = 1;\r\n\r\n      if (this.disabled) {\r\n        return;\r\n      }\r\n\r\n      event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\r\n\r\n      if (this.wheeling) {\r\n        return;\r\n      }\r\n\r\n      this.wheeling = true;\r\n      setTimeout(function () {\r\n        _this.wheeling = false;\r\n      }, 50);\r\n\r\n      if (event.deltaY) {\r\n        delta = event.deltaY > 0 ? 1 : -1;\r\n      } else if (event.wheelDelta) {\r\n        delta = -event.wheelDelta / 120;\r\n      } else if (event.detail) {\r\n        delta = event.detail > 0 ? 1 : -1;\r\n      }\r\n\r\n      this.zoom(-delta * ratio, event);\r\n    },\r\n    cropStart: function cropStart(event) {\r\n      var buttons = event.buttons,\r\n          button = event.button;\r\n\r\n      if (this.disabled // Handle mouse event and pointer event and ignore touch event\r\n      || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && ( // No primary button (Usually the left button)\r\n      isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu\r\n      || event.ctrlKey)) {\r\n        return;\r\n      }\r\n\r\n      var options = this.options,\r\n          pointers = this.pointers;\r\n      var action;\r\n\r\n      if (event.changedTouches) {\r\n        // Handle touch event\r\n        forEach(event.changedTouches, function (touch) {\r\n          pointers[touch.identifier] = getPointer(touch);\r\n        });\r\n      } else {\r\n        // Handle mouse event and pointer event\r\n        pointers[event.pointerId || 0] = getPointer(event);\r\n      }\r\n\r\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\r\n        action = ACTION_ZOOM;\r\n      } else {\r\n        action = getData(event.target, DATA_ACTION);\r\n      }\r\n\r\n      if (!REGEXP_ACTIONS.test(action)) {\r\n        return;\r\n      }\r\n\r\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\r\n        originalEvent: event,\r\n        action: action\r\n      }) === false) {\r\n        return;\r\n      } // This line is required for preventing page zooming in iOS browsers\r\n\r\n\r\n      event.preventDefault();\r\n      this.action = action;\r\n      this.cropping = false;\r\n\r\n      if (action === ACTION_CROP) {\r\n        this.cropping = true;\r\n        addClass(this.dragBox, CLASS_MODAL);\r\n      }\r\n    },\r\n    cropMove: function cropMove(event) {\r\n      var action = this.action;\r\n\r\n      if (this.disabled || !action) {\r\n        return;\r\n      }\r\n\r\n      var pointers = this.pointers;\r\n      event.preventDefault();\r\n\r\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\r\n        originalEvent: event,\r\n        action: action\r\n      }) === false) {\r\n        return;\r\n      }\r\n\r\n      if (event.changedTouches) {\r\n        forEach(event.changedTouches, function (touch) {\r\n          // The first parameter should not be undefined (#432)\r\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\r\n        });\r\n      } else {\r\n        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\r\n      }\r\n\r\n      this.change(event);\r\n    },\r\n    cropEnd: function cropEnd(event) {\r\n      if (this.disabled) {\r\n        return;\r\n      }\r\n\r\n      var action = this.action,\r\n          pointers = this.pointers;\r\n\r\n      if (event.changedTouches) {\r\n        forEach(event.changedTouches, function (touch) {\r\n          delete pointers[touch.identifier];\r\n        });\r\n      } else {\r\n        delete pointers[event.pointerId || 0];\r\n      }\r\n\r\n      if (!action) {\r\n        return;\r\n      }\r\n\r\n      event.preventDefault();\r\n\r\n      if (!Object.keys(pointers).length) {\r\n        this.action = '';\r\n      }\r\n\r\n      if (this.cropping) {\r\n        this.cropping = false;\r\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\r\n      }\r\n\r\n      dispatchEvent(this.element, EVENT_CROP_END, {\r\n        originalEvent: event,\r\n        action: action\r\n      });\r\n    }\r\n  };\r\n\r\n  var change = {\r\n    change: function change(event) {\r\n      var options = this.options,\r\n          canvasData = this.canvasData,\r\n          containerData = this.containerData,\r\n          cropBoxData = this.cropBoxData,\r\n          pointers = this.pointers;\r\n      var action = this.action;\r\n      var aspectRatio = options.aspectRatio;\r\n      var left = cropBoxData.left,\r\n          top = cropBoxData.top,\r\n          width = cropBoxData.width,\r\n          height = cropBoxData.height;\r\n      var right = left + width;\r\n      var bottom = top + height;\r\n      var minLeft = 0;\r\n      var minTop = 0;\r\n      var maxWidth = containerData.width;\r\n      var maxHeight = containerData.height;\r\n      var renderable = true;\r\n      var offset; // Locking aspect ratio in \"free mode\" by holding shift key\r\n\r\n      if (!aspectRatio && event.shiftKey) {\r\n        aspectRatio = width && height ? width / height : 1;\r\n      }\r\n\r\n      if (this.limited) {\r\n        minLeft = cropBoxData.minLeft;\r\n        minTop = cropBoxData.minTop;\r\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\r\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\r\n      }\r\n\r\n      var pointer = pointers[Object.keys(pointers)[0]];\r\n      var range = {\r\n        x: pointer.endX - pointer.startX,\r\n        y: pointer.endY - pointer.startY\r\n      };\r\n\r\n      var check = function check(side) {\r\n        switch (side) {\r\n          case ACTION_EAST:\r\n            if (right + range.x > maxWidth) {\r\n              range.x = maxWidth - right;\r\n            }\r\n\r\n            break;\r\n\r\n          case ACTION_WEST:\r\n            if (left + range.x < minLeft) {\r\n              range.x = minLeft - left;\r\n            }\r\n\r\n            break;\r\n\r\n          case ACTION_NORTH:\r\n            if (top + range.y < minTop) {\r\n              range.y = minTop - top;\r\n            }\r\n\r\n            break;\r\n\r\n          case ACTION_SOUTH:\r\n            if (bottom + range.y > maxHeight) {\r\n              range.y = maxHeight - bottom;\r\n            }\r\n\r\n            break;\r\n        }\r\n      };\r\n\r\n      switch (action) {\r\n        // Move crop box\r\n        case ACTION_ALL:\r\n          left += range.x;\r\n          top += range.y;\r\n          break;\r\n        // Resize crop box\r\n\r\n        case ACTION_EAST:\r\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\r\n            renderable = false;\r\n            break;\r\n          }\r\n\r\n          check(ACTION_EAST);\r\n          width += range.x;\r\n\r\n          if (width < 0) {\r\n            action = ACTION_WEST;\r\n            width = -width;\r\n            left -= width;\r\n          }\r\n\r\n          if (aspectRatio) {\r\n            height = width / aspectRatio;\r\n            top += (cropBoxData.height - height) / 2;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_NORTH:\r\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\r\n            renderable = false;\r\n            break;\r\n          }\r\n\r\n          check(ACTION_NORTH);\r\n          height -= range.y;\r\n          top += range.y;\r\n\r\n          if (height < 0) {\r\n            action = ACTION_SOUTH;\r\n            height = -height;\r\n            top -= height;\r\n          }\r\n\r\n          if (aspectRatio) {\r\n            width = height * aspectRatio;\r\n            left += (cropBoxData.width - width) / 2;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_WEST:\r\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\r\n            renderable = false;\r\n            break;\r\n          }\r\n\r\n          check(ACTION_WEST);\r\n          width -= range.x;\r\n          left += range.x;\r\n\r\n          if (width < 0) {\r\n            action = ACTION_EAST;\r\n            width = -width;\r\n            left -= width;\r\n          }\r\n\r\n          if (aspectRatio) {\r\n            height = width / aspectRatio;\r\n            top += (cropBoxData.height - height) / 2;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_SOUTH:\r\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\r\n            renderable = false;\r\n            break;\r\n          }\r\n\r\n          check(ACTION_SOUTH);\r\n          height += range.y;\r\n\r\n          if (height < 0) {\r\n            action = ACTION_NORTH;\r\n            height = -height;\r\n            top -= height;\r\n          }\r\n\r\n          if (aspectRatio) {\r\n            width = height * aspectRatio;\r\n            left += (cropBoxData.width - width) / 2;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_NORTH_EAST:\r\n          if (aspectRatio) {\r\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\r\n              renderable = false;\r\n              break;\r\n            }\r\n\r\n            check(ACTION_NORTH);\r\n            height -= range.y;\r\n            top += range.y;\r\n            width = height * aspectRatio;\r\n          } else {\r\n            check(ACTION_NORTH);\r\n            check(ACTION_EAST);\r\n\r\n            if (range.x >= 0) {\r\n              if (right < maxWidth) {\r\n                width += range.x;\r\n              } else if (range.y <= 0 && top <= minTop) {\r\n                renderable = false;\r\n              }\r\n            } else {\r\n              width += range.x;\r\n            }\r\n\r\n            if (range.y <= 0) {\r\n              if (top > minTop) {\r\n                height -= range.y;\r\n                top += range.y;\r\n              }\r\n            } else {\r\n              height -= range.y;\r\n              top += range.y;\r\n            }\r\n          }\r\n\r\n          if (width < 0 && height < 0) {\r\n            action = ACTION_SOUTH_WEST;\r\n            height = -height;\r\n            width = -width;\r\n            top -= height;\r\n            left -= width;\r\n          } else if (width < 0) {\r\n            action = ACTION_NORTH_WEST;\r\n            width = -width;\r\n            left -= width;\r\n          } else if (height < 0) {\r\n            action = ACTION_SOUTH_EAST;\r\n            height = -height;\r\n            top -= height;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_NORTH_WEST:\r\n          if (aspectRatio) {\r\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\r\n              renderable = false;\r\n              break;\r\n            }\r\n\r\n            check(ACTION_NORTH);\r\n            height -= range.y;\r\n            top += range.y;\r\n            width = height * aspectRatio;\r\n            left += cropBoxData.width - width;\r\n          } else {\r\n            check(ACTION_NORTH);\r\n            check(ACTION_WEST);\r\n\r\n            if (range.x <= 0) {\r\n              if (left > minLeft) {\r\n                width -= range.x;\r\n                left += range.x;\r\n              } else if (range.y <= 0 && top <= minTop) {\r\n                renderable = false;\r\n              }\r\n            } else {\r\n              width -= range.x;\r\n              left += range.x;\r\n            }\r\n\r\n            if (range.y <= 0) {\r\n              if (top > minTop) {\r\n                height -= range.y;\r\n                top += range.y;\r\n              }\r\n            } else {\r\n              height -= range.y;\r\n              top += range.y;\r\n            }\r\n          }\r\n\r\n          if (width < 0 && height < 0) {\r\n            action = ACTION_SOUTH_EAST;\r\n            height = -height;\r\n            width = -width;\r\n            top -= height;\r\n            left -= width;\r\n          } else if (width < 0) {\r\n            action = ACTION_NORTH_EAST;\r\n            width = -width;\r\n            left -= width;\r\n          } else if (height < 0) {\r\n            action = ACTION_SOUTH_WEST;\r\n            height = -height;\r\n            top -= height;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_SOUTH_WEST:\r\n          if (aspectRatio) {\r\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\r\n              renderable = false;\r\n              break;\r\n            }\r\n\r\n            check(ACTION_WEST);\r\n            width -= range.x;\r\n            left += range.x;\r\n            height = width / aspectRatio;\r\n          } else {\r\n            check(ACTION_SOUTH);\r\n            check(ACTION_WEST);\r\n\r\n            if (range.x <= 0) {\r\n              if (left > minLeft) {\r\n                width -= range.x;\r\n                left += range.x;\r\n              } else if (range.y >= 0 && bottom >= maxHeight) {\r\n                renderable = false;\r\n              }\r\n            } else {\r\n              width -= range.x;\r\n              left += range.x;\r\n            }\r\n\r\n            if (range.y >= 0) {\r\n              if (bottom < maxHeight) {\r\n                height += range.y;\r\n              }\r\n            } else {\r\n              height += range.y;\r\n            }\r\n          }\r\n\r\n          if (width < 0 && height < 0) {\r\n            action = ACTION_NORTH_EAST;\r\n            height = -height;\r\n            width = -width;\r\n            top -= height;\r\n            left -= width;\r\n          } else if (width < 0) {\r\n            action = ACTION_SOUTH_EAST;\r\n            width = -width;\r\n            left -= width;\r\n          } else if (height < 0) {\r\n            action = ACTION_NORTH_WEST;\r\n            height = -height;\r\n            top -= height;\r\n          }\r\n\r\n          break;\r\n\r\n        case ACTION_SOUTH_EAST:\r\n          if (aspectRatio) {\r\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\r\n              renderable = false;\r\n              break;\r\n            }\r\n\r\n            check(ACTION_EAST);\r\n            width += range.x;\r\n            height = width / aspectRatio;\r\n          } else {\r\n            check(ACTION_SOUTH);\r\n            check(ACTION_EAST);\r\n\r\n            if (range.x >= 0) {\r\n              if (right < maxWidth) {\r\n                width += range.x;\r\n              } else if (range.y >= 0 && bottom >= maxHeight) {\r\n                renderable = false;\r\n              }\r\n            } else {\r\n              width += range.x;\r\n            }\r\n\r\n            if (range.y >= 0) {\r\n              if (bottom < maxHeight) {\r\n                height += range.y;\r\n              }\r\n            } else {\r\n              height += range.y;\r\n            }\r\n          }\r\n\r\n          if (width < 0 && height < 0) {\r\n            action = ACTION_NORTH_WEST;\r\n            height = -height;\r\n            width = -width;\r\n            top -= height;\r\n            left -= width;\r\n          } else if (width < 0) {\r\n            action = ACTION_SOUTH_WEST;\r\n            width = -width;\r\n            left -= width;\r\n          } else if (height < 0) {\r\n            action = ACTION_NORTH_EAST;\r\n            height = -height;\r\n            top -= height;\r\n          }\r\n\r\n          break;\r\n        // Move canvas\r\n\r\n        case ACTION_MOVE:\r\n          this.move(range.x, range.y);\r\n          renderable = false;\r\n          break;\r\n        // Zoom canvas\r\n\r\n        case ACTION_ZOOM:\r\n          this.zoom(getMaxZoomRatio(pointers), event);\r\n          renderable = false;\r\n          break;\r\n        // Create crop box\r\n\r\n        case ACTION_CROP:\r\n          if (!range.x || !range.y) {\r\n            renderable = false;\r\n            break;\r\n          }\r\n\r\n          offset = getOffset(this.cropper);\r\n          left = pointer.startX - offset.left;\r\n          top = pointer.startY - offset.top;\r\n          width = cropBoxData.minWidth;\r\n          height = cropBoxData.minHeight;\r\n\r\n          if (range.x > 0) {\r\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\r\n          } else if (range.x < 0) {\r\n            left -= width;\r\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\r\n          }\r\n\r\n          if (range.y < 0) {\r\n            top -= height;\r\n          } // Show the crop box if is hidden\r\n\r\n\r\n          if (!this.cropped) {\r\n            removeClass(this.cropBox, CLASS_HIDDEN);\r\n            this.cropped = true;\r\n\r\n            if (this.limited) {\r\n              this.limitCropBox(true, true);\r\n            }\r\n          }\r\n\r\n          break;\r\n      }\r\n\r\n      if (renderable) {\r\n        cropBoxData.width = width;\r\n        cropBoxData.height = height;\r\n        cropBoxData.left = left;\r\n        cropBoxData.top = top;\r\n        this.action = action;\r\n        this.renderCropBox();\r\n      } // Override\r\n\r\n\r\n      forEach(pointers, function (p) {\r\n        p.startX = p.endX;\r\n        p.startY = p.endY;\r\n      });\r\n    }\r\n  };\r\n\r\n  var methods = {\r\n    // Show the crop box manually\r\n    crop: function crop() {\r\n      if (this.ready && !this.cropped && !this.disabled) {\r\n        this.cropped = true;\r\n        this.limitCropBox(true, true);\r\n\r\n        if (this.options.modal) {\r\n          addClass(this.dragBox, CLASS_MODAL);\r\n        }\r\n\r\n        removeClass(this.cropBox, CLASS_HIDDEN);\r\n        this.setCropBoxData(this.initialCropBoxData);\r\n      }\r\n\r\n      return this;\r\n    },\r\n    // Reset the image and crop box to their initial states\r\n    reset: function reset() {\r\n      if (this.ready && !this.disabled) {\r\n        this.imageData = assign({}, this.initialImageData);\r\n        this.canvasData = assign({}, this.initialCanvasData);\r\n        this.cropBoxData = assign({}, this.initialCropBoxData);\r\n        this.renderCanvas();\r\n\r\n        if (this.cropped) {\r\n          this.renderCropBox();\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n    // Clear the crop box\r\n    clear: function clear() {\r\n      if (this.cropped && !this.disabled) {\r\n        assign(this.cropBoxData, {\r\n          left: 0,\r\n          top: 0,\r\n          width: 0,\r\n          height: 0\r\n        });\r\n        this.cropped = false;\r\n        this.renderCropBox();\r\n        this.limitCanvas(true, true); // Render canvas after crop box rendered\r\n\r\n        this.renderCanvas();\r\n        removeClass(this.dragBox, CLASS_MODAL);\r\n        addClass(this.cropBox, CLASS_HIDDEN);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Replace the image's src and rebuild the cropper\r\n     * @param {string} url - The new URL.\r\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\r\n     * @returns {Cropper} this\r\n     */\r\n    replace: function replace(url) {\r\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n\r\n      if (!this.disabled && url) {\r\n        if (this.isImg) {\r\n          this.element.src = url;\r\n        }\r\n\r\n        if (hasSameSize) {\r\n          this.url = url;\r\n          this.image.src = url;\r\n\r\n          if (this.ready) {\r\n            this.viewBoxImage.src = url;\r\n            forEach(this.previews, function (element) {\r\n              element.getElementsByTagName('img')[0].src = url;\r\n            });\r\n          }\r\n        } else {\r\n          if (this.isImg) {\r\n            this.replaced = true;\r\n          }\r\n\r\n          this.options.data = null;\r\n          this.uncreate();\r\n          this.load(url);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n    // Enable (unfreeze) the cropper\r\n    enable: function enable() {\r\n      if (this.ready && this.disabled) {\r\n        this.disabled = false;\r\n        removeClass(this.cropper, CLASS_DISABLED);\r\n      }\r\n\r\n      return this;\r\n    },\r\n    // Disable (freeze) the cropper\r\n    disable: function disable() {\r\n      if (this.ready && !this.disabled) {\r\n        this.disabled = true;\r\n        addClass(this.cropper, CLASS_DISABLED);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Destroy the cropper and remove the instance from the image\r\n     * @returns {Cropper} this\r\n     */\r\n    destroy: function destroy() {\r\n      var element = this.element;\r\n\r\n      if (!element[NAMESPACE]) {\r\n        return this;\r\n      }\r\n\r\n      element[NAMESPACE] = undefined;\r\n\r\n      if (this.isImg && this.replaced) {\r\n        element.src = this.originalUrl;\r\n      }\r\n\r\n      this.uncreate();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Move the canvas with relative offsets\r\n     * @param {number} offsetX - The relative offset distance on the x-axis.\r\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\r\n     * @returns {Cropper} this\r\n     */\r\n    move: function move(offsetX) {\r\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\r\n      var _this$canvasData = this.canvasData,\r\n          left = _this$canvasData.left,\r\n          top = _this$canvasData.top;\r\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\r\n    },\r\n\r\n    /**\r\n     * Move the canvas to an absolute point\r\n     * @param {number} x - The x-axis coordinate.\r\n     * @param {number} [y=x] - The y-axis coordinate.\r\n     * @returns {Cropper} this\r\n     */\r\n    moveTo: function moveTo(x) {\r\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\r\n      var canvasData = this.canvasData;\r\n      var changed = false;\r\n      x = Number(x);\r\n      y = Number(y);\r\n\r\n      if (this.ready && !this.disabled && this.options.movable) {\r\n        if (isNumber(x)) {\r\n          canvasData.left = x;\r\n          changed = true;\r\n        }\r\n\r\n        if (isNumber(y)) {\r\n          canvasData.top = y;\r\n          changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n          this.renderCanvas(true);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Zoom the canvas with a relative ratio\r\n     * @param {number} ratio - The target ratio.\r\n     * @param {Event} _originalEvent - The original event if any.\r\n     * @returns {Cropper} this\r\n     */\r\n    zoom: function zoom(ratio, _originalEvent) {\r\n      var canvasData = this.canvasData;\r\n      ratio = Number(ratio);\r\n\r\n      if (ratio < 0) {\r\n        ratio = 1 / (1 - ratio);\r\n      } else {\r\n        ratio = 1 + ratio;\r\n      }\r\n\r\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\r\n    },\r\n\r\n    /**\r\n     * Zoom the canvas to an absolute ratio\r\n     * @param {number} ratio - The target ratio.\r\n     * @param {Object} pivot - The zoom pivot point coordinate.\r\n     * @param {Event} _originalEvent - The original event if any.\r\n     * @returns {Cropper} this\r\n     */\r\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\r\n      var options = this.options,\r\n          canvasData = this.canvasData;\r\n      var width = canvasData.width,\r\n          height = canvasData.height,\r\n          naturalWidth = canvasData.naturalWidth,\r\n          naturalHeight = canvasData.naturalHeight;\r\n      ratio = Number(ratio);\r\n\r\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\r\n        var newWidth = naturalWidth * ratio;\r\n        var newHeight = naturalHeight * ratio;\r\n\r\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\r\n          ratio: ratio,\r\n          oldRatio: width / naturalWidth,\r\n          originalEvent: _originalEvent\r\n        }) === false) {\r\n          return this;\r\n        }\r\n\r\n        if (_originalEvent) {\r\n          var pointers = this.pointers;\r\n          var offset = getOffset(this.cropper);\r\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\r\n            pageX: _originalEvent.pageX,\r\n            pageY: _originalEvent.pageY\r\n          }; // Zoom from the triggering point of the event\r\n\r\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\r\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\r\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\r\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\r\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\r\n        } else {\r\n          // Zoom from the center of the canvas\r\n          canvasData.left -= (newWidth - width) / 2;\r\n          canvasData.top -= (newHeight - height) / 2;\r\n        }\r\n\r\n        canvasData.width = newWidth;\r\n        canvasData.height = newHeight;\r\n        this.renderCanvas(true);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate the canvas with a relative degree\r\n     * @param {number} degree - The rotate degree.\r\n     * @returns {Cropper} this\r\n     */\r\n    rotate: function rotate(degree) {\r\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\r\n    },\r\n\r\n    /**\r\n     * Rotate the canvas to an absolute degree\r\n     * @param {number} degree - The rotate degree.\r\n     * @returns {Cropper} this\r\n     */\r\n    rotateTo: function rotateTo(degree) {\r\n      degree = Number(degree);\r\n\r\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\r\n        this.imageData.rotate = degree % 360;\r\n        this.renderCanvas(true, true);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Scale the image on the x-axis.\r\n     * @param {number} scaleX - The scale ratio on the x-axis.\r\n     * @returns {Cropper} this\r\n     */\r\n    scaleX: function scaleX(_scaleX) {\r\n      var scaleY = this.imageData.scaleY;\r\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\r\n    },\r\n\r\n    /**\r\n     * Scale the image on the y-axis.\r\n     * @param {number} scaleY - The scale ratio on the y-axis.\r\n     * @returns {Cropper} this\r\n     */\r\n    scaleY: function scaleY(_scaleY) {\r\n      var scaleX = this.imageData.scaleX;\r\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\r\n    },\r\n\r\n    /**\r\n     * Scale the image\r\n     * @param {number} scaleX - The scale ratio on the x-axis.\r\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\r\n     * @returns {Cropper} this\r\n     */\r\n    scale: function scale(scaleX) {\r\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\r\n      var imageData = this.imageData;\r\n      var transformed = false;\r\n      scaleX = Number(scaleX);\r\n      scaleY = Number(scaleY);\r\n\r\n      if (this.ready && !this.disabled && this.options.scalable) {\r\n        if (isNumber(scaleX)) {\r\n          imageData.scaleX = scaleX;\r\n          transformed = true;\r\n        }\r\n\r\n        if (isNumber(scaleY)) {\r\n          imageData.scaleY = scaleY;\r\n          transformed = true;\r\n        }\r\n\r\n        if (transformed) {\r\n          this.renderCanvas(true, true);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the cropped area position and size data (base on the original image)\r\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\r\n     * @returns {Object} The result cropped data.\r\n     */\r\n    getData: function getData() {\r\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\r\n      var options = this.options,\r\n          imageData = this.imageData,\r\n          canvasData = this.canvasData,\r\n          cropBoxData = this.cropBoxData;\r\n      var data;\r\n\r\n      if (this.ready && this.cropped) {\r\n        data = {\r\n          x: cropBoxData.left - canvasData.left,\r\n          y: cropBoxData.top - canvasData.top,\r\n          width: cropBoxData.width,\r\n          height: cropBoxData.height\r\n        };\r\n        var ratio = imageData.width / imageData.naturalWidth;\r\n        forEach(data, function (n, i) {\r\n          data[i] = n / ratio;\r\n        });\r\n\r\n        if (rounded) {\r\n          // In case rounding off leads to extra 1px in right or bottom border\r\n          // we should round the top-left corner and the dimension (#343).\r\n          var bottom = Math.round(data.y + data.height);\r\n          var right = Math.round(data.x + data.width);\r\n          data.x = Math.round(data.x);\r\n          data.y = Math.round(data.y);\r\n          data.width = right - data.x;\r\n          data.height = bottom - data.y;\r\n        }\r\n      } else {\r\n        data = {\r\n          x: 0,\r\n          y: 0,\r\n          width: 0,\r\n          height: 0\r\n        };\r\n      }\r\n\r\n      if (options.rotatable) {\r\n        data.rotate = imageData.rotate || 0;\r\n      }\r\n\r\n      if (options.scalable) {\r\n        data.scaleX = imageData.scaleX || 1;\r\n        data.scaleY = imageData.scaleY || 1;\r\n      }\r\n\r\n      return data;\r\n    },\r\n\r\n    /**\r\n     * Set the cropped area position and size with new data\r\n     * @param {Object} data - The new data.\r\n     * @returns {Cropper} this\r\n     */\r\n    setData: function setData(data) {\r\n      var options = this.options,\r\n          imageData = this.imageData,\r\n          canvasData = this.canvasData;\r\n      var cropBoxData = {};\r\n\r\n      if (this.ready && !this.disabled && isPlainObject(data)) {\r\n        var transformed = false;\r\n\r\n        if (options.rotatable) {\r\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\r\n            imageData.rotate = data.rotate;\r\n            transformed = true;\r\n          }\r\n        }\r\n\r\n        if (options.scalable) {\r\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\r\n            imageData.scaleX = data.scaleX;\r\n            transformed = true;\r\n          }\r\n\r\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\r\n            imageData.scaleY = data.scaleY;\r\n            transformed = true;\r\n          }\r\n        }\r\n\r\n        if (transformed) {\r\n          this.renderCanvas(true, true);\r\n        }\r\n\r\n        var ratio = imageData.width / imageData.naturalWidth;\r\n\r\n        if (isNumber(data.x)) {\r\n          cropBoxData.left = data.x * ratio + canvasData.left;\r\n        }\r\n\r\n        if (isNumber(data.y)) {\r\n          cropBoxData.top = data.y * ratio + canvasData.top;\r\n        }\r\n\r\n        if (isNumber(data.width)) {\r\n          cropBoxData.width = data.width * ratio;\r\n        }\r\n\r\n        if (isNumber(data.height)) {\r\n          cropBoxData.height = data.height * ratio;\r\n        }\r\n\r\n        this.setCropBoxData(cropBoxData);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the container size data.\r\n     * @returns {Object} The result container data.\r\n     */\r\n    getContainerData: function getContainerData() {\r\n      return this.ready ? assign({}, this.containerData) : {};\r\n    },\r\n\r\n    /**\r\n     * Get the image position and size data.\r\n     * @returns {Object} The result image data.\r\n     */\r\n    getImageData: function getImageData() {\r\n      return this.sized ? assign({}, this.imageData) : {};\r\n    },\r\n\r\n    /**\r\n     * Get the canvas position and size data.\r\n     * @returns {Object} The result canvas data.\r\n     */\r\n    getCanvasData: function getCanvasData() {\r\n      var canvasData = this.canvasData;\r\n      var data = {};\r\n\r\n      if (this.ready) {\r\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\r\n          data[n] = canvasData[n];\r\n        });\r\n      }\r\n\r\n      return data;\r\n    },\r\n\r\n    /**\r\n     * Set the canvas position and size with new data.\r\n     * @param {Object} data - The new canvas data.\r\n     * @returns {Cropper} this\r\n     */\r\n    setCanvasData: function setCanvasData(data) {\r\n      var canvasData = this.canvasData;\r\n      var aspectRatio = canvasData.aspectRatio;\r\n\r\n      if (this.ready && !this.disabled && isPlainObject(data)) {\r\n        if (isNumber(data.left)) {\r\n          canvasData.left = data.left;\r\n        }\r\n\r\n        if (isNumber(data.top)) {\r\n          canvasData.top = data.top;\r\n        }\r\n\r\n        if (isNumber(data.width)) {\r\n          canvasData.width = data.width;\r\n          canvasData.height = data.width / aspectRatio;\r\n        } else if (isNumber(data.height)) {\r\n          canvasData.height = data.height;\r\n          canvasData.width = data.height * aspectRatio;\r\n        }\r\n\r\n        this.renderCanvas(true);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the crop box position and size data.\r\n     * @returns {Object} The result crop box data.\r\n     */\r\n    getCropBoxData: function getCropBoxData() {\r\n      var cropBoxData = this.cropBoxData;\r\n      var data;\r\n\r\n      if (this.ready && this.cropped) {\r\n        data = {\r\n          left: cropBoxData.left,\r\n          top: cropBoxData.top,\r\n          width: cropBoxData.width,\r\n          height: cropBoxData.height\r\n        };\r\n      }\r\n\r\n      return data || {};\r\n    },\r\n\r\n    /**\r\n     * Set the crop box position and size with new data.\r\n     * @param {Object} data - The new crop box data.\r\n     * @returns {Cropper} this\r\n     */\r\n    setCropBoxData: function setCropBoxData(data) {\r\n      var cropBoxData = this.cropBoxData;\r\n      var aspectRatio = this.options.aspectRatio;\r\n      var widthChanged;\r\n      var heightChanged;\r\n\r\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\r\n        if (isNumber(data.left)) {\r\n          cropBoxData.left = data.left;\r\n        }\r\n\r\n        if (isNumber(data.top)) {\r\n          cropBoxData.top = data.top;\r\n        }\r\n\r\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\r\n          widthChanged = true;\r\n          cropBoxData.width = data.width;\r\n        }\r\n\r\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\r\n          heightChanged = true;\r\n          cropBoxData.height = data.height;\r\n        }\r\n\r\n        if (aspectRatio) {\r\n          if (widthChanged) {\r\n            cropBoxData.height = cropBoxData.width / aspectRatio;\r\n          } else if (heightChanged) {\r\n            cropBoxData.width = cropBoxData.height * aspectRatio;\r\n          }\r\n        }\r\n\r\n        this.renderCropBox();\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get a canvas drawn the cropped image.\r\n     * @param {Object} [options={}] - The config options.\r\n     * @returns {HTMLCanvasElement} - The result canvas.\r\n     */\r\n    getCroppedCanvas: function getCroppedCanvas() {\r\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n      if (!this.ready || !window.HTMLCanvasElement) {\r\n        return null;\r\n      }\r\n\r\n      var canvasData = this.canvasData;\r\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.\r\n\r\n      if (!this.cropped) {\r\n        return source;\r\n      }\r\n\r\n      var _this$getData = this.getData(),\r\n          initialX = _this$getData.x,\r\n          initialY = _this$getData.y,\r\n          initialWidth = _this$getData.width,\r\n          initialHeight = _this$getData.height;\r\n\r\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\r\n\r\n      if (ratio !== 1) {\r\n        initialX *= ratio;\r\n        initialY *= ratio;\r\n        initialWidth *= ratio;\r\n        initialHeight *= ratio;\r\n      }\r\n\r\n      var aspectRatio = initialWidth / initialHeight;\r\n      var maxSizes = getAdjustedSizes({\r\n        aspectRatio: aspectRatio,\r\n        width: options.maxWidth || Infinity,\r\n        height: options.maxHeight || Infinity\r\n      });\r\n      var minSizes = getAdjustedSizes({\r\n        aspectRatio: aspectRatio,\r\n        width: options.minWidth || 0,\r\n        height: options.minHeight || 0\r\n      }, 'cover');\r\n\r\n      var _getAdjustedSizes = getAdjustedSizes({\r\n        aspectRatio: aspectRatio,\r\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\r\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\r\n      }),\r\n          width = _getAdjustedSizes.width,\r\n          height = _getAdjustedSizes.height;\r\n\r\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\r\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\r\n      var canvas = document.createElement('canvas');\r\n      var context = canvas.getContext('2d');\r\n      canvas.width = normalizeDecimalNumber(width);\r\n      canvas.height = normalizeDecimalNumber(height);\r\n      context.fillStyle = options.fillColor || 'transparent';\r\n      context.fillRect(0, 0, width, height);\r\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\r\n          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\r\n          imageSmoothingQuality = options.imageSmoothingQuality;\r\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\r\n\r\n      if (imageSmoothingQuality) {\r\n        context.imageSmoothingQuality = imageSmoothingQuality;\r\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\r\n\r\n\r\n      var sourceWidth = source.width;\r\n      var sourceHeight = source.height; // Source canvas parameters\r\n\r\n      var srcX = initialX;\r\n      var srcY = initialY;\r\n      var srcWidth;\r\n      var srcHeight; // Destination canvas parameters\r\n\r\n      var dstX;\r\n      var dstY;\r\n      var dstWidth;\r\n      var dstHeight;\r\n\r\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\r\n        srcX = 0;\r\n        srcWidth = 0;\r\n        dstX = 0;\r\n        dstWidth = 0;\r\n      } else if (srcX <= 0) {\r\n        dstX = -srcX;\r\n        srcX = 0;\r\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\r\n        dstWidth = srcWidth;\r\n      } else if (srcX <= sourceWidth) {\r\n        dstX = 0;\r\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\r\n        dstWidth = srcWidth;\r\n      }\r\n\r\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\r\n        srcY = 0;\r\n        srcHeight = 0;\r\n        dstY = 0;\r\n        dstHeight = 0;\r\n      } else if (srcY <= 0) {\r\n        dstY = -srcY;\r\n        srcY = 0;\r\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\r\n        dstHeight = srcHeight;\r\n      } else if (srcY <= sourceHeight) {\r\n        dstY = 0;\r\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\r\n        dstHeight = srcHeight;\r\n      }\r\n\r\n      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid \"IndexSizeError\"\r\n\r\n      if (dstWidth > 0 && dstHeight > 0) {\r\n        var scale = width / initialWidth;\r\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\r\n      } // All the numerical parameters should be integer for `drawImage`\r\n      // https://github.com/fengyuanchen/cropper/issues/476\r\n\r\n\r\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\r\n        return Math.floor(normalizeDecimalNumber(param));\r\n      }))));\r\n      return canvas;\r\n    },\r\n\r\n    /**\r\n     * Change the aspect ratio of the crop box.\r\n     * @param {number} aspectRatio - The new aspect ratio.\r\n     * @returns {Cropper} this\r\n     */\r\n    setAspectRatio: function setAspectRatio(aspectRatio) {\r\n      var options = this.options;\r\n\r\n      if (!this.disabled && !isUndefined(aspectRatio)) {\r\n        // 0 -> NaN\r\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\r\n\r\n        if (this.ready) {\r\n          this.initCropBox();\r\n\r\n          if (this.cropped) {\r\n            this.renderCropBox();\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Change the drag mode.\r\n     * @param {string} mode - The new drag mode.\r\n     * @returns {Cropper} this\r\n     */\r\n    setDragMode: function setDragMode(mode) {\r\n      var options = this.options,\r\n          dragBox = this.dragBox,\r\n          face = this.face;\r\n\r\n      if (this.ready && !this.disabled) {\r\n        var croppable = mode === DRAG_MODE_CROP;\r\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\r\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\r\n        options.dragMode = mode;\r\n        setData(dragBox, DATA_ACTION, mode);\r\n        toggleClass(dragBox, CLASS_CROP, croppable);\r\n        toggleClass(dragBox, CLASS_MOVE, movable);\r\n\r\n        if (!options.cropBoxMovable) {\r\n          // Sync drag mode to crop box when it is not movable\r\n          setData(face, DATA_ACTION, mode);\r\n          toggleClass(face, CLASS_CROP, croppable);\r\n          toggleClass(face, CLASS_MOVE, movable);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n  };\r\n\r\n  var AnotherCropper = WINDOW.Cropper;\r\n\r\n  var Cropper = /*#__PURE__*/function () {\r\n    /**\r\n     * Create a new Cropper.\r\n     * @param {Element} element - The target element for cropping.\r\n     * @param {Object} [options={}] - The configuration options.\r\n     */\r\n    function Cropper(element) {\r\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n      _classCallCheck(this, Cropper);\r\n\r\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\r\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\r\n      }\r\n\r\n      this.element = element;\r\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\r\n      this.cropped = false;\r\n      this.disabled = false;\r\n      this.pointers = {};\r\n      this.ready = false;\r\n      this.reloading = false;\r\n      this.replaced = false;\r\n      this.sized = false;\r\n      this.sizing = false;\r\n      this.init();\r\n    }\r\n\r\n    _createClass(Cropper, [{\r\n      key: \"init\",\r\n      value: function init() {\r\n        var element = this.element;\r\n        var tagName = element.tagName.toLowerCase();\r\n        var url;\r\n\r\n        if (element[NAMESPACE]) {\r\n          return;\r\n        }\r\n\r\n        element[NAMESPACE] = this;\r\n\r\n        if (tagName === 'img') {\r\n          this.isImg = true; // e.g.: \"img/picture.jpg\"\r\n\r\n          url = element.getAttribute('src') || '';\r\n          this.originalUrl = url; // Stop when it's a blank image\r\n\r\n          if (!url) {\r\n            return;\r\n          } // e.g.: \"https://example.com/img/picture.jpg\"\r\n\r\n\r\n          url = element.src;\r\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\r\n          url = element.toDataURL();\r\n        }\r\n\r\n        this.load(url);\r\n      }\r\n    }, {\r\n      key: \"load\",\r\n      value: function load(url) {\r\n        var _this = this;\r\n\r\n        if (!url) {\r\n          return;\r\n        }\r\n\r\n        this.url = url;\r\n        this.imageData = {};\r\n        var element = this.element,\r\n            options = this.options;\r\n\r\n        if (!options.rotatable && !options.scalable) {\r\n          options.checkOrientation = false;\r\n        } // Only IE10+ supports Typed Arrays\r\n\r\n\r\n        if (!options.checkOrientation || !window.ArrayBuffer) {\r\n          this.clone();\r\n          return;\r\n        } // Detect the mime type of the image directly if it is a Data URL\r\n\r\n\r\n        if (REGEXP_DATA_URL.test(url)) {\r\n          // Read ArrayBuffer from Data URL of JPEG images directly for better performance\r\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\r\n            this.read(dataURLToArrayBuffer(url));\r\n          } else {\r\n            // Only a JPEG image may contains Exif Orientation information,\r\n            // the rest types of Data URLs are not necessary to check orientation at all.\r\n            this.clone();\r\n          }\r\n\r\n          return;\r\n        } // 1. Detect the mime type of the image by a XMLHttpRequest.\r\n        // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.\r\n\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        var clone = this.clone.bind(this);\r\n        this.reloading = true;\r\n        this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:\r\n        // http, https, data, chrome, chrome-extension.\r\n        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\r\n        // in some browsers as IE11 and Safari.\r\n\r\n        xhr.onabort = clone;\r\n        xhr.onerror = clone;\r\n        xhr.ontimeout = clone;\r\n\r\n        xhr.onprogress = function () {\r\n          // Abort the request directly if it not a JPEG image for better performance\r\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\r\n            xhr.abort();\r\n          }\r\n        };\r\n\r\n        xhr.onload = function () {\r\n          _this.read(xhr.response);\r\n        };\r\n\r\n        xhr.onloadend = function () {\r\n          _this.reloading = false;\r\n          _this.xhr = null;\r\n        }; // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\r\n\r\n\r\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\r\n          url = addTimestamp(url);\r\n        } // The third parameter is required for avoiding side-effect (#682)\r\n\r\n\r\n        xhr.open('GET', url, true);\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\r\n        xhr.send();\r\n      }\r\n    }, {\r\n      key: \"read\",\r\n      value: function read(arrayBuffer) {\r\n        var options = this.options,\r\n            imageData = this.imageData; // Reset the orientation value to its default value 1\r\n        // as some iOS browsers will render image with its orientation\r\n\r\n        var orientation = resetAndGetOrientation(arrayBuffer);\r\n        var rotate = 0;\r\n        var scaleX = 1;\r\n        var scaleY = 1;\r\n\r\n        if (orientation > 1) {\r\n          // Generate a new URL which has the default orientation value\r\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\r\n\r\n          var _parseOrientation = parseOrientation(orientation);\r\n\r\n          rotate = _parseOrientation.rotate;\r\n          scaleX = _parseOrientation.scaleX;\r\n          scaleY = _parseOrientation.scaleY;\r\n        }\r\n\r\n        if (options.rotatable) {\r\n          imageData.rotate = rotate;\r\n        }\r\n\r\n        if (options.scalable) {\r\n          imageData.scaleX = scaleX;\r\n          imageData.scaleY = scaleY;\r\n        }\r\n\r\n        this.clone();\r\n      }\r\n    }, {\r\n      key: \"clone\",\r\n      value: function clone() {\r\n        var element = this.element,\r\n            url = this.url;\r\n        var crossOrigin = element.crossOrigin;\r\n        var crossOriginUrl = url;\r\n\r\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\r\n          if (!crossOrigin) {\r\n            crossOrigin = 'anonymous';\r\n          } // Bust cache when there is not a \"crossOrigin\" property (#519)\r\n\r\n\r\n          crossOriginUrl = addTimestamp(url);\r\n        }\r\n\r\n        this.crossOrigin = crossOrigin;\r\n        this.crossOriginUrl = crossOriginUrl;\r\n        var image = document.createElement('img');\r\n\r\n        if (crossOrigin) {\r\n          image.crossOrigin = crossOrigin;\r\n        }\r\n\r\n        image.src = crossOriginUrl || url;\r\n        image.alt = element.alt || 'The image to crop';\r\n        this.image = image;\r\n        image.onload = this.start.bind(this);\r\n        image.onerror = this.stop.bind(this);\r\n        addClass(image, CLASS_HIDE);\r\n        element.parentNode.insertBefore(image, element.nextSibling);\r\n      }\r\n    }, {\r\n      key: \"start\",\r\n      value: function start() {\r\n        var _this2 = this;\r\n\r\n        var image = this.image;\r\n        image.onload = null;\r\n        image.onerror = null;\r\n        this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,\r\n        // such as Safari for iOS, Chrome for iOS, and in-app browsers.\r\n\r\n        var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);\r\n\r\n        var done = function done(naturalWidth, naturalHeight) {\r\n          assign(_this2.imageData, {\r\n            naturalWidth: naturalWidth,\r\n            naturalHeight: naturalHeight,\r\n            aspectRatio: naturalWidth / naturalHeight\r\n          });\r\n          _this2.initialImageData = assign({}, _this2.imageData);\r\n          _this2.sizing = false;\r\n          _this2.sized = true;\r\n\r\n          _this2.build();\r\n        }; // Most modern browsers (excepts iOS WebKit)\r\n\r\n\r\n        if (image.naturalWidth && !isIOSWebKit) {\r\n          done(image.naturalWidth, image.naturalHeight);\r\n          return;\r\n        }\r\n\r\n        var sizingImage = document.createElement('img');\r\n        var body = document.body || document.documentElement;\r\n        this.sizingImage = sizingImage;\r\n\r\n        sizingImage.onload = function () {\r\n          done(sizingImage.width, sizingImage.height);\r\n\r\n          if (!isIOSWebKit) {\r\n            body.removeChild(sizingImage);\r\n          }\r\n        };\r\n\r\n        sizingImage.src = image.src; // iOS WebKit will convert the image automatically\r\n        // with its orientation once append it into DOM (#279)\r\n\r\n        if (!isIOSWebKit) {\r\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\r\n          body.appendChild(sizingImage);\r\n        }\r\n      }\r\n    }, {\r\n      key: \"stop\",\r\n      value: function stop() {\r\n        var image = this.image;\r\n        image.onload = null;\r\n        image.onerror = null;\r\n        image.parentNode.removeChild(image);\r\n        this.image = null;\r\n      }\r\n    }, {\r\n      key: \"build\",\r\n      value: function build() {\r\n        if (!this.sized || this.ready) {\r\n          return;\r\n        }\r\n\r\n        var element = this.element,\r\n            options = this.options,\r\n            image = this.image; // Create cropper elements\r\n\r\n        var container = element.parentNode;\r\n        var template = document.createElement('div');\r\n        template.innerHTML = TEMPLATE;\r\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\r\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\r\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\r\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\r\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\r\n        this.container = container;\r\n        this.cropper = cropper;\r\n        this.canvas = canvas;\r\n        this.dragBox = dragBox;\r\n        this.cropBox = cropBox;\r\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\r\n        this.face = face;\r\n        canvas.appendChild(image); // Hide the original image\r\n\r\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\r\n\r\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\r\n\r\n        if (!this.isImg) {\r\n          removeClass(image, CLASS_HIDE);\r\n        }\r\n\r\n        this.initPreview();\r\n        this.bind();\r\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\r\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\r\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\r\n        addClass(cropBox, CLASS_HIDDEN);\r\n\r\n        if (!options.guides) {\r\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\r\n        }\r\n\r\n        if (!options.center) {\r\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\r\n        }\r\n\r\n        if (options.background) {\r\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\r\n        }\r\n\r\n        if (!options.highlight) {\r\n          addClass(face, CLASS_INVISIBLE);\r\n        }\r\n\r\n        if (options.cropBoxMovable) {\r\n          addClass(face, CLASS_MOVE);\r\n          setData(face, DATA_ACTION, ACTION_ALL);\r\n        }\r\n\r\n        if (!options.cropBoxResizable) {\r\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\r\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\r\n        }\r\n\r\n        this.render();\r\n        this.ready = true;\r\n        this.setDragMode(options.dragMode);\r\n\r\n        if (options.autoCrop) {\r\n          this.crop();\r\n        }\r\n\r\n        this.setData(options.data);\r\n\r\n        if (isFunction(options.ready)) {\r\n          addListener(element, EVENT_READY, options.ready, {\r\n            once: true\r\n          });\r\n        }\r\n\r\n        dispatchEvent(element, EVENT_READY);\r\n      }\r\n    }, {\r\n      key: \"unbuild\",\r\n      value: function unbuild() {\r\n        if (!this.ready) {\r\n          return;\r\n        }\r\n\r\n        this.ready = false;\r\n        this.unbind();\r\n        this.resetPreview();\r\n        this.cropper.parentNode.removeChild(this.cropper);\r\n        removeClass(this.element, CLASS_HIDDEN);\r\n      }\r\n    }, {\r\n      key: \"uncreate\",\r\n      value: function uncreate() {\r\n        if (this.ready) {\r\n          this.unbuild();\r\n          this.ready = false;\r\n          this.cropped = false;\r\n        } else if (this.sizing) {\r\n          this.sizingImage.onload = null;\r\n          this.sizing = false;\r\n          this.sized = false;\r\n        } else if (this.reloading) {\r\n          this.xhr.onabort = null;\r\n          this.xhr.abort();\r\n        } else if (this.image) {\r\n          this.stop();\r\n        }\r\n      }\r\n      /**\r\n       * Get the no conflict cropper class.\r\n       * @returns {Cropper} The cropper class.\r\n       */\r\n\r\n    }], [{\r\n      key: \"noConflict\",\r\n      value: function noConflict() {\r\n        window.Cropper = AnotherCropper;\r\n        return Cropper;\r\n      }\r\n      /**\r\n       * Change the default options.\r\n       * @param {Object} options - The new default options.\r\n       */\r\n\r\n    }, {\r\n      key: \"setDefaults\",\r\n      value: function setDefaults(options) {\r\n        assign(DEFAULTS, isPlainObject(options) && options);\r\n      }\r\n    }]);\r\n\r\n    return Cropper;\r\n  }();\r\n\r\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\r\n\r\n  return Cropper;\r\n\r\n})));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cropperjs/dist/cropper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/cropper/cropper.js");
/******/ 	
/******/ })()
;