/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/extended/js/vendors/plugins/datatables.init.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/extended/js/vendors/plugins/datatables.init.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; //\n// Datatables.net Initialization\n//\n// Set Defaults\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar defaults = {\n  \"language\": {\n    \"info\": \"Showing _START_ to _END_ of _TOTAL_ records\",\n    \"infoEmpty\": \"Showing no records\",\n    \"lengthMenu\": \"_MENU_\",\n    \"paginate\": {\n      \"first\": '<i class=\"first\"></i>',\n      \"last\": '<i class=\"last\"></i>',\n      \"next\": '<i class=\"next\"></i>',\n      \"previous\": '<i class=\"previous\"></i>'\n    }\n  },\n  \"initComplete\": function initComplete(settings, json) {\n    $(this).closest('.dataTables_wrapper').find('.dataTables_filter input').addClass('form-control form-control-solid w-250px').removeClass('form-control-sm');\n    $(this).closest('.dataTables_wrapper').find('.custom-select').addClass('form-select form-select-sm form-select-solid');\n  },\n  \"headerCallback\": function headerCallback(thead, data, start, end, display) {\n    $(thead).find('th').addClass('text-start text-gray-400 fw-bolder fs-7 text-uppercase gs-0');\n  }\n};\n$.extend(true, $.fn.dataTable.defaults, defaults);\n$(document).on('draw.dt', function (e, settings) {// var api = new $.fn.dataTable.Api(settings);\n  // console.log('New DataTable created:', api.table().node());\n});\n/*! DataTables Bootstrap 4 integration\r\n * Â©2011-2017 SpryMedia Ltd - datatables.net/license\r\n */\n\n/**\r\n * DataTables integration for Bootstrap 4. This requires Bootstrap 4 and\r\n * DataTables 1.10 or newer.\r\n *\r\n * This file sets the defaults and adds options to DataTables to style its\r\n * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap\r\n * for further information.\r\n */\n\n(function (factory) {\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! datatables.net */ \"./node_modules/datatables.net/js/jquery.dataTables.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {\n      return factory($, window, document);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /* Set the defaults for DataTables initialisation */\n\n  $.extend(true, DataTable.defaults, {\n    dom: \"f<'table-responsive'tr>\" + \"<'row'\" + \"<'col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'li>\" + \"<'col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'p>\" + \">\",\n    renderer: 'bootstrap'\n  });\n  /* Default class modification */\n\n  $.extend(DataTable.ext.classes, {\n    sWrapper: \"dataTables_wrapper dt-bootstrap4\",\n    sFilterInput: \"form-control form-control-sm form-control-solid\",\n    sLengthSelect: \"form-select form-select-sm form-select-solid\",\n    sProcessing: \"dataTables_processing\",\n    sPageButton: \"paginate_button page-item\"\n  });\n  /* Bootstrap paging button renderer */\n\n  DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {\n    var api = new DataTable.Api(settings);\n    var classes = settings.oClasses;\n    var lang = settings.oLanguage.oPaginate;\n    var aria = settings.oLanguage.oAria.paginate || {};\n    var btnDisplay,\n        btnClass,\n        counter = 0;\n\n    var attach = function attach(container, buttons) {\n      var i, ien, node, button;\n\n      var clickHandler = function clickHandler(e) {\n        e.preventDefault();\n\n        if (!$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action) {\n          api.page(e.data.action).draw('page');\n        }\n      };\n\n      for (i = 0, ien = buttons.length; i < ien; i++) {\n        button = buttons[i];\n\n        if (Array.isArray(button)) {\n          attach(container, button);\n        } else {\n          btnDisplay = '';\n          btnClass = '';\n\n          switch (button) {\n            case 'ellipsis':\n              btnDisplay = '&#x2026;';\n              btnClass = 'disabled';\n              break;\n\n            case 'first':\n              btnDisplay = lang.sFirst;\n              btnClass = button + (page > 0 ? '' : ' disabled');\n              break;\n\n            case 'previous':\n              btnDisplay = lang.sPrevious;\n              btnClass = button + (page > 0 ? '' : ' disabled');\n              break;\n\n            case 'next':\n              btnDisplay = lang.sNext;\n              btnClass = button + (page < pages - 1 ? '' : ' disabled');\n              break;\n\n            case 'last':\n              btnDisplay = lang.sLast;\n              btnClass = button + (page < pages - 1 ? '' : ' disabled');\n              break;\n\n            default:\n              btnDisplay = button + 1;\n              btnClass = page === button ? 'active' : '';\n              break;\n          }\n\n          if (btnDisplay) {\n            node = $('<li>', {\n              'class': classes.sPageButton + ' ' + btnClass,\n              'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n            }).append($('<a>', {\n              'href': '#',\n              'aria-controls': settings.sTableId,\n              'aria-label': aria[button],\n              'data-dt-idx': counter,\n              'tabindex': settings.iTabIndex,\n              'class': 'page-link'\n            }).html(btnDisplay)).appendTo(container);\n\n            settings.oApi._fnBindAction(node, {\n              action: button\n            }, clickHandler);\n\n            counter++;\n          }\n        }\n      }\n    }; // IE9 throws an 'unknown error' if document.activeElement is used\n    // inside an iframe or frame.\n\n\n    var activeEl;\n\n    try {\n      // Because this approach is destroying and recreating the paging\n      // elements, focus is lost on the select button which is bad for\n      // accessibility. So we want to restore focus once the draw has\n      // completed\n      activeEl = $(host).find(document.activeElement).data('dt-idx');\n    } catch (e) {}\n\n    attach($(host).empty().html('<ul class=\"pagination\"/>').children('ul'), buttons);\n\n    if (activeEl !== undefined) {\n      $(host).find('[data-dt-idx=' + activeEl + ']').trigger('focus');\n    }\n  };\n\n  return DataTable;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/extended/js/vendors/plugins/datatables.init.js\n");

/***/ }),

/***/ "./node_modules/datatables.net/js/jquery.dataTables.js":
/*!*************************************************************!*\
  !*** ./node_modules/datatables.net/js/jquery.dataTables.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.11.5\r\n * Â©2008-2021 SpryMedia Ltd - datatables.net/license\r\n */\r\n\r\n/**\r\n * @summary     DataTables\r\n * @description Paginate, search and order HTML tables\r\n * @version     1.11.5\r\n * @file        jquery.dataTables.js\r\n * @author      SpryMedia Ltd\r\n * @contact     www.datatables.net\r\n * @copyright   Copyright 2008-2021 SpryMedia Ltd.\r\n *\r\n * This source file is free software, available under the following license:\r\n *   MIT license - http://datatables.net/license\r\n *\r\n * This source file is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\r\n *\r\n * For details please refer to: http://www.datatables.net\r\n */\r\n\r\n/*jslint evil: true, undef: true, browser: true */\r\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\r\n\r\n(function( factory ) {\r\n\t\"use strict\";\r\n\r\n\tif ( true ) {\r\n\t\t// AMD\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ( $ ) {\r\n\t\t\treturn factory( $, window, document );\r\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t}\r\n\telse {}\r\n}\r\n(function( $, window, document, undefined ) {\r\n\t\"use strict\";\r\n\r\n\t\r\n\tvar DataTable = function ( selector, options )\r\n\t{\r\n\t\t// When creating with `new`, create a new DataTable, returning the API instance\r\n\t\tif (this instanceof DataTable) {\r\n\t\t\treturn $(selector).DataTable(options);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Argument switching\r\n\t\t\toptions = selector;\r\n\t\t}\r\n\t\r\n\t\t/**\r\n\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and\r\n\t\t * return the resulting jQuery object.\r\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\r\n\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).\r\n\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\r\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\r\n\t\t *    'original' whereby the original order the data was read into the table is used.\r\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\r\n\t\t *  @returns {object} jQuery object, filtered by the given selector.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Highlight every second row\r\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\r\n\t\t *    } );\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\r\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\r\n\t\t *      oTable.fnFilter('');\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.$ = function ( sSelector, oOpts )\r\n\t\t{\r\n\t\t\treturn this.api(true).$( sSelector, oOpts );\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Almost identical to $ in operation, but in this case returns the data for the matched\r\n\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\r\n\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching\r\n\t\t * rows are found, the data returned is the original data array/object that was used to\r\n\t\t * create the row (or a generated array if from a DOM source).\r\n\t\t *\r\n\t\t * This method is often useful in-combination with $ where both functions are given the\r\n\t\t * same parameters and the array indexes will match identically.\r\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\r\n\t\t *    criterion (\"applied\") or all elements (i.e. no filter).\r\n\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.\r\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\r\n\t\t *    'original' whereby the original order the data was read into the table is used.\r\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\r\n\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the\r\n\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\r\n\t\t *    entry in the array.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the data from the first row in the table\r\n\t\t *      var data = oTable._('tr:first');\r\n\t\t *\r\n\t\t *      // Do something useful with the data\r\n\t\t *      alert( \"First cell is: \"+data[0] );\r\n\t\t *    } );\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to 'Webkit' and get all data for\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\r\n\t\t *\r\n\t\t *      // Do something with the data\r\n\t\t *      alert( data.length+\" rows matched the search\" );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis._ = function ( sSelector, oOpts )\r\n\t\t{\r\n\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Create a DataTables Api instance, with the currently selected tables for\r\n\t\t * the Api's context.\r\n\t\t * @param {boolean} [traditional=false] Set the API instance's context to be\r\n\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\r\n\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\r\n\t\t *   or if all tables captured in the jQuery object should be used.\r\n\t\t * @return {DataTables.Api}\r\n\t\t */\r\n\t\tthis.api = function ( traditional )\r\n\t\t{\r\n\t\t\treturn traditional ?\r\n\t\t\t\tnew _Api(\r\n\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )\r\n\t\t\t\t) :\r\n\t\t\t\tnew _Api( this );\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Add a single new row or multiple rows of data to the table. Please note\r\n\t\t * that this is suitable for client-side processing only - if you are using\r\n\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you\r\n\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.\r\n\t\t *  @param {array|object} data The data to be added to the table. This can be:\r\n\t\t *    <ul>\r\n\t\t *      <li>1D array of data - add a single row with the data provided</li>\r\n\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>\r\n\t\t *      <li>object - data object when using <i>mData</i></li>\r\n\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>\r\n\t\t *    </ul>\r\n\t\t *  @param {bool} [redraw=true] redraw the table or not\r\n\t\t *  @returns {array} An array of integers, representing the list of indexes in\r\n\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\r\n\t\t *    the table.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    // Global var for counter\r\n\t\t *    var giCount = 2;\r\n\t\t *\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      $('#example').dataTable();\r\n\t\t *    } );\r\n\t\t *\r\n\t\t *    function fnClickAddRow() {\r\n\t\t *      $('#example').dataTable().fnAddData( [\r\n\t\t *        giCount+\".1\",\r\n\t\t *        giCount+\".2\",\r\n\t\t *        giCount+\".3\",\r\n\t\t *        giCount+\".4\" ]\r\n\t\t *      );\r\n\t\t *\r\n\t\t *      giCount++;\r\n\t\t *    }\r\n\t\t */\r\n\t\tthis.fnAddData = function( data, redraw )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\r\n\t\t\t/* Check if we want to add multiple rows or not */\r\n\t\t\tvar rows = Array.isArray(data) && ( Array.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\r\n\t\t\t\tapi.rows.add( data ) :\r\n\t\t\t\tapi.row.add( data );\r\n\t\t\r\n\t\t\tif ( redraw === undefined || redraw ) {\r\n\t\t\t\tapi.draw();\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn rows.flatten().toArray();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * This function will make DataTables recalculate the column sizes, based on the data\r\n\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or\r\n\t\t * through the sWidth parameter). This can be useful when the width of the table's\r\n\t\t * parent element changes (for example a window resize).\r\n\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable( {\r\n\t\t *        \"sScrollY\": \"200px\",\r\n\t\t *        \"bPaginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      $(window).on('resize', function () {\r\n\t\t *        oTable.fnAdjustColumnSizing();\r\n\t\t *      } );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnAdjustColumnSizing = function ( bRedraw )\r\n\t\t{\r\n\t\t\tvar api = this.api( true ).columns.adjust();\r\n\t\t\tvar settings = api.settings()[0];\r\n\t\t\tvar scroll = settings.oScroll;\r\n\t\t\r\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\r\n\t\t\t\tapi.draw( false );\r\n\t\t\t}\r\n\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\r\n\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\r\n\t\t\t\t_fnScrollDraw( settings );\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Quickly and simply clear a table\r\n\t\t *  @param {bool} [bRedraw=true] redraw the table or not\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\r\n\t\t *      oTable.fnClearTable();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnClearTable = function( bRedraw )\r\n\t\t{\r\n\t\t\tvar api = this.api( true ).clear();\r\n\t\t\r\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\r\n\t\t\t\tapi.draw();\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * The exact opposite of 'opening' a row, this function will close any rows which\r\n\t\t * are currently 'open'.\r\n\t\t *  @param {node} nTr the table row to 'close'\r\n\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnClose = function( nTr )\r\n\t\t{\r\n\t\t\tthis.api( true ).row( nTr ).child.hide();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove a row for the table\r\n\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or\r\n\t\t *    the TR element you want to delete\r\n\t\t *  @param {function|null} [callBack] Callback function\r\n\t\t *  @param {bool} [redraw=true] Redraw the table or not\r\n\t\t *  @returns {array} The row that was deleted\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately remove the first row\r\n\t\t *      oTable.fnDeleteRow( 0 );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnDeleteRow = function( target, callback, redraw )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\tvar rows = api.rows( target );\r\n\t\t\tvar settings = rows.settings()[0];\r\n\t\t\tvar data = settings.aoData[ rows[0][0] ];\r\n\t\t\r\n\t\t\trows.remove();\r\n\t\t\r\n\t\t\tif ( callback ) {\r\n\t\t\t\tcallback.call( this, settings, data );\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif ( redraw === undefined || redraw ) {\r\n\t\t\t\tapi.draw();\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn data;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Restore the table to it's original state in the DOM by removing all of DataTables\r\n\t\t * enhancements, alterations to the DOM structure of the table and event listeners.\r\n\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnDestroy();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnDestroy = function ( remove )\r\n\t\t{\r\n\t\t\tthis.api( true ).destroy( remove );\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Redraw the table\r\n\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\r\n\t\t *      oTable.fnDraw();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnDraw = function( complete )\r\n\t\t{\r\n\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes\r\n\t\t\t// into account the new data, but can hold position.\r\n\t\t\tthis.api( true ).draw( complete );\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Filter the input based on data\r\n\t\t *  @param {string} sInput String to filter the table on\r\n\t\t *  @param {int|null} [iColumn] Column to limit filtering to\r\n\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not\r\n\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not\r\n\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\r\n\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sometime later - filter...\r\n\t\t *      oTable.fnFilter( 'test string' );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\r\n\t\t\tif ( iColumn === null || iColumn === undefined ) {\r\n\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n\t\t\t}\r\n\t\t\r\n\t\t\tapi.draw();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the data for the whole table, an individual row or an individual cell based on the\r\n\t\t * provided parameters.\r\n\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\r\n\t\t *    a TR node then the data source for the whole row will be returned. If given as a\r\n\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the\r\n\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal\r\n\t\t *    data index for the row (see fnGetPosition) and the data for that row used.\r\n\t\t *  @param {int} [col] Optional column index that you want the data of.\r\n\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\r\n\t\t *    returned. If mRow is defined, just data for that row, and is iCol is\r\n\t\t *    defined, only data for the designated cell is returned.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    // Row data\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('tr').click( function () {\r\n\t\t *        var data = oTable.fnGetData( this );\r\n\t\t *        // ... do something with the array / object of data for the row\r\n\t\t *      } );\r\n\t\t *    } );\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    // Individual cell data\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('td').click( function () {\r\n\t\t *        var sData = oTable.fnGetData( this );\r\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\r\n\t\t *      } );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnGetData = function( src, col )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\r\n\t\t\tif ( src !== undefined ) {\r\n\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';\r\n\t\t\r\n\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?\r\n\t\t\t\t\tapi.cell( src, col ).data() :\r\n\t\t\t\t\tapi.row( src ).data() || null;\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn api.data().toArray();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will\r\n\t\t * typically want to use the '$' API method in preference to this as it is more\r\n\t\t * flexible.\r\n\t\t *  @param {int} [iRow] Optional row index for the TR element you want\r\n\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\r\n\t\t *    in the table's body, or iRow is defined, just the TR element requested.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the nodes from the table\r\n\t\t *      var nNodes = oTable.fnGetNodes( );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnGetNodes = function( iRow )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\r\n\t\t\treturn iRow !== undefined ?\r\n\t\t\t\tapi.row( iRow ).node() :\r\n\t\t\t\tapi.rows().nodes().flatten().toArray();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the array indexes of a particular cell from it's DOM element\r\n\t\t * and column index including hidden columns\r\n\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body\r\n\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or\r\n\t\t *    if given as a cell, an array of [row index, column index (visible),\r\n\t\t *    column index (all)] is given.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      $('#example tbody td').click( function () {\r\n\t\t *        // Get the position of the current data from the node\r\n\t\t *        var aPos = oTable.fnGetPosition( this );\r\n\t\t *\r\n\t\t *        // Get the data array for this row\r\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\r\n\t\t *\r\n\t\t *        // Update the data array and return the value\r\n\t\t *        aData[ aPos[1] ] = 'clicked';\r\n\t\t *        this.innerHTML = 'clicked';\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Init DataTables\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnGetPosition = function( node )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\tvar nodeName = node.nodeName.toUpperCase();\r\n\t\t\r\n\t\t\tif ( nodeName == 'TR' ) {\r\n\t\t\t\treturn api.row( node ).index();\r\n\t\t\t}\r\n\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {\r\n\t\t\t\tvar cell = api.cell( node ).index();\r\n\t\t\r\n\t\t\t\treturn [\r\n\t\t\t\t\tcell.row,\r\n\t\t\t\t\tcell.columnVisible,\r\n\t\t\t\t\tcell.column\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Check to see if a row is 'open' or not.\r\n\t\t *  @param {node} nTr the table row to check\r\n\t\t *  @returns {boolean} true if the row is currently open, false otherwise\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnIsOpen = function( nTr )\r\n\t\t{\r\n\t\t\treturn this.api( true ).row( nTr ).child.isShown();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * This function will place a new row directly after a row which is currently\r\n\t\t * on display on the page, with the HTML contents that is passed into the\r\n\t\t * function. This can be used, for example, to ask for confirmation that a\r\n\t\t * particular record should be deleted.\r\n\t\t *  @param {node} nTr The table row to 'open'\r\n\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row\r\n\t\t *  @param {string} sClass Class to give the new TD cell\r\n\t\t *  @returns {node} The row opened. Note that if the table row passed in as the\r\n\t\t *    first parameter, is not found in the table, this method will silently\r\n\t\t *    return.\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnOpen = function( nTr, mHtml, sClass )\r\n\t\t{\r\n\t\t\treturn this.api( true )\r\n\t\t\t\t.row( nTr )\r\n\t\t\t\t.child( mHtml, sClass )\r\n\t\t\t\t.show()\r\n\t\t\t\t.child()[0];\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Change the pagination - provides the internal logic for pagination in a simple API\r\n\t\t * function. With this function you can have a DataTables table go to the next,\r\n\t\t * previous, first or last pages.\r\n\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\r\n\t\t *    or page number to jump to (integer), note that page 0 is the first page.\r\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnPageChange( 'next' );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnPageChange = function ( mAction, bRedraw )\r\n\t\t{\r\n\t\t\tvar api = this.api( true ).page( mAction );\r\n\t\t\r\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\r\n\t\t\t\tapi.draw(false);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Show a particular column\r\n\t\t *  @param {int} iCol The column whose display should be changed\r\n\t\t *  @param {bool} bShow Show (true) or hide (false) the column\r\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Hide the second column after initialisation\r\n\t\t *      oTable.fnSetColumnVis( 1, false );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )\r\n\t\t{\r\n\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );\r\n\t\t\r\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\r\n\t\t\t\tapi.columns.adjust().draw();\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the settings for a particular table for external manipulation\r\n\t\t *  @returns {object} DataTables settings object. See\r\n\t\t *    {@link DataTable.models.oSettings}\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      var oSettings = oTable.fnSettings();\r\n\t\t *\r\n\t\t *      // Show an example parameter from the settings\r\n\t\t *      alert( oSettings._iDisplayStart );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnSettings = function()\r\n\t\t{\r\n\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Sort the table by a particular column\r\n\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the\r\n\t\t *    'display index' if you have hidden data entries\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort immediately with columns 0 and 1\r\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnSort = function( aaSort )\r\n\t\t{\r\n\t\t\tthis.api( true ).order( aaSort ).draw();\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Attach a sort listener to an element for a given column\r\n\t\t *  @param {node} nNode the element to attach the sort listener to\r\n\t\t *  @param {int} iColumn the column that a click on this node will sort on\r\n\t\t *  @param {function} [fnCallback] callback function when sort is run\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\r\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )\r\n\t\t{\r\n\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Update a table cell or row - this method will accept either a single value to\r\n\t\t * update the cell with, an array of values with one element for each column or\r\n\t\t * an object in the same format as the original data source. The function is\r\n\t\t * self-referencing in order to make the multi column updates easier.\r\n\t\t *  @param {object|array|string} mData Data to update the cell/row with\r\n\t\t *  @param {node|int} mRow TR element you want to update or the aoData index\r\n\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to\r\n\t\t *    update a whole row.\r\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\r\n\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not\r\n\t\t *  @returns {int} 0 on success, 1 on error\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\r\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\r\n\t\t{\r\n\t\t\tvar api = this.api( true );\r\n\t\t\r\n\t\t\tif ( iColumn === undefined || iColumn === null ) {\r\n\t\t\t\tapi.row( mRow ).data( mData );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tapi.cell( mRow, iColumn ).data( mData );\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif ( bAction === undefined || bAction ) {\r\n\t\t\t\tapi.columns.adjust();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\r\n\t\t\t\tapi.draw();\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order\r\n\t\t * to ensure compatibility.\r\n\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\r\n\t\t *    formats \"X\" and \"X.Y\" are also acceptable.\r\n\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required\r\n\t\t *    version, or false if this version of DataTales is not suitable\r\n\t\t *  @method\r\n\t\t *  @dtopt API\r\n\t\t *  @deprecated Since v1.10\r\n\t\t *\r\n\t\t *  @example\r\n\t\t *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\r\n\t\t *    } );\r\n\t\t */\r\n\t\tthis.fnVersionCheck = _ext.fnVersionCheck;\r\n\t\t\r\n\t\r\n\t\tvar _that = this;\r\n\t\tvar emptyInit = options === undefined;\r\n\t\tvar len = this.length;\r\n\t\r\n\t\tif ( emptyInit ) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\r\n\t\tthis.oApi = this.internal = _ext.internal;\r\n\t\r\n\t\t// Extend with old style plug-in API methods\r\n\t\tfor ( var fn in DataTable.ext.internal ) {\r\n\t\t\tif ( fn ) {\r\n\t\t\t\tthis[fn] = _fnExternApiFunc(fn);\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tthis.each(function() {\r\n\t\t\t// For each initialisation we want to give it a clean initialisation\r\n\t\t\t// object that can be bashed around\r\n\t\t\tvar o = {};\r\n\t\t\tvar oInit = len > 1 ? // optimisation for single table case\r\n\t\t\t\t_fnExtend( o, options, true ) :\r\n\t\t\t\toptions;\r\n\t\r\n\t\t\t/*global oInit,_that,emptyInit*/\r\n\t\t\tvar i=0, iLen, j, jLen, k, kLen;\r\n\t\t\tvar sId = this.getAttribute( 'id' );\r\n\t\t\tvar bInitHandedOff = false;\r\n\t\t\tvar defaults = DataTable.defaults;\r\n\t\t\tvar $this = $(this);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t/* Sanity check */\r\n\t\t\tif ( this.nodeName.toLowerCase() != 'table' )\r\n\t\t\t{\r\n\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Backwards compatibility for the defaults */\r\n\t\t\t_fnCompatOpts( defaults );\r\n\t\t\t_fnCompatCols( defaults.column );\r\n\t\t\t\r\n\t\t\t/* Convert the camel-case defaults to Hungarian */\r\n\t\t\t_fnCamelToHungarian( defaults, defaults, true );\r\n\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );\r\n\t\t\t\r\n\t\t\t/* Setting up the initialisation object */\r\n\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t/* Check to see if we are re-initialising a table */\r\n\t\t\tvar allSettings = DataTable.settings;\r\n\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\r\n\t\t\t{\r\n\t\t\t\tvar s = allSettings[i];\r\n\t\t\t\r\n\t\t\t\t/* Base check on table node */\r\n\t\t\t\tif (\r\n\t\t\t\t\ts.nTable == this ||\r\n\t\t\t\t\t(s.nTHead && s.nTHead.parentNode == this) ||\r\n\t\t\t\t\t(s.nTFoot && s.nTFoot.parentNode == this)\r\n\t\t\t\t) {\r\n\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\r\n\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\r\n\t\t\t\r\n\t\t\t\t\tif ( emptyInit || bRetrieve )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn s.oInstance;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( bDestroy )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ts.oInstance.fnDestroy();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously\r\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\r\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\r\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\r\n\t\t\t\t */\r\n\t\t\t\tif ( s.sTableId == this.id )\r\n\t\t\t\t{\r\n\t\t\t\t\tallSettings.splice( i, 1 );\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Ensure the table has an ID - required for accessibility */\r\n\t\t\tif ( sId === null || sId === \"\" )\r\n\t\t\t{\r\n\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);\r\n\t\t\t\tthis.id = sId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Create the settings object for this table and set some of the default parameters */\r\n\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {\r\n\t\t\t\t\"sDestroyWidth\": $this[0].style.width,\r\n\t\t\t\t\"sInstance\":     sId,\r\n\t\t\t\t\"sTableId\":      sId\r\n\t\t\t} );\r\n\t\t\toSettings.nTable = this;\r\n\t\t\toSettings.oApi   = _that.internal;\r\n\t\t\toSettings.oInit  = oInit;\r\n\t\t\t\r\n\t\t\tallSettings.push( oSettings );\r\n\t\t\t\r\n\t\t\t// Need to add the instance after the instance after the settings object has been added\r\n\t\t\t// to the settings array, so we can self reference the table instance if more than one\r\n\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\r\n\t\t\t\r\n\t\t\t// Backwards compatibility, before we apply all the defaults\r\n\t\t\t_fnCompatOpts( oInit );\r\n\t\t\t_fnLanguageCompat( oInit.oLanguage );\r\n\t\t\t\r\n\t\t\t// If the length menu is given, but the init display length is not, use the length menu\r\n\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )\r\n\t\t\t{\r\n\t\t\t\toInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?\r\n\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Apply the defaults and init options to make a single init object will all\r\n\t\t\t// options defined from defaults and instance options.\r\n\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Map the initialisation options onto the settings object\r\n\t\t\t_fnMap( oSettings.oFeatures, oInit, [\r\n\t\t\t\t\"bPaginate\",\r\n\t\t\t\t\"bLengthChange\",\r\n\t\t\t\t\"bFilter\",\r\n\t\t\t\t\"bSort\",\r\n\t\t\t\t\"bSortMulti\",\r\n\t\t\t\t\"bInfo\",\r\n\t\t\t\t\"bProcessing\",\r\n\t\t\t\t\"bAutoWidth\",\r\n\t\t\t\t\"bSortClasses\",\r\n\t\t\t\t\"bServerSide\",\r\n\t\t\t\t\"bDeferRender\"\r\n\t\t\t] );\r\n\t\t\t_fnMap( oSettings, oInit, [\r\n\t\t\t\t\"asStripeClasses\",\r\n\t\t\t\t\"ajax\",\r\n\t\t\t\t\"fnServerData\",\r\n\t\t\t\t\"fnFormatNumber\",\r\n\t\t\t\t\"sServerMethod\",\r\n\t\t\t\t\"aaSorting\",\r\n\t\t\t\t\"aaSortingFixed\",\r\n\t\t\t\t\"aLengthMenu\",\r\n\t\t\t\t\"sPaginationType\",\r\n\t\t\t\t\"sAjaxSource\",\r\n\t\t\t\t\"sAjaxDataProp\",\r\n\t\t\t\t\"iStateDuration\",\r\n\t\t\t\t\"sDom\",\r\n\t\t\t\t\"bSortCellsTop\",\r\n\t\t\t\t\"iTabIndex\",\r\n\t\t\t\t\"fnStateLoadCallback\",\r\n\t\t\t\t\"fnStateSaveCallback\",\r\n\t\t\t\t\"renderer\",\r\n\t\t\t\t\"searchDelay\",\r\n\t\t\t\t\"rowId\",\r\n\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\r\n\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],\r\n\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],\r\n\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ]\r\n\t\t\t] );\r\n\t\t\t_fnMap( oSettings.oScroll, oInit, [\r\n\t\t\t\t[ \"sScrollX\", \"sX\" ],\r\n\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],\r\n\t\t\t\t[ \"sScrollY\", \"sY\" ],\r\n\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]\r\n\t\t\t] );\r\n\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\r\n\t\t\t\r\n\t\t\t/* Callback functions which are array driven */\r\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\r\n\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\r\n\t\t\t\r\n\t\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\r\n\t\t\t\r\n\t\t\t/* Browser support detection */\r\n\t\t\t_fnBrowserDetect( oSettings );\r\n\t\t\t\r\n\t\t\tvar oClasses = oSettings.oClasses;\r\n\t\t\t\r\n\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\r\n\t\t\t$this.addClass( oClasses.sTable );\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif ( oSettings.iInitDisplayStart === undefined )\r\n\t\t\t{\r\n\t\t\t\t/* Display start point, taking into account the save saving */\r\n\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;\r\n\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( oInit.iDeferLoading !== null )\r\n\t\t\t{\r\n\t\t\t\toSettings.bDeferLoading = true;\r\n\t\t\t\tvar tmp = Array.isArray( oInit.iDeferLoading );\r\n\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\r\n\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Language definitions */\r\n\t\t\tvar oLanguage = oSettings.oLanguage;\r\n\t\t\t$.extend( true, oLanguage, oInit.oLanguage );\r\n\t\t\t\r\n\t\t\tif ( oLanguage.sUrl )\r\n\t\t\t{\r\n\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language\r\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\r\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\r\n\t\t\t\t */\r\n\t\t\t\t$.ajax( {\r\n\t\t\t\t\tdataType: 'json',\r\n\t\t\t\t\turl: oLanguage.sUrl,\r\n\t\t\t\t\tsuccess: function ( json ) {\r\n\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );\r\n\t\t\t\t\t\t_fnLanguageCompat( json );\r\n\t\t\t\t\t\t$.extend( true, oLanguage, json );\r\n\t\t\t\r\n\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);\r\n\t\t\t\t\t\t_fnInitialise( oSettings );\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function () {\r\n\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can\r\n\t\t\t\t\t\t_fnInitialise( oSettings );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tbInitHandedOff = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Stripes\r\n\t\t\t */\r\n\t\t\tif ( oInit.asStripeClasses === null )\r\n\t\t\t{\r\n\t\t\t\toSettings.asStripeClasses =[\r\n\t\t\t\t\toClasses.sStripeOdd,\r\n\t\t\t\t\toClasses.sStripeEven\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Remove row stripe classes if they are already on the table row */\r\n\t\t\tvar stripeClasses = oSettings.asStripeClasses;\r\n\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);\r\n\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {\r\n\t\t\t\treturn rowOne.hasClass(el);\r\n\t\t\t} ) ) !== -1 ) {\r\n\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );\r\n\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Columns\r\n\t\t\t * See if we should load columns automatically or use defined ones\r\n\t\t\t */\r\n\t\t\tvar anThs = [];\r\n\t\t\tvar aoColumnsInit;\r\n\t\t\tvar nThead = this.getElementsByTagName('thead');\r\n\t\t\tif ( nThead.length !== 0 )\r\n\t\t\t{\r\n\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );\r\n\t\t\t\tanThs = _fnGetUniqueThs( oSettings );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* If not given a column array, generate one with nulls */\r\n\t\t\tif ( oInit.aoColumns === null )\r\n\t\t\t{\r\n\t\t\t\taoColumnsInit = [];\r\n\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )\r\n\t\t\t\t{\r\n\t\t\t\t\taoColumnsInit.push( null );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\taoColumnsInit = oInit.aoColumns;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Add the columns */\r\n\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\r\n\t\t\t{\r\n\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Apply the column definitions */\r\n\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\r\n\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\t/* HTML5 attribute detection - build an mData object automatically if the\r\n\t\t\t * attributes are found\r\n\t\t\t */\r\n\t\t\tif ( rowOne.length ) {\r\n\t\t\t\tvar a = function ( cell, name ) {\r\n\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {\r\n\t\t\t\t\tvar col = oSettings.aoColumns[i];\r\n\t\t\t\r\n\t\t\t\t\tif ( col.mData === i ) {\r\n\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );\r\n\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );\r\n\t\t\t\r\n\t\t\t\t\t\tif ( sort !== null || filter !== null ) {\r\n\t\t\t\t\t\t\tcol.mData = {\r\n\t\t\t\t\t\t\t\t_:      i+'.display',\r\n\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar features = oSettings.oFeatures;\r\n\t\t\tvar loadedInit = function () {\r\n\t\t\t\t/*\r\n\t\t\t\t * Sorting\r\n\t\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler\r\n\t\t\t\t */\r\n\t\t\t\r\n\t\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting\r\n\t\t\t\t// in case that has been altered, so the default sort reflects that option\r\n\t\t\t\tif ( oInit.aaSorting === undefined ) {\r\n\t\t\t\t\tvar sorting = oSettings.aaSorting;\r\n\t\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\r\n\t\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into\r\n\t\t\t\t * account, and also will apply sorting disabled classes if disabled\r\n\t\t\t\t */\r\n\t\t\t\t_fnSortingClasses( oSettings );\r\n\t\t\t\r\n\t\t\t\tif ( features.bSort ) {\r\n\t\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n\t\t\t\t\t\tif ( oSettings.bSorted ) {\r\n\t\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );\r\n\t\t\t\t\t\t\tvar sortedColumns = {};\r\n\t\t\t\r\n\t\t\t\t\t\t\t$.each( aSort, function (i, val) {\r\n\t\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\r\n\t\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\r\n\t\t\t\t\t\t\t_fnSortAria( oSettings );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n\t\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\r\n\t\t\t\t\t\t_fnSortingClasses( oSettings );\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 'sc' );\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Final init\r\n\t\t\t\t * Cache the header, body and footer as required, creating them if needed\r\n\t\t\t\t */\r\n\t\t\t\r\n\t\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc\r\n\t\t\t\tvar captions = $this.children('caption').each( function () {\r\n\t\t\t\t\tthis._captionSide = $(this).css('caption-side');\r\n\t\t\t\t} );\r\n\t\t\t\r\n\t\t\t\tvar thead = $this.children('thead');\r\n\t\t\t\tif ( thead.length === 0 ) {\r\n\t\t\t\t\tthead = $('<thead/>').appendTo($this);\r\n\t\t\t\t}\r\n\t\t\t\toSettings.nTHead = thead[0];\r\n\t\t\t\r\n\t\t\t\tvar tbody = $this.children('tbody');\r\n\t\t\t\tif ( tbody.length === 0 ) {\r\n\t\t\t\t\ttbody = $('<tbody/>').insertAfter(thead);\r\n\t\t\t\t}\r\n\t\t\t\toSettings.nTBody = tbody[0];\r\n\t\t\t\r\n\t\t\t\tvar tfoot = $this.children('tfoot');\r\n\t\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\r\n\t\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create\r\n\t\t\t\t\t// a tfoot element for the caption element to be appended to\r\n\t\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {\r\n\t\t\t\t\t$this.addClass( oClasses.sNoFooter );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( tfoot.length > 0 ) {\r\n\t\t\t\t\toSettings.nTFoot = tfoot[0];\r\n\t\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t/* Check if there is data passing into the constructor */\r\n\t\t\t\tif ( oInit.aaData ) {\r\n\t\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {\r\n\t\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\r\n\t\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax\r\n\t\t\t\t\t * source since there is no point in reading the DOM data if we are then going\r\n\t\t\t\t\t * to replace it with Ajax data\r\n\t\t\t\t\t */\r\n\t\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t/* Copy the data index array */\r\n\t\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\r\n\t\t\t\r\n\t\t\t\t/* Initialisation complete - table can be drawn */\r\n\t\t\t\toSettings.bInitialised = true;\r\n\t\t\t\r\n\t\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the\r\n\t\t\t\t * language processor)\r\n\t\t\t\t */\r\n\t\t\t\tif ( bInitHandedOff === false ) {\r\n\t\t\t\t\t_fnInitialise( oSettings );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t/* Must be done after everything which can be overridden by the state saving! */\r\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\r\n\t\t\t\r\n\t\t\tif ( oInit.bStateSave )\r\n\t\t\t{\r\n\t\t\t\tfeatures.bStateSave = true;\r\n\t\t\t\t_fnLoadState( oSettings, oInit, loadedInit );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tloadedInit();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} );\r\n\t\t_that = null;\r\n\t\treturn this;\r\n\t};\r\n\t\r\n\t\r\n\t/*\r\n\t * It is useful to have variables which are scoped locally so only the\r\n\t * DataTables functions can access them and they don't leak into global space.\r\n\t * At the same time these functions are often useful over multiple files in the\r\n\t * core and API, so we list, or at least document, all variables which are used\r\n\t * by DataTables as private variables here. This also ensures that there is no\r\n\t * clashing of variable names and that they can easily referenced for reuse.\r\n\t */\r\n\t\r\n\t\r\n\t// Defined else where\r\n\t//  _selector_run\r\n\t//  _selector_opts\r\n\t//  _selector_first\r\n\t//  _selector_row_indexes\r\n\t\r\n\tvar _ext; // DataTable.ext\r\n\tvar _Api; // DataTable.Api\r\n\tvar _api_register; // DataTable.Api.register\r\n\tvar _api_registerPlural; // DataTable.Api.registerPlural\r\n\t\r\n\tvar _re_dic = {};\r\n\tvar _re_new_lines = /[\\r\\n\\u2028]/g;\r\n\tvar _re_html = /<.*?>/g;\r\n\t\r\n\t// This is not strict ISO8601 - Date.parse() is quite lax, although\r\n\t// implementations differ between browsers.\r\n\tvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\r\n\t\r\n\t// Escape regular expression special characters\r\n\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\r\n\t\r\n\t// http://en.wikipedia.org/wiki/Foreign_exchange_market\r\n\t// - \\u20BD - Russian ruble.\r\n\t// - \\u20a9 - South Korean Won\r\n\t// - \\u20BA - Turkish Lira\r\n\t// - \\u20B9 - Indian Rupee\r\n\t// - R - Brazil (R$) and South Africa\r\n\t// - fr - Swiss Franc\r\n\t// - kr - Swedish krona, Norwegian krone and Danish krone\r\n\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\r\n\t// - É - Bitcoin\r\n\t// - Î - Ethereum\r\n\t//   standards as thousands separators.\r\n\tvar _re_formatted_numeric = /['\\u00A0,$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\r\n\t\r\n\t\r\n\tvar _empty = function ( d ) {\r\n\t\treturn !d || d === true || d === '-' ? true : false;\r\n\t};\r\n\t\r\n\t\r\n\tvar _intVal = function ( s ) {\r\n\t\tvar integer = parseInt( s, 10 );\r\n\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;\r\n\t};\r\n\t\r\n\t// Convert from a formatted number with characters other than `.` as the\r\n\t// decimal place, to a Javascript number\r\n\tvar _numToDecimal = function ( num, decimalPoint ) {\r\n\t\t// Cache created regular expressions for speed as this function is called often\r\n\t\tif ( ! _re_dic[ decimalPoint ] ) {\r\n\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\r\n\t\t}\r\n\t\treturn typeof num === 'string' && decimalPoint !== '.' ?\r\n\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\r\n\t\t\tnum;\r\n\t};\r\n\t\r\n\t\r\n\tvar _isNumber = function ( d, decimalPoint, formatted ) {\r\n\t\tvar strType = typeof d === 'string';\r\n\t\r\n\t\t// If empty return immediately so there must be a number if it is a\r\n\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected\r\n\t\t// as a formatted number for currency\r\n\t\tif ( _empty( d ) ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\r\n\t\tif ( decimalPoint && strType ) {\r\n\t\t\td = _numToDecimal( d, decimalPoint );\r\n\t\t}\r\n\t\r\n\t\tif ( formatted && strType ) {\r\n\t\t\td = d.replace( _re_formatted_numeric, '' );\r\n\t\t}\r\n\t\r\n\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );\r\n\t};\r\n\t\r\n\t\r\n\t// A string without HTML in it can be considered to be HTML still\r\n\tvar _isHtml = function ( d ) {\r\n\t\treturn _empty( d ) || typeof d === 'string';\r\n\t};\r\n\t\r\n\t\r\n\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {\r\n\t\tif ( _empty( d ) ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\r\n\t\tvar html = _isHtml( d );\r\n\t\treturn ! html ?\r\n\t\t\tnull :\r\n\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\r\n\t\t\t\ttrue :\r\n\t\t\t\tnull;\r\n\t};\r\n\t\r\n\t\r\n\tvar _pluck = function ( a, prop, prop2 ) {\r\n\t\tvar out = [];\r\n\t\tvar i=0, ien=a.length;\r\n\t\r\n\t\t// Could have the test in the loop for slightly smaller code, but speed\r\n\t\t// is essential here\r\n\t\tif ( prop2 !== undefined ) {\r\n\t\t\tfor ( ; i<ien ; i++ ) {\r\n\t\t\t\tif ( a[i] && a[i][ prop ] ) {\r\n\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor ( ; i<ien ; i++ ) {\r\n\t\t\t\tif ( a[i] ) {\r\n\t\t\t\t\tout.push( a[i][ prop ] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn out;\r\n\t};\r\n\t\r\n\t\r\n\t// Basically the same as _pluck, but rather than looping over `a` we use `order`\r\n\t// as the indexes to pick from `a`\r\n\tvar _pluck_order = function ( a, order, prop, prop2 )\r\n\t{\r\n\t\tvar out = [];\r\n\t\tvar i=0, ien=order.length;\r\n\t\r\n\t\t// Could have the test in the loop for slightly smaller code, but speed\r\n\t\t// is essential here\r\n\t\tif ( prop2 !== undefined ) {\r\n\t\t\tfor ( ; i<ien ; i++ ) {\r\n\t\t\t\tif ( a[ order[i] ][ prop ] ) {\r\n\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor ( ; i<ien ; i++ ) {\r\n\t\t\t\tout.push( a[ order[i] ][ prop ] );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn out;\r\n\t};\r\n\t\r\n\t\r\n\tvar _range = function ( len, start )\r\n\t{\r\n\t\tvar out = [];\r\n\t\tvar end;\r\n\t\r\n\t\tif ( start === undefined ) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = len;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tend = start;\r\n\t\t\tstart = len;\r\n\t\t}\r\n\t\r\n\t\tfor ( var i=start ; i<end ; i++ ) {\r\n\t\t\tout.push( i );\r\n\t\t}\r\n\t\r\n\t\treturn out;\r\n\t};\r\n\t\r\n\t\r\n\tvar _removeEmpty = function ( a )\r\n\t{\r\n\t\tvar out = [];\r\n\t\r\n\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {\r\n\t\t\tif ( a[i] ) { // careful - will remove all falsy values!\r\n\t\t\t\tout.push( a[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn out;\r\n\t};\r\n\t\r\n\t\r\n\tvar _stripHtml = function ( d ) {\r\n\t\treturn d.replace( _re_html, '' );\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Determine if all values in the array are unique. This means we can short\r\n\t * cut the _unique method at the cost of a single loop. A sorted array is used\r\n\t * to easily check the values.\r\n\t *\r\n\t * @param  {array} src Source array\r\n\t * @return {boolean} true if all unique, false otherwise\r\n\t * @ignore\r\n\t */\r\n\tvar _areAllUnique = function ( src ) {\r\n\t\tif ( src.length < 2 ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\r\n\t\tvar sorted = src.slice().sort();\r\n\t\tvar last = sorted[0];\r\n\t\r\n\t\tfor ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\r\n\t\t\tif ( sorted[i] === last ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\r\n\t\t\tlast = sorted[i];\r\n\t\t}\r\n\t\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Find the unique elements in a source array.\r\n\t *\r\n\t * @param  {array} src Source array\r\n\t * @return {array} Array of unique items\r\n\t * @ignore\r\n\t */\r\n\tvar _unique = function ( src )\r\n\t{\r\n\t\tif ( _areAllUnique( src ) ) {\r\n\t\t\treturn src.slice();\r\n\t\t}\r\n\t\r\n\t\t// A faster unique method is to use object keys to identify used values,\r\n\t\t// but this doesn't work with arrays or objects, which we must also\r\n\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more\r\n\t\t// information.\r\n\t\tvar\r\n\t\t\tout = [],\r\n\t\t\tval,\r\n\t\t\ti, ien=src.length,\r\n\t\t\tj, k=0;\r\n\t\r\n\t\tagain: for ( i=0 ; i<ien ; i++ ) {\r\n\t\t\tval = src[i];\r\n\t\r\n\t\t\tfor ( j=0 ; j<k ; j++ ) {\r\n\t\t\t\tif ( out[j] === val ) {\r\n\t\t\t\t\tcontinue again;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tout.push( val );\r\n\t\t\tk++;\r\n\t\t}\r\n\t\r\n\t\treturn out;\r\n\t};\r\n\t\r\n\t// Surprisingly this is faster than [].concat.apply\r\n\t// https://jsperf.com/flatten-an-array-loop-vs-reduce/2\r\n\tvar _flatten = function (out, val) {\r\n\t\tif (Array.isArray(val)) {\r\n\t\t\tfor (var i=0 ; i<val.length ; i++) {\r\n\t\t\t\t_flatten(out, val[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tout.push(val);\r\n\t\t}\r\n\t  \r\n\t\treturn out;\r\n\t}\r\n\t\r\n\tvar _includes = function (search, start) {\r\n\t\tif (start === undefined) {\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\r\n\t\treturn this.indexOf(search, start) !== -1;\t\r\n\t};\r\n\t\r\n\t// Array.isArray polyfill.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\r\n\tif (! Array.isArray) {\r\n\t    Array.isArray = function(arg) {\r\n\t        return Object.prototype.toString.call(arg) === '[object Array]';\r\n\t    };\r\n\t}\r\n\t\r\n\tif (! Array.prototype.includes) {\r\n\t\tArray.prototype.includes = _includes;\r\n\t}\r\n\t\r\n\t// .trim() polyfill\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\r\n\tif (!String.prototype.trim) {\r\n\t  String.prototype.trim = function () {\r\n\t    return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t  };\r\n\t}\r\n\t\r\n\tif (! String.prototype.includes) {\r\n\t\tString.prototype.includes = _includes;\r\n\t}\r\n\t\r\n\t/**\r\n\t * DataTables utility methods\r\n\t * \r\n\t * This namespace provides helper methods that DataTables uses internally to\r\n\t * create a DataTable, but which are not exclusively used only for DataTables.\r\n\t * These methods can be used by extension authors to save the duplication of\r\n\t * code.\r\n\t *\r\n\t *  @namespace\r\n\t */\r\n\tDataTable.util = {\r\n\t\t/**\r\n\t\t * Throttle the calls to a function. Arguments and context are maintained\r\n\t\t * for the throttled function.\r\n\t\t *\r\n\t\t * @param {function} fn Function to be called\r\n\t\t * @param {integer} freq Call frequency in mS\r\n\t\t * @return {function} Wrapped function\r\n\t\t */\r\n\t\tthrottle: function ( fn, freq ) {\r\n\t\t\tvar\r\n\t\t\t\tfrequency = freq !== undefined ? freq : 200,\r\n\t\t\t\tlast,\r\n\t\t\t\ttimer;\r\n\t\r\n\t\t\treturn function () {\r\n\t\t\t\tvar\r\n\t\t\t\t\tthat = this,\r\n\t\t\t\t\tnow  = +new Date(),\r\n\t\t\t\t\targs = arguments;\r\n\t\r\n\t\t\t\tif ( last && now < last + frequency ) {\r\n\t\t\t\t\tclearTimeout( timer );\r\n\t\r\n\t\t\t\t\ttimer = setTimeout( function () {\r\n\t\t\t\t\t\tlast = undefined;\r\n\t\t\t\t\t\tfn.apply( that, args );\r\n\t\t\t\t\t}, frequency );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlast = now;\r\n\t\t\t\t\tfn.apply( that, args );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\r\n\t\r\n\t\t/**\r\n\t\t * Escape a string such that it can be used in a regular expression\r\n\t\t *\r\n\t\t *  @param {string} val string to escape\r\n\t\t *  @returns {string} escaped string\r\n\t\t */\r\n\t\tescapeRegex: function ( val ) {\r\n\t\t\treturn val.replace( _re_escape_regex, '\\\\$1' );\r\n\t\t},\r\n\t\r\n\t\t/**\r\n\t\t * Create a function that will write to a nested object or array\r\n\t\t * @param {*} source JSON notation string\r\n\t\t * @returns Write function\r\n\t\t */\r\n\t\tset: function ( source ) {\r\n\t\t\tif ( $.isPlainObject( source ) ) {\r\n\t\t\t\t/* Unlike get, only the underscore (global) option is used for for\r\n\t\t\t\t * setting data since we don't know the type here. This is why an object\r\n\t\t\t\t * option is not documented for `mData` (which is read/write), but it is\r\n\t\t\t\t * for `mRender` which is read only.\r\n\t\t\t\t */\r\n\t\t\t\treturn DataTable.util.set( source._ );\r\n\t\t\t}\r\n\t\t\telse if ( source === null ) {\r\n\t\t\t\t// Nothing to do when the data source is null\r\n\t\t\t\treturn function () {};\r\n\t\t\t}\r\n\t\t\telse if ( typeof source === 'function' ) {\r\n\t\t\t\treturn function (data, val, meta) {\r\n\t\t\t\t\tsource( data, 'set', val, meta );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||\r\n\t\t\t\t\t  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )\r\n\t\t\t{\r\n\t\t\t\t// Like the get, we need to get data from a nested object\r\n\t\t\t\tvar setData = function (data, val, src) {\r\n\t\t\t\t\tvar a = _fnSplitObjNotation( src ), b;\r\n\t\t\t\t\tvar aLast = a[a.length-1];\r\n\t\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;\r\n\t\t\r\n\t\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ ) {\r\n\t\t\t\t\t\t// Protect against prototype pollution\r\n\t\t\t\t\t\tif (a[i] === '__proto__' || a[i] === 'constructor') {\r\n\t\t\t\t\t\t\tthrow new Error('Cannot set prototype values');\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t// Check if we are dealing with an array notation request\r\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\r\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\r\n\t\t\r\n\t\t\t\t\t\tif ( arrayNotation ) {\r\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\r\n\t\t\t\t\t\t\tdata[ a[i] ] = [];\r\n\t\t\r\n\t\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse\r\n\t\t\t\t\t\t\tb = a.slice();\r\n\t\t\t\t\t\t\tb.splice( 0, i+1 );\r\n\t\t\t\t\t\t\tinnerSrc = b.join('.');\r\n\t\t\r\n\t\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested\r\n\t\t\t\t\t\t\tif ( Array.isArray( val ) ) {\r\n\t\t\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ ) {\r\n\t\t\t\t\t\t\t\t\to = {};\r\n\t\t\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );\r\n\t\t\t\t\t\t\t\t\tdata[ a[i] ].push( o );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t// We've been asked to save data to an array, but it\r\n\t\t\t\t\t\t\t\t// isn't array data to be saved. Best that can be done\r\n\t\t\t\t\t\t\t\t// is to just save the value.\r\n\t\t\t\t\t\t\t\tdata[ a[i] ] = val;\r\n\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder\r\n\t\t\t\t\t\t\t// of the source and has set the data, thus we can exit here\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if ( funcNotation ) {\r\n\t\t\t\t\t\t\t// Function call\r\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\r\n\t\t\t\t\t\t\tdata = data[ a[i] ]( val );\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t// If the nested object doesn't currently exist - since we are\r\n\t\t\t\t\t\t// trying to set the value - create it\r\n\t\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined ) {\r\n\t\t\t\t\t\t\tdata[ a[i] ] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdata = data[ a[i] ];\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t// Last item in the input - i.e, the actual set\r\n\t\t\t\t\tif ( aLast.match(__reFn ) ) {\r\n\t\t\t\t\t\t// Function call\r\n\t\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name\r\n\t\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway\r\n\t\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\t\treturn function (data, val) { // meta is also passed in, but not used\r\n\t\t\t\t\treturn setData( data, val, source );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Array or flat object mapping\r\n\t\t\t\treturn function (data, val) { // meta is also passed in, but not used\r\n\t\t\t\t\tdata[source] = val;\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t/**\r\n\t\t * Create a function that will read nested objects from arrays, based on JSON notation\r\n\t\t * @param {*} source JSON notation string\r\n\t\t * @returns Value read\r\n\t\t */\r\n\t\tget: function ( source ) {\r\n\t\t\tif ( $.isPlainObject( source ) ) {\r\n\t\t\t\t// Build an object of get functions, and wrap them in a single call\r\n\t\t\t\tvar o = {};\r\n\t\t\t\t$.each( source, function (key, val) {\r\n\t\t\t\t\tif ( val ) {\r\n\t\t\t\t\t\to[key] = DataTable.util.get( val );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\r\n\t\t\t\treturn function (data, type, row, meta) {\r\n\t\t\t\t\tvar t = o[type] || o._;\r\n\t\t\t\t\treturn t !== undefined ?\r\n\t\t\t\t\t\tt(data, type, row, meta) :\r\n\t\t\t\t\t\tdata;\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if ( source === null ) {\r\n\t\t\t\t// Give an empty string for rendering / sorting etc\r\n\t\t\t\treturn function (data) { // type, row and meta also passed, but not used\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if ( typeof source === 'function' ) {\r\n\t\t\t\treturn function (data, type, row, meta) {\r\n\t\t\t\t\treturn source( data, type, row, meta );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||\r\n\t\t\t\t\t  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )\r\n\t\t\t{\r\n\t\t\t\t/* If there is a . in the source string then the data source is in a\r\n\t\t\t\t * nested object so we loop over the data for each level to get the next\r\n\t\t\t\t * level down. On each loop we test for undefined, and if found immediately\r\n\t\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\r\n\t\t\t\t * be used if defined, rather than throwing an error\r\n\t\t\t\t */\r\n\t\t\t\tvar fetchData = function (data, type, src) {\r\n\t\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;\r\n\t\t\r\n\t\t\t\t\tif ( src !== \"\" ) {\r\n\t\t\t\t\t\tvar a = _fnSplitObjNotation( src );\r\n\t\t\r\n\t\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ ) {\r\n\t\t\t\t\t\t\t// Check if we are dealing with special notation\r\n\t\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\r\n\t\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\r\n\t\t\r\n\t\t\t\t\t\t\tif ( arrayNotation ) {\r\n\t\t\t\t\t\t\t\t// Array notation\r\n\t\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\r\n\t\t\r\n\t\t\t\t\t\t\t\t// Condition allows simply [] to be passed in\r\n\t\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {\r\n\t\t\t\t\t\t\t\t\tdata = data[ a[i] ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tout = [];\r\n\t\t\r\n\t\t\t\t\t\t\t\t// Get the remainder of the nested object to get\r\n\t\t\t\t\t\t\t\ta.splice( 0, i+1 );\r\n\t\t\t\t\t\t\t\tinnerSrc = a.join('.');\r\n\t\t\r\n\t\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested\r\n\t\t\t\t\t\t\t\tif ( Array.isArray( data ) ) {\r\n\t\t\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\r\n\t\t\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that\r\n\t\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned\r\n\t\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\r\n\t\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);\r\n\t\t\r\n\t\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder\r\n\t\t\t\t\t\t\t\t// of the source requested, so we exit from the loop\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if ( funcNotation ) {\r\n\t\t\t\t\t\t\t\t// Function call\r\n\t\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\r\n\t\t\t\t\t\t\t\tdata = data[ a[i] ]();\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined ) {\r\n\t\t\t\t\t\t\t\treturn undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\tdata = data[ a[i] ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\t\treturn function (data, type) { // row and meta also passed, but not used\r\n\t\t\t\t\treturn fetchData( data, type, source );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Array or flat object mapping\r\n\t\t\t\treturn function (data, type) { // row and meta also passed, but not used\r\n\t\t\t\t\treturn data[source];\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a mapping object that allows camel case parameters to be looked up\r\n\t * for their Hungarian counterparts. The mapping is stored in a private\r\n\t * parameter called `_hungarianMap` which can be accessed on the source object.\r\n\t *  @param {object} o\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnHungarianMap ( o )\r\n\t{\r\n\t\tvar\r\n\t\t\thungarian = 'a aa ai ao as b fn i m o s ',\r\n\t\t\tmatch,\r\n\t\t\tnewKey,\r\n\t\t\tmap = {};\r\n\t\r\n\t\t$.each( o, function (key, val) {\r\n\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);\r\n\t\r\n\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )\r\n\t\t\t{\r\n\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );\r\n\t\t\t\tmap[ newKey ] = key;\r\n\t\r\n\t\t\t\tif ( match[1] === 'o' )\r\n\t\t\t\t{\r\n\t\t\t\t\t_fnHungarianMap( o[key] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\to._hungarianMap = map;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert from camel case parameters to Hungarian, based on a Hungarian map\r\n\t * created by _fnHungarianMap.\r\n\t *  @param {object} src The model object which holds all parameters that can be\r\n\t *    mapped.\r\n\t *  @param {object} user The object to convert from camel case to Hungarian.\r\n\t *  @param {boolean} force When set to `true`, properties which already have a\r\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n\t *    won't be.\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnCamelToHungarian ( src, user, force )\r\n\t{\r\n\t\tif ( ! src._hungarianMap ) {\r\n\t\t\t_fnHungarianMap( src );\r\n\t\t}\r\n\t\r\n\t\tvar hungarianKey;\r\n\t\r\n\t\t$.each( user, function (key, val) {\r\n\t\t\thungarianKey = src._hungarianMap[ key ];\r\n\t\r\n\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\r\n\t\t\t{\r\n\t\t\t\t// For objects, we need to buzz down into the object to copy parameters\r\n\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Copy the camelCase options over to the hungarian\r\n\t\t\t\t\tif ( ! user[ hungarianKey ] ) {\r\n\t\t\t\t\t\tuser[ hungarianKey ] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );\r\n\t\r\n\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tuser[hungarianKey] = user[ key ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Language compatibility - when certain options are given, and others aren't, we\r\n\t * need to duplicate the values over, in order to provide backwards compatibility\r\n\t * with older language files.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnLanguageCompat( lang )\r\n\t{\r\n\t\t// Note the use of the Hungarian notation for the parameters in this method as\r\n\t\t// this is called after the mapping of camelCase to Hungarian\r\n\t\tvar defaults = DataTable.defaults.oLanguage;\r\n\t\r\n\t\t// Default mapping\r\n\t\tvar defaultDecimal = defaults.sDecimal;\r\n\t\tif ( defaultDecimal ) {\r\n\t\t\t_addNumericSort( defaultDecimal );\r\n\t\t}\r\n\t\r\n\t\tif ( lang ) {\r\n\t\t\tvar zeroRecords = lang.sZeroRecords;\r\n\t\r\n\t\t\t// Backwards compatibility - if there is no sEmptyTable given, then use the same as\r\n\t\t\t// sZeroRecords - assuming that is given.\r\n\t\t\tif ( ! lang.sEmptyTable && zeroRecords &&\r\n\t\t\t\tdefaults.sEmptyTable === \"No data available in table\" )\r\n\t\t\t{\r\n\t\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Likewise with loading records\r\n\t\t\tif ( ! lang.sLoadingRecords && zeroRecords &&\r\n\t\t\t\tdefaults.sLoadingRecords === \"Loading...\" )\r\n\t\t\t{\r\n\t\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Old parameter name of the thousands separator mapped onto the new\r\n\t\t\tif ( lang.sInfoThousands ) {\r\n\t\t\t\tlang.sThousands = lang.sInfoThousands;\r\n\t\t\t}\r\n\t\r\n\t\t\tvar decimal = lang.sDecimal;\r\n\t\t\tif ( decimal && defaultDecimal !== decimal ) {\r\n\t\t\t\t_addNumericSort( decimal );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Map one parameter onto another\r\n\t *  @param {object} o Object to map\r\n\t *  @param {*} knew The new parameter name\r\n\t *  @param {*} old The old parameter name\r\n\t */\r\n\tvar _fnCompatMap = function ( o, knew, old ) {\r\n\t\tif ( o[ knew ] !== undefined ) {\r\n\t\t\to[ old ] = o[ knew ];\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Provide backwards compatibility for the main DT options. Note that the new\r\n\t * options are mapped onto the old parameters, so this is an external interface\r\n\t * change only.\r\n\t *  @param {object} init Object to map\r\n\t */\r\n\tfunction _fnCompatOpts ( init )\r\n\t{\r\n\t\t_fnCompatMap( init, 'ordering',      'bSort' );\r\n\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );\r\n\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );\r\n\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\r\n\t\t_fnCompatMap( init, 'order',         'aaSorting' );\r\n\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\r\n\t\t_fnCompatMap( init, 'paging',        'bPaginate' );\r\n\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );\r\n\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );\r\n\t\t_fnCompatMap( init, 'searching',     'bFilter' );\r\n\t\r\n\t\t// Boolean initialisation of x-scrolling\r\n\t\tif ( typeof init.sScrollX === 'boolean' ) {\r\n\t\t\tinit.sScrollX = init.sScrollX ? '100%' : '';\r\n\t\t}\r\n\t\tif ( typeof init.scrollX === 'boolean' ) {\r\n\t\t\tinit.scrollX = init.scrollX ? '100%' : '';\r\n\t\t}\r\n\t\r\n\t\t// Column search objects are in an array, so it needs to be converted\r\n\t\t// element by element\r\n\t\tvar searchCols = init.aoSearchCols;\r\n\t\r\n\t\tif ( searchCols ) {\r\n\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\r\n\t\t\t\tif ( searchCols[i] ) {\r\n\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Provide backwards compatibility for column options. Note that the new options\r\n\t * are mapped onto the old parameters, so this is an external interface change\r\n\t * only.\r\n\t *  @param {object} init Object to map\r\n\t */\r\n\tfunction _fnCompatCols ( init )\r\n\t{\r\n\t\t_fnCompatMap( init, 'orderable',     'bSortable' );\r\n\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );\r\n\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );\r\n\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );\r\n\t\r\n\t\t// orderData can be given as an integer\r\n\t\tvar dataSort = init.aDataSort;\r\n\t\tif ( typeof dataSort === 'number' && ! Array.isArray( dataSort ) ) {\r\n\t\t\tinit.aDataSort = [ dataSort ];\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Browser feature detection for capabilities, quirks\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnBrowserDetect( settings )\r\n\t{\r\n\t\t// We don't need to do this every time DataTables is constructed, the values\r\n\t\t// calculated are specific to the browser and OS configuration which we\r\n\t\t// don't expect to change between initialisations\r\n\t\tif ( ! DataTable.__browser ) {\r\n\t\t\tvar browser = {};\r\n\t\t\tDataTable.__browser = browser;\r\n\t\r\n\t\t\t// Scrolling feature / quirks detection\r\n\t\t\tvar n = $('<div/>')\r\n\t\t\t\t.css( {\r\n\t\t\t\t\tposition: 'fixed',\r\n\t\t\t\t\ttop: 0,\r\n\t\t\t\t\tleft: $(window).scrollLeft()*-1, // allow for scrolling\r\n\t\t\t\t\theight: 1,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\toverflow: 'hidden'\r\n\t\t\t\t} )\r\n\t\t\t\t.append(\r\n\t\t\t\t\t$('<div/>')\r\n\t\t\t\t\t\t.css( {\r\n\t\t\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\t\t\ttop: 1,\r\n\t\t\t\t\t\t\tleft: 1,\r\n\t\t\t\t\t\t\twidth: 100,\r\n\t\t\t\t\t\t\toverflow: 'scroll'\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t.append(\r\n\t\t\t\t\t\t\t$('<div/>')\r\n\t\t\t\t\t\t\t\t.css( {\r\n\t\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\t\theight: 10\r\n\t\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\t.appendTo( 'body' );\r\n\t\r\n\t\t\tvar outer = n.children();\r\n\t\t\tvar inner = outer.children();\r\n\t\r\n\t\t\t// Numbers below, in order, are:\r\n\t\t\t// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\r\n\t\t\t//\r\n\t\t\t// IE6 XP:                           100 100 100  83\r\n\t\t\t// IE7 Vista:                        100 100 100  83\r\n\t\t\t// IE 8+ Windows:                     83  83 100  83\r\n\t\t\t// Evergreen Windows:                 83  83 100  83\r\n\t\t\t// Evergreen Mac with scrollbars:     85  85 100  85\r\n\t\t\t// Evergreen Mac without scrollbars: 100 100 100 100\r\n\t\r\n\t\t\t// Get scrollbar width\r\n\t\t\tbrowser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\r\n\t\r\n\t\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to\r\n\t\t\t// include the width of the scrollbar, while other browsers ensure the inner\r\n\t\t\t// element is contained without forcing scrolling\r\n\t\t\tbrowser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\r\n\t\r\n\t\t\t// In rtl text layout, some browsers (most, but not all) will place the\r\n\t\t\t// scrollbar on the left, rather than the right.\r\n\t\t\tbrowser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\r\n\t\r\n\t\t\t// IE8- don't provide height and width for getBoundingClientRect\r\n\t\t\tbrowser.bBounding = n[0].getBoundingClientRect().width ? true : false;\r\n\t\r\n\t\t\tn.remove();\r\n\t\t}\r\n\t\r\n\t\t$.extend( settings.oBrowser, DataTable.__browser );\r\n\t\tsettings.oScroll.iBarWidth = DataTable.__browser.barWidth;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Array.prototype reduce[Right] method, used for browsers which don't support\r\n\t * JS 1.6. Done this way to reduce code size, since we iterate either way\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnReduce ( that, fn, init, start, end, inc )\r\n\t{\r\n\t\tvar\r\n\t\t\ti = start,\r\n\t\t\tvalue,\r\n\t\t\tisSet = false;\r\n\t\r\n\t\tif ( init !== undefined ) {\r\n\t\t\tvalue = init;\r\n\t\t\tisSet = true;\r\n\t\t}\r\n\t\r\n\t\twhile ( i !== end ) {\r\n\t\t\tif ( ! that.hasOwnProperty(i) ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\r\n\t\t\tvalue = isSet ?\r\n\t\t\t\tfn( value, that[i], i, that ) :\r\n\t\t\t\tthat[i];\r\n\t\r\n\t\t\tisSet = true;\r\n\t\t\ti += inc;\r\n\t\t}\r\n\t\r\n\t\treturn value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a column to the list used for the table with default values\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {node} nTh The th element for this column\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAddColumn( oSettings, nTh )\r\n\t{\r\n\t\t// Add column to aoColumns array\r\n\t\tvar oDefaults = DataTable.defaults.column;\r\n\t\tvar iCol = oSettings.aoColumns.length;\r\n\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\r\n\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),\r\n\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\r\n\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\r\n\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,\r\n\t\t\tidx: iCol\r\n\t\t} );\r\n\t\toSettings.aoColumns.push( oCol );\r\n\t\r\n\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`\r\n\t\t// passed into extend can be undefined. This allows the user to give a default\r\n\t\t// with only some of the parameters defined, and also not give a default\r\n\t\tvar searchCols = oSettings.aoPreSearchCols;\r\n\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\r\n\t\r\n\t\t// Use the default column options function to initialise classes etc\r\n\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Apply options for a column\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {int} iCol column index to consider\r\n\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnColumnOptions( oSettings, iCol, oOptions )\r\n\t{\r\n\t\tvar oCol = oSettings.aoColumns[ iCol ];\r\n\t\tvar oClasses = oSettings.oClasses;\r\n\t\tvar th = $(oCol.nTh);\r\n\t\r\n\t\t// Try to get width information from the DOM. We can't get it from CSS\r\n\t\t// as we'd need to parse the CSS stylesheet. `width` option can override\r\n\t\tif ( ! oCol.sWidthOrig ) {\r\n\t\t\t// Width attribute\r\n\t\t\toCol.sWidthOrig = th.attr('width') || null;\r\n\t\r\n\t\t\t// Style attribute\r\n\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\r\n\t\t\tif ( t ) {\r\n\t\t\t\toCol.sWidthOrig = t[1];\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/* User specified column options */\r\n\t\tif ( oOptions !== undefined && oOptions !== null )\r\n\t\t{\r\n\t\t\t// Backwards compatibility\r\n\t\t\t_fnCompatCols( oOptions );\r\n\t\r\n\t\t\t// Map camel case parameters to their Hungarian counterparts\r\n\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );\r\n\t\r\n\t\t\t/* Backwards compatibility for mDataProp */\r\n\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )\r\n\t\t\t{\r\n\t\t\t\toOptions.mData = oOptions.mDataProp;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( oOptions.sType )\r\n\t\t\t{\r\n\t\t\t\toCol._sManualType = oOptions.sType;\r\n\t\t\t}\r\n\t\r\n\t\t\t// `class` is a reserved word in Javascript, so we need to provide\r\n\t\t\t// the ability to use a valid name for the camel case input\r\n\t\t\tif ( oOptions.className && ! oOptions.sClass )\r\n\t\t\t{\r\n\t\t\t\toOptions.sClass = oOptions.className;\r\n\t\t\t}\r\n\t\t\tif ( oOptions.sClass ) {\r\n\t\t\t\tth.addClass( oOptions.sClass );\r\n\t\t\t}\r\n\t\r\n\t\t\t$.extend( oCol, oOptions );\r\n\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\r\n\t\r\n\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take\r\n\t\t\t * priority if defined\r\n\t\t\t */\r\n\t\t\tif ( oOptions.iDataSort !== undefined )\r\n\t\t\t{\r\n\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];\r\n\t\t\t}\r\n\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );\r\n\t\t}\r\n\t\r\n\t\t/* Cache the data get and set functions for speed */\r\n\t\tvar mDataSrc = oCol.mData;\r\n\t\tvar mData = _fnGetObjectDataFn( mDataSrc );\r\n\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\r\n\t\r\n\t\tvar attrTest = function( src ) {\r\n\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;\r\n\t\t};\r\n\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\r\n\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\r\n\t\t);\r\n\t\toCol._setter = null;\r\n\t\r\n\t\toCol.fnGetData = function (rowData, type, meta) {\r\n\t\t\tvar innerData = mData( rowData, type, undefined, meta );\r\n\t\r\n\t\t\treturn mRender && type ?\r\n\t\t\t\tmRender( innerData, type, rowData, meta ) :\r\n\t\t\t\tinnerData;\r\n\t\t};\r\n\t\toCol.fnSetData = function ( rowData, val, meta ) {\r\n\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\r\n\t\t};\r\n\t\r\n\t\t// Indicate if DataTables should read DOM data as an object or array\r\n\t\t// Used in _fnGetRowElements\r\n\t\tif ( typeof mDataSrc !== 'number' ) {\r\n\t\t\toSettings._rowReadObject = true;\r\n\t\t}\r\n\t\r\n\t\t/* Feature sorting overrides column specific when off */\r\n\t\tif ( !oSettings.oFeatures.bSort )\r\n\t\t{\r\n\t\t\toCol.bSortable = false;\r\n\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\r\n\t\t}\r\n\t\r\n\t\t/* Check that the class assignment is correct for sorting */\r\n\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;\r\n\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;\r\n\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )\r\n\t\t{\r\n\t\t\toCol.sSortingClass = oClasses.sSortableNone;\r\n\t\t\toCol.sSortingClassJUI = \"\";\r\n\t\t}\r\n\t\telse if ( bAsc && !bDesc )\r\n\t\t{\r\n\t\t\toCol.sSortingClass = oClasses.sSortableAsc;\r\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\r\n\t\t}\r\n\t\telse if ( !bAsc && bDesc )\r\n\t\t{\r\n\t\t\toCol.sSortingClass = oClasses.sSortableDesc;\r\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\toCol.sSortingClass = oClasses.sSortable;\r\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Adjust the table column widths for new data. Note: you would probably want to\r\n\t * do a redraw after calling this function!\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAdjustColumnSizing ( settings )\r\n\t{\r\n\t\t/* Not interested in doing column width calculation if auto-width is disabled */\r\n\t\tif ( settings.oFeatures.bAutoWidth !== false )\r\n\t\t{\r\n\t\t\tvar columns = settings.aoColumns;\r\n\t\r\n\t\t\t_fnCalculateColumnWidths( settings );\r\n\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\r\n\t\t\t{\r\n\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tvar scroll = settings.oScroll;\r\n\t\tif ( scroll.sY !== '' || scroll.sX !== '')\r\n\t\t{\r\n\t\t\t_fnScrollDraw( settings );\r\n\t\t}\r\n\t\r\n\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert the index of a visible column to the index in the data array (take account\r\n\t * of hidden columns)\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {int} iMatch Visible column index to lookup\r\n\t *  @returns {int} i the data index\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )\r\n\t{\r\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n\t\r\n\t\treturn typeof aiVis[iMatch] === 'number' ?\r\n\t\t\taiVis[iMatch] :\r\n\t\t\tnull;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert the index of an index in the data array and convert it to the visible\r\n\t *   column index (take account of hidden columns)\r\n\t *  @param {int} iMatch Column index to lookup\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @returns {int} i the data index\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnColumnIndexToVisible( oSettings, iMatch )\r\n\t{\r\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n\t\tvar iPos = $.inArray( iMatch, aiVis );\r\n\t\r\n\t\treturn iPos !== -1 ? iPos : null;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the number of visible columns\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @returns {int} i the number of visible columns\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnVisbleColumns( oSettings )\r\n\t{\r\n\t\tvar vis = 0;\r\n\t\r\n\t\t// No reduce in IE8, use a loop for now\r\n\t\t$.each( oSettings.aoColumns, function ( i, col ) {\r\n\t\t\tif ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\r\n\t\t\t\tvis++;\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn vis;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get an array of column indexes that match a given property\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {string} sParam Parameter in aoColumns to look for - typically\r\n\t *    bVisible or bSearchable\r\n\t *  @returns {array} Array of indexes with matched properties\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetColumns( oSettings, sParam )\r\n\t{\r\n\t\tvar a = [];\r\n\t\r\n\t\t$.map( oSettings.aoColumns, function(val, i) {\r\n\t\t\tif ( val[sParam] ) {\r\n\t\t\t\ta.push( i );\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn a;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Calculate the 'type' of a column\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnColumnTypes ( settings )\r\n\t{\r\n\t\tvar columns = settings.aoColumns;\r\n\t\tvar data = settings.aoData;\r\n\t\tvar types = DataTable.ext.type.detect;\r\n\t\tvar i, ien, j, jen, k, ken;\r\n\t\tvar col, cell, detectedType, cache;\r\n\t\r\n\t\t// For each column, spin over the \r\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n\t\t\tcol = columns[i];\r\n\t\t\tcache = [];\r\n\t\r\n\t\t\tif ( ! col.sType && col._sManualType ) {\r\n\t\t\t\tcol.sType = col._sManualType;\r\n\t\t\t}\r\n\t\t\telse if ( ! col.sType ) {\r\n\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {\r\n\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {\r\n\t\t\t\t\t\t// Use a cache array so we only need to get the type data\r\n\t\t\t\t\t\t// from the formatter once (when using multiple detectors)\r\n\t\t\t\t\t\tif ( cache[k] === undefined ) {\r\n\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );\r\n\t\r\n\t\t\t\t\t\t// If null, then this type can't apply to this column, so\r\n\t\t\t\t\t\t// rather than testing all cells, break out. There is an\r\n\t\t\t\t\t\t// exception for the last type which is `html`. We need to\r\n\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML\r\n\t\t\t\t\t\t// types\r\n\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// Only a single match is needed for html type since it is\r\n\t\t\t\t\t\t// bottom of the pile and very similar to string - but it\r\n\t\t\t\t\t\t// must not be empty\r\n\t\t\t\t\t\tif ( detectedType === 'html' && ! _empty(cache[k]) ) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// Type is valid for all data points in the column - use this\r\n\t\t\t\t\t// type\r\n\t\t\t\t\tif ( detectedType ) {\r\n\t\t\t\t\t\tcol.sType = detectedType;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Fall back - if no type was detected, always use string\r\n\t\t\t\tif ( ! col.sType ) {\r\n\t\t\t\t\tcol.sType = 'string';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Take the column definitions and static columns arrays and calculate how\r\n\t * they relate to column indexes. The callback function will then apply the\r\n\t * definition found for a column to a suitable configuration object.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\r\n\t *  @param {array} aoCols The aoColumns array that defines columns individually\r\n\t *  @param {function} fn Callback function - takes two parameters, the calculated\r\n\t *    column index and the definition for that column.\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\r\n\t{\r\n\t\tvar i, iLen, j, jLen, k, kLen, def;\r\n\t\tvar columns = oSettings.aoColumns;\r\n\t\r\n\t\t// Column definitions with aTargets\r\n\t\tif ( aoColDefs )\r\n\t\t{\r\n\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */\r\n\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )\r\n\t\t\t{\r\n\t\t\t\tdef = aoColDefs[i];\r\n\t\r\n\t\t\t\t/* Each definition can target multiple columns, as it is an array */\r\n\t\t\t\tvar aTargets = def.targets !== undefined ?\r\n\t\t\t\t\tdef.targets :\r\n\t\t\t\t\tdef.aTargets;\r\n\t\r\n\t\t\t\tif ( ! Array.isArray( aTargets ) )\r\n\t\t\t\t{\r\n\t\t\t\t\taTargets = [ aTargets ];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t/* Add columns that we don't yet know about */\r\n\t\t\t\t\t\twhile( columns.length <= aTargets[j] )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_fnAddColumn( oSettings );\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t/* Integer, basic index */\r\n\t\t\t\t\t\tfn( aTargets[j], def );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t/* Negative integer, right to left column counting */\r\n\t\t\t\t\t\tfn( columns.length+aTargets[j], def );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t/* Class name matching on TH element */\r\n\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||\r\n\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfn( k, def );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// Statically defined columns array\r\n\t\tif ( aoCols )\r\n\t\t{\r\n\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\r\n\t\t\t{\r\n\t\t\t\tfn( i, aoCols[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add a data array to the table, creating DOM node etc. This is the parallel to\r\n\t * _fnGatherData, but for adding rows from a Javascript source, rather than a\r\n\t * DOM source.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {array} aData data array to be added\r\n\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,\r\n\t *    DataTables will create a row automatically\r\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n\t *    if nTr is.\r\n\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )\r\n\t{\r\n\t\t/* Create the object for storing information about this new row */\r\n\t\tvar iRow = oSettings.aoData.length;\r\n\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {\r\n\t\t\tsrc: nTr ? 'dom' : 'data',\r\n\t\t\tidx: iRow\r\n\t\t} );\r\n\t\r\n\t\toData._aData = aDataIn;\r\n\t\toSettings.aoData.push( oData );\r\n\t\r\n\t\t/* Create the cells */\r\n\t\tvar nTd, sThisType;\r\n\t\tvar columns = oSettings.aoColumns;\r\n\t\r\n\t\t// Invalidate the column types as the new data needs to be revalidated\r\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\tcolumns[i].sType = null;\r\n\t\t}\r\n\t\r\n\t\t/* Add to the display array */\r\n\t\toSettings.aiDisplayMaster.push( iRow );\r\n\t\r\n\t\tvar id = oSettings.rowIdFn( aDataIn );\r\n\t\tif ( id !== undefined ) {\r\n\t\t\toSettings.aIds[ id ] = oData;\r\n\t\t}\r\n\t\r\n\t\t/* Create the DOM information, or register it if already present */\r\n\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )\r\n\t\t{\r\n\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );\r\n\t\t}\r\n\t\r\n\t\treturn iRow;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add one or more TR elements to the table. Generally we'd expect to\r\n\t * use this for reading data from a DOM sourced table, but it could be\r\n\t * used for an TR element. Note that if a TR is given, it is used (i.e.\r\n\t * it is not cloned).\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table\r\n\t *  @returns {array} Array of indexes for the added rows\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAddTr( settings, trs )\r\n\t{\r\n\t\tvar row;\r\n\t\r\n\t\t// Allow an individual node to be passed in\r\n\t\tif ( ! (trs instanceof $) ) {\r\n\t\t\ttrs = $(trs);\r\n\t\t}\r\n\t\r\n\t\treturn trs.map( function (i, el) {\r\n\t\t\trow = _fnGetRowElements( settings, el );\r\n\t\t\treturn _fnAddData( settings, row.data, el, row.cells );\r\n\t\t} );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Take a TR element and convert it to an index in aoData\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {node} n the TR element to find\r\n\t *  @returns {int} index if the node is found, null if not\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnNodeToDataIndex( oSettings, n )\r\n\t{\r\n\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Take a TD element and convert it into a column data index (not the visible index)\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {int} iRow The row number the TD/TH can be found in\r\n\t *  @param {node} n The TD/TH element to find\r\n\t *  @returns {int} index if the node is found, -1 if not\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )\r\n\t{\r\n\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the data for a given cell from the internal cache, taking into account data mapping\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {int} rowIdx aoData row id\r\n\t *  @param {int} colIdx Column index\r\n\t *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')\r\n\t *  @returns {*} Cell data\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )\r\n\t{\r\n\t\tif (type === 'search') {\r\n\t\t\ttype = 'filter';\r\n\t\t}\r\n\t\telse if (type === 'order') {\r\n\t\t\ttype = 'sort';\r\n\t\t}\r\n\t\r\n\t\tvar draw           = settings.iDraw;\r\n\t\tvar col            = settings.aoColumns[colIdx];\r\n\t\tvar rowData        = settings.aoData[rowIdx]._aData;\r\n\t\tvar defaultContent = col.sDefaultContent;\r\n\t\tvar cellData       = col.fnGetData( rowData, type, {\r\n\t\t\tsettings: settings,\r\n\t\t\trow:      rowIdx,\r\n\t\t\tcol:      colIdx\r\n\t\t} );\r\n\t\r\n\t\tif ( cellData === undefined ) {\r\n\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {\r\n\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+\r\n\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\r\n\t\t\t\t\t\" for row \"+rowIdx+\", column \"+colIdx, 4 );\r\n\t\t\t\tsettings.iDrawError = draw;\r\n\t\t\t}\r\n\t\t\treturn defaultContent;\r\n\t\t}\r\n\t\r\n\t\t// When the data source is null and a specific data type is requested (i.e.\r\n\t\t// not the original data), we can use default column data\r\n\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\r\n\t\t\tcellData = defaultContent;\r\n\t\t}\r\n\t\telse if ( typeof cellData === 'function' ) {\r\n\t\t\t// If the data source is a function, then we run it and use the return,\r\n\t\t\t// executing in the scope of the data object (for instances)\r\n\t\t\treturn cellData.call( rowData );\r\n\t\t}\r\n\t\r\n\t\tif ( cellData === null && type === 'display' ) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\r\n\t\tif ( type === 'filter' ) {\r\n\t\t\tvar fomatters = DataTable.ext.type.search;\r\n\t\r\n\t\t\tif ( fomatters[ col.sType ] ) {\r\n\t\t\t\tcellData = fomatters[ col.sType ]( cellData );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn cellData;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set the value for a specific cell, into the internal data cache\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {int} rowIdx aoData row id\r\n\t *  @param {int} colIdx Column index\r\n\t *  @param {*} val Value to set\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )\r\n\t{\r\n\t\tvar col     = settings.aoColumns[colIdx];\r\n\t\tvar rowData = settings.aoData[rowIdx]._aData;\r\n\t\r\n\t\tcol.fnSetData( rowData, val, {\r\n\t\t\tsettings: settings,\r\n\t\t\trow:      rowIdx,\r\n\t\t\tcol:      colIdx\r\n\t\t}  );\r\n\t}\r\n\t\r\n\t\r\n\t// Private variable that is used to match action syntax in the data property object\r\n\tvar __reArray = /\\[.*?\\]$/;\r\n\tvar __reFn = /\\(\\)$/;\r\n\t\r\n\t/**\r\n\t * Split string on periods, taking into account escaped periods\r\n\t * @param  {string} str String to split\r\n\t * @return {array} Split string\r\n\t */\r\n\tfunction _fnSplitObjNotation( str )\r\n\t{\r\n\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\r\n\t\t\treturn s.replace(/\\\\\\./g, '.');\r\n\t\t} );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Return a function that can be used to get data from a source object, taking\r\n\t * into account the ability to use nested objects as a source\r\n\t *  @param {string|int|function} mSource The data source for the object\r\n\t *  @returns {function} Data get function\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tvar _fnGetObjectDataFn = DataTable.util.get;\r\n\t\r\n\t\r\n\t/**\r\n\t * Return a function that can be used to set data from a source object, taking\r\n\t * into account the ability to use nested objects as a source\r\n\t *  @param {string|int|function} mSource The data source for the object\r\n\t *  @returns {function} Data set function\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tvar _fnSetObjectDataFn = DataTable.util.set;\r\n\t\r\n\t\r\n\t/**\r\n\t * Return an array with the full table data\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @returns array {array} aData Master data array\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetDataMaster ( settings )\r\n\t{\r\n\t\treturn _pluck( settings.aoData, '_aData' );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Nuke the table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnClearTable( settings )\r\n\t{\r\n\t\tsettings.aoData.length = 0;\r\n\t\tsettings.aiDisplayMaster.length = 0;\r\n\t\tsettings.aiDisplay.length = 0;\r\n\t\tsettings.aIds = {};\r\n\t}\r\n\t\r\n\t\r\n\t /**\r\n\t * Take an array of integers (index array) and remove a target integer (value - not\r\n\t * the key!)\r\n\t *  @param {array} a Index array to target\r\n\t *  @param {int} iTarget value to find\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnDeleteIndex( a, iTarget, splice )\r\n\t{\r\n\t\tvar iTargetIndex = -1;\r\n\t\r\n\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\tif ( a[i] == iTarget )\r\n\t\t\t{\r\n\t\t\t\tiTargetIndex = i;\r\n\t\t\t}\r\n\t\t\telse if ( a[i] > iTarget )\r\n\t\t\t{\r\n\t\t\t\ta[i]--;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tif ( iTargetIndex != -1 && splice === undefined )\r\n\t\t{\r\n\t\t\ta.splice( iTargetIndex, 1 );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Mark cached data as invalid such that a re-read of the data will occur when\r\n\t * the cached data is next requested. Also update from the data source object.\r\n\t *\r\n\t * @param {object} settings DataTables settings object\r\n\t * @param {int}    rowIdx   Row index to invalidate\r\n\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\r\n\t *     or 'data'\r\n\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\r\n\t *     row will be invalidated\r\n\t * @memberof DataTable#oApi\r\n\t *\r\n\t * @todo For the modularisation of v1.11 this will need to become a callback, so\r\n\t *   the sort and filter methods can subscribe to it. That will required\r\n\t *   initialisation options for sorting, which is why it is not already baked in\r\n\t */\r\n\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )\r\n\t{\r\n\t\tvar row = settings.aoData[ rowIdx ];\r\n\t\tvar i, ien;\r\n\t\tvar cellWrite = function ( cell, col ) {\r\n\t\t\t// This is very frustrating, but in IE if you just write directly\r\n\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,\r\n\t\t\t// even if there is a reference to them elsewhere\r\n\t\t\twhile ( cell.childNodes.length ) {\r\n\t\t\t\tcell.removeChild( cell.firstChild );\r\n\t\t\t}\r\n\t\r\n\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\r\n\t\t};\r\n\t\r\n\t\t// Are we reading last data from DOM or the data object?\r\n\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\r\n\t\t\t// Read the data from the DOM\r\n\t\t\trow._aData = _fnGetRowElements(\r\n\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData\r\n\t\t\t\t)\r\n\t\t\t\t.data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Reading from data object, update the DOM\r\n\t\t\tvar cells = row.anCells;\r\n\t\r\n\t\t\tif ( cells ) {\r\n\t\t\t\tif ( colIdx !== undefined ) {\r\n\t\t\t\t\tcellWrite( cells[colIdx], colIdx );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n\t\t\t\t\t\tcellWrite( cells[i], i );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// For both row and cell invalidation, the cached data for sorting and\r\n\t\t// filtering is nulled out\r\n\t\trow._aSortData = null;\r\n\t\trow._aFilterData = null;\r\n\t\r\n\t\t// Invalidate the type for a specific column (if given) or all columns since\r\n\t\t// the data might have changed\r\n\t\tvar cols = settings.aoColumns;\r\n\t\tif ( colIdx !== undefined ) {\r\n\t\t\tcols[ colIdx ].sType = null;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {\r\n\t\t\t\tcols[i].sType = null;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Update DataTables special `DT_*` attributes for the row\r\n\t\t\t_fnRowAttributes( settings, row );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Build a data source object from an HTML row, reading the contents of the\r\n\t * cells that are in the row.\r\n\t *\r\n\t * @param {object} settings DataTables settings object\r\n\t * @param {node|object} TR element from which to read data or existing row\r\n\t *   object from which to re-read the data from the cells\r\n\t * @param {int} [colIdx] Optional column index\r\n\t * @param {array|object} [d] Data source object. If `colIdx` is given then this\r\n\t *   parameter should also be given and will be used to write the data into.\r\n\t *   Only the column in question will be written\r\n\t * @returns {object} Object with two parameters: `data` the data read, in\r\n\t *   document order, and `cells` and array of nodes (they can be useful to the\r\n\t *   caller, so rather than needing a second traversal to get them, just return\r\n\t *   them from here).\r\n\t * @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetRowElements( settings, row, colIdx, d )\r\n\t{\r\n\t\tvar\r\n\t\t\ttds = [],\r\n\t\t\ttd = row.firstChild,\r\n\t\t\tname, col, o, i=0, contents,\r\n\t\t\tcolumns = settings.aoColumns,\r\n\t\t\tobjectRead = settings._rowReadObject;\r\n\t\r\n\t\t// Allow the data object to be passed in, or construct\r\n\t\td = d !== undefined ?\r\n\t\t\td :\r\n\t\t\tobjectRead ?\r\n\t\t\t\t{} :\r\n\t\t\t\t[];\r\n\t\r\n\t\tvar attr = function ( str, td  ) {\r\n\t\t\tif ( typeof str === 'string' ) {\r\n\t\t\t\tvar idx = str.indexOf('@');\r\n\t\r\n\t\t\t\tif ( idx !== -1 ) {\r\n\t\t\t\t\tvar attr = str.substring( idx+1 );\r\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );\r\n\t\t\t\t\tsetter( d, td.getAttribute( attr ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\t// Read data from a cell and store into the data object\r\n\t\tvar cellProcess = function ( cell ) {\r\n\t\t\tif ( colIdx === undefined || colIdx === i ) {\r\n\t\t\t\tcol = columns[i];\r\n\t\t\t\tcontents = (cell.innerHTML).trim();\r\n\t\r\n\t\t\t\tif ( col && col._bAttrSrc ) {\r\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );\r\n\t\t\t\t\tsetter( d, contents );\r\n\t\r\n\t\t\t\t\tattr( col.mData.sort, cell );\r\n\t\t\t\t\tattr( col.mData.type, cell );\r\n\t\t\t\t\tattr( col.mData.filter, cell );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Depending on the `data` option for the columns the data can\r\n\t\t\t\t\t// be read to either an object or an array.\r\n\t\t\t\t\tif ( objectRead ) {\r\n\t\t\t\t\t\tif ( ! col._setter ) {\r\n\t\t\t\t\t\t\t// Cache the setter function\r\n\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcol._setter( d, contents );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\td[i] = contents;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\ti++;\r\n\t\t};\r\n\t\r\n\t\tif ( td ) {\r\n\t\t\t// `tr` element was passed in\r\n\t\t\twhile ( td ) {\r\n\t\t\t\tname = td.nodeName.toUpperCase();\r\n\t\r\n\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {\r\n\t\t\t\t\tcellProcess( td );\r\n\t\t\t\t\ttds.push( td );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttd = td.nextSibling;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Existing row object passed in\r\n\t\t\ttds = row.anCells;\r\n\t\r\n\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {\r\n\t\t\t\tcellProcess( tds[j] );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// Read the ID from the DOM if present\r\n\t\tvar rowNode = row.firstChild ? row : row.nTr;\r\n\t\r\n\t\tif ( rowNode ) {\r\n\t\t\tvar id = rowNode.getAttribute( 'id' );\r\n\t\r\n\t\t\tif ( id ) {\r\n\t\t\t\t_fnSetObjectDataFn( settings.rowId )( d, id );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn {\r\n\t\t\tdata: d,\r\n\t\t\tcells: tds\r\n\t\t};\r\n\t}\r\n\t/**\r\n\t * Create a new TR element (and it's TD children) for a row\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {int} iRow Row to consider\r\n\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\r\n\t *    DataTables will create a row automatically\r\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n\t *    if nTr is.\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\r\n\t{\r\n\t\tvar\r\n\t\t\trow = oSettings.aoData[iRow],\r\n\t\t\trowData = row._aData,\r\n\t\t\tcells = [],\r\n\t\t\tnTr, nTd, oCol,\r\n\t\t\ti, iLen, create;\r\n\t\r\n\t\tif ( row.nTr === null )\r\n\t\t{\r\n\t\t\tnTr = nTrIn || document.createElement('tr');\r\n\t\r\n\t\t\trow.nTr = nTr;\r\n\t\t\trow.anCells = cells;\r\n\t\r\n\t\t\t/* Use a private property on the node to allow reserve mapping from the node\r\n\t\t\t * to the aoData array for fast look up\r\n\t\t\t */\r\n\t\t\tnTr._DT_RowIndex = iRow;\r\n\t\r\n\t\t\t/* Special parameters can be given by the data source to be used on the row */\r\n\t\t\t_fnRowAttributes( oSettings, row );\r\n\t\r\n\t\t\t/* Process each column */\r\n\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\r\n\t\t\t{\r\n\t\t\t\toCol = oSettings.aoColumns[i];\r\n\t\t\t\tcreate = nTrIn ? false : true;\r\n\t\r\n\t\t\t\tnTd = create ? document.createElement( oCol.sCellType ) : anTds[i];\r\n\t\t\t\tnTd._DT_CellIndex = {\r\n\t\t\t\t\trow: iRow,\r\n\t\t\t\t\tcolumn: i\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tcells.push( nTd );\r\n\t\r\n\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined\r\n\t\t\t\tif ( create || ((oCol.mRender || oCol.mData !== i) &&\r\n\t\t\t\t\t (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\r\n\t\t\t\t)) {\r\n\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t/* Add user defined class */\r\n\t\t\t\tif ( oCol.sClass )\r\n\t\t\t\t{\r\n\t\t\t\t\tnTd.className += ' '+oCol.sClass;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Visibility - add or remove as required\r\n\t\t\t\tif ( oCol.bVisible && ! nTrIn )\r\n\t\t\t\t{\r\n\t\t\t\t\tnTr.appendChild( nTd );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( ! oCol.bVisible && nTrIn )\r\n\t\t\t\t{\r\n\t\t\t\t\tnTd.parentNode.removeChild( nTd );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( oCol.fnCreatedCell )\r\n\t\t\t\t{\r\n\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,\r\n\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add attributes to a row based on the special `DT_*` parameters in a data\r\n\t * source object.\r\n\t *  @param {object} settings DataTables settings object\r\n\t *  @param {object} DataTables row object for the row to be modified\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnRowAttributes( settings, row )\r\n\t{\r\n\t\tvar tr = row.nTr;\r\n\t\tvar data = row._aData;\r\n\t\r\n\t\tif ( tr ) {\r\n\t\t\tvar id = settings.rowIdFn( data );\r\n\t\r\n\t\t\tif ( id ) {\r\n\t\t\t\ttr.id = id;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( data.DT_RowClass ) {\r\n\t\t\t\t// Remove any classes added by DT_RowClass before\r\n\t\t\t\tvar a = data.DT_RowClass.split(' ');\r\n\t\t\t\trow.__rowc = row.__rowc ?\r\n\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :\r\n\t\t\t\t\ta;\r\n\t\r\n\t\t\t\t$(tr)\r\n\t\t\t\t\t.removeClass( row.__rowc.join(' ') )\r\n\t\t\t\t\t.addClass( data.DT_RowClass );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( data.DT_RowAttr ) {\r\n\t\t\t\t$(tr).attr( data.DT_RowAttr );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( data.DT_RowData ) {\r\n\t\t\t\t$(tr).data( data.DT_RowData );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create the HTML header for the table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnBuildHead( oSettings )\r\n\t{\r\n\t\tvar i, ien, cell, row, column;\r\n\t\tvar thead = oSettings.nTHead;\r\n\t\tvar tfoot = oSettings.nTFoot;\r\n\t\tvar createHeader = $('th, td', thead).length === 0;\r\n\t\tvar classes = oSettings.oClasses;\r\n\t\tvar columns = oSettings.aoColumns;\r\n\t\r\n\t\tif ( createHeader ) {\r\n\t\t\trow = $('<tr/>').appendTo( thead );\r\n\t\t}\r\n\t\r\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n\t\t\tcolumn = columns[i];\r\n\t\t\tcell = $( column.nTh ).addClass( column.sClass );\r\n\t\r\n\t\t\tif ( createHeader ) {\r\n\t\t\t\tcell.appendTo( row );\r\n\t\t\t}\r\n\t\r\n\t\t\t// 1.11 move into sorting\r\n\t\t\tif ( oSettings.oFeatures.bSort ) {\r\n\t\t\t\tcell.addClass( column.sSortingClass );\r\n\t\r\n\t\t\t\tif ( column.bSortable !== false ) {\r\n\t\t\t\t\tcell\r\n\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )\r\n\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );\r\n\t\r\n\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( column.sTitle != cell[0].innerHTML ) {\r\n\t\t\t\tcell.html( column.sTitle );\r\n\t\t\t}\r\n\t\r\n\t\t\t_fnRenderer( oSettings, 'header' )(\r\n\t\t\t\toSettings, cell, column, classes\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\tif ( createHeader ) {\r\n\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );\r\n\t\t}\r\n\t\r\n\t\t/* Deal with the footer - add classes if required */\r\n\t\t$(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );\r\n\t\t$(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );\r\n\t\r\n\t\t// Cache the footer cells. Note that we only take the cells from the first\r\n\t\t// row in the footer. If there is more than one row the user wants to\r\n\t\t// interact with, they need to use the table().foot() method. Note also this\r\n\t\t// allows cells to be used for multiple columns using colspan\r\n\t\tif ( tfoot !== null ) {\r\n\t\t\tvar cells = oSettings.aoFooter[0];\r\n\t\r\n\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n\t\t\t\tcolumn = columns[i];\r\n\t\t\t\tcolumn.nTf = cells[i].cell;\r\n\t\r\n\t\t\t\tif ( column.sClass ) {\r\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Draw the header (or footer) element based on the column visibility states. The\r\n\t * methodology here is to use the layout array from _fnDetectHeader, modified for\r\n\t * the instantaneous column visibility, to construct the new layout. The grid is\r\n\t * traversed over cell at a time in a rows x columns grid fashion, although each\r\n\t * cell insert can cover multiple elements in the grid - which is tracks using the\r\n\t * aApplied array. Cell inserts in the grid will only occur where there isn't\r\n\t * already a cell in that position.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param array {objects} aoSource Layout array from _fnDetectHeader\r\n\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )\r\n\t{\r\n\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;\r\n\t\tvar aoLocal = [];\r\n\t\tvar aApplied = [];\r\n\t\tvar iColumns = oSettings.aoColumns.length;\r\n\t\tvar iRowspan, iColspan;\r\n\t\r\n\t\tif ( ! aoSource )\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tif (  bIncludeHidden === undefined )\r\n\t\t{\r\n\t\t\tbIncludeHidden = false;\r\n\t\t}\r\n\t\r\n\t\t/* Make a copy of the master layout array, but without the visible columns in it */\r\n\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\taoLocal[i] = aoSource[i].slice();\r\n\t\t\taoLocal[i].nTr = aoSource[i].nTr;\r\n\t\r\n\t\t\t/* Remove any columns which are currently hidden */\r\n\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )\r\n\t\t\t{\r\n\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\r\n\t\t\t\t{\r\n\t\t\t\t\taoLocal[i].splice( j, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t/* Prep the applied array - it needs an element for each row */\r\n\t\t\taApplied.push( [] );\r\n\t\t}\r\n\t\r\n\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\tnLocalTr = aoLocal[i].nTr;\r\n\t\r\n\t\t\t/* All cells are going to be replaced, so empty out the row */\r\n\t\t\tif ( nLocalTr )\r\n\t\t\t{\r\n\t\t\t\twhile( (n = nLocalTr.firstChild) )\r\n\t\t\t\t{\r\n\t\t\t\t\tnLocalTr.removeChild( n );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\r\n\t\t\t{\r\n\t\t\t\tiRowspan = 1;\r\n\t\t\t\tiColspan = 1;\r\n\t\r\n\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target\r\n\t\t\t\t * insert point. If there is, then there is nothing to do.\r\n\t\t\t\t */\r\n\t\t\t\tif ( aApplied[i][j] === undefined )\r\n\t\t\t\t{\r\n\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );\r\n\t\t\t\t\taApplied[i][j] = 1;\r\n\t\r\n\t\t\t\t\t/* Expand the cell to cover as many rows as needed */\r\n\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&\r\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;\r\n\t\t\t\t\t\tiRowspan++;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t/* Expand the cell to cover as many columns as needed */\r\n\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&\r\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */\r\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tiColspan++;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t/* Do the actual expansion in the DOM */\r\n\t\t\t\t\t$(aoLocal[i][j].cell)\r\n\t\t\t\t\t\t.attr('rowspan', iRowspan)\r\n\t\t\t\t\t\t.attr('colspan', iColspan);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Insert the required TR nodes into the table for display\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param ajaxComplete true after ajax call to complete rendering\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnDraw( oSettings, ajaxComplete )\r\n\t{\r\n\t\t// Allow for state saving and a custom start position\r\n\t\t_fnStart( oSettings );\r\n\t\r\n\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */\r\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )\r\n\t\t{\r\n\t\t\t_fnProcessingDisplay( oSettings, false );\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar anRows = [];\r\n\t\tvar iRowCount = 0;\r\n\t\tvar asStripeClasses = oSettings.asStripeClasses;\r\n\t\tvar iStripes = asStripeClasses.length;\r\n\t\tvar oLang = oSettings.oLanguage;\r\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n\t\tvar aiDisplay = oSettings.aiDisplay;\r\n\t\tvar iDisplayStart = oSettings._iDisplayStart;\r\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();\r\n\t\r\n\t\toSettings.bDrawing = true;\r\n\t\r\n\t\t/* Server-side processing draw intercept */\r\n\t\tif ( oSettings.bDeferLoading )\r\n\t\t{\r\n\t\t\toSettings.bDeferLoading = false;\r\n\t\t\toSettings.iDraw++;\r\n\t\t\t_fnProcessingDisplay( oSettings, false );\r\n\t\t}\r\n\t\telse if ( !bServerSide )\r\n\t\t{\r\n\t\t\toSettings.iDraw++;\r\n\t\t}\r\n\t\telse if ( !oSettings.bDestroying && !ajaxComplete)\r\n\t\t{\r\n\t\t\t_fnAjaxUpdate( oSettings );\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tif ( aiDisplay.length !== 0 )\r\n\t\t{\r\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\r\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n\t\r\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )\r\n\t\t\t{\r\n\t\t\t\tvar iDataIndex = aiDisplay[j];\r\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\r\n\t\t\t\tif ( aoData.nTr === null )\r\n\t\t\t\t{\r\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar nRow = aoData.nTr;\r\n\t\r\n\t\t\t\t/* Remove the old striping classes and then add the new one */\r\n\t\t\t\tif ( iStripes !== 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n\t\t\t\t\t\taoData._sRowStripe = sStripe;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Row callback functions - might want to manipulate the row\r\n\t\t\t\t// iRowCount and j are not currently documented. Are they at all\r\n\t\t\t\t// useful?\r\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j, iDataIndex] );\r\n\t\r\n\t\t\t\tanRows.push( nRow );\r\n\t\t\t\tiRowCount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t/* Table is empty - create a row with an empty message in it */\r\n\t\t\tvar sZero = oLang.sZeroRecords;\r\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n\t\t\t{\r\n\t\t\t\tsZero = oLang.sLoadingRecords;\r\n\t\t\t}\r\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n\t\t\t{\r\n\t\t\t\tsZero = oLang.sEmptyTable;\r\n\t\t\t}\r\n\t\r\n\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n\t\t\t\t.append( $('<td />', {\r\n\t\t\t\t\t'valign':  'top',\r\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\r\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\r\n\t\t\t\t} ).html( sZero ) )[0];\r\n\t\t}\r\n\t\r\n\t\t/* Header and footer callbacks */\r\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\t\r\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\t\r\n\t\tvar body = $(oSettings.nTBody);\r\n\t\r\n\t\tbody.children().detach();\r\n\t\tbody.append( $(anRows) );\r\n\t\r\n\t\t/* Call all required callback functions for the end of a draw */\r\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n\t\r\n\t\t/* Draw is complete, sorting and filtering must be as well */\r\n\t\toSettings.bSorted = false;\r\n\t\toSettings.bFiltered = false;\r\n\t\toSettings.bDrawing = false;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Redraw the table - taking account of the various features which are enabled\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {boolean} [holdPosition] Keep the current paging position. By default\r\n\t *    the paging is reset to the first page\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnReDraw( settings, holdPosition )\r\n\t{\r\n\t\tvar\r\n\t\t\tfeatures = settings.oFeatures,\r\n\t\t\tsort     = features.bSort,\r\n\t\t\tfilter   = features.bFilter;\r\n\t\r\n\t\tif ( sort ) {\r\n\t\t\t_fnSort( settings );\r\n\t\t}\r\n\t\r\n\t\tif ( filter ) {\r\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// No filtering, so we want to just use the display master\r\n\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\r\n\t\t}\r\n\t\r\n\t\tif ( holdPosition !== true ) {\r\n\t\t\tsettings._iDisplayStart = 0;\r\n\t\t}\r\n\t\r\n\t\t// Let any modules know about the draw hold position state (used by\r\n\t\t// scrolling internally)\r\n\t\tsettings._drawHold = holdPosition;\r\n\t\r\n\t\t_fnDraw( settings );\r\n\t\r\n\t\tsettings._drawHold = false;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add the options to the page HTML for the table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAddOptionsHtml ( oSettings )\r\n\t{\r\n\t\tvar classes = oSettings.oClasses;\r\n\t\tvar table = $(oSettings.nTable);\r\n\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed\r\n\t\tvar features = oSettings.oFeatures;\r\n\t\r\n\t\t// All DataTables are wrapped in a div\r\n\t\tvar insert = $('<div/>', {\r\n\t\t\tid:      oSettings.sTableId+'_wrapper',\r\n\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\r\n\t\t} );\r\n\t\r\n\t\toSettings.nHolding = holding[0];\r\n\t\toSettings.nTableWrapper = insert[0];\r\n\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\r\n\t\r\n\t\t/* Loop over the user set positioning and place the elements as needed */\r\n\t\tvar aDom = oSettings.sDom.split('');\r\n\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;\r\n\t\tfor ( var i=0 ; i<aDom.length ; i++ )\r\n\t\t{\r\n\t\t\tfeatureNode = null;\r\n\t\t\tcOption = aDom[i];\r\n\t\r\n\t\t\tif ( cOption == '<' )\r\n\t\t\t{\r\n\t\t\t\t/* New container div */\r\n\t\t\t\tnNewNode = $('<div/>')[0];\r\n\t\r\n\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */\r\n\t\t\t\tcNext = aDom[i+1];\r\n\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )\r\n\t\t\t\t{\r\n\t\t\t\t\tsAttr = \"\";\r\n\t\t\t\t\tj = 2;\r\n\t\t\t\t\twhile ( aDom[i+j] != cNext )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsAttr += aDom[i+j];\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */\r\n\t\t\t\t\tif ( sAttr == \"H\" )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsAttr = classes.sJUIHeader;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( sAttr == \"F\" )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsAttr = classes.sJUIFooter;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\r\n\t\t\t\t\t * breaks the string into parts and applies them as needed\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar aSplit = sAttr.split('.');\r\n\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\r\n\t\t\t\t\t\tnNewNode.className = aSplit[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnNewNode.className = sAttr;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ti += j; /* Move along the position array */\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tinsert.append( nNewNode );\r\n\t\t\t\tinsert = $(nNewNode);\r\n\t\t\t}\r\n\t\t\telse if ( cOption == '>' )\r\n\t\t\t{\r\n\t\t\t\t/* End container div */\r\n\t\t\t\tinsert = insert.parent();\r\n\t\t\t}\r\n\t\t\t// @todo Move options into their own plugins?\r\n\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\r\n\t\t\t{\r\n\t\t\t\t/* Length */\r\n\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );\r\n\t\t\t}\r\n\t\t\telse if ( cOption == 'f' && features.bFilter )\r\n\t\t\t{\r\n\t\t\t\t/* Filter */\r\n\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );\r\n\t\t\t}\r\n\t\t\telse if ( cOption == 'r' && features.bProcessing )\r\n\t\t\t{\r\n\t\t\t\t/* pRocessing */\r\n\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );\r\n\t\t\t}\r\n\t\t\telse if ( cOption == 't' )\r\n\t\t\t{\r\n\t\t\t\t/* Table */\r\n\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );\r\n\t\t\t}\r\n\t\t\telse if ( cOption ==  'i' && features.bInfo )\r\n\t\t\t{\r\n\t\t\t\t/* Info */\r\n\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );\r\n\t\t\t}\r\n\t\t\telse if ( cOption == 'p' && features.bPaginate )\r\n\t\t\t{\r\n\t\t\t\t/* Pagination */\r\n\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );\r\n\t\t\t}\r\n\t\t\telse if ( DataTable.ext.feature.length !== 0 )\r\n\t\t\t{\r\n\t\t\t\t/* Plug-in features */\r\n\t\t\t\tvar aoFeatures = DataTable.ext.feature;\r\n\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t/* Add to the 2D features array */\r\n\t\t\tif ( featureNode )\r\n\t\t\t{\r\n\t\t\t\tvar aanFeatures = oSettings.aanFeatures;\r\n\t\r\n\t\t\t\tif ( ! aanFeatures[cOption] )\r\n\t\t\t\t{\r\n\t\t\t\t\taanFeatures[cOption] = [];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\taanFeatures[cOption].push( featureNode );\r\n\t\t\t\tinsert.append( featureNode );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/* Built our DOM structure - replace the holding div with what we want */\r\n\t\tholding.replaceWith( insert );\r\n\t\toSettings.nHolding = null;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Use the DOM source to create up an array of header cells. The idea here is to\r\n\t * create a layout grid (array) of rows x columns, which contains a reference\r\n\t * to the cell that that point in the grid (regardless of col/rowspan), such that\r\n\t * any column / row could be removed and the new grid constructed\r\n\t *  @param array {object} aLayout Array to store the calculated layout in\r\n\t *  @param {node} nThead The header/footer element for the table\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnDetectHeader ( aLayout, nThead )\r\n\t{\r\n\t\tvar nTrs = $(nThead).children('tr');\r\n\t\tvar nTr, nCell;\r\n\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\r\n\t\tvar bUnique;\r\n\t\tvar fnShiftCol = function ( a, i, j ) {\r\n\t\t\tvar k = a[i];\r\n\t                while ( k[j] ) {\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\treturn j;\r\n\t\t};\r\n\t\r\n\t\taLayout.splice( 0, aLayout.length );\r\n\t\r\n\t\t/* We know how many rows there are in the layout - so prep it */\r\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\taLayout.push( [] );\r\n\t\t}\r\n\t\r\n\t\t/* Calculate a layout array */\r\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\tnTr = nTrs[i];\r\n\t\t\tiColumn = 0;\r\n\t\r\n\t\t\t/* For every cell in the row... */\r\n\t\t\tnCell = nTr.firstChild;\r\n\t\t\twhile ( nCell ) {\r\n\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||\r\n\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )\r\n\t\t\t\t{\r\n\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */\r\n\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;\r\n\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;\r\n\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\r\n\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\r\n\t\r\n\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target\r\n\t\t\t\t\t * accordingly\r\n\t\t\t\t\t */\r\n\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );\r\n\t\r\n\t\t\t\t\t/* Cache calculation for unique columns */\r\n\t\t\t\t\tbUnique = iColspan === 1 ? true : false;\r\n\t\r\n\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */\r\n\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {\r\n\t\t\t\t\t\t\t\t\"cell\": nCell,\r\n\t\t\t\t\t\t\t\t\"unique\": bUnique\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnCell = nCell.nextSibling;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get an array of unique th elements, one for each column\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {node} nHeader automatically detect the layout from this node - optional\r\n\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\r\n\t *  @returns array {node} aReturn list of unique th's\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )\r\n\t{\r\n\t\tvar aReturn = [];\r\n\t\tif ( !aLayout )\r\n\t\t{\r\n\t\t\taLayout = oSettings.aoHeader;\r\n\t\t\tif ( nHeader )\r\n\t\t\t{\r\n\t\t\t\taLayout = [];\r\n\t\t\t\t_fnDetectHeader( aLayout, nHeader );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\r\n\t\t\t{\r\n\t\t\t\tif ( aLayout[i][j].unique &&\r\n\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )\r\n\t\t\t\t{\r\n\t\t\t\t\taReturn[j] = aLayout[i][j].cell;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn aReturn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the start position for draw\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t */\r\n\tfunction _fnStart( oSettings )\r\n\t{\r\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\r\n\t\r\n\t\t// Check and see if we have an initial draw position from state saving\r\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n\t\t{\r\n\t\t\toSettings._iDisplayStart = bServerSide ?\r\n\t\t\t\tiInitDisplayStart :\r\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n\t\t\t\t\t0 :\r\n\t\t\t\t\tiInitDisplayStart;\r\n\t\r\n\t\t\toSettings.iInitDisplayStart = -1;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create an Ajax call based on the table's settings, taking into account that\r\n\t * parameters can have multiple forms, and backwards compatibility.\r\n\t *\r\n\t * @param {object} oSettings dataTables settings object\r\n\t * @param {array} data Data to send to the server, required by\r\n\t *     DataTables - may be augmented by developer callbacks\r\n\t * @param {function} fn Callback function to run when data is obtained\r\n\t */\r\n\tfunction _fnBuildAjax( oSettings, data, fn )\r\n\t{\r\n\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate\r\n\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\r\n\t\r\n\t\t// Convert to object based for 1.10+ if using the old array scheme which can\r\n\t\t// come from server-side processing or serverParams\r\n\t\tif ( data && Array.isArray(data) ) {\r\n\t\t\tvar tmp = {};\r\n\t\t\tvar rbracket = /(.*?)\\[\\]$/;\r\n\t\r\n\t\t\t$.each( data, function (key, val) {\r\n\t\t\t\tvar match = val.name.match(rbracket);\r\n\t\r\n\t\t\t\tif ( match ) {\r\n\t\t\t\t\t// Support for arrays\r\n\t\t\t\t\tvar name = match[0];\r\n\t\r\n\t\t\t\t\tif ( ! tmp[ name ] ) {\r\n\t\t\t\t\t\ttmp[ name ] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp[ name ].push( val.value );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttmp[val.name] = val.value;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\tdata = tmp;\r\n\t\t}\r\n\t\r\n\t\tvar ajaxData;\r\n\t\tvar ajax = oSettings.ajax;\r\n\t\tvar instance = oSettings.oInstance;\r\n\t\tvar callback = function ( json ) {\r\n\t\t\tvar status = oSettings.jqXHR\r\n\t\t\t\t? oSettings.jqXHR.status\r\n\t\t\t\t: null;\r\n\t\r\n\t\t\tif ( json === null || (typeof status === 'number' && status == 204 ) ) {\r\n\t\t\t\tjson = {};\r\n\t\t\t\t_fnAjaxDataSrc( oSettings, json, [] );\r\n\t\t\t}\r\n\t\r\n\t\t\tvar error = json.error || json.sError;\r\n\t\t\tif ( error ) {\r\n\t\t\t\t_fnLog( oSettings, 0, error );\r\n\t\t\t}\r\n\t\r\n\t\t\toSettings.json = json;\r\n\t\r\n\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\r\n\t\t\tfn( json );\r\n\t\t};\r\n\t\r\n\t\tif ( $.isPlainObject( ajax ) && ajax.data )\r\n\t\t{\r\n\t\t\tajaxData = ajax.data;\r\n\t\r\n\t\t\tvar newData = typeof ajaxData === 'function' ?\r\n\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return\r\n\t\t\t\tajaxData;                      // an object object or array to merge\r\n\t\r\n\t\t\t// If the function returned something, use that alone\r\n\t\t\tdata = typeof ajaxData === 'function' && newData ?\r\n\t\t\t\tnewData :\r\n\t\t\t\t$.extend( true, data, newData );\r\n\t\r\n\t\t\t// Remove the data property as we've resolved it already and don't want\r\n\t\t\t// jQuery to do it again (it is restored at the end of the function)\r\n\t\t\tdelete ajax.data;\r\n\t\t}\r\n\t\r\n\t\tvar baseAjax = {\r\n\t\t\t\"data\": data,\r\n\t\t\t\"success\": callback,\r\n\t\t\t\"dataType\": \"json\",\r\n\t\t\t\"cache\": false,\r\n\t\t\t\"type\": oSettings.sServerMethod,\r\n\t\t\t\"error\": function (xhr, error, thrown) {\r\n\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\r\n\t\r\n\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {\r\n\t\t\t\t\tif ( error == \"parsererror\" ) {\r\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( xhr.readyState === 4 ) {\r\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_fnProcessingDisplay( oSettings, false );\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\t// Store the data submitted for the API\r\n\t\toSettings.oAjaxData = data;\r\n\t\r\n\t\t// Allow plug-ins and external processes to modify the data\r\n\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\r\n\t\r\n\t\tif ( oSettings.fnServerData )\r\n\t\t{\r\n\t\t\t// DataTables 1.9- compatibility\r\n\t\t\toSettings.fnServerData.call( instance,\r\n\t\t\t\toSettings.sAjaxSource,\r\n\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format\r\n\t\t\t\t\treturn { name: key, value: val };\r\n\t\t\t\t} ),\r\n\t\t\t\tcallback,\r\n\t\t\t\toSettings\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )\r\n\t\t{\r\n\t\t\t// DataTables 1.9- compatibility\r\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {\r\n\t\t\t\turl: ajax || oSettings.sAjaxSource\r\n\t\t\t} ) );\r\n\t\t}\r\n\t\telse if ( typeof ajax === 'function' )\r\n\t\t{\r\n\t\t\t// Is a function - let the caller define what needs to be done\r\n\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Object to extend the base settings\r\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\r\n\t\r\n\t\t\t// Restore for next time around\r\n\t\t\tajax.data = ajaxData;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Update the table using an Ajax call\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @returns {boolean} Block the table drawing or not\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAjaxUpdate( settings )\r\n\t{\r\n\t\tsettings.iDraw++;\r\n\t\t_fnProcessingDisplay( settings, true );\r\n\t\r\n\t\t_fnBuildAjax(\r\n\t\t\tsettings,\r\n\t\t\t_fnAjaxParameters( settings ),\r\n\t\t\tfunction(json) {\r\n\t\t\t\t_fnAjaxUpdateDraw( settings, json );\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Build up the parameters in an object needed for a server-side processing\r\n\t * request. Note that this is basically done twice, is different ways - a modern\r\n\t * method which is used by default in DataTables 1.10 which uses objects and\r\n\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\r\n\t * the sAjaxSource option is used in the initialisation, or the legacyAjax\r\n\t * option is set.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @returns {bool} block the table drawing or not\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAjaxParameters( settings )\r\n\t{\r\n\t\tvar\r\n\t\t\tcolumns = settings.aoColumns,\r\n\t\t\tcolumnCount = columns.length,\r\n\t\t\tfeatures = settings.oFeatures,\r\n\t\t\tpreSearch = settings.oPreviousSearch,\r\n\t\t\tpreColSearch = settings.aoPreSearchCols,\r\n\t\t\ti, data = [], dataProp, column, columnSearch,\r\n\t\t\tsort = _fnSortFlatten( settings ),\r\n\t\t\tdisplayStart = settings._iDisplayStart,\r\n\t\t\tdisplayLength = features.bPaginate !== false ?\r\n\t\t\t\tsettings._iDisplayLength :\r\n\t\t\t\t-1;\r\n\t\r\n\t\tvar param = function ( name, value ) {\r\n\t\t\tdata.push( { 'name': name, 'value': value } );\r\n\t\t};\r\n\t\r\n\t\t// DataTables 1.9- compatible method\r\n\t\tparam( 'sEcho',          settings.iDraw );\r\n\t\tparam( 'iColumns',       columnCount );\r\n\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\r\n\t\tparam( 'iDisplayStart',  displayStart );\r\n\t\tparam( 'iDisplayLength', displayLength );\r\n\t\r\n\t\t// DataTables 1.10+ method\r\n\t\tvar d = {\r\n\t\t\tdraw:    settings.iDraw,\r\n\t\t\tcolumns: [],\r\n\t\t\torder:   [],\r\n\t\t\tstart:   displayStart,\r\n\t\t\tlength:  displayLength,\r\n\t\t\tsearch:  {\r\n\t\t\t\tvalue: preSearch.sSearch,\r\n\t\t\t\tregex: preSearch.bRegex\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {\r\n\t\t\tcolumn = columns[i];\r\n\t\t\tcolumnSearch = preColSearch[i];\r\n\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\r\n\t\r\n\t\t\td.columns.push( {\r\n\t\t\t\tdata:       dataProp,\r\n\t\t\t\tname:       column.sName,\r\n\t\t\t\tsearchable: column.bSearchable,\r\n\t\t\t\torderable:  column.bSortable,\r\n\t\t\t\tsearch:     {\r\n\t\t\t\t\tvalue: columnSearch.sSearch,\r\n\t\t\t\t\tregex: columnSearch.bRegex\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\r\n\t\t\tparam( \"mDataProp_\"+i, dataProp );\r\n\t\r\n\t\t\tif ( features.bFilter ) {\r\n\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );\r\n\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );\r\n\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( features.bSort ) {\r\n\t\t\t\tparam( 'bSortable_'+i, column.bSortable );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tif ( features.bFilter ) {\r\n\t\t\tparam( 'sSearch', preSearch.sSearch );\r\n\t\t\tparam( 'bRegex', preSearch.bRegex );\r\n\t\t}\r\n\t\r\n\t\tif ( features.bSort ) {\r\n\t\t\t$.each( sort, function ( i, val ) {\r\n\t\t\t\td.order.push( { column: val.col, dir: val.dir } );\r\n\t\r\n\t\t\t\tparam( 'iSortCol_'+i, val.col );\r\n\t\t\t\tparam( 'sSortDir_'+i, val.dir );\r\n\t\t\t} );\r\n\t\r\n\t\t\tparam( 'iSortingCols', sort.length );\r\n\t\t}\r\n\t\r\n\t\t// If the legacy.ajax parameter is null, then we automatically decide which\r\n\t\t// form to use, based on sAjaxSource\r\n\t\tvar legacy = DataTable.ext.legacy.ajax;\r\n\t\tif ( legacy === null ) {\r\n\t\t\treturn settings.sAjaxSource ? data : d;\r\n\t\t}\r\n\t\r\n\t\t// Otherwise, if legacy has been specified then we use that to decide on the\r\n\t\t// form\r\n\t\treturn legacy ? data : d;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Data the data from the server (nuking the old) and redraw the table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {object} json json data return from the server.\r\n\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests\r\n\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\r\n\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\r\n\t *  @param {array} json.aaData The data to display on this page\r\n\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnAjaxUpdateDraw ( settings, json )\r\n\t{\r\n\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\r\n\t\t// Support both\r\n\t\tvar compat = function ( old, modern ) {\r\n\t\t\treturn json[old] !== undefined ? json[old] : json[modern];\r\n\t\t};\r\n\t\r\n\t\tvar data = _fnAjaxDataSrc( settings, json );\r\n\t\tvar draw            = compat( 'sEcho',                'draw' );\r\n\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\r\n\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\r\n\t\r\n\t\tif ( draw !== undefined ) {\r\n\t\t\t// Protect against out of sequence returns\r\n\t\t\tif ( draw*1 < settings.iDraw ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsettings.iDraw = draw * 1;\r\n\t\t}\r\n\t\r\n\t\t// No data in returned object, so rather than an array, we show an empty table\r\n\t\tif ( ! data ) {\r\n\t\t\tdata = [];\r\n\t\t}\r\n\t\r\n\t\t_fnClearTable( settings );\r\n\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);\r\n\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);\r\n\t\r\n\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n\t\t\t_fnAddData( settings, data[i] );\r\n\t\t}\r\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\r\n\t\r\n\t\t_fnDraw( settings, true );\r\n\t\r\n\t\tif ( ! settings._bInitComplete ) {\r\n\t\t\t_fnInitComplete( settings, json );\r\n\t\t}\r\n\t\r\n\t\t_fnProcessingDisplay( settings, false );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the data from the JSON data source to use for drawing a table. Using\r\n\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\r\n\t * source object, or from a processing function.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param  {object} json Data source object / array from the server\r\n\t *  @return {array} Array of data to use\r\n\t */\r\n\t function _fnAjaxDataSrc ( oSettings, json, write )\r\n\t {\r\n\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\r\n\t\t\toSettings.ajax.dataSrc :\r\n\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.\r\n\t\r\n\t\tif ( ! write ) {\r\n\t\t\tif ( dataSrc === 'data' ) {\r\n\t\t\t\t// If the default, then we still want to support the old style, and safely ignore\r\n\t\t\t\t// it if possible\r\n\t\t\t\treturn json.aaData || json[dataSrc];\r\n\t\t\t}\r\n\t\r\n\t\t\treturn dataSrc !== \"\" ?\r\n\t\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :\r\n\t\t\t\tjson;\r\n\t\t}\r\n\t\r\n\t\t// set\r\n\t\t_fnSetObjectDataFn( dataSrc )( json, write );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generate the node required for filtering text\r\n\t *  @returns {node} Filter control element\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFeatureHtmlFilter ( settings )\r\n\t{\r\n\t\tvar classes = settings.oClasses;\r\n\t\tvar tableId = settings.sTableId;\r\n\t\tvar language = settings.oLanguage;\r\n\t\tvar previousSearch = settings.oPreviousSearch;\r\n\t\tvar features = settings.aanFeatures;\r\n\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\r\n\t\r\n\t\tvar str = language.sSearch;\r\n\t\tstr = str.match(/_INPUT_/) ?\r\n\t\t\tstr.replace('_INPUT_', input) :\r\n\t\t\tstr+input;\r\n\t\r\n\t\tvar filter = $('<div/>', {\r\n\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,\r\n\t\t\t\t'class': classes.sFilter\r\n\t\t\t} )\r\n\t\t\t.append( $('<label/>' ).append( str ) );\r\n\t\r\n\t\tvar searchFn = function(event) {\r\n\t\t\t/* Update all other filter input elements for the new display */\r\n\t\t\tvar n = features.f;\r\n\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\r\n\t\t\tif(previousSearch.return && event.key !== \"Enter\") {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/* Now do the filter */\r\n\t\t\tif ( val != previousSearch.sSearch ) {\r\n\t\t\t\t_fnFilterComplete( settings, {\r\n\t\t\t\t\t\"sSearch\": val,\r\n\t\t\t\t\t\"bRegex\": previousSearch.bRegex,\r\n\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,\r\n\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive,\r\n\t\t\t\t\t\"return\": previousSearch.return\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t\t// Need to redraw, without resorting\r\n\t\t\t\tsettings._iDisplayStart = 0;\r\n\t\t\t\t_fnDraw( settings );\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tvar searchDelay = settings.searchDelay !== null ?\r\n\t\t\tsettings.searchDelay :\r\n\t\t\t_fnDataSource( settings ) === 'ssp' ?\r\n\t\t\t\t400 :\r\n\t\t\t\t0;\r\n\t\r\n\t\tvar jqFilter = $('input', filter)\r\n\t\t\t.val( previousSearch.sSearch )\r\n\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )\r\n\t\t\t.on(\r\n\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',\r\n\t\t\t\tsearchDelay ?\r\n\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :\r\n\t\t\t\t\tsearchFn\r\n\t\t\t)\r\n\t\t\t.on( 'mouseup', function(e) {\r\n\t\t\t\t// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\r\n\t\t\t\t// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\r\n\t\t\t\t// checks the value to see if it has changed. In other browsers it won't have.\r\n\t\t\t\tsetTimeout( function () {\r\n\t\t\t\t\tsearchFn.call(jqFilter[0], e);\r\n\t\t\t\t}, 10);\r\n\t\t\t} )\r\n\t\t\t.on( 'keypress.DT', function(e) {\r\n\t\t\t\t/* Prevent form submission */\r\n\t\t\t\tif ( e.keyCode == 13 ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t\t.attr('aria-controls', tableId);\r\n\t\r\n\t\t// Update the input elements whenever the table is filtered\r\n\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\r\n\t\t\tif ( settings === s ) {\r\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\r\n\t\t\t\t// inside an iframe or frame...\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {\r\n\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( e ) {}\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn filter[0];\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Filter the table using both the global filter and column based filtering\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {object} oSearch search information\r\n\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFilterComplete ( oSettings, oInput, iForce )\r\n\t{\r\n\t\tvar oPrevSearch = oSettings.oPreviousSearch;\r\n\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;\r\n\t\tvar fnSaveFilter = function ( oFilter ) {\r\n\t\t\t/* Save the filtering values */\r\n\t\t\toPrevSearch.sSearch = oFilter.sSearch;\r\n\t\t\toPrevSearch.bRegex = oFilter.bRegex;\r\n\t\t\toPrevSearch.bSmart = oFilter.bSmart;\r\n\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\r\n\t\t\toPrevSearch.return = oFilter.return;\r\n\t\t};\r\n\t\tvar fnRegex = function ( o ) {\r\n\t\t\t// Backwards compatibility with the bEscapeRegex option\r\n\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\r\n\t\t};\r\n\t\r\n\t\t// Resolve any column types that are unknown due to addition or invalidation\r\n\t\t// @todo As per sort - can this be moved into an event handler?\r\n\t\t_fnColumnTypes( oSettings );\r\n\t\r\n\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */\r\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' )\r\n\t\t{\r\n\t\t\t/* Global filter */\r\n\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive, oInput.return );\r\n\t\t\tfnSaveFilter( oInput );\r\n\t\r\n\t\t\t/* Now do the individual column filter */\r\n\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )\r\n\t\t\t{\r\n\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\r\n\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\r\n\t\t\t}\r\n\t\r\n\t\t\t/* Custom filtering */\r\n\t\t\t_fnFilterCustom( oSettings );\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfnSaveFilter( oInput );\r\n\t\t}\r\n\t\r\n\t\t/* Tell the draw function we have been filtering */\r\n\t\toSettings.bFiltered = true;\r\n\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Apply custom filtering functions\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFilterCustom( settings )\r\n\t{\r\n\t\tvar filters = DataTable.ext.search;\r\n\t\tvar displayRows = settings.aiDisplay;\r\n\t\tvar row, rowIdx;\r\n\t\r\n\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {\r\n\t\t\tvar rows = [];\r\n\t\r\n\t\t\t// Loop over each row and see if it should be included\r\n\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\r\n\t\t\t\trowIdx = displayRows[ j ];\r\n\t\t\t\trow = settings.aoData[ rowIdx ];\r\n\t\r\n\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\r\n\t\t\t\t\trows.push( rowIdx );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// So the array reference doesn't break set the results into the\r\n\t\t\t// existing array\r\n\t\t\tdisplayRows.length = 0;\r\n\t\t\t$.merge( displayRows, rows );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Filter the table on a per-column basis\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {string} sInput string to filter on\r\n\t *  @param {int} iColumn column to filter\r\n\t *  @param {bool} bRegex treat search string as a regular expression or not\r\n\t *  @param {bool} bSmart use smart filtering or not\r\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\r\n\t{\r\n\t\tif ( searchStr === '' ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar data;\r\n\t\tvar out = [];\r\n\t\tvar display = settings.aiDisplay;\r\n\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\r\n\t\r\n\t\tfor ( var i=0 ; i<display.length ; i++ ) {\r\n\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\r\n\t\r\n\t\t\tif ( rpSearch.test( data ) ) {\r\n\t\t\t\tout.push( display[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tsettings.aiDisplay = out;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Filter the data table based on user input and draw the table\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {string} input string to filter on\r\n\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\r\n\t *  @param {bool} regex treat as a regular expression or not\r\n\t *  @param {bool} smart perform smart filtering or not\r\n\t *  @param {bool} caseInsensitive Do case insensitive matching or not\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )\r\n\t{\r\n\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\r\n\t\tvar prevSearch = settings.oPreviousSearch.sSearch;\r\n\t\tvar displayMaster = settings.aiDisplayMaster;\r\n\t\tvar display, invalidated, i;\r\n\t\tvar filtered = [];\r\n\t\r\n\t\t// Need to take account of custom filtering functions - always filter\r\n\t\tif ( DataTable.ext.search.length !== 0 ) {\r\n\t\t\tforce = true;\r\n\t\t}\r\n\t\r\n\t\t// Check if any of the rows were invalidated\r\n\t\tinvalidated = _fnFilterData( settings );\r\n\t\r\n\t\t// If the input is blank - we just want the full data set\r\n\t\tif ( input.length <= 0 ) {\r\n\t\t\tsettings.aiDisplay = displayMaster.slice();\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// New search - start from the master array\r\n\t\t\tif ( invalidated ||\r\n\t\t\t\t force ||\r\n\t\t\t\t regex ||\r\n\t\t\t\t prevSearch.length > input.length ||\r\n\t\t\t\t input.indexOf(prevSearch) !== 0 ||\r\n\t\t\t\t settings.bSorted // On resort, the display master needs to be\r\n\t\t\t\t                  // re-filtered since indexes will have changed\r\n\t\t\t) {\r\n\t\t\t\tsettings.aiDisplay = displayMaster.slice();\r\n\t\t\t}\r\n\t\r\n\t\t\t// Search the display array\r\n\t\t\tdisplay = settings.aiDisplay;\r\n\t\r\n\t\t\tfor ( i=0 ; i<display.length ; i++ ) {\r\n\t\t\t\tif ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\r\n\t\t\t\t\tfiltered.push( display[i] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tsettings.aiDisplay = filtered;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Build a regular expression object suitable for searching a table\r\n\t *  @param {string} sSearch string to search for\r\n\t *  @param {bool} bRegex treat as a regular expression or not\r\n\t *  @param {bool} bSmart perform smart filtering or not\r\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n\t *  @returns {RegExp} constructed object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\r\n\t{\r\n\t\tsearch = regex ?\r\n\t\t\tsearch :\r\n\t\t\t_fnEscapeRegex( search );\r\n\t\t\r\n\t\tif ( smart ) {\r\n\t\t\t/* For smart filtering we want to allow the search to work regardless of\r\n\t\t\t * word order. We also want double quoted text to be preserved, so word\r\n\t\t\t * order is important - a la google. So this is what we want to\r\n\t\t\t * generate:\r\n\t\t\t * \r\n\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\r\n\t\t\t */\r\n\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\r\n\t\t\t\tif ( word.charAt(0) === '\"' ) {\r\n\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );\r\n\t\t\t\t\tword = m ? m[1] : word;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn word.replace('\"', '');\r\n\t\t\t} );\r\n\t\r\n\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\r\n\t\t}\r\n\t\r\n\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Escape a string such that it can be used in a regular expression\r\n\t *  @param {string} sVal string to escape\r\n\t *  @returns {string} escaped string\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tvar _fnEscapeRegex = DataTable.util.escapeRegex;\r\n\t\r\n\tvar __filter_div = $('<div>')[0];\r\n\tvar __filter_div_textContent = __filter_div.textContent !== undefined;\r\n\t\r\n\t// Update the filtering data for each row if needed (by invalidation or first run)\r\n\tfunction _fnFilterData ( settings )\r\n\t{\r\n\t\tvar columns = settings.aoColumns;\r\n\t\tvar column;\r\n\t\tvar i, j, ien, jen, filterData, cellData, row;\r\n\t\tvar wasInvalidated = false;\r\n\t\r\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n\t\t\trow = settings.aoData[i];\r\n\t\r\n\t\t\tif ( ! row._aFilterData ) {\r\n\t\t\t\tfilterData = [];\r\n\t\r\n\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {\r\n\t\t\t\t\tcolumn = columns[j];\r\n\t\r\n\t\t\t\t\tif ( column.bSearchable ) {\r\n\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );\r\n\t\r\n\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this\r\n\t\t\t\t\t\t// should be altered to also allow strict type checking.\r\n\t\t\t\t\t\tif ( cellData === null ) {\r\n\t\t\t\t\t\t\tcellData = '';\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {\r\n\t\t\t\t\t\t\tcellData = cellData.toString();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcellData = '';\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// If it looks like there is an HTML entity in the string,\r\n\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that\r\n\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM\r\n\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode\r\n\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\r\n\t\t\t\t\t\t__filter_div.innerHTML = cellData;\r\n\t\t\t\t\t\tcellData = __filter_div_textContent ?\r\n\t\t\t\t\t\t\t__filter_div.textContent :\r\n\t\t\t\t\t\t\t__filter_div.innerText;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( cellData.replace ) {\r\n\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfilterData.push( cellData );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\trow._aFilterData = filterData;\r\n\t\t\t\trow._sFilterRow = filterData.join('  ');\r\n\t\t\t\twasInvalidated = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn wasInvalidated;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert from the internal Hungarian notation to camelCase for external\r\n\t * interaction\r\n\t *  @param {object} obj Object to convert\r\n\t *  @returns {object} Inverted object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSearchToCamel ( obj )\r\n\t{\r\n\t\treturn {\r\n\t\t\tsearch:          obj.sSearch,\r\n\t\t\tsmart:           obj.bSmart,\r\n\t\t\tregex:           obj.bRegex,\r\n\t\t\tcaseInsensitive: obj.bCaseInsensitive\r\n\t\t};\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert from camelCase notation to the internal Hungarian. We could use the\r\n\t * Hungarian convert function here, but this is cleaner\r\n\t *  @param {object} obj Object to convert\r\n\t *  @returns {object} Inverted object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSearchToHung ( obj )\r\n\t{\r\n\t\treturn {\r\n\t\t\tsSearch:          obj.search,\r\n\t\t\tbSmart:           obj.smart,\r\n\t\t\tbRegex:           obj.regex,\r\n\t\t\tbCaseInsensitive: obj.caseInsensitive\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generate the node required for the info display\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @returns {node} Information element\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFeatureHtmlInfo ( settings )\r\n\t{\r\n\t\tvar\r\n\t\t\ttid = settings.sTableId,\r\n\t\t\tnodes = settings.aanFeatures.i,\r\n\t\t\tn = $('<div/>', {\r\n\t\t\t\t'class': settings.oClasses.sInfo,\r\n\t\t\t\t'id': ! nodes ? tid+'_info' : null\r\n\t\t\t} );\r\n\t\r\n\t\tif ( ! nodes ) {\r\n\t\t\t// Update display on each draw\r\n\t\t\tsettings.aoDrawCallback.push( {\r\n\t\t\t\t\"fn\": _fnUpdateInfo,\r\n\t\t\t\t\"sName\": \"information\"\r\n\t\t\t} );\r\n\t\r\n\t\t\tn\r\n\t\t\t\t.attr( 'role', 'status' )\r\n\t\t\t\t.attr( 'aria-live', 'polite' );\r\n\t\r\n\t\t\t// Table is described by our info div\r\n\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );\r\n\t\t}\r\n\t\r\n\t\treturn n[0];\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Update the information elements in the display\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnUpdateInfo ( settings )\r\n\t{\r\n\t\t/* Show information about the table */\r\n\t\tvar nodes = settings.aanFeatures.i;\r\n\t\tif ( nodes.length === 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar\r\n\t\t\tlang  = settings.oLanguage,\r\n\t\t\tstart = settings._iDisplayStart+1,\r\n\t\t\tend   = settings.fnDisplayEnd(),\r\n\t\t\tmax   = settings.fnRecordsTotal(),\r\n\t\t\ttotal = settings.fnRecordsDisplay(),\r\n\t\t\tout   = total ?\r\n\t\t\t\tlang.sInfo :\r\n\t\t\t\tlang.sInfoEmpty;\r\n\t\r\n\t\tif ( total !== max ) {\r\n\t\t\t/* Record set after filtering */\r\n\t\t\tout += ' ' + lang.sInfoFiltered;\r\n\t\t}\r\n\t\r\n\t\t// Convert the macros\r\n\t\tout += lang.sInfoPostFix;\r\n\t\tout = _fnInfoMacros( settings, out );\r\n\t\r\n\t\tvar callback = lang.fnInfoCallback;\r\n\t\tif ( callback !== null ) {\r\n\t\t\tout = callback.call( settings.oInstance,\r\n\t\t\t\tsettings, start, end, max, total, out\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\t$(nodes).html( out );\r\n\t}\r\n\t\r\n\t\r\n\tfunction _fnInfoMacros ( settings, str )\r\n\t{\r\n\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\r\n\t\t// internally\r\n\t\tvar\r\n\t\t\tformatter  = settings.fnFormatNumber,\r\n\t\t\tstart      = settings._iDisplayStart+1,\r\n\t\t\tlen        = settings._iDisplayLength,\r\n\t\t\tvis        = settings.fnRecordsDisplay(),\r\n\t\t\tall        = len === -1;\r\n\t\r\n\t\treturn str.\r\n\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).\r\n\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\r\n\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\r\n\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).\r\n\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\r\n\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Draw the table for the first time, adding all required features\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnInitialise ( settings )\r\n\t{\r\n\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;\r\n\t\tvar columns = settings.aoColumns, column;\r\n\t\tvar features = settings.oFeatures;\r\n\t\tvar deferLoading = settings.bDeferLoading; // value modified by the draw\r\n\t\r\n\t\t/* Ensure that the table data is fully initialised */\r\n\t\tif ( ! settings.bInitialised ) {\r\n\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t/* Show the display HTML options */\r\n\t\t_fnAddOptionsHtml( settings );\r\n\t\r\n\t\t/* Build and draw the header / footer for the table */\r\n\t\t_fnBuildHead( settings );\r\n\t\t_fnDrawHead( settings, settings.aoHeader );\r\n\t\t_fnDrawHead( settings, settings.aoFooter );\r\n\t\r\n\t\t/* Okay to show that something is going on now */\r\n\t\t_fnProcessingDisplay( settings, true );\r\n\t\r\n\t\t/* Calculate sizes for columns */\r\n\t\tif ( features.bAutoWidth ) {\r\n\t\t\t_fnCalculateColumnWidths( settings );\r\n\t\t}\r\n\t\r\n\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\r\n\t\t\tcolumn = columns[i];\r\n\t\r\n\t\t\tif ( column.sWidth ) {\r\n\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t_fnCallbackFire( settings, null, 'preInit', [settings] );\r\n\t\r\n\t\t// If there is default sorting required - let's do it. The sort function\r\n\t\t// will do the drawing for us. Otherwise we draw the table regardless of the\r\n\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing\r\n\t\t// data (show 'loading' message possibly)\r\n\t\t_fnReDraw( settings );\r\n\t\r\n\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw\r\n\t\tvar dataSrc = _fnDataSource( settings );\r\n\t\tif ( dataSrc != 'ssp' || deferLoading ) {\r\n\t\t\t// if there is an ajax source load the data\r\n\t\t\tif ( dataSrc == 'ajax' ) {\r\n\t\t\t\t_fnBuildAjax( settings, [], function(json) {\r\n\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );\r\n\t\r\n\t\t\t\t\t// Got the data - add it to the table\r\n\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {\r\n\t\t\t\t\t\t_fnAddData( settings, aData[i] );\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// Reset the init display for cookie saving. We've already done\r\n\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make\r\n\t\t\t\t\t// it appear 'fresh'\r\n\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;\r\n\t\r\n\t\t\t\t\t_fnReDraw( settings );\r\n\t\r\n\t\t\t\t\t_fnProcessingDisplay( settings, false );\r\n\t\t\t\t\t_fnInitComplete( settings, json );\r\n\t\t\t\t}, settings );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t_fnProcessingDisplay( settings, false );\r\n\t\t\t\t_fnInitComplete( settings );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Draw the table for the first time, adding all required features\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\r\n\t *    with client-side processing (optional)\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnInitComplete ( settings, json )\r\n\t{\r\n\t\tsettings._bInitComplete = true;\r\n\t\r\n\t\t// When data was added after the initialisation (data or Ajax) we need to\r\n\t\t// calculate the column sizing\r\n\t\tif ( json || settings.oInit.aaData ) {\r\n\t\t\t_fnAdjustColumnSizing( settings );\r\n\t\t}\r\n\t\r\n\t\t_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\r\n\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\r\n\t}\r\n\t\r\n\t\r\n\tfunction _fnLengthChange ( settings, val )\r\n\t{\r\n\t\tvar len = parseInt( val, 10 );\r\n\t\tsettings._iDisplayLength = len;\r\n\t\r\n\t\t_fnLengthOverflow( settings );\r\n\t\r\n\t\t// Fire length change event\r\n\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Generate the node required for user display length changing\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @returns {node} Display length feature node\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFeatureHtmlLength ( settings )\r\n\t{\r\n\t\tvar\r\n\t\t\tclasses  = settings.oClasses,\r\n\t\t\ttableId  = settings.sTableId,\r\n\t\t\tmenu     = settings.aLengthMenu,\r\n\t\t\td2       = Array.isArray( menu[0] ),\r\n\t\t\tlengths  = d2 ? menu[0] : menu,\r\n\t\t\tlanguage = d2 ? menu[1] : menu;\r\n\t\r\n\t\tvar select = $('<select/>', {\r\n\t\t\t'name':          tableId+'_length',\r\n\t\t\t'aria-controls': tableId,\r\n\t\t\t'class':         classes.sLengthSelect\r\n\t\t} );\r\n\t\r\n\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\r\n\t\t\tselect[0][ i ] = new Option(\r\n\t\t\t\ttypeof language[i] === 'number' ?\r\n\t\t\t\t\tsettings.fnFormatNumber( language[i] ) :\r\n\t\t\t\t\tlanguage[i],\r\n\t\t\t\tlengths[i]\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );\r\n\t\tif ( ! settings.aanFeatures.l ) {\r\n\t\t\tdiv[0].id = tableId+'_length';\r\n\t\t}\r\n\t\r\n\t\tdiv.children().append(\r\n\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\r\n\t\t);\r\n\t\r\n\t\t// Can't use `select` variable as user might provide their own and the\r\n\t\t// reference is broken by the use of outerHTML\r\n\t\t$('select', div)\r\n\t\t\t.val( settings._iDisplayLength )\r\n\t\t\t.on( 'change.DT', function(e) {\r\n\t\t\t\t_fnLengthChange( settings, $(this).val() );\r\n\t\t\t\t_fnDraw( settings );\r\n\t\t\t} );\r\n\t\r\n\t\t// Update node value whenever anything changes the table's length\r\n\t\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\r\n\t\t\tif ( settings === s ) {\r\n\t\t\t\t$('select', div).val( len );\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn div[0];\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n\t * Note that most of the paging logic is done in\r\n\t * DataTable.ext.pager\r\n\t */\r\n\t\r\n\t/**\r\n\t * Generate the node required for default pagination\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @returns {node} Pagination feature node\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFeatureHtmlPaginate ( settings )\r\n\t{\r\n\t\tvar\r\n\t\t\ttype   = settings.sPaginationType,\r\n\t\t\tplugin = DataTable.ext.pager[ type ],\r\n\t\t\tmodern = typeof plugin === 'function',\r\n\t\t\tredraw = function( settings ) {\r\n\t\t\t\t_fnDraw( settings );\r\n\t\t\t},\r\n\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\r\n\t\t\tfeatures = settings.aanFeatures;\r\n\t\r\n\t\tif ( ! modern ) {\r\n\t\t\tplugin.fnInit( settings, node, redraw );\r\n\t\t}\r\n\t\r\n\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */\r\n\t\tif ( ! features.p )\r\n\t\t{\r\n\t\t\tnode.id = settings.sTableId+'_paginate';\r\n\t\r\n\t\t\tsettings.aoDrawCallback.push( {\r\n\t\t\t\t\"fn\": function( settings ) {\r\n\t\t\t\t\tif ( modern ) {\r\n\t\t\t\t\t\tvar\r\n\t\t\t\t\t\t\tstart      = settings._iDisplayStart,\r\n\t\t\t\t\t\t\tlen        = settings._iDisplayLength,\r\n\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),\r\n\t\t\t\t\t\t\tall        = len === -1,\r\n\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),\r\n\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),\r\n\t\t\t\t\t\t\tbuttons = plugin(page, pages),\r\n\t\t\t\t\t\t\ti, ien;\r\n\t\r\n\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {\r\n\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(\r\n\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"sName\": \"pagination\"\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Alter the display settings to change the page\r\n\t *  @param {object} settings DataTables settings object\r\n\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",\r\n\t *    \"next\" or \"last\" or page number to jump to (integer)\r\n\t *  @param [bool] redraw Automatically draw the update or not\r\n\t *  @returns {bool} true page has changed, false - no change\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnPageChange ( settings, action, redraw )\r\n\t{\r\n\t\tvar\r\n\t\t\tstart     = settings._iDisplayStart,\r\n\t\t\tlen       = settings._iDisplayLength,\r\n\t\t\trecords   = settings.fnRecordsDisplay();\r\n\t\r\n\t\tif ( records === 0 || len === -1 )\r\n\t\t{\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\telse if ( typeof action === \"number\" )\r\n\t\t{\r\n\t\t\tstart = action * len;\r\n\t\r\n\t\t\tif ( start > records )\r\n\t\t\t{\r\n\t\t\t\tstart = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( action == \"first\" )\r\n\t\t{\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\telse if ( action == \"previous\" )\r\n\t\t{\r\n\t\t\tstart = len >= 0 ?\r\n\t\t\t\tstart - len :\r\n\t\t\t\t0;\r\n\t\r\n\t\t\tif ( start < 0 )\r\n\t\t\t{\r\n\t\t\t  start = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( action == \"next\" )\r\n\t\t{\r\n\t\t\tif ( start + len < records )\r\n\t\t\t{\r\n\t\t\t\tstart += len;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( action == \"last\" )\r\n\t\t{\r\n\t\t\tstart = Math.floor( (records-1) / len) * len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\r\n\t\t}\r\n\t\r\n\t\tvar changed = settings._iDisplayStart !== start;\r\n\t\tsettings._iDisplayStart = start;\r\n\t\r\n\t\tif ( changed ) {\r\n\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );\r\n\t\r\n\t\t\tif ( redraw ) {\r\n\t\t\t\t_fnDraw( settings );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn changed;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Generate the node required for the processing node\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @returns {node} Processing element\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFeatureHtmlProcessing ( settings )\r\n\t{\r\n\t\treturn $('<div/>', {\r\n\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\r\n\t\t\t\t'class': settings.oClasses.sProcessing\r\n\t\t\t} )\r\n\t\t\t.html( settings.oLanguage.sProcessing )\r\n\t\t\t.insertBefore( settings.nTable )[0];\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Display or hide the processing indicator\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {bool} show Show the processing indicator (true) or not (false)\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnProcessingDisplay ( settings, show )\r\n\t{\r\n\t\tif ( settings.oFeatures.bProcessing ) {\r\n\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\r\n\t\t}\r\n\t\r\n\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add any control elements for the table - specifically scrolling\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @returns {node} Node to add to the DOM\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnFeatureHtmlTable ( settings )\r\n\t{\r\n\t\tvar table = $(settings.nTable);\r\n\t\r\n\t\t// Scrolling from here on in\r\n\t\tvar scroll = settings.oScroll;\r\n\t\r\n\t\tif ( scroll.sX === '' && scroll.sY === '' ) {\r\n\t\t\treturn settings.nTable;\r\n\t\t}\r\n\t\r\n\t\tvar scrollX = scroll.sX;\r\n\t\tvar scrollY = scroll.sY;\r\n\t\tvar classes = settings.oClasses;\r\n\t\tvar caption = table.children('caption');\r\n\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;\r\n\t\tvar headerClone = $( table[0].cloneNode(false) );\r\n\t\tvar footerClone = $( table[0].cloneNode(false) );\r\n\t\tvar footer = table.children('tfoot');\r\n\t\tvar _div = '<div/>';\r\n\t\tvar size = function ( s ) {\r\n\t\t\treturn !s ? null : _fnStringToCss( s );\r\n\t\t};\r\n\t\r\n\t\tif ( ! footer.length ) {\r\n\t\t\tfooter = null;\r\n\t\t}\r\n\t\r\n\t\t/*\r\n\t\t * The HTML structure that we want to generate in this function is:\r\n\t\t *  div - scroller\r\n\t\t *    div - scroll head\r\n\t\t *      div - scroll head inner\r\n\t\t *        table - scroll head table\r\n\t\t *          thead - thead\r\n\t\t *    div - scroll body\r\n\t\t *      table - table (master table)\r\n\t\t *        thead - thead clone for sizing\r\n\t\t *        tbody - tbody\r\n\t\t *    div - scroll foot\r\n\t\t *      div - scroll foot inner\r\n\t\t *        table - scroll foot table\r\n\t\t *          tfoot - tfoot\r\n\t\t */\r\n\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )\r\n\t\t\t.append(\r\n\t\t\t\t$(_div, { 'class': classes.sScrollHead } )\r\n\t\t\t\t\t.css( {\r\n\t\t\t\t\t\toverflow: 'hidden',\r\n\t\t\t\t\t\tposition: 'relative',\r\n\t\t\t\t\t\tborder: 0,\r\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.append(\r\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )\r\n\t\t\t\t\t\t\t.css( {\r\n\t\t\t\t\t\t\t\t'box-sizing': 'content-box',\r\n\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'\r\n\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t\t.append(\r\n\t\t\t\t\t\t\t\theaderClone\r\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\r\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\r\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )\r\n\t\t\t\t\t\t\t\t\t.append(\r\n\t\t\t\t\t\t\t\t\t\ttable.children('thead')\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t.append(\r\n\t\t\t\t$(_div, { 'class': classes.sScrollBody } )\r\n\t\t\t\t\t.css( {\r\n\t\t\t\t\t\tposition: 'relative',\r\n\t\t\t\t\t\toverflow: 'auto',\r\n\t\t\t\t\t\twidth: size( scrollX )\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.append( table )\r\n\t\t\t);\r\n\t\r\n\t\tif ( footer ) {\r\n\t\t\tscroller.append(\r\n\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )\r\n\t\t\t\t\t.css( {\r\n\t\t\t\t\t\toverflow: 'hidden',\r\n\t\t\t\t\t\tborder: 0,\r\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.append(\r\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )\r\n\t\t\t\t\t\t\t.append(\r\n\t\t\t\t\t\t\t\tfooterClone\r\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\r\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\r\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )\r\n\t\t\t\t\t\t\t\t\t.append(\r\n\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\tvar children = scroller.children();\r\n\t\tvar scrollHead = children[0];\r\n\t\tvar scrollBody = children[1];\r\n\t\tvar scrollFoot = footer ? children[2] : null;\r\n\t\r\n\t\t// When the body is scrolled, then we also want to scroll the headers\r\n\t\tif ( scrollX ) {\r\n\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {\r\n\t\t\t\tvar scrollLeft = this.scrollLeft;\r\n\t\r\n\t\t\t\tscrollHead.scrollLeft = scrollLeft;\r\n\t\r\n\t\t\t\tif ( footer ) {\r\n\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\t$(scrollBody).css('max-height', scrollY);\r\n\t\tif (! scroll.bCollapse) {\r\n\t\t\t$(scrollBody).css('height', scrollY);\r\n\t\t}\r\n\t\r\n\t\tsettings.nScrollHead = scrollHead;\r\n\t\tsettings.nScrollBody = scrollBody;\r\n\t\tsettings.nScrollFoot = scrollFoot;\r\n\t\r\n\t\t// On redraw - align columns\r\n\t\tsettings.aoDrawCallback.push( {\r\n\t\t\t\"fn\": _fnScrollDraw,\r\n\t\t\t\"sName\": \"scrolling\"\r\n\t\t} );\r\n\t\r\n\t\treturn scroller[0];\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Update the header, footer and body tables for resizing - i.e. column\r\n\t * alignment.\r\n\t *\r\n\t * Welcome to the most horrible function DataTables. The process that this\r\n\t * function follows is basically:\r\n\t *   1. Re-create the table inside the scrolling div\r\n\t *   2. Take live measurements from the DOM\r\n\t *   3. Apply the measurements to align the columns\r\n\t *   4. Clean up\r\n\t *\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnScrollDraw ( settings )\r\n\t{\r\n\t\t// Given that this is such a monster function, a lot of variables are use\r\n\t\t// to try and keep the minimised size as small as possible\r\n\t\tvar\r\n\t\t\tscroll         = settings.oScroll,\r\n\t\t\tscrollX        = scroll.sX,\r\n\t\t\tscrollXInner   = scroll.sXInner,\r\n\t\t\tscrollY        = scroll.sY,\r\n\t\t\tbarWidth       = scroll.iBarWidth,\r\n\t\t\tdivHeader      = $(settings.nScrollHead),\r\n\t\t\tdivHeaderStyle = divHeader[0].style,\r\n\t\t\tdivHeaderInner = divHeader.children('div'),\r\n\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,\r\n\t\t\tdivHeaderTable = divHeaderInner.children('table'),\r\n\t\t\tdivBodyEl      = settings.nScrollBody,\r\n\t\t\tdivBody        = $(divBodyEl),\r\n\t\t\tdivBodyStyle   = divBodyEl.style,\r\n\t\t\tdivFooter      = $(settings.nScrollFoot),\r\n\t\t\tdivFooterInner = divFooter.children('div'),\r\n\t\t\tdivFooterTable = divFooterInner.children('table'),\r\n\t\t\theader         = $(settings.nTHead),\r\n\t\t\ttable          = $(settings.nTable),\r\n\t\t\ttableEl        = table[0],\r\n\t\t\ttableStyle     = tableEl.style,\r\n\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,\r\n\t\t\tbrowser        = settings.oBrowser,\r\n\t\t\tie67           = browser.bScrollOversize,\r\n\t\t\tdtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\r\n\t\t\theaderTrgEls, footerTrgEls,\r\n\t\t\theaderSrcEls, footerSrcEls,\r\n\t\t\theaderCopy, footerCopy,\r\n\t\t\theaderWidths=[], footerWidths=[],\r\n\t\t\theaderContent=[], footerContent=[],\r\n\t\t\tidx, correction, sanityWidth,\r\n\t\t\tzeroOut = function(nSizer) {\r\n\t\t\t\tvar style = nSizer.style;\r\n\t\t\t\tstyle.paddingTop = \"0\";\r\n\t\t\t\tstyle.paddingBottom = \"0\";\r\n\t\t\t\tstyle.borderTopWidth = \"0\";\r\n\t\t\t\tstyle.borderBottomWidth = \"0\";\r\n\t\t\t\tstyle.height = 0;\r\n\t\t\t};\r\n\t\r\n\t\t// If the scrollbar visibility has changed from the last draw, we need to\r\n\t\t// adjust the column sizes as the table width will have changed to account\r\n\t\t// for the scrollbar\r\n\t\tvar scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\r\n\t\t\r\n\t\tif ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\r\n\t\t\tsettings.scrollBarVis = scrollBarVis;\r\n\t\t\t_fnAdjustColumnSizing( settings );\r\n\t\t\treturn; // adjust column sizing will call this function again\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsettings.scrollBarVis = scrollBarVis;\r\n\t\t}\r\n\t\r\n\t\t/*\r\n\t\t * 1. Re-create the table inside the scrolling div\r\n\t\t */\r\n\t\r\n\t\t// Remove the old minimised thead and tfoot elements in the inner table\r\n\t\ttable.children('thead, tfoot').remove();\r\n\t\r\n\t\tif ( footer ) {\r\n\t\t\tfooterCopy = footer.clone().prependTo( table );\r\n\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\r\n\t\t\tfooterSrcEls = footerCopy.find('tr');\r\n\t\t}\r\n\t\r\n\t\t// Clone the current header and footer elements and then place it into the inner table\r\n\t\theaderCopy = header.clone().prependTo( table );\r\n\t\theaderTrgEls = header.find('tr'); // original header is in its own table\r\n\t\theaderSrcEls = headerCopy.find('tr');\r\n\t\theaderCopy.find('th, td').removeAttr('tabindex');\r\n\t\r\n\t\r\n\t\t/*\r\n\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\r\n\t\t */\r\n\t\r\n\t\t// Remove old sizing and apply the calculated column widths\r\n\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the\r\n\t\t// calculated sizes to this header\r\n\t\tif ( ! scrollX )\r\n\t\t{\r\n\t\t\tdivBodyStyle.width = '100%';\r\n\t\t\tdivHeader[0].style.width = '100%';\r\n\t\t}\r\n\t\r\n\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\r\n\t\t\tidx = _fnVisibleToColumnIndex( settings, i );\r\n\t\t\tel.style.width = settings.aoColumns[idx].sWidth;\r\n\t\t} );\r\n\t\r\n\t\tif ( footer ) {\r\n\t\t\t_fnApplyToChildren( function(n) {\r\n\t\t\t\tn.style.width = \"\";\r\n\t\t\t}, footerSrcEls );\r\n\t\t}\r\n\t\r\n\t\t// Size the table as a whole\r\n\t\tsanityWidth = table.outerWidth();\r\n\t\tif ( scrollX === \"\" ) {\r\n\t\t\t// No x scrolling\r\n\t\t\ttableStyle.width = \"100%\";\r\n\t\r\n\t\t\t// IE7 will make the width of the table when 100% include the scrollbar\r\n\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this\r\n\t\t\t// into account.\r\n\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\r\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")\r\n\t\t\t) {\r\n\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\r\n\t\t\t}\r\n\t\r\n\t\t\t// Recalculate the sanity width\r\n\t\t\tsanityWidth = table.outerWidth();\r\n\t\t}\r\n\t\telse if ( scrollXInner !== \"\" ) {\r\n\t\t\t// legacy x scroll inner has been given - use it\r\n\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);\r\n\t\r\n\t\t\t// Recalculate the sanity width\r\n\t\t\tsanityWidth = table.outerWidth();\r\n\t\t}\r\n\t\r\n\t\t// Hidden header should have zero height, so remove padding and borders. Then\r\n\t\t// set the width based on the real headers\r\n\t\r\n\t\t// Apply all styles in one pass\r\n\t\t_fnApplyToChildren( zeroOut, headerSrcEls );\r\n\t\r\n\t\t// Read all widths in next pass\r\n\t\t_fnApplyToChildren( function(nSizer) {\r\n\t\t\tvar style = window.getComputedStyle ?\r\n\t\t\t\twindow.getComputedStyle(nSizer).width :\r\n\t\t\t\t_fnStringToCss( $(nSizer).width() );\r\n\t\r\n\t\t\theaderContent.push( nSizer.innerHTML );\r\n\t\t\theaderWidths.push( style );\r\n\t\t}, headerSrcEls );\r\n\t\r\n\t\t// Apply all widths in final pass\r\n\t\t_fnApplyToChildren( function(nToSize, i) {\r\n\t\t\tnToSize.style.width = headerWidths[i];\r\n\t\t}, headerTrgEls );\r\n\t\r\n\t\t$(headerSrcEls).css('height', 0);\r\n\t\r\n\t\t/* Same again with the footer if we have one */\r\n\t\tif ( footer )\r\n\t\t{\r\n\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );\r\n\t\r\n\t\t\t_fnApplyToChildren( function(nSizer) {\r\n\t\t\t\tfooterContent.push( nSizer.innerHTML );\r\n\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n\t\t\t}, footerSrcEls );\r\n\t\r\n\t\t\t_fnApplyToChildren( function(nToSize, i) {\r\n\t\t\t\tnToSize.style.width = footerWidths[i];\r\n\t\t\t}, footerTrgEls );\r\n\t\r\n\t\t\t$(footerSrcEls).height(0);\r\n\t\t}\r\n\t\r\n\t\r\n\t\t/*\r\n\t\t * 3. Apply the measurements\r\n\t\t */\r\n\t\r\n\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep\r\n\t\t// the content of the cell so that the width applied to the header and body\r\n\t\t// both match, but we want to hide it completely. We want to also fix their\r\n\t\t// width to what they currently are\r\n\t\t_fnApplyToChildren( function(nSizer, i) {\r\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+headerContent[i]+'</div>';\r\n\t\t\tnSizer.childNodes[0].style.height = \"0\";\r\n\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";\r\n\t\t\tnSizer.style.width = headerWidths[i];\r\n\t\t}, headerSrcEls );\r\n\t\r\n\t\tif ( footer )\r\n\t\t{\r\n\t\t\t_fnApplyToChildren( function(nSizer, i) {\r\n\t\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+footerContent[i]+'</div>';\r\n\t\t\t\tnSizer.childNodes[0].style.height = \"0\";\r\n\t\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";\r\n\t\t\t\tnSizer.style.width = footerWidths[i];\r\n\t\t\t}, footerSrcEls );\r\n\t\t}\r\n\t\r\n\t\t// Sanity check that the table is of a sensible width. If not then we are going to get\r\n\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width\r\n\t\tif ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )\r\n\t\t{\r\n\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */\r\n\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\r\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?\r\n\t\t\t\t\tsanityWidth+barWidth :\r\n\t\t\t\t\tsanityWidth;\r\n\t\r\n\t\t\t// IE6/7 are a law unto themselves...\r\n\t\t\tif ( ie67 && (divBodyEl.scrollHeight >\r\n\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\r\n\t\t\t) {\r\n\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );\r\n\t\t\t}\r\n\t\r\n\t\t\t// And give the user a warning that we've stopped the table getting too small\r\n\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {\r\n\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcorrection = '100%';\r\n\t\t}\r\n\t\r\n\t\t// Apply to the container elements\r\n\t\tdivBodyStyle.width = _fnStringToCss( correction );\r\n\t\tdivHeaderStyle.width = _fnStringToCss( correction );\r\n\t\r\n\t\tif ( footer ) {\r\n\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );\r\n\t\t}\r\n\t\r\n\t\r\n\t\t/*\r\n\t\t * 4. Clean up\r\n\t\t */\r\n\t\tif ( ! scrollY ) {\r\n\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\r\n\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\r\n\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\r\n\t\t\t */\r\n\t\t\tif ( ie67 ) {\r\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/* Finally set the width's of the header and footer tables */\r\n\t\tvar iOuterWidth = table.outerWidth();\r\n\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\r\n\t\r\n\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to\r\n\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\r\n\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\r\n\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\r\n\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n\t\r\n\t\tif ( footer ) {\r\n\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\r\n\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n\t\t}\r\n\t\r\n\t\t// Correct DOM ordering for colgroup - comes before the thead\r\n\t\ttable.children('colgroup').insertBefore( table.children('thead') );\r\n\t\r\n\t\t/* Adjust the position of the header in case we loose the y-scrollbar */\r\n\t\tdivBody.trigger('scroll');\r\n\t\r\n\t\t// If sorting or filtering has occurred, jump the scrolling back to the top\r\n\t\t// only if we aren't holding the position\r\n\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\r\n\t\t\tdivBodyEl.scrollTop = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Apply a given function to the display child nodes of an element array (typically\r\n\t * TD children of TR rows\r\n\t *  @param {function} fn Method to apply to the objects\r\n\t *  @param array {nodes} an1 List of elements to look through for display children\r\n\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnApplyToChildren( fn, an1, an2 )\r\n\t{\r\n\t\tvar index=0, i=0, iLen=an1.length;\r\n\t\tvar nNode1, nNode2;\r\n\t\r\n\t\twhile ( i < iLen ) {\r\n\t\t\tnNode1 = an1[i].firstChild;\r\n\t\t\tnNode2 = an2 ? an2[i].firstChild : null;\r\n\t\r\n\t\t\twhile ( nNode1 ) {\r\n\t\t\t\tif ( nNode1.nodeType === 1 ) {\r\n\t\t\t\t\tif ( an2 ) {\r\n\t\t\t\t\t\tfn( nNode1, nNode2, index );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfn( nNode1, index );\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tnNode1 = nNode1.nextSibling;\r\n\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;\r\n\t\t\t}\r\n\t\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tvar __re_html_remove = /<.*?>/g;\r\n\t\r\n\t\r\n\t/**\r\n\t * Calculate the width of columns for the table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnCalculateColumnWidths ( oSettings )\r\n\t{\r\n\t\tvar\r\n\t\t\ttable = oSettings.nTable,\r\n\t\t\tcolumns = oSettings.aoColumns,\r\n\t\t\tscroll = oSettings.oScroll,\r\n\t\t\tscrollY = scroll.sY,\r\n\t\t\tscrollX = scroll.sX,\r\n\t\t\tscrollXInner = scroll.sXInner,\r\n\t\t\tcolumnCount = columns.length,\r\n\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\r\n\t\t\theaderCells = $('th', oSettings.nTHead),\r\n\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element\r\n\t\t\ttableContainer = table.parentNode,\r\n\t\t\tuserInputs = false,\r\n\t\t\ti, column, columnIdx, width, outerWidth,\r\n\t\t\tbrowser = oSettings.oBrowser,\r\n\t\t\tie67 = browser.bScrollOversize;\r\n\t\r\n\t\tvar styleWidth = table.style.width;\r\n\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\r\n\t\t\ttableWidthAttr = styleWidth;\r\n\t\t}\r\n\t\r\n\t\t/* Convert any user input sizes into pixel sizes */\r\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n\t\t\tcolumn = columns[ visibleColumns[i] ];\r\n\t\r\n\t\t\tif ( column.sWidth !== null ) {\r\n\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\r\n\t\r\n\t\t\t\tuserInputs = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/* If the number of columns in the DOM equals the number that we have to\r\n\t\t * process in DataTables, then we can use the offsets that are created by\r\n\t\t * the web- browser. No custom sizes can be set in order for this to happen,\r\n\t\t * nor scrolling used\r\n\t\t */\r\n\t\tif ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\r\n\t\t     columnCount == _fnVisbleColumns( oSettings ) &&\r\n\t\t     columnCount == headerCells.length\r\n\t\t) {\r\n\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {\r\n\t\t\t\tvar colIdx = _fnVisibleToColumnIndex( oSettings, i );\r\n\t\r\n\t\t\t\tif ( colIdx !== null ) {\r\n\t\t\t\t\tcolumns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Otherwise construct a single row, worst case, table with the widest\r\n\t\t\t// node in the data, assign any user defined widths, then insert it into\r\n\t\t\t// the DOM and allow the browser to do all the hard work of calculating\r\n\t\t\t// table widths\r\n\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\r\n\t\t\t\t.css( 'visibility', 'hidden' )\r\n\t\t\t\t.removeAttr( 'id' );\r\n\t\r\n\t\t\t// Clean up the table body\r\n\t\t\ttmpTable.find('tbody tr').remove();\r\n\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\r\n\t\r\n\t\t\t// Clone the table header and footer - we can't use the header / footer\r\n\t\t\t// from the cloned table, since if scrolling is active, the table's\r\n\t\t\t// real header and footer are contained in different table tags\r\n\t\t\ttmpTable.find('thead, tfoot').remove();\r\n\t\t\ttmpTable\r\n\t\t\t\t.append( $(oSettings.nTHead).clone() )\r\n\t\t\t\t.append( $(oSettings.nTFoot).clone() );\r\n\t\r\n\t\t\t// Remove any assigned widths from the footer (from scrolling)\r\n\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');\r\n\t\r\n\t\t\t// Apply custom sizing to the cloned header\r\n\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\r\n\t\r\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];\r\n\t\r\n\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\r\n\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :\r\n\t\t\t\t\t'';\r\n\t\r\n\t\t\t\t// For scrollX we need to force the column width otherwise the\r\n\t\t\t\t// browser will collapse it. If this width is smaller than the\r\n\t\t\t\t// width the column requires, then it will have no effect\r\n\t\t\t\tif ( column.sWidthOrig && scrollX ) {\r\n\t\t\t\t\t$( headerCells[i] ).append( $('<div/>').css( {\r\n\t\t\t\t\t\twidth: column.sWidthOrig,\r\n\t\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\t\tpadding: 0,\r\n\t\t\t\t\t\tborder: 0,\r\n\t\t\t\t\t\theight: 1\r\n\t\t\t\t\t} ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Find the widest cell for each column and put it into the table\r\n\t\t\tif ( oSettings.aoData.length ) {\r\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n\t\t\t\t\tcolumnIdx = visibleColumns[i];\r\n\t\t\t\t\tcolumn = columns[ columnIdx ];\r\n\t\r\n\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )\r\n\t\t\t\t\t\t.clone( false )\r\n\t\t\t\t\t\t.append( column.sContentPadding )\r\n\t\t\t\t\t\t.appendTo( tr );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Tidy the temporary table - remove name attributes so there aren't\r\n\t\t\t// duplicated in the dom (radio elements for example)\r\n\t\t\t$('[name]', tmpTable).removeAttr('name');\r\n\t\r\n\t\t\t// Table has been built, attach to the document so we can work with it.\r\n\t\t\t// A holding element is used, positioned at the top of the container\r\n\t\t\t// with minimal height, so it has no effect on if the container scrolls\r\n\t\t\t// or not. Otherwise it might trigger scrolling when it actually isn't\r\n\t\t\t// needed\r\n\t\t\tvar holder = $('<div/>').css( scrollX || scrollY ?\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\t\ttop: 0,\r\n\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t\theight: 1,\r\n\t\t\t\t\t\tright: 0,\r\n\t\t\t\t\t\toverflow: 'hidden'\r\n\t\t\t\t\t} :\r\n\t\t\t\t\t{}\r\n\t\t\t\t)\r\n\t\t\t\t.append( tmpTable )\r\n\t\t\t\t.appendTo( tableContainer );\r\n\t\r\n\t\t\t// When scrolling (X or Y) we want to set the width of the table as \r\n\t\t\t// appropriate. However, when not scrolling leave the table width as it\r\n\t\t\t// is. This results in slightly different, but I think correct behaviour\r\n\t\t\tif ( scrollX && scrollXInner ) {\r\n\t\t\t\ttmpTable.width( scrollXInner );\r\n\t\t\t}\r\n\t\t\telse if ( scrollX ) {\r\n\t\t\t\ttmpTable.css( 'width', 'auto' );\r\n\t\t\t\ttmpTable.removeAttr('width');\r\n\t\r\n\t\t\t\t// If there is no width attribute or style, then allow the table to\r\n\t\t\t\t// collapse\r\n\t\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\r\n\t\t\t\t\ttmpTable.width( tableContainer.clientWidth );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if ( scrollY ) {\r\n\t\t\t\ttmpTable.width( tableContainer.clientWidth );\r\n\t\t\t}\r\n\t\t\telse if ( tableWidthAttr ) {\r\n\t\t\t\ttmpTable.width( tableWidthAttr );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Get the width of each column in the constructed table - we need to\r\n\t\t\t// know the inner width (so it can be assigned to the other table's\r\n\t\t\t// cells) and the outer width so we can calculate the full width of the\r\n\t\t\t// table. This is safe since DataTables requires a unique cell for each\r\n\t\t\t// column, but if ever a header can span multiple columns, this will\r\n\t\t\t// need to be modified.\r\n\t\t\tvar total = 0;\r\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n\t\t\t\tvar cell = $(headerCells[i]);\r\n\t\t\t\tvar border = cell.outerWidth() - cell.width();\r\n\t\r\n\t\t\t\t// Use getBounding... where possible (not IE8-) because it can give\r\n\t\t\t\t// sub-pixel accuracy, which we then want to round up!\r\n\t\t\t\tvar bounding = browser.bBounding ?\r\n\t\t\t\t\tMath.ceil( headerCells[i].getBoundingClientRect().width ) :\r\n\t\t\t\t\tcell.outerWidth();\r\n\t\r\n\t\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth\r\n\t\t\t\t// of the table might not equal the total given here (IE!).\r\n\t\t\t\ttotal += bounding;\r\n\t\r\n\t\t\t\t// Width for each column to use\r\n\t\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\r\n\t\t\t}\r\n\t\r\n\t\t\ttable.style.width = _fnStringToCss( total );\r\n\t\r\n\t\t\t// Finished with the table - ditch it\r\n\t\t\tholder.remove();\r\n\t\t}\r\n\t\r\n\t\t// If there is a width attr, we want to attach an event listener which\r\n\t\t// allows the table sizing to automatically adjust when the window is\r\n\t\t// resized. Use the width attr rather than CSS, since we can't know if the\r\n\t\t// CSS is a relative value or absolute - DOM read is always px.\r\n\t\tif ( tableWidthAttr ) {\r\n\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );\r\n\t\t}\r\n\t\r\n\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\r\n\t\t\tvar bindResize = function () {\r\n\t\t\t\t$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\r\n\t\t\t\t\t_fnAdjustColumnSizing( oSettings );\r\n\t\t\t\t} ) );\r\n\t\t\t};\r\n\t\r\n\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.\r\n\t\t\t// To be removed in 1.11 which drops IE6/7 support\r\n\t\t\tif ( ie67 ) {\r\n\t\t\t\tsetTimeout( bindResize, 1000 );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbindResize();\r\n\t\t\t}\r\n\t\r\n\t\t\toSettings._reszEvt = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Throttle the calls to a function. Arguments and context are maintained for\r\n\t * the throttled function\r\n\t *  @param {function} fn Function to be called\r\n\t *  @param {int} [freq=200] call frequency in mS\r\n\t *  @returns {function} wrapped function\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tvar _fnThrottle = DataTable.util.throttle;\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert a CSS unit width to pixels (e.g. 2em)\r\n\t *  @param {string} width width to be converted\r\n\t *  @param {node} parent parent to get the with for (required for relative widths) - optional\r\n\t *  @returns {int} width in pixels\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnConvertToWidth ( width, parent )\r\n\t{\r\n\t\tif ( ! width ) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\r\n\t\tvar n = $('<div/>')\r\n\t\t\t.css( 'width', _fnStringToCss( width ) )\r\n\t\t\t.appendTo( parent || document.body );\r\n\t\r\n\t\tvar val = n[0].offsetWidth;\r\n\t\tn.remove();\r\n\t\r\n\t\treturn val;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the widest node\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {int} colIdx column of interest\r\n\t *  @returns {node} widest table node\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetWidestNode( settings, colIdx )\r\n\t{\r\n\t\tvar idx = _fnGetMaxLenString( settings, colIdx );\r\n\t\tif ( idx < 0 ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\r\n\t\tvar data = settings.aoData[ idx ];\r\n\t\treturn ! data.nTr ? // Might not have been created when deferred rendering\r\n\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\r\n\t\t\tdata.anCells[ colIdx ];\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the maximum strlen for each data column\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {int} colIdx column of interest\r\n\t *  @returns {string} max string length for each column\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnGetMaxLenString( settings, colIdx )\r\n\t{\r\n\t\tvar s, max=-1, maxIdx = -1;\r\n\t\r\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';\r\n\t\t\ts = s.replace( __re_html_remove, '' );\r\n\t\t\ts = s.replace( /&nbsp;/g, ' ' );\r\n\t\r\n\t\t\tif ( s.length > max ) {\r\n\t\t\t\tmax = s.length;\r\n\t\t\t\tmaxIdx = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn maxIdx;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Append a CSS unit (only if required) to a string\r\n\t *  @param {string} value to css-ify\r\n\t *  @returns {string} value with css unit\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnStringToCss( s )\r\n\t{\r\n\t\tif ( s === null ) {\r\n\t\t\treturn '0px';\r\n\t\t}\r\n\t\r\n\t\tif ( typeof s == 'number' ) {\r\n\t\t\treturn s < 0 ?\r\n\t\t\t\t'0px' :\r\n\t\t\t\ts+'px';\r\n\t\t}\r\n\t\r\n\t\t// Check it has a unit character already\r\n\t\treturn s.match(/\\d$/) ?\r\n\t\t\ts+'px' :\r\n\t\t\ts;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction _fnSortFlatten ( settings )\r\n\t{\r\n\t\tvar\r\n\t\t\ti, iLen, k, kLen,\r\n\t\t\taSort = [],\r\n\t\t\taiOrig = [],\r\n\t\t\taoColumns = settings.aoColumns,\r\n\t\t\taDataSort, iCol, sType, srcCol,\r\n\t\t\tfixed = settings.aaSortingFixed,\r\n\t\t\tfixedObj = $.isPlainObject( fixed ),\r\n\t\t\tnestedSort = [],\r\n\t\t\tadd = function ( a ) {\r\n\t\t\t\tif ( a.length && ! Array.isArray( a[0] ) ) {\r\n\t\t\t\t\t// 1D array\r\n\t\t\t\t\tnestedSort.push( a );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// 2D array\r\n\t\t\t\t\t$.merge( nestedSort, a );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t// Build the sort array, with pre-fix and post-fix options if they have been\r\n\t\t// specified\r\n\t\tif ( Array.isArray( fixed ) ) {\r\n\t\t\tadd( fixed );\r\n\t\t}\r\n\t\r\n\t\tif ( fixedObj && fixed.pre ) {\r\n\t\t\tadd( fixed.pre );\r\n\t\t}\r\n\t\r\n\t\tadd( settings.aaSorting );\r\n\t\r\n\t\tif (fixedObj && fixed.post ) {\r\n\t\t\tadd( fixed.post );\r\n\t\t}\r\n\t\r\n\t\tfor ( i=0 ; i<nestedSort.length ; i++ )\r\n\t\t{\r\n\t\t\tsrcCol = nestedSort[i][0];\r\n\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;\r\n\t\r\n\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\r\n\t\t\t{\r\n\t\t\t\tiCol = aDataSort[k];\r\n\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';\r\n\t\r\n\t\t\t\tif ( nestedSort[i]._idx === undefined ) {\r\n\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\taSort.push( {\r\n\t\t\t\t\tsrc:       srcCol,\r\n\t\t\t\t\tcol:       iCol,\r\n\t\t\t\t\tdir:       nestedSort[i][1],\r\n\t\t\t\t\tindex:     nestedSort[i]._idx,\r\n\t\t\t\t\ttype:      sType,\r\n\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn aSort;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Change the order of the table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t *  @todo This really needs split up!\r\n\t */\r\n\tfunction _fnSort ( oSettings )\r\n\t{\r\n\t\tvar\r\n\t\t\ti, ien, iLen, j, jLen, k, kLen,\r\n\t\t\tsDataType, nTh,\r\n\t\t\taiOrig = [],\r\n\t\t\toExtSort = DataTable.ext.type.order,\r\n\t\t\taoData = oSettings.aoData,\r\n\t\t\taoColumns = oSettings.aoColumns,\r\n\t\t\taDataSort, data, iCol, sType, oSort,\r\n\t\t\tformatters = 0,\r\n\t\t\tsortCol,\r\n\t\t\tdisplayMaster = oSettings.aiDisplayMaster,\r\n\t\t\taSort;\r\n\t\r\n\t\t// Resolve any column types that are unknown due to addition or invalidation\r\n\t\t// @todo Can this be moved into a 'data-ready' handler which is called when\r\n\t\t//   data is going to be used in the table?\r\n\t\t_fnColumnTypes( oSettings );\r\n\t\r\n\t\taSort = _fnSortFlatten( oSettings );\r\n\t\r\n\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {\r\n\t\t\tsortCol = aSort[i];\r\n\t\r\n\t\t\t// Track if we can use the fast sort algorithm\r\n\t\t\tif ( sortCol.formatter ) {\r\n\t\t\t\tformatters++;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Load the data needed for the sort, for each cell\r\n\t\t\t_fnSortData( oSettings, sortCol.col );\r\n\t\t}\r\n\t\r\n\t\t/* No sorting required if server-side or no sorting array */\r\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\r\n\t\t{\r\n\t\t\t// Create a value - key array of the current row positions such that we can use their\r\n\t\t\t// current position during the sort, if values match, in order to perform stable sorting\r\n\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\r\n\t\t\t\taiOrig[ displayMaster[i] ] = i;\r\n\t\t\t}\r\n\t\r\n\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)\r\n\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\r\n\t\t\t * follow on it's own, but this is what we want (example two column sorting):\r\n\t\t\t *  fnLocalSorting = function(a,b){\r\n\t\t\t *    var iTest;\r\n\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');\r\n\t\t\t *      if (iTest !== 0)\r\n\t\t\t *        return iTest;\r\n\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\r\n\t\t\t *    if (iTest !== 0)\r\n\t\t\t *      return iTest;\r\n\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\r\n\t\t\t *  }\r\n\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\r\n\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row\r\n\t\t\t * positions in the original data array to provide a stable sort.\r\n\t\t\t *\r\n\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around\r\n\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting\r\n\t\t\t * methods which do not have a pre-sort formatting function.\r\n\t\t\t */\r\n\t\t\tif ( formatters === aSort.length ) {\r\n\t\t\t\t// All sort types have formatting functions\r\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\r\n\t\t\t\t\tvar\r\n\t\t\t\t\t\tx, y, k, test, sort,\r\n\t\t\t\t\t\tlen=aSort.length,\r\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\r\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\r\n\t\r\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\r\n\t\t\t\t\t\tsort = aSort[k];\r\n\t\r\n\t\t\t\t\t\tx = dataA[ sort.col ];\r\n\t\t\t\t\t\ty = dataB[ sort.col ];\r\n\t\r\n\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;\r\n\t\t\t\t\t\tif ( test !== 0 ) {\r\n\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tx = aiOrig[a];\r\n\t\t\t\t\ty = aiOrig[b];\r\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)\r\n\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting\r\n\t\t\t\t// methods.\r\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\r\n\t\t\t\t\tvar\r\n\t\t\t\t\t\tx, y, k, l, test, sort, fn,\r\n\t\t\t\t\t\tlen=aSort.length,\r\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\r\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\r\n\t\r\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\r\n\t\t\t\t\t\tsort = aSort[k];\r\n\t\r\n\t\t\t\t\t\tx = dataA[ sort.col ];\r\n\t\t\t\t\t\ty = dataB[ sort.col ];\r\n\t\r\n\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\r\n\t\t\t\t\t\ttest = fn( x, y );\r\n\t\t\t\t\t\tif ( test !== 0 ) {\r\n\t\t\t\t\t\t\treturn test;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tx = aiOrig[a];\r\n\t\t\t\t\ty = aiOrig[b];\r\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/* Tell the draw function that we have sorted the data */\r\n\t\toSettings.bSorted = true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction _fnSortAria ( settings )\r\n\t{\r\n\t\tvar label;\r\n\t\tvar nextSort;\r\n\t\tvar columns = settings.aoColumns;\r\n\t\tvar aSort = _fnSortFlatten( settings );\r\n\t\tvar oAria = settings.oLanguage.oAria;\r\n\t\r\n\t\t// ARIA attributes - need to loop all columns, to update all (removing old\r\n\t\t// attributes as needed)\r\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n\t\t{\r\n\t\t\tvar col = columns[i];\r\n\t\t\tvar asSorting = col.asSorting;\r\n\t\t\tvar sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, \"\" );\r\n\t\t\tvar th = col.nTh;\r\n\t\r\n\t\t\t// IE7 is throwing an error when setting these properties with jQuery's\r\n\t\t\t// attr() and removeAttr() methods...\r\n\t\t\tth.removeAttribute('aria-sort');\r\n\t\r\n\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\r\n\t\t\tif ( col.bSortable ) {\r\n\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {\r\n\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\r\n\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnextSort = asSorting[0];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?\r\n\t\t\t\t\toAria.sSortAscending :\r\n\t\t\t\t\toAria.sSortDescending\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel = sTitle;\r\n\t\t\t}\r\n\t\r\n\t\t\tth.setAttribute('aria-label', label);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Function to run on user sort request\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {node} attachTo node to attach the handler to\r\n\t *  @param {int} colIdx column sorting index\r\n\t *  @param {boolean} [append=false] Append the requested sort to the existing\r\n\t *    sort if true (i.e. multi-column sort)\r\n\t *  @param {function} [callback] callback function\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSortListener ( settings, colIdx, append, callback )\r\n\t{\r\n\t\tvar col = settings.aoColumns[ colIdx ];\r\n\t\tvar sorting = settings.aaSorting;\r\n\t\tvar asSorting = col.asSorting;\r\n\t\tvar nextSortIdx;\r\n\t\tvar next = function ( a, overflow ) {\r\n\t\t\tvar idx = a._idx;\r\n\t\t\tif ( idx === undefined ) {\r\n\t\t\t\tidx = $.inArray( a[1], asSorting );\r\n\t\t\t}\r\n\t\r\n\t\t\treturn idx+1 < asSorting.length ?\r\n\t\t\t\tidx+1 :\r\n\t\t\t\toverflow ?\r\n\t\t\t\t\tnull :\r\n\t\t\t\t\t0;\r\n\t\t};\r\n\t\r\n\t\t// Convert to 2D array if needed\r\n\t\tif ( typeof sorting[0] === 'number' ) {\r\n\t\t\tsorting = settings.aaSorting = [ sorting ];\r\n\t\t}\r\n\t\r\n\t\t// If appending the sort then we are multi-column sorting\r\n\t\tif ( append && settings.oFeatures.bSortMulti ) {\r\n\t\t\t// Are we already doing some kind of sort on this column?\r\n\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\r\n\t\r\n\t\t\tif ( sortIdx !== -1 ) {\r\n\t\t\t\t// Yes, modify the sort\r\n\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );\r\n\t\r\n\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {\r\n\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( nextSortIdx === null ) {\r\n\t\t\t\t\tsorting.splice( sortIdx, 1 );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];\r\n\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// No sort on this column yet\r\n\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );\r\n\t\t\t\tsorting[sorting.length-1]._idx = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {\r\n\t\t\t// Single column - already sorting on this column, modify the sort\r\n\t\t\tnextSortIdx = next( sorting[0] );\r\n\t\r\n\t\t\tsorting.length = 1;\r\n\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];\r\n\t\t\tsorting[0]._idx = nextSortIdx;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Single column - sort only on this column\r\n\t\t\tsorting.length = 0;\r\n\t\t\tsorting.push( [ colIdx, asSorting[0] ] );\r\n\t\t\tsorting[0]._idx = 0;\r\n\t\t}\r\n\t\r\n\t\t// Run the sort by calling a full redraw\r\n\t\t_fnReDraw( settings );\r\n\t\r\n\t\t// callback used for async user interaction\r\n\t\tif ( typeof callback == 'function' ) {\r\n\t\t\tcallback( settings );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Attach a sort handler (click) to a node\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {node} attachTo node to attach the handler to\r\n\t *  @param {int} colIdx column sorting index\r\n\t *  @param {function} [callback] callback function\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )\r\n\t{\r\n\t\tvar col = settings.aoColumns[ colIdx ];\r\n\t\r\n\t\t_fnBindAction( attachTo, {}, function (e) {\r\n\t\t\t/* If the column is not sortable - don't to anything */\r\n\t\t\tif ( col.bSortable === false ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\t// If processing is enabled use a timeout to allow the processing\r\n\t\t\t// display to be shown - otherwise to it synchronously\r\n\t\t\tif ( settings.oFeatures.bProcessing ) {\r\n\t\t\t\t_fnProcessingDisplay( settings, true );\r\n\t\r\n\t\t\t\tsetTimeout( function() {\r\n\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n\t\r\n\t\t\t\t\t// In server-side processing, the draw callback will remove the\r\n\t\t\t\t\t// processing display\r\n\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {\r\n\t\t\t\t\t\t_fnProcessingDisplay( settings, false );\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 0 );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Set the sorting classes on table's body, Note: it is safe to call this function\r\n\t * when bSort and bSortClasses are false\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSortingClasses( settings )\r\n\t{\r\n\t\tvar oldSort = settings.aLastSort;\r\n\t\tvar sortClass = settings.oClasses.sSortColumn;\r\n\t\tvar sort = _fnSortFlatten( settings );\r\n\t\tvar features = settings.oFeatures;\r\n\t\tvar i, ien, colIdx;\r\n\t\r\n\t\tif ( features.bSort && features.bSortClasses ) {\r\n\t\t\t// Remove old sorting classes\r\n\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\r\n\t\t\t\tcolIdx = oldSort[i].src;\r\n\t\r\n\t\t\t\t// Remove column sorting\r\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Add new column sorting\r\n\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {\r\n\t\t\t\tcolIdx = sort[i].src;\r\n\t\r\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tsettings.aLastSort = sort;\r\n\t}\r\n\t\r\n\t\r\n\t// Get the data to sort a column, be it from cache, fresh (populating the\r\n\t// cache), or from a sort formatter\r\n\tfunction _fnSortData( settings, idx )\r\n\t{\r\n\t\t// Custom sorting function - provided by the sort data type\r\n\t\tvar column = settings.aoColumns[ idx ];\r\n\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];\r\n\t\tvar customData;\r\n\t\r\n\t\tif ( customSort ) {\r\n\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,\r\n\t\t\t\t_fnColumnIndexToVisible( settings, idx )\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\t// Use / populate cache\r\n\t\tvar row, cellData;\r\n\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\r\n\t\r\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n\t\t\trow = settings.aoData[i];\r\n\t\r\n\t\t\tif ( ! row._aSortData ) {\r\n\t\t\t\trow._aSortData = [];\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ! row._aSortData[idx] || customSort ) {\r\n\t\t\t\tcellData = customSort ?\r\n\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there\r\n\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );\r\n\t\r\n\t\t\t\trow._aSortData[ idx ] = formatter ?\r\n\t\t\t\t\tformatter( cellData ) :\r\n\t\t\t\t\tcellData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Save the state of a table\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSaveState ( settings )\r\n\t{\r\n\t\tif (settings._bLoadingState) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t/* Store the interesting variables */\r\n\t\tvar state = {\r\n\t\t\ttime:    +new Date(),\r\n\t\t\tstart:   settings._iDisplayStart,\r\n\t\t\tlength:  settings._iDisplayLength,\r\n\t\t\torder:   $.extend( true, [], settings.aaSorting ),\r\n\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),\r\n\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvisible: col.bVisible,\r\n\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )\r\n\t\t\t\t};\r\n\t\t\t} )\r\n\t\t};\r\n\t\r\n\t\tsettings.oSavedState = state;\r\n\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\r\n\t\t\r\n\t\tif ( settings.oFeatures.bStateSave && !settings.bDestroying )\r\n\t\t{\r\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );\r\n\t\t}\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Attempt to load a saved table state\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {object} oInit DataTables init object so we can override settings\r\n\t *  @param {function} callback Callback to execute when the state has been loaded\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnLoadState ( settings, oInit, callback )\r\n\t{\r\n\t\tif ( ! settings.oFeatures.bStateSave ) {\r\n\t\t\tcallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar loaded = function(state) {\r\n\t\t\t_fnImplementState(settings, state, callback);\r\n\t\t}\r\n\t\r\n\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\r\n\t\r\n\t\tif ( state !== undefined ) {\r\n\t\t\t_fnImplementState( settings, state, callback );\r\n\t\t}\r\n\t\t// otherwise, wait for the loaded callback to be executed\r\n\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _fnImplementState ( settings, s, callback) {\r\n\t\tvar i, ien;\r\n\t\tvar columns = settings.aoColumns;\r\n\t\tsettings._bLoadingState = true;\r\n\t\r\n\t\t// When StateRestore was introduced the state could now be implemented at any time\r\n\t\t// Not just initialisation. To do this an api instance is required in some places\r\n\t\tvar api = settings._bInitComplete ? new DataTable.Api(settings) : null;\r\n\t\r\n\t\tif ( ! s || ! s.time ) {\r\n\t\t\tsettings._bLoadingState = false;\r\n\t\t\tcallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t// Allow custom and plug-in manipulation functions to alter the saved data set and\r\n\t\t// cancelling of loading by returning false\r\n\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\r\n\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {\r\n\t\t\tsettings._bLoadingState = false;\r\n\t\t\tcallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t// Reject old data\r\n\t\tvar duration = settings.iStateDuration;\r\n\t\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\r\n\t\t\tsettings._bLoadingState = false;\r\n\t\t\tcallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t// Number of columns have changed - all bets are off, no restore of settings\r\n\t\tif ( s.columns && columns.length !== s.columns.length ) {\r\n\t\t\tsettings._bLoadingState = false;\r\n\t\t\tcallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t// Store the saved state so it might be accessed at any time\r\n\t\tsettings.oLoadedState = $.extend( true, {}, s );\r\n\t\r\n\t\t// Restore key features - todo - for 1.11 this needs to be done by\r\n\t\t// subscribed events\r\n\t\tif ( s.start !== undefined ) {\r\n\t\t\tif(api === null) {\r\n\t\t\t\tsettings._iDisplayStart    = s.start;\r\n\t\t\t\tsettings.iInitDisplayStart = s.start;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t_fnPageChange(settings, s.start/s.length);\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( s.length !== undefined ) {\r\n\t\t\tsettings._iDisplayLength   = s.length;\r\n\t\t}\r\n\t\r\n\t\t// Order\r\n\t\tif ( s.order !== undefined ) {\r\n\t\t\tsettings.aaSorting = [];\r\n\t\t\t$.each( s.order, function ( i, col ) {\r\n\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?\r\n\t\t\t\t\t[ 0, col[1] ] :\r\n\t\t\t\t\tcol\r\n\t\t\t\t);\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\t// Search\r\n\t\tif ( s.search !== undefined ) {\r\n\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\r\n\t\t}\r\n\t\r\n\t\t// Columns\r\n\t\tif ( s.columns ) {\r\n\t\t\tfor ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\r\n\t\t\t\tvar col = s.columns[i];\r\n\t\r\n\t\t\t\t// Visibility\r\n\t\t\t\tif ( col.visible !== undefined ) {\r\n\t\t\t\t\t// If the api is defined, the table has been initialised so we need to use it rather than internal settings\r\n\t\t\t\t\tif (api) {\r\n\t\t\t\t\t\t// Don't redraw the columns on every iteration of this loop, we will do this at the end instead\r\n\t\t\t\t\t\tapi.column(i).visible(col.visible, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolumns[i].bVisible = col.visible;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Search\r\n\t\t\t\tif ( col.search !== undefined ) {\r\n\t\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// If the api is defined then we need to adjust the columns once the visibility has been changed\r\n\t\t\tif (api) {\r\n\t\t\t\tapi.columns.adjust();\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tsettings._bLoadingState = false;\r\n\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\r\n\t\tcallback();\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Return the settings object for a particular table\r\n\t *  @param {node} table table we are using as a dataTable\r\n\t *  @returns {object} Settings object - or null if not found\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnSettingsFromNode ( table )\r\n\t{\r\n\t\tvar settings = DataTable.settings;\r\n\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );\r\n\t\r\n\t\treturn idx !== -1 ?\r\n\t\t\tsettings[ idx ] :\r\n\t\t\tnull;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Log an error message\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {int} level log error messages, or display them to the user\r\n\t *  @param {string} msg error message\r\n\t *  @param {int} tn Technical note id to get more information about the error.\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnLog( settings, level, msg, tn )\r\n\t{\r\n\t\tmsg = 'DataTables warning: '+\r\n\t\t\t(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\r\n\t\r\n\t\tif ( tn ) {\r\n\t\t\tmsg += '. For more information about this error, please see '+\r\n\t\t\t'http://datatables.net/tn/'+tn;\r\n\t\t}\r\n\t\r\n\t\tif ( ! level  ) {\r\n\t\t\t// Backwards compatibility pre 1.10\r\n\t\t\tvar ext = DataTable.ext;\r\n\t\t\tvar type = ext.sErrMode || ext.errMode;\r\n\t\r\n\t\t\tif ( settings ) {\r\n\t\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( type == 'alert' ) {\r\n\t\t\t\talert( msg );\r\n\t\t\t}\r\n\t\t\telse if ( type == 'throw' ) {\r\n\t\t\t\tthrow new Error(msg);\r\n\t\t\t}\r\n\t\t\telse if ( typeof type == 'function' ) {\r\n\t\t\t\ttype( settings, tn, msg );\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( window.console && console.log ) {\r\n\t\t\tconsole.log( msg );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * See if a property is defined on one object, if so assign it to the other object\r\n\t *  @param {object} ret target object\r\n\t *  @param {object} src source object\r\n\t *  @param {string} name property\r\n\t *  @param {string} [mappedName] name to map too - optional, name used if not given\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnMap( ret, src, name, mappedName )\r\n\t{\r\n\t\tif ( Array.isArray( name ) ) {\r\n\t\t\t$.each( name, function (i, val) {\r\n\t\t\t\tif ( Array.isArray( val ) ) {\r\n\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t_fnMap( ret, src, val );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tif ( mappedName === undefined ) {\r\n\t\t\tmappedName = name;\r\n\t\t}\r\n\t\r\n\t\tif ( src[name] !== undefined ) {\r\n\t\t\tret[mappedName] = src[name];\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and\r\n\t * shallow copy arrays. The reason we need to do this, is that we don't want to\r\n\t * deep copy array init values (such as aaSorting) since the dev wouldn't be\r\n\t * able to override them, but we do want to deep copy arrays.\r\n\t *  @param {object} out Object to extend\r\n\t *  @param {object} extender Object from which the properties will be applied to\r\n\t *      out\r\n\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\r\n\t *      independent copy with the exception of the `data` or `aaData` parameters\r\n\t *      if they are present. This is so you can pass in a collection to\r\n\t *      DataTables and have that used as your data source without breaking the\r\n\t *      references\r\n\t *  @returns {object} out Reference, just for convenience - out === the return.\r\n\t *  @memberof DataTable#oApi\r\n\t *  @todo This doesn't take account of arrays inside the deep copied objects.\r\n\t */\r\n\tfunction _fnExtend( out, extender, breakRefs )\r\n\t{\r\n\t\tvar val;\r\n\t\r\n\t\tfor ( var prop in extender ) {\r\n\t\t\tif ( extender.hasOwnProperty(prop) ) {\r\n\t\t\t\tval = extender[prop];\r\n\t\r\n\t\t\t\tif ( $.isPlainObject( val ) ) {\r\n\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {\r\n\t\t\t\t\t\tout[prop] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.extend( true, out[prop], val );\r\n\t\t\t\t}\r\n\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val) ) {\r\n\t\t\t\t\tout[prop] = val.slice();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tout[prop] = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn out;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Bind an event handers to allow a click or return key to activate the callback.\r\n\t * This is good for accessibility since a return on the keyboard will have the\r\n\t * same effect as a click, if the element has focus.\r\n\t *  @param {element} n Element to bind the action to\r\n\t *  @param {object} oData Data object to pass to the triggered function\r\n\t *  @param {function} fn Callback function for when the event is triggered\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnBindAction( n, oData, fn )\r\n\t{\r\n\t\t$(n)\r\n\t\t\t.on( 'click.DT', oData, function (e) {\r\n\t\t\t\t\t$(n).trigger('blur'); // Remove focus outline for mouse users\r\n\t\t\t\t\tfn(e);\r\n\t\t\t\t} )\r\n\t\t\t.on( 'keypress.DT', oData, function (e){\r\n\t\t\t\t\tif ( e.which === 13 ) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tfn(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t} )\r\n\t\t\t.on( 'selectstart.DT', function () {\r\n\t\t\t\t\t/* Take the brutal approach to cancelling text selection */\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} );\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Register a callback function. Easily allows a callback function to be added to\r\n\t * an array store of callback functions that can then all be called together.\r\n\t *  @param {object} oSettings dataTables settings object\r\n\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings\r\n\t *  @param {function} fn Function to be called back\r\n\t *  @param {string} sName Identifying name for the callback (i.e. a label)\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )\r\n\t{\r\n\t\tif ( fn )\r\n\t\t{\r\n\t\t\toSettings[sStore].push( {\r\n\t\t\t\t\"fn\": fn,\r\n\t\t\t\t\"sName\": sName\r\n\t\t\t} );\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Fire callback functions and trigger events. Note that the loop over the\r\n\t * callback array store is done backwards! Further note that you do not want to\r\n\t * fire off triggers in time sensitive applications (for example cell creation)\r\n\t * as its slow.\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @param {string} callbackArr Name of the array storage for the callbacks in\r\n\t *      oSettings\r\n\t *  @param {string} eventName Name of the jQuery custom event to trigger. If\r\n\t *      null no trigger is fired\r\n\t *  @param {array} args Array of arguments to pass to the callback function /\r\n\t *      trigger\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )\r\n\t{\r\n\t\tvar ret = [];\r\n\t\r\n\t\tif ( callbackArr ) {\r\n\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\r\n\t\t\t\treturn val.fn.apply( settings.oInstance, args );\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\tif ( eventName !== null ) {\r\n\t\t\tvar e = $.Event( eventName+'.dt' );\r\n\t\r\n\t\t\t$(settings.nTable).trigger( e, args );\r\n\t\r\n\t\t\tret.push( e.result );\r\n\t\t}\r\n\t\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\t\r\n\tfunction _fnLengthOverflow ( settings )\r\n\t{\r\n\t\tvar\r\n\t\t\tstart = settings._iDisplayStart,\r\n\t\t\tend = settings.fnDisplayEnd(),\r\n\t\t\tlen = settings._iDisplayLength;\r\n\t\r\n\t\t/* If we have space to show extra rows (backing up from the end point - then do so */\r\n\t\tif ( start >= end )\r\n\t\t{\r\n\t\t\tstart = end - len;\r\n\t\t}\r\n\t\r\n\t\t// Keep the start record on the current page\r\n\t\tstart -= (start % len);\r\n\t\r\n\t\tif ( len === -1 || start < 0 )\r\n\t\t{\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\r\n\t\tsettings._iDisplayStart = start;\r\n\t}\r\n\t\r\n\t\r\n\tfunction _fnRenderer( settings, type )\r\n\t{\r\n\t\tvar renderer = settings.renderer;\r\n\t\tvar host = DataTable.ext.renderer[type];\r\n\t\r\n\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {\r\n\t\t\t// Specific renderer for this type. If available use it, otherwise use\r\n\t\t\t// the default.\r\n\t\t\treturn host[renderer[type]] || host._;\r\n\t\t}\r\n\t\telse if ( typeof renderer === 'string' ) {\r\n\t\t\t// Common renderer - if there is one available for this type use it,\r\n\t\t\t// otherwise use the default\r\n\t\t\treturn host[renderer] || host._;\r\n\t\t}\r\n\t\r\n\t\t// Use the default\r\n\t\treturn host._;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Detect the data source being used for the table. Used to simplify the code\r\n\t * a little (ajax) and to make it compress a little smaller.\r\n\t *\r\n\t *  @param {object} settings dataTables settings object\r\n\t *  @returns {string} Data source\r\n\t *  @memberof DataTable#oApi\r\n\t */\r\n\tfunction _fnDataSource ( settings )\r\n\t{\r\n\t\tif ( settings.oFeatures.bServerSide ) {\r\n\t\t\treturn 'ssp';\r\n\t\t}\r\n\t\telse if ( settings.ajax || settings.sAjaxSource ) {\r\n\t\t\treturn 'ajax';\r\n\t\t}\r\n\t\treturn 'dom';\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Computed structure of the DataTables API, defined by the options passed to\r\n\t * `DataTable.Api.register()` when building the API.\r\n\t *\r\n\t * The structure is built in order to speed creation and extension of the Api\r\n\t * objects since the extensions are effectively pre-parsed.\r\n\t *\r\n\t * The array is an array of objects with the following structure, where this\r\n\t * base array represents the Api prototype base:\r\n\t *\r\n\t *     [\r\n\t *       {\r\n\t *         name:      'data'                -- string   - Property name\r\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\r\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n\t *       },\r\n\t *       {\r\n\t *         name:     'row'\r\n\t *         val:       {},\r\n\t *         methodExt: [ ... ],\r\n\t *         propExt:   [\r\n\t *           {\r\n\t *             name:      'data'\r\n\t *             val:       function () {},\r\n\t *             methodExt: [ ... ],\r\n\t *             propExt:   [ ... ]\r\n\t *           },\r\n\t *           ...\r\n\t *         ]\r\n\t *       }\r\n\t *     ]\r\n\t *\r\n\t * @type {Array}\r\n\t * @ignore\r\n\t */\r\n\tvar __apiStruct = [];\r\n\t\r\n\t\r\n\t/**\r\n\t * `Array.prototype` reference.\r\n\t *\r\n\t * @type object\r\n\t * @ignore\r\n\t */\r\n\tvar __arrayProto = Array.prototype;\r\n\t\r\n\t\r\n\t/**\r\n\t * Abstraction for `context` parameter of the `Api` constructor to allow it to\r\n\t * take several different forms for ease of use.\r\n\t *\r\n\t * Each of the input parameter types will be converted to a DataTables settings\r\n\t * object where possible.\r\n\t *\r\n\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\r\n\t *   of:\r\n\t *\r\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n\t *     with be found and used.\r\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n\t *   * `object` - DataTables settings object\r\n\t *   * `DataTables.Api` - API instance\r\n\t * @return {array|null} Matching DataTables settings objects. `null` or\r\n\t *   `undefined` is returned if no matching DataTable is found.\r\n\t * @ignore\r\n\t */\r\n\tvar _toSettings = function ( mixed )\r\n\t{\r\n\t\tvar idx, jq;\r\n\t\tvar settings = DataTable.settings;\r\n\t\tvar tables = $.map( settings, function (el, i) {\r\n\t\t\treturn el.nTable;\r\n\t\t} );\r\n\t\r\n\t\tif ( ! mixed ) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\telse if ( mixed.nTable && mixed.oApi ) {\r\n\t\t\t// DataTables settings object\r\n\t\t\treturn [ mixed ];\r\n\t\t}\r\n\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\r\n\t\t\t// Table node\r\n\t\t\tidx = $.inArray( mixed, tables );\r\n\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;\r\n\t\t}\r\n\t\telse if ( mixed && typeof mixed.settings === 'function' ) {\r\n\t\t\treturn mixed.settings().toArray();\r\n\t\t}\r\n\t\telse if ( typeof mixed === 'string' ) {\r\n\t\t\t// jQuery selector\r\n\t\t\tjq = $(mixed);\r\n\t\t}\r\n\t\telse if ( mixed instanceof $ ) {\r\n\t\t\t// jQuery object (also DataTables instance)\r\n\t\t\tjq = mixed;\r\n\t\t}\r\n\t\r\n\t\tif ( jq ) {\r\n\t\t\treturn jq.map( function(i) {\r\n\t\t\t\tidx = $.inArray( this, tables );\r\n\t\t\t\treturn idx !== -1 ? settings[idx] : null;\r\n\t\t\t} ).toArray();\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * DataTables API class - used to control and interface with  one or more\r\n\t * DataTables enhanced tables.\r\n\t *\r\n\t * The API class is heavily based on jQuery, presenting a chainable interface\r\n\t * that you can use to interact with tables. Each instance of the API class has\r\n\t * a \"context\" - i.e. the tables that it will operate on. This could be a single\r\n\t * table, all tables on a page or a sub-set thereof.\r\n\t *\r\n\t * Additionally the API is designed to allow you to easily work with the data in\r\n\t * the tables, retrieving and manipulating it as required. This is done by\r\n\t * presenting the API class as an array like interface. The contents of the\r\n\t * array depend upon the actions requested by each method (for example\r\n\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will\r\n\t * return an array of objects or arrays depending upon your table's\r\n\t * configuration). The API object has a number of array like methods (`push`,\r\n\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\r\n\t * `unique` etc) to assist your working with the data held in a table.\r\n\t *\r\n\t * Most methods (those which return an Api instance) are chainable, which means\r\n\t * the return from a method call also has all of the methods available that the\r\n\t * top level object had. For example, these two calls are equivalent:\r\n\t *\r\n\t *     // Not chained\r\n\t *     api.row.add( {...} );\r\n\t *     api.draw();\r\n\t *\r\n\t *     // Chained\r\n\t *     api.row.add( {...} ).draw();\r\n\t *\r\n\t * @class DataTable.Api\r\n\t * @param {array|object|string|jQuery} context DataTable identifier. This is\r\n\t *   used to define which DataTables enhanced tables this API will operate on.\r\n\t *   Can be one of:\r\n\t *\r\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n\t *     with be found and used.\r\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n\t *   * `object` - DataTables settings object\r\n\t * @param {array} [data] Data to initialise the Api instance with.\r\n\t *\r\n\t * @example\r\n\t *   // Direct initialisation during DataTables construction\r\n\t *   var api = $('#example').DataTable();\r\n\t *\r\n\t * @example\r\n\t *   // Initialisation using a DataTables jQuery object\r\n\t *   var api = $('#example').dataTable().api();\r\n\t *\r\n\t * @example\r\n\t *   // Initialisation as a constructor\r\n\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\r\n\t */\r\n\t_Api = function ( context, data )\r\n\t{\r\n\t\tif ( ! (this instanceof _Api) ) {\r\n\t\t\treturn new _Api( context, data );\r\n\t\t}\r\n\t\r\n\t\tvar settings = [];\r\n\t\tvar ctxSettings = function ( o ) {\r\n\t\t\tvar a = _toSettings( o );\r\n\t\t\tif ( a ) {\r\n\t\t\t\tsettings.push.apply( settings, a );\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tif ( Array.isArray( context ) ) {\r\n\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n\t\t\t\tctxSettings( context[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tctxSettings( context );\r\n\t\t}\r\n\t\r\n\t\t// Remove duplicates\r\n\t\tthis.context = _unique( settings );\r\n\t\r\n\t\t// Initial data\r\n\t\tif ( data ) {\r\n\t\t\t$.merge( this, data );\r\n\t\t}\r\n\t\r\n\t\t// selector\r\n\t\tthis.selector = {\r\n\t\t\trows: null,\r\n\t\t\tcols: null,\r\n\t\t\topts: null\r\n\t\t};\r\n\t\r\n\t\t_Api.extend( this, this, __apiStruct );\r\n\t};\r\n\t\r\n\tDataTable.Api = _Api;\r\n\t\r\n\t// Don't destroy the existing prototype, just extend it. Required for jQuery 2's\r\n\t// isPlainObject.\r\n\t$.extend( _Api.prototype, {\r\n\t\tany: function ()\r\n\t\t{\r\n\t\t\treturn this.count() !== 0;\r\n\t\t},\r\n\t\r\n\t\r\n\t\tconcat:  __arrayProto.concat,\r\n\t\r\n\t\r\n\t\tcontext: [], // array of table settings objects\r\n\t\r\n\t\r\n\t\tcount: function ()\r\n\t\t{\r\n\t\t\treturn this.flatten().length;\r\n\t\t},\r\n\t\r\n\t\r\n\t\teach: function ( fn )\r\n\t\t{\r\n\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {\r\n\t\t\t\tfn.call( this, this[i], i, this );\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\r\n\t\r\n\t\teq: function ( idx )\r\n\t\t{\r\n\t\t\tvar ctx = this.context;\r\n\t\r\n\t\t\treturn ctx.length > idx ?\r\n\t\t\t\tnew _Api( ctx[idx], this[idx] ) :\r\n\t\t\t\tnull;\r\n\t\t},\r\n\t\r\n\t\r\n\t\tfilter: function ( fn )\r\n\t\t{\r\n\t\t\tvar a = [];\r\n\t\r\n\t\t\tif ( __arrayProto.filter ) {\r\n\t\t\t\ta = __arrayProto.filter.call( this, fn, this );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {\r\n\t\t\t\t\t\ta.push( this[i] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn new _Api( this.context, a );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tflatten: function ()\r\n\t\t{\r\n\t\t\tvar a = [];\r\n\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tjoin:    __arrayProto.join,\r\n\t\r\n\t\r\n\t\tindexOf: __arrayProto.indexOf || function (obj, start)\r\n\t\t{\r\n\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\r\n\t\t\t\tif ( this[i] === obj ) {\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t},\r\n\t\r\n\t\titerator: function ( flatten, type, fn, alwaysNew ) {\r\n\t\t\tvar\r\n\t\t\t\ta = [], ret,\r\n\t\t\t\ti, ien, j, jen,\r\n\t\t\t\tcontext = this.context,\r\n\t\t\t\trows, items, item,\r\n\t\t\t\tselector = this.selector;\r\n\t\r\n\t\t\t// Argument shifting\r\n\t\t\tif ( typeof flatten === 'string' ) {\r\n\t\t\t\talwaysNew = fn;\r\n\t\t\t\tfn = type;\r\n\t\t\t\ttype = flatten;\r\n\t\t\t\tflatten = false;\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {\r\n\t\t\t\tvar apiInst = new _Api( context[i] );\r\n\t\r\n\t\t\t\tif ( type === 'table' ) {\r\n\t\t\t\t\tret = fn.call( apiInst, context[i], i );\r\n\t\r\n\t\t\t\t\tif ( ret !== undefined ) {\r\n\t\t\t\t\t\ta.push( ret );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {\r\n\t\t\t\t\t// this has same length as context - one entry for each table\r\n\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );\r\n\t\r\n\t\t\t\t\tif ( ret !== undefined ) {\r\n\t\t\t\t\t\ta.push( ret );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\r\n\t\t\t\t\t// columns and rows share the same structure.\r\n\t\t\t\t\t// 'this' is an array of column indexes for each context\r\n\t\t\t\t\titems = this[i];\r\n\t\r\n\t\t\t\t\tif ( type === 'column-rows' ) {\r\n\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {\r\n\t\t\t\t\t\titem = items[j];\r\n\t\r\n\t\t\t\t\t\tif ( type === 'cell' ) {\r\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( ret !== undefined ) {\r\n\t\t\t\t\t\t\ta.push( ret );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( a.length || alwaysNew ) {\r\n\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\r\n\t\t\t\tvar apiSelector = api.selector;\r\n\t\t\t\tapiSelector.rows = selector.rows;\r\n\t\t\t\tapiSelector.cols = selector.cols;\r\n\t\t\t\tapiSelector.opts = selector.opts;\r\n\t\t\t\treturn api;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\r\n\t\r\n\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\r\n\t\t{\r\n\t\t\t// Bit cheeky...\r\n\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tlength:  0,\r\n\t\r\n\t\r\n\t\tmap: function ( fn )\r\n\t\t{\r\n\t\t\tvar a = [];\r\n\t\r\n\t\t\tif ( __arrayProto.map ) {\r\n\t\t\t\ta = __arrayProto.map.call( this, fn, this );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n\t\t\t\t\ta.push( fn.call( this, this[i], i ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn new _Api( this.context, a );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tpluck: function ( prop )\r\n\t\t{\r\n\t\t\treturn this.map( function ( el ) {\r\n\t\t\t\treturn el[ prop ];\r\n\t\t\t} );\r\n\t\t},\r\n\t\r\n\t\tpop:     __arrayProto.pop,\r\n\t\r\n\t\r\n\t\tpush:    __arrayProto.push,\r\n\t\r\n\t\r\n\t\t// Does not return an API instance\r\n\t\treduce: __arrayProto.reduce || function ( fn, init )\r\n\t\t{\r\n\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );\r\n\t\t},\r\n\t\r\n\t\r\n\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )\r\n\t\t{\r\n\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );\r\n\t\t},\r\n\t\r\n\t\r\n\t\treverse: __arrayProto.reverse,\r\n\t\r\n\t\r\n\t\t// Object with rows, columns and opts\r\n\t\tselector: null,\r\n\t\r\n\t\r\n\t\tshift:   __arrayProto.shift,\r\n\t\r\n\t\r\n\t\tslice: function () {\r\n\t\t\treturn new _Api( this.context, this );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tsort:    __arrayProto.sort, // ? name - order?\r\n\t\r\n\t\r\n\t\tsplice:  __arrayProto.splice,\r\n\t\r\n\t\r\n\t\ttoArray: function ()\r\n\t\t{\r\n\t\t\treturn __arrayProto.slice.call( this );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tto$: function ()\r\n\t\t{\r\n\t\t\treturn $( this );\r\n\t\t},\r\n\t\r\n\t\r\n\t\ttoJQuery: function ()\r\n\t\t{\r\n\t\t\treturn $( this );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tunique: function ()\r\n\t\t{\r\n\t\t\treturn new _Api( this.context, _unique(this) );\r\n\t\t},\r\n\t\r\n\t\r\n\t\tunshift: __arrayProto.unshift\r\n\t} );\r\n\t\r\n\t\r\n\t_Api.extend = function ( scope, obj, ext )\r\n\t{\r\n\t\t// Only extend API instances and static properties of the API\r\n\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar\r\n\t\t\ti, ien,\r\n\t\t\tstruct,\r\n\t\t\tmethodScoping = function ( scope, fn, struc ) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tvar ret = fn.apply( scope, arguments );\r\n\t\r\n\t\t\t\t\t// Method extension\r\n\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\r\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n\t\t\tstruct = ext[i];\r\n\t\r\n\t\t\t// Value\r\n\t\t\tobj[ struct.name ] = struct.type === 'function' ?\r\n\t\t\t\tmethodScoping( scope, struct.val, struct ) :\r\n\t\t\t\tstruct.type === 'object' ?\r\n\t\t\t\t\t{} :\r\n\t\t\t\t\tstruct.val;\r\n\t\r\n\t\t\tobj[ struct.name ].__dt_wrapper = true;\r\n\t\r\n\t\t\t// Property extension\r\n\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t// @todo - Is there need for an augment function?\r\n\t// _Api.augment = function ( inst, name )\r\n\t// {\r\n\t// \t// Find src object in the structure from the name\r\n\t// \tvar parts = name.split('.');\r\n\t\r\n\t// \t_Api.extend( inst, obj );\r\n\t// };\r\n\t\r\n\t\r\n\t//     [\r\n\t//       {\r\n\t//         name:      'data'                -- string   - Property name\r\n\t//         val:       function () {},       -- function - Api method (or undefined if just an object\r\n\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n\t//       },\r\n\t//       {\r\n\t//         name:     'row'\r\n\t//         val:       {},\r\n\t//         methodExt: [ ... ],\r\n\t//         propExt:   [\r\n\t//           {\r\n\t//             name:      'data'\r\n\t//             val:       function () {},\r\n\t//             methodExt: [ ... ],\r\n\t//             propExt:   [ ... ]\r\n\t//           },\r\n\t//           ...\r\n\t//         ]\r\n\t//       }\r\n\t//     ]\r\n\t\r\n\t_Api.register = _api_register = function ( name, val )\r\n\t{\r\n\t\tif ( Array.isArray( name ) ) {\r\n\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {\r\n\t\t\t\t_Api.register( name[j], val );\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar\r\n\t\t\ti, ien,\r\n\t\t\their = name.split('.'),\r\n\t\t\tstruct = __apiStruct,\r\n\t\t\tkey, method;\r\n\t\r\n\t\tvar find = function ( src, name ) {\r\n\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {\r\n\t\t\t\tif ( src[i].name === name ) {\r\n\t\t\t\t\treturn src[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\r\n\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {\r\n\t\t\tmethod = heir[i].indexOf('()') !== -1;\r\n\t\t\tkey = method ?\r\n\t\t\t\their[i].replace('()', '') :\r\n\t\t\t\their[i];\r\n\t\r\n\t\t\tvar src = find( struct, key );\r\n\t\t\tif ( ! src ) {\r\n\t\t\t\tsrc = {\r\n\t\t\t\t\tname:      key,\r\n\t\t\t\t\tval:       {},\r\n\t\t\t\t\tmethodExt: [],\r\n\t\t\t\t\tpropExt:   [],\r\n\t\t\t\t\ttype:      'object'\r\n\t\t\t\t};\r\n\t\t\t\tstruct.push( src );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( i === ien-1 ) {\r\n\t\t\t\tsrc.val = val;\r\n\t\t\t\tsrc.type = typeof val === 'function' ?\r\n\t\t\t\t\t'function' :\r\n\t\t\t\t\t$.isPlainObject( val ) ?\r\n\t\t\t\t\t\t'object' :\r\n\t\t\t\t\t\t'other';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstruct = method ?\r\n\t\t\t\t\tsrc.methodExt :\r\n\t\t\t\t\tsrc.propExt;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\r\n\t\t_Api.register( pluralName, val );\r\n\t\r\n\t\t_Api.register( singularName, function () {\r\n\t\t\tvar ret = val.apply( this, arguments );\r\n\t\r\n\t\t\tif ( ret === this ) {\r\n\t\t\t\t// Returned item is the API instance that was passed in, return it\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\telse if ( ret instanceof _Api ) {\r\n\t\t\t\t// New API instance returned, want the value from the first item\r\n\t\t\t\t// in the returned array for the singular result.\r\n\t\t\t\treturn ret.length ?\r\n\t\t\t\t\tArray.isArray( ret[0] ) ?\r\n\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\r\n\t\t\t\t\t\tret[0] :\r\n\t\t\t\t\tundefined;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Non-API return - just fire it back\r\n\t\t\treturn ret;\r\n\t\t} );\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Selector for HTML tables. Apply the given selector to the give array of\r\n\t * DataTables settings objects.\r\n\t *\r\n\t * @param {string|integer} [selector] jQuery selector string or integer\r\n\t * @param  {array} Array of DataTables settings objects to be filtered\r\n\t * @return {array}\r\n\t * @ignore\r\n\t */\r\n\tvar __table_selector = function ( selector, a )\r\n\t{\r\n\t\tif ( Array.isArray(selector) ) {\r\n\t\t\treturn $.map( selector, function (item) {\r\n\t\t\t\treturn __table_selector(item, a);\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\t// Integer is used to pick out a table by index\r\n\t\tif ( typeof selector === 'number' ) {\r\n\t\t\treturn [ a[ selector ] ];\r\n\t\t}\r\n\t\r\n\t\t// Perform a jQuery selector on the table nodes\r\n\t\tvar nodes = $.map( a, function (el, i) {\r\n\t\t\treturn el.nTable;\r\n\t\t} );\r\n\t\r\n\t\treturn $(nodes)\r\n\t\t\t.filter( selector )\r\n\t\t\t.map( function (i) {\r\n\t\t\t\t// Need to translate back from the table node to the settings\r\n\t\t\t\tvar idx = $.inArray( this, nodes );\r\n\t\t\t\treturn a[ idx ];\r\n\t\t\t} )\r\n\t\t\t.toArray();\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Context selector for the API's context (i.e. the tables the API instance\r\n\t * refers to.\r\n\t *\r\n\t * @name    DataTable.Api#tables\r\n\t * @param {string|integer} [selector] Selector to pick which tables the iterator\r\n\t *   should operate on. If not given, all tables in the current context are\r\n\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\r\n\t *   select multiple tables or as an integer to select a single table.\r\n\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.\r\n\t */\r\n\t_api_register( 'tables()', function ( selector ) {\r\n\t\t// A new instance is created if there was a selector specified\r\n\t\treturn selector !== undefined && selector !== null ?\r\n\t\t\tnew _Api( __table_selector( selector, this.context ) ) :\r\n\t\t\tthis;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'table()', function ( selector ) {\r\n\t\tvar tables = this.tables( selector );\r\n\t\tvar ctx = tables.context;\r\n\t\r\n\t\t// Truncate to the first matched table\r\n\t\treturn ctx.length ?\r\n\t\t\tnew _Api( ctx[0] ) :\r\n\t\t\ttables;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\r\n\t\treturn this.iterator( 'table', function ( ctx ) {\r\n\t\t\treturn ctx.nTable;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {\r\n\t\treturn this.iterator( 'table', function ( ctx ) {\r\n\t\t\treturn ctx.nTBody;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {\r\n\t\treturn this.iterator( 'table', function ( ctx ) {\r\n\t\t\treturn ctx.nTHead;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\r\n\t\treturn this.iterator( 'table', function ( ctx ) {\r\n\t\t\treturn ctx.nTFoot;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {\r\n\t\treturn this.iterator( 'table', function ( ctx ) {\r\n\t\t\treturn ctx.nTableWrapper;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Redraw the tables in the current context.\r\n\t */\r\n\t_api_register( 'draw()', function ( paging ) {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\tif ( paging === 'page' ) {\r\n\t\t\t\t_fnDraw( settings );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ( typeof paging === 'string' ) {\r\n\t\t\t\t\tpaging = paging === 'full-hold' ?\r\n\t\t\t\t\t\tfalse :\r\n\t\t\t\t\t\ttrue;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_fnReDraw( settings, paging===false );\r\n\t\t\t}\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the current page index.\r\n\t *\r\n\t * @return {integer} Current page index (zero based)\r\n\t *//**\r\n\t * Set the current page.\r\n\t *\r\n\t * Note that if you attempt to show a page which does not exist, DataTables will\r\n\t * not throw an error, but rather reset the paging.\r\n\t *\r\n\t * @param {integer|string} action The paging action to take. This can be one of:\r\n\t *  * `integer` - The page index to jump to\r\n\t *  * `string` - An action to take:\r\n\t *    * `first` - Jump to first page.\r\n\t *    * `next` - Jump to the next page\r\n\t *    * `previous` - Jump to previous page\r\n\t *    * `last` - Jump to the last page.\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'page()', function ( action ) {\r\n\t\tif ( action === undefined ) {\r\n\t\t\treturn this.page.info().page; // not an expensive call\r\n\t\t}\r\n\t\r\n\t\t// else, have an action to take on all tables\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t_fnPageChange( settings, action );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Paging information for the first table in the current context.\r\n\t *\r\n\t * If you require paging information for another table, use the `table()` method\r\n\t * with a suitable selector.\r\n\t *\r\n\t * @return {object} Object with the following properties set:\r\n\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)\r\n\t *  * `pages` - Total number of pages\r\n\t *  * `start` - Display index for the first record shown on the current page\r\n\t *  * `end` - Display index for the last record shown on the current page\r\n\t *  * `length` - Display length (number of records). Note that generally `start\r\n\t *    + length = end`, but this is not always true, for example if there are\r\n\t *    only 2 records to show on the final page, with a length of 10.\r\n\t *  * `recordsTotal` - Full data set length\r\n\t *  * `recordsDisplay` - Data set length once the current filtering criterion\r\n\t *    are applied.\r\n\t */\r\n\t_api_register( 'page.info()', function ( action ) {\r\n\t\tif ( this.context.length === 0 ) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\r\n\t\tvar\r\n\t\t\tsettings   = this.context[0],\r\n\t\t\tstart      = settings._iDisplayStart,\r\n\t\t\tlen        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\r\n\t\t\tvisRecords = settings.fnRecordsDisplay(),\r\n\t\t\tall        = len === -1;\r\n\t\r\n\t\treturn {\r\n\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),\r\n\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),\r\n\t\t\t\"start\":          start,\r\n\t\t\t\"end\":            settings.fnDisplayEnd(),\r\n\t\t\t\"length\":         len,\r\n\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),\r\n\t\t\t\"recordsDisplay\": visRecords,\r\n\t\t\t\"serverSide\":     _fnDataSource( settings ) === 'ssp'\r\n\t\t};\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the current page length.\r\n\t *\r\n\t * @return {integer} Current page length. Note `-1` indicates that all records\r\n\t *   are to be shown.\r\n\t *//**\r\n\t * Set the current page length.\r\n\t *\r\n\t * @param {integer} Page length to set. Use `-1` to show all records.\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'page.len()', function ( len ) {\r\n\t\t// Note that we can't call this function 'length()' because `length`\r\n\t\t// is a Javascript property of functions which defines how many arguments\r\n\t\t// the function expects.\r\n\t\tif ( len === undefined ) {\r\n\t\t\treturn this.context.length !== 0 ?\r\n\t\t\t\tthis.context[0]._iDisplayLength :\r\n\t\t\t\tundefined;\r\n\t\t}\r\n\t\r\n\t\t// else, set the page length\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t_fnLengthChange( settings, len );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\tvar __reload = function ( settings, holdPosition, callback ) {\r\n\t\t// Use the draw event to trigger a callback\r\n\t\tif ( callback ) {\r\n\t\t\tvar api = new _Api( settings );\r\n\t\r\n\t\t\tapi.one( 'draw', function () {\r\n\t\t\t\tcallback( api.ajax.json() );\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\r\n\t\t\t_fnReDraw( settings, holdPosition );\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_fnProcessingDisplay( settings, true );\r\n\t\r\n\t\t\t// Cancel an existing request\r\n\t\t\tvar xhr = settings.jqXHR;\r\n\t\t\tif ( xhr && xhr.readyState !== 4 ) {\r\n\t\t\t\txhr.abort();\r\n\t\t\t}\r\n\t\r\n\t\t\t// Trigger xhr\r\n\t\t\t_fnBuildAjax( settings, [], function( json ) {\r\n\t\t\t\t_fnClearTable( settings );\r\n\t\r\n\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );\r\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n\t\t\t\t\t_fnAddData( settings, data[i] );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_fnReDraw( settings, holdPosition );\r\n\t\t\t\t_fnProcessingDisplay( settings, false );\r\n\t\t\t} );\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the JSON response from the last Ajax request that DataTables made to the\r\n\t * server. Note that this returns the JSON from the first table in the current\r\n\t * context.\r\n\t *\r\n\t * @return {object} JSON received from the server.\r\n\t */\r\n\t_api_register( 'ajax.json()', function () {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( ctx.length > 0 ) {\r\n\t\t\treturn ctx[0].json;\r\n\t\t}\r\n\t\r\n\t\t// else return undefined;\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the data submitted in the last Ajax request\r\n\t */\r\n\t_api_register( 'ajax.params()', function () {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( ctx.length > 0 ) {\r\n\t\t\treturn ctx[0].oAjaxData;\r\n\t\t}\r\n\t\r\n\t\t// else return undefined;\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Reload tables from the Ajax data source. Note that this function will\r\n\t * automatically re-draw the table when the remote data has been loaded.\r\n\t *\r\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n\t *   position. A full re-sort and re-filter is performed when this method is\r\n\t *   called, which is why the pagination reset is the default action.\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {\r\n\t\treturn this.iterator( 'table', function (settings) {\r\n\t\t\t__reload( settings, resetPaging===false, callback );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Get the current Ajax URL. Note that this returns the URL from the first\r\n\t * table in the current context.\r\n\t *\r\n\t * @return {string} Current Ajax source URL\r\n\t *//**\r\n\t * Set the Ajax URL. Note that this will set the URL for all tables in the\r\n\t * current context.\r\n\t *\r\n\t * @param {string} url URL to set.\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'ajax.url()', function ( url ) {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( url === undefined ) {\r\n\t\t\t// get\r\n\t\t\tif ( ctx.length === 0 ) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\tctx = ctx[0];\r\n\t\r\n\t\t\treturn ctx.ajax ?\r\n\t\t\t\t$.isPlainObject( ctx.ajax ) ?\r\n\t\t\t\t\tctx.ajax.url :\r\n\t\t\t\t\tctx.ajax :\r\n\t\t\t\tctx.sAjaxSource;\r\n\t\t}\r\n\t\r\n\t\t// set\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\tif ( $.isPlainObject( settings.ajax ) ) {\r\n\t\t\t\tsettings.ajax.url = url;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsettings.ajax = url;\r\n\t\t\t}\r\n\t\t\t// No need to consider sAjaxSource here since DataTables gives priority\r\n\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\r\n\t\t\t// value of `sAjaxSource` redundant.\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Load data from the newly set Ajax URL. Note that this method is only\r\n\t * available when `ajax.url()` is used to set a URL. Additionally, this method\r\n\t * has the same effect as calling `ajax.reload()` but is provided for\r\n\t * convenience when setting a new URL. Like `ajax.reload()` it will\r\n\t * automatically redraw the table once the remote data has been loaded.\r\n\t *\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\r\n\t\t// Same as a reload, but makes sense to present it for easy access after a\r\n\t\t// url change\r\n\t\treturn this.iterator( 'table', function ( ctx ) {\r\n\t\t\t__reload( ctx, resetPaging===false, callback );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar _selector_run = function ( type, selector, selectFn, settings, opts )\r\n\t{\r\n\t\tvar\r\n\t\t\tout = [], res,\r\n\t\t\ta, i, ien, j, jen,\r\n\t\t\tselectorType = typeof selector;\r\n\t\r\n\t\t// Can't just check for isArray here, as an API or jQuery instance might be\r\n\t\t// given with their array like look\r\n\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\r\n\t\t\tselector = [ selector ];\r\n\t\t}\r\n\t\r\n\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {\r\n\t\t\t// Only split on simple strings - complex expressions will be jQuery selectors\r\n\t\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\r\n\t\t\t\tselector[i].split(',') :\r\n\t\t\t\t[ selector[i] ];\r\n\t\r\n\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {\r\n\t\t\t\tres = selectFn( typeof a[j] === 'string' ? (a[j]).trim() : a[j] );\r\n\t\r\n\t\t\t\tif ( res && res.length ) {\r\n\t\t\t\t\tout = out.concat( res );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// selector extensions\r\n\t\tvar ext = _ext.selector[ type ];\r\n\t\tif ( ext.length ) {\r\n\t\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n\t\t\t\tout = ext[i]( settings, opts, out );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn _unique( out );\r\n\t};\r\n\t\r\n\t\r\n\tvar _selector_opts = function ( opts )\r\n\t{\r\n\t\tif ( ! opts ) {\r\n\t\t\topts = {};\r\n\t\t}\r\n\t\r\n\t\t// Backwards compatibility for 1.9- which used the terminology filter rather\r\n\t\t// than search\r\n\t\tif ( opts.filter && opts.search === undefined ) {\r\n\t\t\topts.search = opts.filter;\r\n\t\t}\r\n\t\r\n\t\treturn $.extend( {\r\n\t\t\tsearch: 'none',\r\n\t\t\torder: 'current',\r\n\t\t\tpage: 'all'\r\n\t\t}, opts );\r\n\t};\r\n\t\r\n\t\r\n\tvar _selector_first = function ( inst )\r\n\t{\r\n\t\t// Reduce the API instance to the first item found\r\n\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {\r\n\t\t\tif ( inst[i].length > 0 ) {\r\n\t\t\t\t// Assign the first element to the first item in the instance\r\n\t\t\t\t// and truncate the instance and context\r\n\t\t\t\tinst[0] = inst[i];\r\n\t\t\t\tinst[0].length = 1;\r\n\t\t\t\tinst.length = 1;\r\n\t\t\t\tinst.context = [ inst.context[i] ];\r\n\t\r\n\t\t\t\treturn inst;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// Not found - return an empty instance\r\n\t\tinst.length = 0;\r\n\t\treturn inst;\r\n\t};\r\n\t\r\n\t\r\n\tvar _selector_row_indexes = function ( settings, opts )\r\n\t{\r\n\t\tvar\r\n\t\t\ti, ien, tmp, a=[],\r\n\t\t\tdisplayFiltered = settings.aiDisplay,\r\n\t\t\tdisplayMaster = settings.aiDisplayMaster;\r\n\t\r\n\t\tvar\r\n\t\t\tsearch = opts.search,  // none, applied, removed\r\n\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)\r\n\t\t\tpage   = opts.page;    // all, current\r\n\t\r\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\r\n\t\t\t// In server-side processing mode, most options are irrelevant since\r\n\t\t\t// rows not shown don't exist and the index order is the applied order\r\n\t\t\t// Removed is a special case - for consistency just return an empty\r\n\t\t\t// array\r\n\t\t\treturn search === 'removed' ?\r\n\t\t\t\t[] :\r\n\t\t\t\t_range( 0, displayMaster.length );\r\n\t\t}\r\n\t\telse if ( page == 'current' ) {\r\n\t\t\t// Current page implies that order=current and filter=applied, since it is\r\n\t\t\t// fairly senseless otherwise, regardless of what order and search actually\r\n\t\t\t// are\r\n\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\r\n\t\t\t\ta.push( displayFiltered[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( order == 'current' || order == 'applied' ) {\r\n\t\t\tif ( search == 'none') {\r\n\t\t\t\ta = displayMaster.slice();\r\n\t\t\t}\r\n\t\t\telse if ( search == 'applied' ) {\r\n\t\t\t\ta = displayFiltered.slice();\r\n\t\t\t}\r\n\t\t\telse if ( search == 'removed' ) {\r\n\t\t\t\t// O(n+m) solution by creating a hash map\r\n\t\t\t\tvar displayFilteredMap = {};\r\n\t\r\n\t\t\t\tfor ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {\r\n\t\t\t\t\tdisplayFilteredMap[displayFiltered[i]] = null;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ta = $.map( displayMaster, function (el) {\r\n\t\t\t\t\treturn ! displayFilteredMap.hasOwnProperty(el) ?\r\n\t\t\t\t\t\tel :\r\n\t\t\t\t\t\tnull;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( order == 'index' || order == 'original' ) {\r\n\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n\t\t\t\tif ( search == 'none' ) {\r\n\t\t\t\t\ta.push( i );\r\n\t\t\t\t}\r\n\t\t\t\telse { // applied | removed\r\n\t\t\t\t\ttmp = $.inArray( i, displayFiltered );\r\n\t\r\n\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||\r\n\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ta.push( i );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn a;\r\n\t};\r\n\t\r\n\t\r\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n\t * Rows\r\n\t *\r\n\t * {}          - no selector - use all available rows\r\n\t * {integer}   - row aoData index\r\n\t * {node}      - TR node\r\n\t * {string}    - jQuery selector to apply to the TR elements\r\n\t * {array}     - jQuery array of nodes, or simply an array of TR nodes\r\n\t *\r\n\t */\r\n\tvar __row_selector = function ( settings, selector, opts )\r\n\t{\r\n\t\tvar rows;\r\n\t\tvar run = function ( sel ) {\r\n\t\t\tvar selInt = _intVal( sel );\r\n\t\t\tvar i, ien;\r\n\t\t\tvar aoData = settings.aoData;\r\n\t\r\n\t\t\t// Short cut - selector is a number and no options provided (default is\r\n\t\t\t// all records, so no need to check if the index is in there, since it\r\n\t\t\t// must be - dev error if the index doesn't exist).\r\n\t\t\tif ( selInt !== null && ! opts ) {\r\n\t\t\t\treturn [ selInt ];\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ! rows ) {\r\n\t\t\t\trows = _selector_row_indexes( settings, opts );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\r\n\t\t\t\t// Selector - integer\r\n\t\t\t\treturn [ selInt ];\r\n\t\t\t}\r\n\t\t\telse if ( sel === null || sel === undefined || sel === '' ) {\r\n\t\t\t\t// Selector - none\r\n\t\t\t\treturn rows;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Selector - function\r\n\t\t\tif ( typeof sel === 'function' ) {\r\n\t\t\t\treturn $.map( rows, function (idx) {\r\n\t\t\t\t\tvar row = aoData[ idx ];\r\n\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Selector - node\r\n\t\t\tif ( sel.nodeName ) {\r\n\t\t\t\tvar rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup\r\n\t\t\t\tvar cellIdx = sel._DT_CellIndex;\r\n\t\r\n\t\t\t\tif ( rowIdx !== undefined ) {\r\n\t\t\t\t\t// Make sure that the row is actually still present in the table\r\n\t\t\t\t\treturn aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?\r\n\t\t\t\t\t\t[ rowIdx ] :\r\n\t\t\t\t\t\t[];\r\n\t\t\t\t}\r\n\t\t\t\telse if ( cellIdx ) {\r\n\t\t\t\t\treturn aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?\r\n\t\t\t\t\t\t[ cellIdx.row ] :\r\n\t\t\t\t\t\t[];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar host = $(sel).closest('*[data-dt-row]');\r\n\t\t\t\t\treturn host.length ?\r\n\t\t\t\t\t\t[ host.data('dt-row') ] :\r\n\t\t\t\t\t\t[];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// ID selector. Want to always be able to select rows by id, regardless\r\n\t\t\t// of if the tr element has been created or not, so can't rely upon\r\n\t\t\t// jQuery here - hence a custom implementation. This does not match\r\n\t\t\t// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\r\n\t\t\t// but to select it using a CSS selector engine (like Sizzle or\r\n\t\t\t// querySelect) it would need to need to be escaped for some characters.\r\n\t\t\t// DataTables simplifies this for row selectors since you can select\r\n\t\t\t// only a row. A # indicates an id any anything that follows is the id -\r\n\t\t\t// unescaped.\r\n\t\t\tif ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\r\n\t\t\t\t// get row index from id\r\n\t\t\t\tvar rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\r\n\t\t\t\tif ( rowObj !== undefined ) {\r\n\t\t\t\t\treturn [ rowObj.idx ];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// need to fall through to jQuery in case there is DOM id that\r\n\t\t\t\t// matches\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Get nodes in the order from the `rows` array with null values removed\r\n\t\t\tvar nodes = _removeEmpty(\r\n\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )\r\n\t\t\t);\r\n\t\r\n\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/\r\n\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,\r\n\t\t\t// it also allows arrays, so this will cope with all three options\r\n\t\t\treturn $(nodes)\r\n\t\t\t\t.filter( sel )\r\n\t\t\t\t.map( function () {\r\n\t\t\t\t\treturn this._DT_RowIndex;\r\n\t\t\t\t} )\r\n\t\t\t\t.toArray();\r\n\t\t};\r\n\t\r\n\t\treturn _selector_run( 'row', selector, run, settings, opts );\r\n\t};\r\n\t\r\n\t\r\n\t_api_register( 'rows()', function ( selector, opts ) {\r\n\t\t// argument shifting\r\n\t\tif ( selector === undefined ) {\r\n\t\t\tselector = '';\r\n\t\t}\r\n\t\telse if ( $.isPlainObject( selector ) ) {\r\n\t\t\topts = selector;\r\n\t\t\tselector = '';\r\n\t\t}\r\n\t\r\n\t\topts = _selector_opts( opts );\r\n\t\r\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\r\n\t\t\treturn __row_selector( settings, selector, opts );\r\n\t\t}, 1 );\r\n\t\r\n\t\t// Want argument shifting here and in __row_selector?\r\n\t\tinst.selector.rows = selector;\r\n\t\tinst.selector.opts = opts;\r\n\t\r\n\t\treturn inst;\r\n\t} );\r\n\t\r\n\t_api_register( 'rows().nodes()', function () {\r\n\t\treturn this.iterator( 'row', function ( settings, row ) {\r\n\t\t\treturn settings.aoData[ row ].nTr || undefined;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_register( 'rows().data()', function () {\r\n\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {\r\n\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\r\n\t\treturn this.iterator( 'row', function ( settings, row ) {\r\n\t\t\tvar r = settings.aoData[ row ];\r\n\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\r\n\t\treturn this.iterator( 'row', function ( settings, row ) {\r\n\t\t\t_fnInvalidate( settings, row, src );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {\r\n\t\treturn this.iterator( 'row', function ( settings, row ) {\r\n\t\t\treturn row;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\r\n\t\tvar a = [];\r\n\t\tvar context = this.context;\r\n\t\r\n\t\t// `iterator` will drop undefined values, but in this case we want them\r\n\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n\t\t\tfor ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\r\n\t\t\t\tvar id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\r\n\t\t\t\ta.push( (hash === true ? '#' : '' )+ id );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn new _Api( context, a );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {\r\n\t\tvar that = this;\r\n\t\r\n\t\tthis.iterator( 'row', function ( settings, row, thatIdx ) {\r\n\t\t\tvar data = settings.aoData;\r\n\t\t\tvar rowData = data[ row ];\r\n\t\t\tvar i, ien, j, jen;\r\n\t\t\tvar loopRow, loopCells;\r\n\t\r\n\t\t\tdata.splice( row, 1 );\r\n\t\r\n\t\t\t// Update the cached indexes\r\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n\t\t\t\tloopRow = data[i];\r\n\t\t\t\tloopCells = loopRow.anCells;\r\n\t\r\n\t\t\t\t// Rows\r\n\t\t\t\tif ( loopRow.nTr !== null ) {\r\n\t\t\t\t\tloopRow.nTr._DT_RowIndex = i;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Cells\r\n\t\t\t\tif ( loopCells !== null ) {\r\n\t\t\t\t\tfor ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\r\n\t\t\t\t\t\tloopCells[j]._DT_CellIndex.row = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Delete from the display arrays\r\n\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );\r\n\t\t\t_fnDeleteIndex( settings.aiDisplay, row );\r\n\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\r\n\t\r\n\t\t\t// For server-side processing tables - subtract the deleted row from the count\r\n\t\t\tif ( settings._iRecordsDisplay > 0 ) {\r\n\t\t\t\tsettings._iRecordsDisplay--;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Check for an 'overflow' they case for displaying the table\r\n\t\t\t_fnLengthOverflow( settings );\r\n\t\r\n\t\t\t// Remove the row's ID reference if there is one\r\n\t\t\tvar id = settings.rowIdFn( rowData._aData );\r\n\t\t\tif ( id !== undefined ) {\r\n\t\t\t\tdelete settings.aIds[ id ];\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\tthis.iterator( 'table', function ( settings ) {\r\n\t\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n\t\t\t\tsettings.aoData[i].idx = i;\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'rows.add()', function ( rows ) {\r\n\t\tvar newRows = this.iterator( 'table', function ( settings ) {\r\n\t\t\t\tvar row, i, ien;\r\n\t\t\t\tvar out = [];\r\n\t\r\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n\t\t\t\t\trow = rows[i];\r\n\t\r\n\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn out;\r\n\t\t\t}, 1 );\r\n\t\r\n\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used\r\n\t\tvar modRows = this.rows( -1 );\r\n\t\tmodRows.pop();\r\n\t\t$.merge( modRows, newRows );\r\n\t\r\n\t\treturn modRows;\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\t_api_register( 'row()', function ( selector, opts ) {\r\n\t\treturn _selector_first( this.rows( selector, opts ) );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'row().data()', function ( data ) {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( data === undefined ) {\r\n\t\t\t// Get\r\n\t\t\treturn ctx.length && this.length ?\r\n\t\t\t\tctx[0].aoData[ this[0] ]._aData :\r\n\t\t\t\tundefined;\r\n\t\t}\r\n\t\r\n\t\t// Set\r\n\t\tvar row = ctx[0].aoData[ this[0] ];\r\n\t\trow._aData = data;\r\n\t\r\n\t\t// If the DOM has an id, and the data source is an array\r\n\t\tif ( Array.isArray( data ) && row.nTr && row.nTr.id ) {\r\n\t\t\t_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );\r\n\t\t}\r\n\t\r\n\t\t// Automatically invalidate\r\n\t\t_fnInvalidate( ctx[0], this[0], 'data' );\r\n\t\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'row().node()', function () {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\treturn ctx.length && this.length ?\r\n\t\t\tctx[0].aoData[ this[0] ].nTr || null :\r\n\t\t\tnull;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'row.add()', function ( row ) {\r\n\t\t// Allow a jQuery object to be passed in - only a single row is added from\r\n\t\t// it though - the first element in the set\r\n\t\tif ( row instanceof $ && row.length ) {\r\n\t\t\trow = row[0];\r\n\t\t}\r\n\t\r\n\t\tvar rows = this.iterator( 'table', function ( settings ) {\r\n\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n\t\t\t\treturn _fnAddTr( settings, row )[0];\r\n\t\t\t}\r\n\t\t\treturn _fnAddData( settings, row );\r\n\t\t} );\r\n\t\r\n\t\t// Return an Api.rows() extended instance, with the newly added row selected\r\n\t\treturn this.row( rows[0] );\r\n\t} );\r\n\t\r\n\t\r\n\t$(document).on('plugin-init.dt', function (e, context) {\r\n\t\tvar api = new _Api( context );\r\n\t\r\n\t\tapi.on( 'stateSaveParams', function ( e, settings, d ) {\r\n\t\t\t// This could be more compact with the API, but it is a lot faster as a simple\r\n\t\t\t// internal loop\r\n\t\t\tvar idFn = settings.rowIdFn;\r\n\t\t\tvar data = settings.aoData;\r\n\t\t\tvar ids = [];\r\n\t\r\n\t\t\tfor (var i=0 ; i<data.length ; i++) {\r\n\t\t\t\tif (data[i]._detailsShow) {\r\n\t\t\t\t\tids.push( '#' + idFn(data[i]._aData) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\td.childRows = ids;\r\n\t\t})\r\n\t\r\n\t\tvar loaded = api.state.loaded();\r\n\t\r\n\t\tif ( loaded && loaded.childRows ) {\r\n\t\t\tapi\r\n\t\t\t\t.rows( $.map(loaded.childRows, function (id){\r\n\t\t\t\t\treturn id.replace(/:/g, '\\\\:')\r\n\t\t\t\t}) )\r\n\t\t\t\t.every( function () {\r\n\t\t\t\t\t_fnCallbackFire( context, null, 'requestChild', [ this ] )\r\n\t\t\t\t});\r\n\t\t}\r\n\t});\r\n\t\r\n\tvar __details_add = function ( ctx, row, data, klass )\r\n\t{\r\n\t\t// Convert to array of TR elements\r\n\t\tvar rows = [];\r\n\t\tvar addRow = function ( r, k ) {\r\n\t\t\t// Recursion to allow for arrays of jQuery objects\r\n\t\t\tif ( Array.isArray( r ) || r instanceof $ ) {\r\n\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {\r\n\t\t\t\t\taddRow( r[i], k );\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\t// If we get a TR element, then just add it directly - up to the dev\r\n\t\t\t// to add the correct number of columns etc\r\n\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\r\n\t\t\t\trows.push( r );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Otherwise create a row with a wrapper\r\n\t\t\t\tvar created = $('<tr><td></td></tr>').addClass( k );\r\n\t\t\t\t$('td', created)\r\n\t\t\t\t\t.addClass( k )\r\n\t\t\t\t\t.html( r )\r\n\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );\r\n\t\r\n\t\t\t\trows.push( created[0] );\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\taddRow( data, klass );\r\n\t\r\n\t\tif ( row._details ) {\r\n\t\t\trow._details.detach();\r\n\t\t}\r\n\t\r\n\t\trow._details = $(rows);\r\n\t\r\n\t\t// If the children were already shown, that state should be retained\r\n\t\tif ( row._detailsShow ) {\r\n\t\t\trow._details.insertAfter( row.nTr );\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t// Make state saving of child row details async to allow them to be batch processed\r\n\tvar __details_state = DataTable.util.throttle(\r\n\t\tfunction (ctx) {\r\n\t\t\t_fnSaveState( ctx[0] )\r\n\t\t},\r\n\t\t500\r\n\t);\r\n\t\r\n\t\r\n\tvar __details_remove = function ( api, idx )\r\n\t{\r\n\t\tvar ctx = api.context;\r\n\t\r\n\t\tif ( ctx.length ) {\r\n\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\r\n\t\r\n\t\t\tif ( row && row._details ) {\r\n\t\t\t\trow._details.remove();\r\n\t\r\n\t\t\t\trow._detailsShow = undefined;\r\n\t\t\t\trow._details = undefined;\r\n\t\t\t\t$( row.nTr ).removeClass( 'dt-hasChild' );\r\n\t\t\t\t__details_state( ctx );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar __details_display = function ( api, show ) {\r\n\t\tvar ctx = api.context;\r\n\t\r\n\t\tif ( ctx.length && api.length ) {\r\n\t\t\tvar row = ctx[0].aoData[ api[0] ];\r\n\t\r\n\t\t\tif ( row._details ) {\r\n\t\t\t\trow._detailsShow = show;\r\n\t\r\n\t\t\t\tif ( show ) {\r\n\t\t\t\t\trow._details.insertAfter( row.nTr );\r\n\t\t\t\t\t$( row.nTr ).addClass( 'dt-hasChild' );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trow._details.detach();\r\n\t\t\t\t\t$( row.nTr ).removeClass( 'dt-hasChild' );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_fnCallbackFire( ctx[0], null, 'childRow', [ show, api.row( api[0] ) ] )\r\n\t\r\n\t\t\t\t__details_events( ctx[0] );\r\n\t\t\t\t__details_state( ctx );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\tvar __details_events = function ( settings )\r\n\t{\r\n\t\tvar api = new _Api( settings );\r\n\t\tvar namespace = '.dt.DT_details';\r\n\t\tvar drawEvent = 'draw'+namespace;\r\n\t\tvar colvisEvent = 'column-visibility'+namespace;\r\n\t\tvar destroyEvent = 'destroy'+namespace;\r\n\t\tvar data = settings.aoData;\r\n\t\r\n\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\r\n\t\r\n\t\tif ( _pluck( data, '_details' ).length > 0 ) {\r\n\t\t\t// On each draw, insert the required elements into the document\r\n\t\t\tapi.on( drawEvent, function ( e, ctx ) {\r\n\t\t\t\tif ( settings !== ctx ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {\r\n\t\t\t\t\t// Internal data grab\r\n\t\t\t\t\tvar row = data[ idx ];\r\n\t\r\n\t\t\t\t\tif ( row._detailsShow ) {\r\n\t\t\t\t\t\trow._details.insertAfter( row.nTr );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\r\n\t\t\t// Column visibility change - update the colspan\r\n\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {\r\n\t\t\t\tif ( settings !== ctx ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Update the colspan for the details rows (note, only if it already has\r\n\t\t\t\t// a colspan)\r\n\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );\r\n\t\r\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n\t\t\t\t\trow = data[i];\r\n\t\r\n\t\t\t\t\tif ( row._details ) {\r\n\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\r\n\t\t\t// Table destroyed - nuke any child rows\r\n\t\t\tapi.on( destroyEvent, function ( e, ctx ) {\r\n\t\t\t\tif ( settings !== ctx ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n\t\t\t\t\tif ( data[i]._details ) {\r\n\t\t\t\t\t\t__details_remove( api, i );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t};\r\n\t\r\n\t// Strings for the method names to help minification\r\n\tvar _emp = '';\r\n\tvar _child_obj = _emp+'row().child';\r\n\tvar _child_mth = _child_obj+'()';\r\n\t\r\n\t// data can be:\r\n\t//  tr\r\n\t//  string\r\n\t//  jQuery or array of any of the above\r\n\t_api_register( _child_mth, function ( data, klass ) {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( data === undefined ) {\r\n\t\t\t// get\r\n\t\t\treturn ctx.length && this.length ?\r\n\t\t\t\tctx[0].aoData[ this[0] ]._details :\r\n\t\t\t\tundefined;\r\n\t\t}\r\n\t\telse if ( data === true ) {\r\n\t\t\t// show\r\n\t\t\tthis.child.show();\r\n\t\t}\r\n\t\telse if ( data === false ) {\r\n\t\t\t// remove\r\n\t\t\t__details_remove( this );\r\n\t\t}\r\n\t\telse if ( ctx.length && this.length ) {\r\n\t\t\t// set\r\n\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( [\r\n\t\t_child_obj+'.show()',\r\n\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without\r\n\t], function ( show ) {   // it returns an object and this method is not executed)\r\n\t\t__details_display( this, true );\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( [\r\n\t\t_child_obj+'.hide()',\r\n\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without\r\n\t], function () {         // it returns an object and this method is not executed)\r\n\t\t__details_display( this, false );\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( [\r\n\t\t_child_obj+'.remove()',\r\n\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without\r\n\t], function () {           // it returns an object and this method is not executed)\r\n\t\t__details_remove( this );\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( _child_obj+'.isShown()', function () {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( ctx.length && this.length ) {\r\n\t\t\t// _detailsShown as false or undefined will fall through to return false\r\n\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;\r\n\t\t}\r\n\t\treturn false;\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n\t * Columns\r\n\t *\r\n\t * {integer}           - column index (>=0 count from left, <0 count from right)\r\n\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\r\n\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\r\n\t * \"{string}:name\"     - column name\r\n\t * \"{string}\"          - jQuery selector on column header nodes\r\n\t *\r\n\t */\r\n\t\r\n\t// can be an array of these items, comma separated list, or an array of comma\r\n\t// separated lists\r\n\t\r\n\tvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\r\n\t\r\n\t\r\n\t// r1 and r2 are redundant - but it means that the parameters match for the\r\n\t// iterator callback in columns().data()\r\n\tvar __columnData = function ( settings, column, r1, r2, rows ) {\r\n\t\tvar a = [];\r\n\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {\r\n\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );\r\n\t\t}\r\n\t\treturn a;\r\n\t};\r\n\t\r\n\t\r\n\tvar __column_selector = function ( settings, selector, opts )\r\n\t{\r\n\t\tvar\r\n\t\t\tcolumns = settings.aoColumns,\r\n\t\t\tnames = _pluck( columns, 'sName' ),\r\n\t\t\tnodes = _pluck( columns, 'nTh' );\r\n\t\r\n\t\tvar run = function ( s ) {\r\n\t\t\tvar selInt = _intVal( s );\r\n\t\r\n\t\t\t// Selector - all\r\n\t\t\tif ( s === '' ) {\r\n\t\t\t\treturn _range( columns.length );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Selector - index\r\n\t\t\tif ( selInt !== null ) {\r\n\t\t\t\treturn [ selInt >= 0 ?\r\n\t\t\t\t\tselInt : // Count from left\r\n\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\r\n\t\t\t// Selector = function\r\n\t\t\tif ( typeof s === 'function' ) {\r\n\t\t\t\tvar rows = _selector_row_indexes( settings, opts );\r\n\t\r\n\t\t\t\treturn $.map( columns, function (col, idx) {\r\n\t\t\t\t\treturn s(\r\n\t\t\t\t\t\t\tidx,\r\n\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),\r\n\t\t\t\t\t\t\tnodes[ idx ]\r\n\t\t\t\t\t\t) ? idx : null;\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\r\n\t\t\t// jQuery or string selector\r\n\t\t\tvar match = typeof s === 'string' ?\r\n\t\t\t\ts.match( __re_column_selector ) :\r\n\t\t\t\t'';\r\n\t\r\n\t\t\tif ( match ) {\r\n\t\t\t\tswitch( match[2] ) {\r\n\t\t\t\t\tcase 'visIdx':\r\n\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );\r\n\t\t\t\t\t\t// Visible index given, convert to column index\r\n\t\t\t\t\t\tif ( idx < 0 ) {\r\n\t\t\t\t\t\t\t// Counting from the right\r\n\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {\r\n\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Counting from the left\r\n\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];\r\n\t\r\n\t\t\t\t\tcase 'name':\r\n\t\t\t\t\t\t// match by name. `names` is column index complete and in order\r\n\t\t\t\t\t\treturn $.map( names, function (name, i) {\r\n\t\t\t\t\t\t\treturn name === match[1] ? i : null;\r\n\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// Cell in the table body\r\n\t\t\tif ( s.nodeName && s._DT_CellIndex ) {\r\n\t\t\t\treturn [ s._DT_CellIndex.column ];\r\n\t\t\t}\r\n\t\r\n\t\t\t// jQuery selector on the TH elements for the columns\r\n\t\t\tvar jqResult = $( nodes )\r\n\t\t\t\t.filter( s )\r\n\t\t\t\t.map( function () {\r\n\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order\r\n\t\t\t\t} )\r\n\t\t\t\t.toArray();\r\n\t\r\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\r\n\t\t\t\treturn jqResult;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Otherwise a node which might have a `dt-column` data attribute, or be\r\n\t\t\t// a child or such an element\r\n\t\t\tvar host = $(s).closest('*[data-dt-column]');\r\n\t\t\treturn host.length ?\r\n\t\t\t\t[ host.data('dt-column') ] :\r\n\t\t\t\t[];\r\n\t\t};\r\n\t\r\n\t\treturn _selector_run( 'column', selector, run, settings, opts );\r\n\t};\r\n\t\r\n\t\r\n\tvar __setColumnVis = function ( settings, column, vis ) {\r\n\t\tvar\r\n\t\t\tcols = settings.aoColumns,\r\n\t\t\tcol  = cols[ column ],\r\n\t\t\tdata = settings.aoData,\r\n\t\t\trow, cells, i, ien, tr;\r\n\t\r\n\t\t// Get\r\n\t\tif ( vis === undefined ) {\r\n\t\t\treturn col.bVisible;\r\n\t\t}\r\n\t\r\n\t\t// Set\r\n\t\t// No change\r\n\t\tif ( col.bVisible === vis ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tif ( vis ) {\r\n\t\t\t// Insert column\r\n\t\t\t// Need to decide if we should use appendChild or insertBefore\r\n\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\r\n\t\r\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n\t\t\t\ttr = data[i].nTr;\r\n\t\t\t\tcells = data[i].anCells;\r\n\t\r\n\t\t\t\tif ( tr ) {\r\n\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null\r\n\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Remove column\r\n\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();\r\n\t\t}\r\n\t\r\n\t\t// Common actions\r\n\t\tcol.bVisible = vis;\r\n\t};\r\n\t\r\n\t\r\n\t_api_register( 'columns()', function ( selector, opts ) {\r\n\t\t// argument shifting\r\n\t\tif ( selector === undefined ) {\r\n\t\t\tselector = '';\r\n\t\t}\r\n\t\telse if ( $.isPlainObject( selector ) ) {\r\n\t\t\topts = selector;\r\n\t\t\tselector = '';\r\n\t\t}\r\n\t\r\n\t\topts = _selector_opts( opts );\r\n\t\r\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\r\n\t\t\treturn __column_selector( settings, selector, opts );\r\n\t\t}, 1 );\r\n\t\r\n\t\t// Want argument shifting here and in _row_selector?\r\n\t\tinst.selector.cols = selector;\r\n\t\tinst.selector.opts = opts;\r\n\t\r\n\t\treturn inst;\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\r\n\t\treturn this.iterator( 'column', function ( settings, column ) {\r\n\t\t\treturn settings.aoColumns[column].nTh;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\r\n\t\treturn this.iterator( 'column', function ( settings, column ) {\r\n\t\t\treturn settings.aoColumns[column].nTf;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().data()', 'column().data()', function () {\r\n\t\treturn this.iterator( 'column-rows', __columnData, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\r\n\t\treturn this.iterator( 'column', function ( settings, column ) {\r\n\t\t\treturn settings.aoColumns[column].mData;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\r\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n\t\t\treturn _pluck_order( settings.aoData, rows,\r\n\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column\r\n\t\t\t);\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\r\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\r\n\t\tvar that = this;\r\n\t\tvar ret = this.iterator( 'column', function ( settings, column ) {\r\n\t\t\tif ( vis === undefined ) {\r\n\t\t\t\treturn settings.aoColumns[ column ].bVisible;\r\n\t\t\t} // else\r\n\t\t\t__setColumnVis( settings, column, vis );\r\n\t\t} );\r\n\t\r\n\t\t// Group the column visibility changes\r\n\t\tif ( vis !== undefined ) {\r\n\t\t\tthis.iterator( 'table', function ( settings ) {\r\n\t\t\t\t// Redraw the header after changes\r\n\t\t\t\t_fnDrawHead( settings, settings.aoHeader );\r\n\t\t\t\t_fnDrawHead( settings, settings.aoFooter );\r\n\t\t\r\n\t\t\t\t// Update colspan for no records display. Child rows and extensions will use their own\r\n\t\t\t\t// listeners to do this - only need to update the empty table item here\r\n\t\t\t\tif ( ! settings.aiDisplay.length ) {\r\n\t\t\t\t\t$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\t_fnSaveState( settings );\r\n\t\r\n\t\t\t\t// Second loop once the first is done for events\r\n\t\t\t\tthat.iterator( 'column', function ( settings, column ) {\r\n\t\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t\tif ( calc === undefined || calc ) {\r\n\t\t\t\t\tthat.columns.adjust();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\r\n\t\treturn ret;\r\n\t} );\r\n\t\r\n\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\r\n\t\treturn this.iterator( 'column', function ( settings, column ) {\r\n\t\t\treturn type === 'visible' ?\r\n\t\t\t\t_fnColumnIndexToVisible( settings, column ) :\r\n\t\t\t\tcolumn;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_register( 'columns.adjust()', function () {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t_fnAdjustColumnSizing( settings );\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t_api_register( 'column.index()', function ( type, idx ) {\r\n\t\tif ( this.context.length !== 0 ) {\r\n\t\t\tvar ctx = this.context[0];\r\n\t\r\n\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {\r\n\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );\r\n\t\t\t}\r\n\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {\r\n\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t_api_register( 'column()', function ( selector, opts ) {\r\n\t\treturn _selector_first( this.columns( selector, opts ) );\r\n\t} );\r\n\t\r\n\tvar __cell_selector = function ( settings, selector, opts )\r\n\t{\r\n\t\tvar data = settings.aoData;\r\n\t\tvar rows = _selector_row_indexes( settings, opts );\r\n\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\r\n\t\tvar allCells = $(_flatten( [], cells ));\r\n\t\tvar row;\r\n\t\tvar columns = settings.aoColumns.length;\r\n\t\tvar a, i, ien, j, o, host;\r\n\t\r\n\t\tvar run = function ( s ) {\r\n\t\t\tvar fnSelector = typeof s === 'function';\r\n\t\r\n\t\t\tif ( s === null || s === undefined || fnSelector ) {\r\n\t\t\t\t// All cells and function selectors\r\n\t\t\t\ta = [];\r\n\t\r\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n\t\t\t\t\trow = rows[i];\r\n\t\r\n\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {\r\n\t\t\t\t\t\to = {\r\n\t\t\t\t\t\t\trow: row,\r\n\t\t\t\t\t\t\tcolumn: j\r\n\t\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t\tif ( fnSelector ) {\r\n\t\t\t\t\t\t\t// Selector - function\r\n\t\t\t\t\t\t\thost = data[ row ];\r\n\t\r\n\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\r\n\t\t\t\t\t\t\t\ta.push( o );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t// Selector - all\r\n\t\t\t\t\t\t\ta.push( o );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Selector - index\r\n\t\t\tif ( $.isPlainObject( s ) ) {\r\n\t\t\t\t// Valid cell index and its in the array of selectable rows\r\n\t\t\t\treturn s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?\r\n\t\t\t\t\t[s] :\r\n\t\t\t\t\t[];\r\n\t\t\t}\r\n\t\r\n\t\t\t// Selector - jQuery filtered cells\r\n\t\t\tvar jqResult = allCells\r\n\t\t\t\t.filter( s )\r\n\t\t\t\t.map( function (i, el) {\r\n\t\t\t\t\treturn { // use a new object, in case someone changes the values\r\n\t\t\t\t\t\trow:    el._DT_CellIndex.row,\r\n\t\t\t\t\t\tcolumn: el._DT_CellIndex.column\r\n\t \t\t\t\t};\r\n\t\t\t\t} )\r\n\t\t\t\t.toArray();\r\n\t\r\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\r\n\t\t\t\treturn jqResult;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Otherwise the selector is a node, and there is one last option - the\r\n\t\t\t// element might be a child of an element which has dt-row and dt-column\r\n\t\t\t// data attributes\r\n\t\t\thost = $(s).closest('*[data-dt-row]');\r\n\t\t\treturn host.length ?\r\n\t\t\t\t[ {\r\n\t\t\t\t\trow: host.data('dt-row'),\r\n\t\t\t\t\tcolumn: host.data('dt-column')\r\n\t\t\t\t} ] :\r\n\t\t\t\t[];\r\n\t\t};\r\n\t\r\n\t\treturn _selector_run( 'cell', selector, run, settings, opts );\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\r\n\t\t// Argument shifting\r\n\t\tif ( $.isPlainObject( rowSelector ) ) {\r\n\t\t\t// Indexes\r\n\t\t\tif ( rowSelector.row === undefined ) {\r\n\t\t\t\t// Selector options in first parameter\r\n\t\t\t\topts = rowSelector;\r\n\t\t\t\trowSelector = null;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Cell index objects in first parameter\r\n\t\t\t\topts = columnSelector;\r\n\t\t\t\tcolumnSelector = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $.isPlainObject( columnSelector ) ) {\r\n\t\t\topts = columnSelector;\r\n\t\t\tcolumnSelector = null;\r\n\t\t}\r\n\t\r\n\t\t// Cell selector\r\n\t\tif ( columnSelector === null || columnSelector === undefined ) {\r\n\t\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\t// The default built in options need to apply to row and columns\r\n\t\tvar internalOpts = opts ? {\r\n\t\t\tpage: opts.page,\r\n\t\t\torder: opts.order,\r\n\t\t\tsearch: opts.search\r\n\t\t} : {};\r\n\t\r\n\t\t// Row + column selector\r\n\t\tvar columns = this.columns( columnSelector, internalOpts );\r\n\t\tvar rows = this.rows( rowSelector, internalOpts );\r\n\t\tvar i, ien, j, jen;\r\n\t\r\n\t\tvar cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {\r\n\t\t\tvar a = [];\r\n\t\r\n\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\r\n\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\r\n\t\t\t\t\ta.push( {\r\n\t\t\t\t\t\trow:    rows[idx][i],\r\n\t\t\t\t\t\tcolumn: columns[idx][j]\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn a;\r\n\t\t}, 1 );\r\n\t\r\n\t\t// There is currently only one extension which uses a cell selector extension\r\n\t\t// It is a _major_ performance drag to run this if it isn't needed, so this is\r\n\t\t// an extension specific check at the moment\r\n\t\tvar cells = opts && opts.selected ?\r\n\t\t\tthis.cells( cellsNoOpts, opts ) :\r\n\t\t\tcellsNoOpts;\r\n\t\r\n\t\t$.extend( cells.selector, {\r\n\t\t\tcols: columnSelector,\r\n\t\t\trows: rowSelector,\r\n\t\t\topts: opts\r\n\t\t} );\r\n\t\r\n\t\treturn cells;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\r\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\r\n\t\t\tvar data = settings.aoData[ row ];\r\n\t\r\n\t\t\treturn data && data.anCells ?\r\n\t\t\t\tdata.anCells[ column ] :\r\n\t\t\t\tundefined;\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'cells().data()', function () {\r\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\r\n\t\t\treturn _fnGetCellData( settings, row, column );\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\r\n\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';\r\n\t\r\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\r\n\t\t\treturn settings.aoData[ row ][ type ][ column ];\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\r\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\r\n\t\t\treturn _fnGetCellData( settings, row, column, type );\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\r\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\r\n\t\t\treturn {\r\n\t\t\t\trow: row,\r\n\t\t\t\tcolumn: column,\r\n\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )\r\n\t\t\t};\r\n\t\t}, 1 );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\r\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\r\n\t\t\t_fnInvalidate( settings, row, src, column );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\r\n\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'cell().data()', function ( data ) {\r\n\t\tvar ctx = this.context;\r\n\t\tvar cell = this[0];\r\n\t\r\n\t\tif ( data === undefined ) {\r\n\t\t\t// Get\r\n\t\t\treturn ctx.length && cell.length ?\r\n\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\r\n\t\t\t\tundefined;\r\n\t\t}\r\n\t\r\n\t\t// Set\r\n\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\r\n\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\r\n\t\r\n\t\treturn this;\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Get current ordering (sorting) that has been applied to the table.\r\n\t *\r\n\t * @returns {array} 2D array containing the sorting information for the first\r\n\t *   table in the current context. Each element in the parent array represents\r\n\t *   a column being sorted upon (i.e. multi-sorting with two columns would have\r\n\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\r\n\t *   the column index that the sorting condition applies to, the second is the\r\n\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\r\n\t *   index of the sorting order from the `column.sorting` initialisation array.\r\n\t *//**\r\n\t * Set the ordering for the table.\r\n\t *\r\n\t * @param {integer} order Column index to sort upon.\r\n\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\r\n\t * @returns {DataTables.Api} this\r\n\t *//**\r\n\t * Set the ordering for the table.\r\n\t *\r\n\t * @param {array} order 1D array of sorting information to be applied.\r\n\t * @param {array} [...] Optional additional sorting conditions\r\n\t * @returns {DataTables.Api} this\r\n\t *//**\r\n\t * Set the ordering for the table.\r\n\t *\r\n\t * @param {array} order 2D array of sorting information to be applied.\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'order()', function ( order, dir ) {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( order === undefined ) {\r\n\t\t\t// get\r\n\t\t\treturn ctx.length !== 0 ?\r\n\t\t\t\tctx[0].aaSorting :\r\n\t\t\t\tundefined;\r\n\t\t}\r\n\t\r\n\t\t// set\r\n\t\tif ( typeof order === 'number' ) {\r\n\t\t\t// Simple column / direction passed in\r\n\t\t\torder = [ [ order, dir ] ];\r\n\t\t}\r\n\t\telse if ( order.length && ! Array.isArray( order[0] ) ) {\r\n\t\t\t// Arguments passed in (list of 1D arrays)\r\n\t\t\torder = Array.prototype.slice.call( arguments );\r\n\t\t}\r\n\t\t// otherwise a 2D array was passed in\r\n\t\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\tsettings.aaSorting = order.slice();\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t/**\r\n\t * Attach a sort listener to an element for a given column\r\n\t *\r\n\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the\r\n\t *   listener to. This can take the form of a single DOM node, a jQuery\r\n\t *   collection of nodes or a jQuery selector which will identify the node(s).\r\n\t * @param {integer} column the column that a click on this node will sort on\r\n\t * @param {function} [callback] callback function when sort is run\r\n\t * @returns {DataTables.Api} this\r\n\t */\r\n\t_api_register( 'order.listener()', function ( node, column, callback ) {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t_fnSortAttachListener( settings, node, column, callback );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'order.fixed()', function ( set ) {\r\n\t\tif ( ! set ) {\r\n\t\t\tvar ctx = this.context;\r\n\t\t\tvar fixed = ctx.length ?\r\n\t\t\t\tctx[0].aaSortingFixed :\r\n\t\t\t\tundefined;\r\n\t\r\n\t\t\treturn Array.isArray( fixed ) ?\r\n\t\t\t\t{ pre: fixed } :\r\n\t\t\t\tfixed;\r\n\t\t}\r\n\t\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\tsettings.aaSortingFixed = $.extend( true, {}, set );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t// Order by the selected column(s)\r\n\t_api_register( [\r\n\t\t'columns().order()',\r\n\t\t'column().order()'\r\n\t], function ( dir ) {\r\n\t\tvar that = this;\r\n\t\r\n\t\treturn this.iterator( 'table', function ( settings, i ) {\r\n\t\t\tvar sort = [];\r\n\t\r\n\t\t\t$.each( that[i], function (j, col) {\r\n\t\t\t\tsort.push( [ col, dir ] );\r\n\t\t\t} );\r\n\t\r\n\t\t\tsettings.aaSorting = sort;\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {\r\n\t\tvar ctx = this.context;\r\n\t\r\n\t\tif ( input === undefined ) {\r\n\t\t\t// get\r\n\t\t\treturn ctx.length !== 0 ?\r\n\t\t\t\tctx[0].oPreviousSearch.sSearch :\r\n\t\t\t\tundefined;\r\n\t\t}\r\n\t\r\n\t\t// set\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\tif ( ! settings.oFeatures.bFilter ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\r\n\t\t\t\t\"sSearch\": input+\"\",\r\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,\r\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\r\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n\t\t\t} ), 1 );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_registerPlural(\r\n\t\t'columns().search()',\r\n\t\t'column().search()',\r\n\t\tfunction ( input, regex, smart, caseInsen ) {\r\n\t\t\treturn this.iterator( 'column', function ( settings, column ) {\r\n\t\t\t\tvar preSearch = settings.aoPreSearchCols;\r\n\t\r\n\t\t\t\tif ( input === undefined ) {\r\n\t\t\t\t\t// get\r\n\t\t\t\t\treturn preSearch[ column ].sSearch;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// set\r\n\t\t\t\tif ( ! settings.oFeatures.bFilter ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t$.extend( preSearch[ column ], {\r\n\t\t\t\t\t\"sSearch\": input+\"\",\r\n\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,\r\n\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\r\n\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );\r\n\t\t\t} );\r\n\t\t}\r\n\t);\r\n\t\r\n\t/*\r\n\t * State API methods\r\n\t */\r\n\t\r\n\t_api_register( 'state()', function () {\r\n\t\treturn this.context.length ?\r\n\t\t\tthis.context[0].oSavedState :\r\n\t\t\tnull;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'state.clear()', function () {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t// Save an empty object\r\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'state.loaded()', function () {\r\n\t\treturn this.context.length ?\r\n\t\t\tthis.context[0].oLoadedState :\r\n\t\t\tnull;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'state.save()', function () {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t_fnSaveState( settings );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Provide a common method for plug-ins to check the version of DataTables being\r\n\t * used, in order to ensure compatibility.\r\n\t *\r\n\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\r\n\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\r\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to\r\n\t *    the required version, or false if this version of DataTales is not\r\n\t *    suitable\r\n\t *  @static\r\n\t *  @dtopt API-Static\r\n\t *\r\n\t *  @example\r\n\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\r\n\t */\r\n\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )\r\n\t{\r\n\t\tvar aThis = DataTable.version.split('.');\r\n\t\tvar aThat = version.split('.');\r\n\t\tvar iThis, iThat;\r\n\t\r\n\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\r\n\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;\r\n\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;\r\n\t\r\n\t\t\t// Parts are the same, keep comparing\r\n\t\t\tif (iThis === iThat) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\r\n\t\t\t// Parts are different, return immediately\r\n\t\t\treturn iThis > iThat;\r\n\t\t}\r\n\t\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Check if a `<table>` node is a DataTable table already or not.\r\n\t *\r\n\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery\r\n\t *      selector for the table to test. Note that if more than more than one\r\n\t *      table is passed on, only the first will be checked\r\n\t *  @returns {boolean} true the table given is a DataTable, or false otherwise\r\n\t *  @static\r\n\t *  @dtopt API-Static\r\n\t *\r\n\t *  @example\r\n\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\r\n\t *      $('#example').dataTable();\r\n\t *    }\r\n\t */\r\n\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\r\n\t{\r\n\t\tvar t = $(table).get(0);\r\n\t\tvar is = false;\r\n\t\r\n\t\tif ( table instanceof DataTable.Api ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\r\n\t\t$.each( DataTable.settings, function (i, o) {\r\n\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\r\n\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\r\n\t\r\n\t\t\tif ( o.nTable === t || head === t || foot === t ) {\r\n\t\t\t\tis = true;\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn is;\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Get all DataTable tables that have been initialised - optionally you can\r\n\t * select to get only currently visible tables.\r\n\t *\r\n\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\r\n\t *    or visible tables only.\r\n\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are\r\n\t *    DataTables\r\n\t *  @static\r\n\t *  @dtopt API-Static\r\n\t *\r\n\t *  @example\r\n\t *    $.each( $.fn.dataTable.tables(true), function () {\r\n\t *      $(table).DataTable().columns.adjust();\r\n\t *    } );\r\n\t */\r\n\tDataTable.tables = DataTable.fnTables = function ( visible )\r\n\t{\r\n\t\tvar api = false;\r\n\t\r\n\t\tif ( $.isPlainObject( visible ) ) {\r\n\t\t\tapi = visible.api;\r\n\t\t\tvisible = visible.visible;\r\n\t\t}\r\n\t\r\n\t\tvar a = $.map( DataTable.settings, function (o) {\r\n\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {\r\n\t\t\t\treturn o.nTable;\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\treturn api ?\r\n\t\t\tnew _Api( a ) :\r\n\t\t\ta;\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Convert from camel case parameters to Hungarian notation. This is made public\r\n\t * for the extensions to provide the same ability as DataTables core to accept\r\n\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\r\n\t * parameters.\r\n\t *\r\n\t *  @param {object} src The model object which holds all parameters that can be\r\n\t *    mapped.\r\n\t *  @param {object} user The object to convert from camel case to Hungarian.\r\n\t *  @param {boolean} force When set to `true`, properties which already have a\r\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n\t *    won't be.\r\n\t */\r\n\tDataTable.camelToHungarian = _fnCamelToHungarian;\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\t_api_register( '$()', function ( selector, opts ) {\r\n\t\tvar\r\n\t\t\trows   = this.rows( opts ).nodes(), // Get all rows\r\n\t\t\tjqRows = $(rows);\r\n\t\r\n\t\treturn $( [].concat(\r\n\t\t\tjqRows.filter( selector ).toArray(),\r\n\t\t\tjqRows.find( selector ).toArray()\r\n\t\t) );\r\n\t} );\r\n\t\r\n\t\r\n\t// jQuery functions to operate on the tables\r\n\t$.each( [ 'on', 'one', 'off' ], function (i, key) {\r\n\t\t_api_register( key+'()', function ( /* event, handler */ ) {\r\n\t\t\tvar args = Array.prototype.slice.call(arguments);\r\n\t\r\n\t\t\t// Add the `dt` namespace automatically if it isn't already present\r\n\t\t\targs[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\r\n\t\t\t\treturn ! e.match(/\\.dt\\b/) ?\r\n\t\t\t\t\te+'.dt' :\r\n\t\t\t\t\te;\r\n\t\t\t\t} ).join( ' ' );\r\n\t\r\n\t\t\tvar inst = $( this.tables().nodes() );\r\n\t\t\tinst[key].apply( inst, args );\r\n\t\t\treturn this;\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'clear()', function () {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\t_fnClearTable( settings );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'settings()', function () {\r\n\t\treturn new _Api( this.context, this.context );\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'init()', function () {\r\n\t\tvar ctx = this.context;\r\n\t\treturn ctx.length ? ctx[0].oInit : null;\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'data()', function () {\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\treturn _pluck( settings.aoData, '_aData' );\r\n\t\t} ).flatten();\r\n\t} );\r\n\t\r\n\t\r\n\t_api_register( 'destroy()', function ( remove ) {\r\n\t\tremove = remove || false;\r\n\t\r\n\t\treturn this.iterator( 'table', function ( settings ) {\r\n\t\t\tvar orig      = settings.nTableWrapper.parentNode;\r\n\t\t\tvar classes   = settings.oClasses;\r\n\t\t\tvar table     = settings.nTable;\r\n\t\t\tvar tbody     = settings.nTBody;\r\n\t\t\tvar thead     = settings.nTHead;\r\n\t\t\tvar tfoot     = settings.nTFoot;\r\n\t\t\tvar jqTable   = $(table);\r\n\t\t\tvar jqTbody   = $(tbody);\r\n\t\t\tvar jqWrapper = $(settings.nTableWrapper);\r\n\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\r\n\t\t\tvar i, ien;\r\n\t\r\n\t\t\t// Flag to note that the table is currently being destroyed - no action\r\n\t\t\t// should be taken\r\n\t\t\tsettings.bDestroying = true;\r\n\t\r\n\t\t\t// Fire off the destroy callbacks for plug-ins etc\r\n\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\r\n\t\r\n\t\t\t// If not being removed from the document, make all columns visible\r\n\t\t\tif ( ! remove ) {\r\n\t\t\t\tnew _Api( settings ).columns().visible( true );\r\n\t\t\t}\r\n\t\r\n\t\t\t// Blitz all `DT` namespaced events (these are internal events, the\r\n\t\t\t// lowercase, `dt` events are user subscribed and they are responsible\r\n\t\t\t// for removing them\r\n\t\t\tjqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\r\n\t\t\t$(window).off('.DT-'+settings.sInstance);\r\n\t\r\n\t\t\t// When scrolling we had to break the table up - restore it\r\n\t\t\tif ( table != thead.parentNode ) {\r\n\t\t\t\tjqTable.children('thead').detach();\r\n\t\t\t\tjqTable.append( thead );\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( tfoot && table != tfoot.parentNode ) {\r\n\t\t\t\tjqTable.children('tfoot').detach();\r\n\t\t\t\tjqTable.append( tfoot );\r\n\t\t\t}\r\n\t\r\n\t\t\tsettings.aaSorting = [];\r\n\t\t\tsettings.aaSortingFixed = [];\r\n\t\t\t_fnSortingClasses( settings );\r\n\t\r\n\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );\r\n\t\r\n\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+\r\n\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\r\n\t\t\t);\r\n\t\r\n\t\t\t// Add the TR elements back into the table in their original order\r\n\t\t\tjqTbody.children().detach();\r\n\t\t\tjqTbody.append( rows );\r\n\t\r\n\t\t\t// Remove the DataTables generated nodes, events and classes\r\n\t\t\tvar removedMethod = remove ? 'remove' : 'detach';\r\n\t\t\tjqTable[ removedMethod ]();\r\n\t\t\tjqWrapper[ removedMethod ]();\r\n\t\r\n\t\t\t// If we need to reattach the table to the document\r\n\t\t\tif ( ! remove && orig ) {\r\n\t\t\t\t// insertBefore acts like appendChild if !arg[1]\r\n\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );\r\n\t\r\n\t\t\t\t// Restore the width of the original table - was read from the style property,\r\n\t\t\t\t// so we can restore directly to that\r\n\t\t\t\tjqTable\r\n\t\t\t\t\t.css( 'width', settings.sDestroyWidth )\r\n\t\t\t\t\t.removeClass( classes.sTable );\r\n\t\r\n\t\t\t\t// If the were originally stripe classes - then we add them back here.\r\n\t\t\t\t// Note this is not fool proof (for example if not all rows had stripe\r\n\t\t\t\t// classes - but it's a good effort without getting carried away\r\n\t\t\t\tien = settings.asDestroyStripes.length;\r\n\t\r\n\t\t\t\tif ( ien ) {\r\n\t\t\t\t\tjqTbody.children().each( function (i) {\r\n\t\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t/* Remove the settings object from the settings array */\r\n\t\t\tvar idx = $.inArray( settings, DataTable.settings );\r\n\t\t\tif ( idx !== -1 ) {\r\n\t\t\t\tDataTable.settings.splice( idx, 1 );\r\n\t\t\t}\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t// Add the `every()` method for rows, columns and cells in a compact form\r\n\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\r\n\t\t_api_register( type+'s().every()', function ( fn ) {\r\n\t\t\tvar opts = this.selector.opts;\r\n\t\t\tvar api = this;\r\n\t\r\n\t\t\treturn this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\r\n\t\t\t\t// Rows and columns:\r\n\t\t\t\t//  arg1 - index\r\n\t\t\t\t//  arg2 - table counter\r\n\t\t\t\t//  arg3 - loop counter\r\n\t\t\t\t//  arg4 - undefined\r\n\t\t\t\t// Cells:\r\n\t\t\t\t//  arg1 - row index\r\n\t\t\t\t//  arg2 - column index\r\n\t\t\t\t//  arg3 - table counter\r\n\t\t\t\t//  arg4 - loop counter\r\n\t\t\t\tfn.call(\r\n\t\t\t\t\tapi[ type ](\r\n\t\t\t\t\t\targ1,\r\n\t\t\t\t\t\ttype==='cell' ? arg2 : opts,\r\n\t\t\t\t\t\ttype==='cell' ? opts : undefined\r\n\t\t\t\t\t),\r\n\t\t\t\t\targ1, arg2, arg3, arg4\r\n\t\t\t\t);\r\n\t\t\t} );\r\n\t\t} );\r\n\t} );\r\n\t\r\n\t\r\n\t// i18n method for extensions to be able to use the language object from the\r\n\t// DataTable\r\n\t_api_register( 'i18n()', function ( token, def, plural ) {\r\n\t\tvar ctx = this.context[0];\r\n\t\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\r\n\t\r\n\t\tif ( resolved === undefined ) {\r\n\t\t\tresolved = def;\r\n\t\t}\r\n\t\r\n\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {\r\n\t\t\tresolved = resolved[ plural ] !== undefined ?\r\n\t\t\t\tresolved[ plural ] :\r\n\t\t\t\tresolved._;\r\n\t\t}\r\n\t\r\n\t\treturn resolved.replace( '%d', plural ); // nb: plural might be undefined,\r\n\t} );\t\r\n\t/**\r\n\t * Version string for plug-ins to check compatibility. Allowed format is\r\n\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\r\n\t * only for non-release builds. See http://semver.org/ for more information.\r\n\t *  @member\r\n\t *  @type string\r\n\t *  @default Version number\r\n\t */\r\n\tDataTable.version = \"1.11.5\";\r\n\t\r\n\t/**\r\n\t * Private data store, containing all of the settings objects that are\r\n\t * created for the tables on a given page.\r\n\t *\r\n\t * Note that the `DataTable.settings` object is aliased to\r\n\t * `jQuery.fn.dataTableExt` through which it may be accessed and\r\n\t * manipulated, or `jQuery.fn.dataTable.settings`.\r\n\t *  @member\r\n\t *  @type array\r\n\t *  @default []\r\n\t *  @private\r\n\t */\r\n\tDataTable.settings = [];\r\n\t\r\n\t/**\r\n\t * Object models container, for the various models that DataTables has\r\n\t * available to it. These models define the objects that are used to hold\r\n\t * the active state and configuration of the table.\r\n\t *  @namespace\r\n\t */\r\n\tDataTable.models = {};\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Template object for the way in which DataTables holds information about\r\n\t * search information for the global filter and individual column filters.\r\n\t *  @namespace\r\n\t */\r\n\tDataTable.models.oSearch = {\r\n\t\t/**\r\n\t\t * Flag to indicate if the filtering should be case insensitive or not\r\n\t\t *  @type boolean\r\n\t\t *  @default true\r\n\t\t */\r\n\t\t\"bCaseInsensitive\": true,\r\n\t\r\n\t\t/**\r\n\t\t * Applied search term\r\n\t\t *  @type string\r\n\t\t *  @default <i>Empty string</i>\r\n\t\t */\r\n\t\t\"sSearch\": \"\",\r\n\t\r\n\t\t/**\r\n\t\t * Flag to indicate if the search term should be interpreted as a\r\n\t\t * regular expression (true) or not (false) and therefore and special\r\n\t\t * regex characters escaped.\r\n\t\t *  @type boolean\r\n\t\t *  @default false\r\n\t\t */\r\n\t\t\"bRegex\": false,\r\n\t\r\n\t\t/**\r\n\t\t * Flag to indicate if DataTables is to use its smart filtering or not.\r\n\t\t *  @type boolean\r\n\t\t *  @default true\r\n\t\t */\r\n\t\t\"bSmart\": true,\r\n\t\r\n\t\t/**\r\n\t\t * Flag to indicate if DataTables should only trigger a search when\r\n\t\t * the return key is pressed.\r\n\t\t *  @type boolean\r\n\t\t *  @default false\r\n\t\t */\r\n\t\t\"return\": false\r\n\t};\r\n\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Template object for the way in which DataTables holds information about\r\n\t\t * each individual row. This is the object format used for the settings\r\n\t\t * aoData array.\r\n\t\t *  @namespace\r\n\t\t */\r\n\t\tDataTable.models.oRow = {\r\n\t\t\t/**\r\n\t\t\t * TR element for the row\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTr\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of TD elements for each row. This is null until the row has been\r\n\t\t\t * created.\r\n\t\t\t *  @type array nodes\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"anCells\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Data object from the original data source for the row. This is either\r\n\t\t\t * an array if using the traditional form of DataTables, or an object if\r\n\t\t\t * using mData options. The exact type will depend on the passed in\r\n\t\t\t * data from the data source, or will be an array if using DOM a data\r\n\t\t\t * source.\r\n\t\t\t *  @type array|object\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"_aData\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Sorting data cache - this array is ostensibly the same length as the\r\n\t\t\t * number of columns (although each index is generated only as it is\r\n\t\t\t * needed), and holds the data that is used for sorting each column in the\r\n\t\t\t * row. We do this cache generation at the start of the sort in order that\r\n\t\t\t * the formatting of the sort data need be done only once for each cell\r\n\t\t\t * per sort. This array should not be read from or written to by anything\r\n\t\t\t * other than the master sorting methods.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default null\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_aSortData\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Per cell filtering data cache. As per the sort data cache, used to\r\n\t\t\t * increase the performance of the filtering in DataTables\r\n\t\t\t *  @type array\r\n\t\t\t *  @default null\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_aFilterData\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Filtering data cache. This is the same as the cell filtering cache, but\r\n\t\t\t * in this case a string rather than an array. This is easily computed with\r\n\t\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\r\n\t\t\t * needed on every search (memory traded for performance)\r\n\t\t\t *  @type array\r\n\t\t\t *  @default null\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_sFilterRow\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Cache of the class name that DataTables has applied to the row, so we\r\n\t\t\t * can quickly look at this variable rather than needing to do a DOM check\r\n\t\t\t * on className for the nTr property.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>Empty string</i>\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_sRowStripe\": \"\",\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Denote if the original data source was from the DOM, or the data source\r\n\t\t\t * object. This is used for invalidating data, so DataTables can\r\n\t\t\t * automatically read data from the original source, unless uninstructed\r\n\t\t\t * otherwise.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"src\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Index in the aoData array. This saves an indexOf lookup when we have the\r\n\t\t\t * object, but want to know the index\r\n\t\t\t *  @type integer\r\n\t\t\t *  @default -1\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"idx\": -1\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Template object for the column information object in DataTables. This object\r\n\t\t * is held in the settings aoColumns array and contains all the information that\r\n\t\t * DataTables needs about each individual column.\r\n\t\t *\r\n\t\t * Note that this object is related to {@link DataTable.defaults.column}\r\n\t\t * but this one is the internal data store for DataTables's cache of columns.\r\n\t\t * It should NOT be manipulated outside of DataTables. Any configuration should\r\n\t\t * be done through the initialisation options.\r\n\t\t *  @namespace\r\n\t\t */\r\n\t\tDataTable.models.oColumn = {\r\n\t\t\t/**\r\n\t\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it\r\n\t\t\t * is faster to just hold it as a variable\r\n\t\t\t *  @type integer\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"idx\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * A list of the columns that sorting should occur on when this column\r\n\t\t\t * is sorted. That this property is an array allows multi-column sorting\r\n\t\t\t * to be defined for a column (for example first name / last name columns\r\n\t\t\t * would benefit from this). The values are integers pointing to the\r\n\t\t\t * columns to be sorted on (typically it will be a single integer pointing\r\n\t\t\t * at itself, but that doesn't need to be the case).\r\n\t\t\t *  @type array\r\n\t\t\t */\r\n\t\t\t\"aDataSort\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Define the sorting directions that are applied to the column, in sequence\r\n\t\t\t * as the column is repeatedly sorted upon - i.e. the first value is used\r\n\t\t\t * as the sorting direction when the column if first sorted (clicked on).\r\n\t\t\t * Sort it again (click again) and it will move on to the next index.\r\n\t\t\t * Repeat until loop.\r\n\t\t\t *  @type array\r\n\t\t\t */\r\n\t\t\t\"asSorting\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Flag to indicate if the column is searchable, and thus should be included\r\n\t\t\t * in the filtering or not.\r\n\t\t\t *  @type boolean\r\n\t\t\t */\r\n\t\t\t\"bSearchable\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Flag to indicate if the column is sortable or not.\r\n\t\t\t *  @type boolean\r\n\t\t\t */\r\n\t\t\t\"bSortable\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Flag to indicate if the column is currently visible in the table or not\r\n\t\t\t *  @type boolean\r\n\t\t\t */\r\n\t\t\t\"bVisible\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store for manual type assignment using the `column.type` option. This\r\n\t\t\t * is held in store so we can manipulate the column's `sType` property.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_sManualType\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Flag to indicate if HTML5 data attributes should be used as the data\r\n\t\t\t * source for filtering or sorting. True is either are.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_bAttrSrc\": false,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\r\n\t\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n\t\t\t * allowing you to modify the DOM element (add background colour for example) when the\r\n\t\t\t * element is available.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {element} nTd The TD node that has been created\r\n\t\t\t *  @param {*} sData The Data for the cell\r\n\t\t\t *  @param {array|object} oData The data for the whole row\r\n\t\t\t *  @param {int} iRow The row index for the aoData data store\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"fnCreatedCell\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Function to get data from a cell in a column. You should <b>never</b>\r\n\t\t\t * access data directly through _aData internally in DataTables - always use\r\n\t\t\t * the method attached to this property. It allows mData to function as\r\n\t\t\t * required. This function is automatically assigned by the column\r\n\t\t\t * initialisation method\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {array|object} oData The data array/object for the array\r\n\t\t\t *    (i.e. aoData[]._aData)\r\n\t\t\t *  @param {string} sSpecific The specific data type you want to get -\r\n\t\t\t *    'display', 'type' 'filter' 'sort'\r\n\t\t\t *  @returns {*} The data for the cell from the given row's data\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"fnGetData\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Function to set data for a cell in the column. You should <b>never</b>\r\n\t\t\t * set the data directly to _aData internally in DataTables - always use\r\n\t\t\t * this method. It allows mData to function as required. This function\r\n\t\t\t * is automatically assigned by the column initialisation method\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {array|object} oData The data array/object for the array\r\n\t\t\t *    (i.e. aoData[]._aData)\r\n\t\t\t *  @param {*} sValue Value to set\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"fnSetData\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Property to read the value for the cells in the column from the data\r\n\t\t\t * source array / object. If null, then the default content is used, if a\r\n\t\t\t * function is given then the return from the function is used.\r\n\t\t\t *  @type function|int|string|null\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"mData\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Partner property to mData which is used (only when defined) to get\r\n\t\t\t * the data - i.e. it is basically the same as mData, but without the\r\n\t\t\t * 'set' option, and also the data fed to it is the result from mData.\r\n\t\t\t * This is the rendering method to match the data method of mData.\r\n\t\t\t *  @type function|int|string|null\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"mRender\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Unique header TH/TD element for this column - this is what the sorting\r\n\t\t\t * listener is attached to (if sorting is enabled.)\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTh\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Unique footer TH/TD element for this column (if there is one). Not used\r\n\t\t\t * in DataTables as such, but can be used for plug-ins to reference the\r\n\t\t\t * footer for each column.\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTf\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The class to apply to all TD elements in the table's TBODY for the column\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sClass\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When DataTables calculates the column widths to assign to each column,\r\n\t\t\t * it finds the longest string in each column and then constructs a\r\n\t\t\t * temporary table and reads the widths from that. The problem with this\r\n\t\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n\t\t\t * string - thus the calculation can go wrong (doing it properly and putting\r\n\t\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n\t\t\t * a \"work around\" we provide this option. It will append its value to the\r\n\t\t\t * text that is found to be the longest string for the column - i.e. padding.\r\n\t\t\t *  @type string\r\n\t\t\t */\r\n\t\t\t\"sContentPadding\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Allows a default value to be given for a column's data, and will be used\r\n\t\t\t * whenever a null data source is encountered (this can be because mData\r\n\t\t\t * is set to null, or because the data source itself is null).\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sDefaultContent\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Name for the column, allowing reference to the column by name as well as\r\n\t\t\t * by index (needs a lookup to work by name).\r\n\t\t\t *  @type string\r\n\t\t\t */\r\n\t\t\t\"sName\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Custom sorting data type - defines which of the available plug-ins in\r\n\t\t\t * afnSortData the custom sorting will use - if any is defined.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default std\r\n\t\t\t */\r\n\t\t\t\"sSortDataType\": 'std',\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Class to be applied to the header element when sorting on this column\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sSortingClass\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Class to be applied to the header element when sorting on this column -\r\n\t\t\t * when jQuery UI theming is used.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sSortingClassJUI\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Title of the column - what is seen in the TH element (nTh).\r\n\t\t\t *  @type string\r\n\t\t\t */\r\n\t\t\t\"sTitle\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Column sorting and filtering type\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sType\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Width of the column\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sWidth\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Width of the column when it was first \"encountered\"\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sWidthOrig\": null\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\t * Developer note: The properties of the object below are given in Hungarian\r\n\t\t * notation, that was used as the interface for DataTables prior to v1.10, however\r\n\t\t * from v1.10 onwards the primary interface is camel case. In order to avoid\r\n\t\t * breaking backwards compatibility utterly with this change, the Hungarian\r\n\t\t * version is still, internally the primary interface, but is is not documented\r\n\t\t * - hence the @name tags in each doc comment. This allows a Javascript function\r\n\t\t * to create a map from Hungarian notation to camel case (going the other direction\r\n\t\t * would require each property to be listed, which would add around 3K to the size\r\n\t\t * of DataTables, while this method is about a 0.5K hit).\r\n\t\t *\r\n\t\t * Ultimately this does pave the way for Hungarian notation to be dropped\r\n\t\t * completely, but that is a massive amount of work and will break current\r\n\t\t * installs (therefore is on-hold until v2).\r\n\t\t */\r\n\t\t\r\n\t\t/**\r\n\t\t * Initialisation options that can be given to DataTables at initialisation\r\n\t\t * time.\r\n\t\t *  @namespace\r\n\t\t */\r\n\t\tDataTable.defaults = {\r\n\t\t\t/**\r\n\t\t\t * An array of data to use for the table, passed in at initialisation which\r\n\t\t\t * will be used in preference to any data which is already in the DOM. This is\r\n\t\t\t * particularly useful for constructing tables purely in Javascript, for\r\n\t\t\t * example with a custom Ajax call.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.data\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using a 2D array data source\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"data\": [\r\n\t\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\r\n\t\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\r\n\t\t\t *        ],\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"title\": \"Engine\" },\r\n\t\t\t *          { \"title\": \"Browser\" },\r\n\t\t\t *          { \"title\": \"Platform\" },\r\n\t\t\t *          { \"title\": \"Version\" },\r\n\t\t\t *          { \"title\": \"Grade\" }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using an array of objects as a data source (`data`)\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"data\": [\r\n\t\t\t *          {\r\n\t\t\t *            \"engine\":   \"Trident\",\r\n\t\t\t *            \"browser\":  \"Internet Explorer 4.0\",\r\n\t\t\t *            \"platform\": \"Win 95+\",\r\n\t\t\t *            \"version\":  4,\r\n\t\t\t *            \"grade\":    \"X\"\r\n\t\t\t *          },\r\n\t\t\t *          {\r\n\t\t\t *            \"engine\":   \"Trident\",\r\n\t\t\t *            \"browser\":  \"Internet Explorer 5.0\",\r\n\t\t\t *            \"platform\": \"Win 95+\",\r\n\t\t\t *            \"version\":  5,\r\n\t\t\t *            \"grade\":    \"C\"\r\n\t\t\t *          }\r\n\t\t\t *        ],\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\r\n\t\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\r\n\t\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\r\n\t\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\r\n\t\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"aaData\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * If ordering is enabled, then DataTables will perform a first pass sort on\r\n\t\t\t * initialisation. You can define which column(s) the sort is performed\r\n\t\t\t * upon, and the sorting direction, with this variable. The `sorting` array\r\n\t\t\t * should contain an array for each column to be sorted initially containing\r\n\t\t\t * the column's index and a direction string ('asc' or 'desc').\r\n\t\t\t *  @type array\r\n\t\t\t *  @default [[0,'asc']]\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.order\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Sort by 3rd column first, and then 4th column\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"order\": [[2,'asc'], [3,'desc']]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *    // No initial sorting\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"order\": []\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"aaSorting\": [[0,'asc']],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This parameter is basically identical to the `sorting` parameter, but\r\n\t\t\t * cannot be overridden by user interaction with the table. What this means\r\n\t\t\t * is that you could have a column (visible or hidden) which the sorting\r\n\t\t\t * will always be forced on first - any sorting after that (from the user)\r\n\t\t\t * will then be performed as required. This can be useful for grouping rows\r\n\t\t\t * together.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.orderFixed\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"orderFixed\": [[0,'asc']]\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"aaSortingFixed\": [],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * DataTables can be instructed to load data to display in the table from a\r\n\t\t\t * Ajax source. This option defines how that Ajax call is made and where to.\r\n\t\t\t *\r\n\t\t\t * The `ajax` property has three different modes of operation, depending on\r\n\t\t\t * how it is defined. These are:\r\n\t\t\t *\r\n\t\t\t * * `string` - Set the URL from where the data should be loaded from.\r\n\t\t\t * * `object` - Define properties for `jQuery.ajax`.\r\n\t\t\t * * `function` - Custom data get function\r\n\t\t\t *\r\n\t\t\t * `string`\r\n\t\t\t * --------\r\n\t\t\t *\r\n\t\t\t * As a string, the `ajax` property simply defines the URL from which\r\n\t\t\t * DataTables will load data.\r\n\t\t\t *\r\n\t\t\t * `object`\r\n\t\t\t * --------\r\n\t\t\t *\r\n\t\t\t * As an object, the parameters in the object are passed to\r\n\t\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\r\n\t\t\t * of the Ajax request. DataTables has a number of default parameters which\r\n\t\t\t * you can override using this option. Please refer to the jQuery\r\n\t\t\t * documentation for a full description of the options available, although\r\n\t\t\t * the following parameters provide additional options in DataTables or\r\n\t\t\t * require special consideration:\r\n\t\t\t *\r\n\t\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it\r\n\t\t\t *   can also be used as a function to manipulate the data DataTables sends\r\n\t\t\t *   to the server. The function takes a single parameter, an object of\r\n\t\t\t *   parameters with the values that DataTables has readied for sending. An\r\n\t\t\t *   object may be returned which will be merged into the DataTables\r\n\t\t\t *   defaults, or you can add the items to the object that was passed in and\r\n\t\t\t *   not return anything from the function. This supersedes `fnServerParams`\r\n\t\t\t *   from DataTables 1.9-.\r\n\t\t\t *\r\n\t\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or\r\n\t\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\r\n\t\t\t *   from an Ajax source or for server-side processing - this parameter\r\n\t\t\t *   allows that property to be changed. You can use Javascript dotted\r\n\t\t\t *   object notation to get a data source for multiple levels of nesting, or\r\n\t\t\t *   it my be used as a function. As a function it takes a single parameter,\r\n\t\t\t *   the JSON returned from the server, which can be manipulated as\r\n\t\t\t *   required, with the returned value being that used by DataTables as the\r\n\t\t\t *   data source for the table. This supersedes `sAjaxDataProp` from\r\n\t\t\t *   DataTables 1.9-.\r\n\t\t\t *\r\n\t\t\t * * `success` - Should not be overridden it is used internally in\r\n\t\t\t *   DataTables. To manipulate / transform the data returned by the server\r\n\t\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\r\n\t\t\t *\r\n\t\t\t * `function`\r\n\t\t\t * ----------\r\n\t\t\t *\r\n\t\t\t * As a function, making the Ajax call is left up to yourself allowing\r\n\t\t\t * complete control of the Ajax request. Indeed, if desired, a method other\r\n\t\t\t * than Ajax could be used to obtain the required data, such as Web storage\r\n\t\t\t * or an AIR database.\r\n\t\t\t *\r\n\t\t\t * The function is given four parameters and no return is required. The\r\n\t\t\t * parameters are:\r\n\t\t\t *\r\n\t\t\t * 1. _object_ - Data to send to the server\r\n\t\t\t * 2. _function_ - Callback function that must be executed when the required\r\n\t\t\t *    data has been obtained. That data should be passed into the callback\r\n\t\t\t *    as the only parameter\r\n\t\t\t * 3. _object_ - DataTables settings object for the table\r\n\t\t\t *\r\n\t\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.\r\n\t\t\t *\r\n\t\t\t *  @type string|object|function\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.ajax\r\n\t\t\t *  @since 1.10.0\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Get JSON data from a file via Ajax.\r\n\t\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": \"data.json\"\r\n\t\t\t *   } );\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change\r\n\t\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": {\r\n\t\t\t *       \"url\": \"data.json\",\r\n\t\t\t *       \"dataSrc\": \"tableData\"\r\n\t\t\t *     }\r\n\t\t\t *   } );\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\r\n\t\t\t *   // from a plain array rather than an array in an object\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": {\r\n\t\t\t *       \"url\": \"data.json\",\r\n\t\t\t *       \"dataSrc\": \"\"\r\n\t\t\t *     }\r\n\t\t\t *   } );\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Manipulate the data returned from the server - add a link to data\r\n\t\t\t *   // (note this can, should, be done using `render` for the column - this\r\n\t\t\t *   // is just a simple example of how the data can be manipulated).\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": {\r\n\t\t\t *       \"url\": \"data.json\",\r\n\t\t\t *       \"dataSrc\": function ( json ) {\r\n\t\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\r\n\t\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\r\n\t\t\t *         }\r\n\t\t\t *         return json;\r\n\t\t\t *       }\r\n\t\t\t *     }\r\n\t\t\t *   } );\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Add data to the request\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": {\r\n\t\t\t *       \"url\": \"data.json\",\r\n\t\t\t *       \"data\": function ( d ) {\r\n\t\t\t *         return {\r\n\t\t\t *           \"extra_search\": $('#extra').val()\r\n\t\t\t *         };\r\n\t\t\t *       }\r\n\t\t\t *     }\r\n\t\t\t *   } );\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Send request as POST\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": {\r\n\t\t\t *       \"url\": \"data.json\",\r\n\t\t\t *       \"type\": \"POST\"\r\n\t\t\t *     }\r\n\t\t\t *   } );\r\n\t\t\t *\r\n\t\t\t * @example\r\n\t\t\t *   // Get the data from localStorage (could interface with a form for\r\n\t\t\t *   // adding, editing and removing rows).\r\n\t\t\t *   $('#example').dataTable( {\r\n\t\t\t *     \"ajax\": function (data, callback, settings) {\r\n\t\t\t *       callback(\r\n\t\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\r\n\t\t\t *       );\r\n\t\t\t *     }\r\n\t\t\t *   } );\r\n\t\t\t */\r\n\t\t\t\"ajax\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This parameter allows you to readily specify the entries in the length drop\r\n\t\t\t * down menu that DataTables shows when pagination is enabled. It can be\r\n\t\t\t * either a 1D array of options which will be used for both the displayed\r\n\t\t\t * option and the value, or a 2D array which will use the array in the first\r\n\t\t\t * position as the value, and the array in the second position as the\r\n\t\t\t * displayed options (useful for language strings such as 'All').\r\n\t\t\t *\r\n\t\t\t * Note that the `pageLength` property will be automatically set to the\r\n\t\t\t * first value given in this array, unless `pageLength` is also provided.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default [ 10, 25, 50, 100 ]\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.lengthMenu\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The `columns` option in the initialisation parameter allows you to define\r\n\t\t\t * details about the way individual columns behave. For a full list of\r\n\t\t\t * column options that can be set, please see\r\n\t\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\r\n\t\t\t * define your columns, you must have an entry in the array for every single\r\n\t\t\t * column that you have in your table (these can be null if you don't which\r\n\t\t\t * to specify any options).\r\n\t\t\t *  @member\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column\r\n\t\t\t */\r\n\t\t\t\"aoColumns\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific\r\n\t\t\t * column, multiple columns, or all columns, using the `targets` property of\r\n\t\t\t * each object in the array. This allows great flexibility when creating\r\n\t\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the\r\n\t\t\t * columns you specifically want. `columnDefs` may use any of the column\r\n\t\t\t * options available: {@link DataTable.defaults.column}, but it _must_\r\n\t\t\t * have `targets` defined in each object in the array. Values in the `targets`\r\n\t\t\t * array may be:\r\n\t\t\t *   <ul>\r\n\t\t\t *     <li>a string - class name will be matched on the TH for the column</li>\r\n\t\t\t *     <li>0 or a positive integer - column index counting from the left</li>\r\n\t\t\t *     <li>a negative integer - column index counting from the right</li>\r\n\t\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\r\n\t\t\t *   </ul>\r\n\t\t\t *  @member\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.columnDefs\r\n\t\t\t */\r\n\t\t\t\"aoColumnDefs\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Basically the same as `search`, this parameter defines the individual column\r\n\t\t\t * filtering state at initialisation time. The array must be of the same size\r\n\t\t\t * as the number of columns, and each element be an object with the parameters\r\n\t\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\r\n\t\t\t * accepted and the default will be used.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.searchCols\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"searchCols\": [\r\n\t\t\t *          null,\r\n\t\t\t *          { \"search\": \"My filter\" },\r\n\t\t\t *          null,\r\n\t\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"aoSearchCols\": [],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * An array of CSS classes that should be applied to displayed rows. This\r\n\t\t\t * array may be of any length, and DataTables will apply each class\r\n\t\t\t * sequentially, looping when required.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`\r\n\t\t\t *    options</i>\r\n\t\t\t *\r\n\t\t\t *  @dtopt Option\r\n\t\t\t *  @name DataTable.defaults.stripeClasses\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"asStripeClasses\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable automatic column width calculation. This can be disabled\r\n\t\t\t * as an optimisation (it takes some time to calculate the widths) if the\r\n\t\t\t * tables widths are passed in using `columns`.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.autoWidth\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"autoWidth\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bAutoWidth\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Deferred rendering can provide DataTables with a huge speed boost when you\r\n\t\t\t * are using an Ajax or JS data source for the table. This option, when set to\r\n\t\t\t * true, will cause DataTables to defer the creation of the table elements for\r\n\t\t\t * each row until they are needed for a draw - saving a significant amount of\r\n\t\t\t * time.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.deferRender\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"ajax\": \"sources/arrays.txt\",\r\n\t\t\t *        \"deferRender\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bDeferRender\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Replace a DataTable which matches the given selector and replace it with\r\n\t\t\t * one which has the properties of the new initialisation object passed. If no\r\n\t\t\t * table matches the selector, then the new DataTable will be constructed as\r\n\t\t\t * per normal.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.destroy\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"srollY\": \"200px\",\r\n\t\t\t *        \"paginate\": false\r\n\t\t\t *      } );\r\n\t\t\t *\r\n\t\t\t *      // Some time later....\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"filter\": false,\r\n\t\t\t *        \"destroy\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bDestroy\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\r\n\t\t\t * that it allows the end user to input multiple words (space separated) and\r\n\t\t\t * will match a row containing those words, even if not in the order that was\r\n\t\t\t * specified (this allow matching across multiple columns). Note that if you\r\n\t\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the\r\n\t\t\t * default filtering input box and retain filtering abilities, please use\r\n\t\t\t * {@link DataTable.defaults.dom}.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.searching\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"searching\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bFilter\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable the table information display. This shows information\r\n\t\t\t * about the data that is currently visible on the page, including information\r\n\t\t\t * about filtered data if that action is being performed.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.info\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"info\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bInfo\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Allows the end user to select the size of a formatted page from a select\r\n\t\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.lengthChange\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"lengthChange\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bLengthChange\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable pagination.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.paging\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"paging\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bPaginate\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable the display of a 'processing' indicator when the table is\r\n\t\t\t * being processed (e.g. a sort). This is particularly useful for tables with\r\n\t\t\t * large amounts of data where it can take a noticeable amount of time to sort\r\n\t\t\t * the entries.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.processing\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"processing\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bProcessing\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Retrieve the DataTables object for the given selector. Note that if the\r\n\t\t\t * table has already been initialised, this parameter will cause DataTables\r\n\t\t\t * to simply return the object that has already been set up - it will not take\r\n\t\t\t * account of any changes you might have made to the initialisation object\r\n\t\t\t * passed to DataTables (setting this parameter to true is an acknowledgement\r\n\t\t\t * that you understand this). `destroy` can be used to reinitialise a table if\r\n\t\t\t * you need.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.retrieve\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      initTable();\r\n\t\t\t *      tableActions();\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *    function initTable ()\r\n\t\t\t *    {\r\n\t\t\t *      return $('#example').dataTable( {\r\n\t\t\t *        \"scrollY\": \"200px\",\r\n\t\t\t *        \"paginate\": false,\r\n\t\t\t *        \"retrieve\": true\r\n\t\t\t *      } );\r\n\t\t\t *    }\r\n\t\t\t *\r\n\t\t\t *    function tableActions ()\r\n\t\t\t *    {\r\n\t\t\t *      var table = initTable();\r\n\t\t\t *      // perform API operations with oTable\r\n\t\t\t *    }\r\n\t\t\t */\r\n\t\t\t\"bRetrieve\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of\r\n\t\t\t * the table's viewport to the given height at all times (useful for layout).\r\n\t\t\t * However, this can look odd when filtering data down to a small data set,\r\n\t\t\t * and the footer is left \"floating\" further down. This parameter (when\r\n\t\t\t * enabled) will cause DataTables to collapse the table's viewport down when\r\n\t\t\t * the result set will fit within the given Y height.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.scrollCollapse\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"scrollY\": \"200\",\r\n\t\t\t *        \"scrollCollapse\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bScrollCollapse\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Configure DataTables to use server-side processing. Note that the\r\n\t\t\t * `ajax` parameter must also be given in order to give DataTables a\r\n\t\t\t * source to obtain the required data for each draw.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @dtopt Server-side\r\n\t\t\t *  @name DataTable.defaults.serverSide\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"serverSide\": true,\r\n\t\t\t *        \"ajax\": \"xhr.php\"\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bServerSide\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable sorting of columns. Sorting of individual columns can be\r\n\t\t\t * disabled by the `sortable` option for each column.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.ordering\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"ordering\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bSort\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or display DataTables' ability to sort multiple columns at the\r\n\t\t\t * same time (activated by shift-click by the user).\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.orderMulti\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Disable multiple column sorting ability\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"orderMulti\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bSortMulti\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Allows control over whether DataTables should use the top (true) unique\r\n\t\t\t * cell that is found for a single column, or the bottom (false - default).\r\n\t\t\t * This is useful when using complex headers.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.orderCellsTop\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"orderCellsTop\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bSortCellsTop\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\r\n\t\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is\r\n\t\t\t * presented as a feature switch as it can increase processing time (while\r\n\t\t\t * classes are removed and added) so for large data sets you might want to\r\n\t\t\t * turn this off.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.orderClasses\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"orderClasses\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bSortClasses\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\r\n\t\t\t * used to save table display information such as pagination information,\r\n\t\t\t * display length, filtering and sorting. As such when the end user reloads\r\n\t\t\t * the page the display display will match what thy had previously set up.\r\n\t\t\t *\r\n\t\t\t * Due to the use of `localStorage` the default state saving is not supported\r\n\t\t\t * in IE6 or 7. If state saving is required in those browsers, use\r\n\t\t\t * `stateSaveCallback` to provide a storage solution such as cookies.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.stateSave\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function () {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bStateSave\": false,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This function is called when a TR element is created (and all TD child\r\n\t\t\t * elements have been inserted), or registered if using a DOM source, allowing\r\n\t\t\t * manipulation of the TR element (adding classes etc).\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {node} row \"TR\" element for the current row\r\n\t\t\t *  @param {array} data Raw data array for this row\r\n\t\t\t *  @param {int} dataIndex The index of this row in the internal aoData array\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.createdRow\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"createdRow\": function( row, data, dataIndex ) {\r\n\t\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t\t *          if ( data[4] == \"A\" )\r\n\t\t\t *          {\r\n\t\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t\t *          }\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnCreatedRow\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This function is called on every 'draw' event, and allows you to\r\n\t\t\t * dynamically modify any aspect you want about the created DOM.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.drawCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"drawCallback\": function( settings ) {\r\n\t\t\t *          alert( 'DataTables has redrawn the table' );\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnDrawCallback\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Identical to fnHeaderCallback() but for the table footer this function\r\n\t\t\t * allows you to modify the table footer on every 'draw' event.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {node} foot \"TR\" element for the footer\r\n\t\t\t *  @param {array} data Full table data (as derived from the original HTML)\r\n\t\t\t *  @param {int} start Index for the current display starting point in the\r\n\t\t\t *    display array\r\n\t\t\t *  @param {int} end Index for the current display ending point in the\r\n\t\t\t *    display array\r\n\t\t\t *  @param {array int} display Index array to translate the visual position\r\n\t\t\t *    to the full data array\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.footerCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\r\n\t\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"fnFooterCallback\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When rendering large numbers in the information element for the table\r\n\t\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\r\n\t\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\r\n\t\t\t * rendered as \"1,000,000\") to help readability for the end user. This\r\n\t\t\t * function will override the default method DataTables uses.\r\n\t\t\t *  @type function\r\n\t\t\t *  @member\r\n\t\t\t *  @param {int} toFormat number to be formatted\r\n\t\t\t *  @returns {string} formatted string for DataTables to show the number\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.formatNumber\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Format a number using a single quote for the separator (note that\r\n\t\t\t *    // this can also be done with the language.thousands option)\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"formatNumber\": function ( toFormat ) {\r\n\t\t\t *          return toFormat.toString().replace(\r\n\t\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\r\n\t\t\t *          );\r\n\t\t\t *        };\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnFormatNumber\": function ( toFormat ) {\r\n\t\t\t\treturn toFormat.toString().replace(\r\n\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,\r\n\t\t\t\t\tthis.oLanguage.sThousands\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This function is called on every 'draw' event, and allows you to\r\n\t\t\t * dynamically modify the header row. This can be used to calculate and\r\n\t\t\t * display useful information about the table.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {node} head \"TR\" element for the header\r\n\t\t\t *  @param {array} data Full table data (as derived from the original HTML)\r\n\t\t\t *  @param {int} start Index for the current display starting point in the\r\n\t\t\t *    display array\r\n\t\t\t *  @param {int} end Index for the current display ending point in the\r\n\t\t\t *    display array\r\n\t\t\t *  @param {array int} display Index array to translate the visual position\r\n\t\t\t *    to the full data array\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.headerCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\r\n\t\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"fnHeaderCallback\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The information element can be used to convey information about the current\r\n\t\t\t * state of the table. Although the internationalisation options presented by\r\n\t\t\t * DataTables are quite capable of dealing with most customisations, there may\r\n\t\t\t * be times where you wish to customise the string further. This callback\r\n\t\t\t * allows you to do exactly that.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} oSettings DataTables settings object\r\n\t\t\t *  @param {int} start Starting position in data for the draw\r\n\t\t\t *  @param {int} end End position in data for the draw\r\n\t\t\t *  @param {int} max Total number of rows in the table (regardless of\r\n\t\t\t *    filtering)\r\n\t\t\t *  @param {int} total Total number of rows in the data set, after filtering\r\n\t\t\t *  @param {string} pre The string that DataTables has formatted using it's\r\n\t\t\t *    own rules\r\n\t\t\t *  @returns {string} The string to be displayed in the information element.\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.infoCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $('#example').dataTable( {\r\n\t\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n\t\t\t *        return start +\" to \"+ end;\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnInfoCallback\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Called when the table has been initialised. Normally DataTables will\r\n\t\t\t * initialise sequentially and there will be no need for this function,\r\n\t\t\t * however, this does not hold true when using external language information\r\n\t\t\t * since that is obtained using an async XHR call.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @param {object} json The JSON object request from the server - only\r\n\t\t\t *    present if client-side Ajax sourced data is used\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.initComplete\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"initComplete\": function(settings, json) {\r\n\t\t\t *          alert( 'DataTables has finished its initialisation.' );\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"fnInitComplete\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Called at the very start of each table draw and can be used to cancel the\r\n\t\t\t * draw by returning false, any other return (including undefined) results in\r\n\t\t\t * the full draw occurring).\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @returns {boolean} False will cancel the draw, anything else (including no\r\n\t\t\t *    return) will allow it to complete.\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.preDrawCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"preDrawCallback\": function( settings ) {\r\n\t\t\t *          if ( $('#test').val() == 1 ) {\r\n\t\t\t *            return false;\r\n\t\t\t *          }\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnPreDrawCallback\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This function allows you to 'post process' each row after it have been\r\n\t\t\t * generated for each table draw, but before it is rendered on screen. This\r\n\t\t\t * function might be used for setting the row class name etc.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {node} row \"TR\" element for the current row\r\n\t\t\t *  @param {array} data Raw data array for this row\r\n\t\t\t *  @param {int} displayIndex The display index for the current table draw\r\n\t\t\t *  @param {int} displayIndexFull The index of the data in the full list of\r\n\t\t\t *    rows (after filtering)\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.rowCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\r\n\t\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t\t *          if ( data[4] == \"A\" ) {\r\n\t\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t\t *          }\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnRowCallback\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * __Deprecated__ The functionality provided by this parameter has now been\r\n\t\t\t * superseded by that provided through `ajax`, which should be used instead.\r\n\t\t\t *\r\n\t\t\t * This parameter allows you to override the default function which obtains\r\n\t\t\t * the data from the server so something more suitable for your application.\r\n\t\t\t * For example you could use POST data, or pull information from a Gears or\r\n\t\t\t * AIR database.\r\n\t\t\t *  @type function\r\n\t\t\t *  @member\r\n\t\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)\r\n\t\t\t *  @param {array} data A key/value pair object containing the data to send\r\n\t\t\t *    to the server\r\n\t\t\t *  @param {function} callback to be called on completion of the data get\r\n\t\t\t *    process that will draw the data on the page.\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @dtopt Server-side\r\n\t\t\t *  @name DataTable.defaults.serverData\r\n\t\t\t *\r\n\t\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n\t\t\t */\r\n\t\t\t\"fnServerData\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * __Deprecated__ The functionality provided by this parameter has now been\r\n\t\t\t * superseded by that provided through `ajax`, which should be used instead.\r\n\t\t\t *\r\n\t\t\t *  It is often useful to send extra data to the server when making an Ajax\r\n\t\t\t * request - for example custom filtering information, and this callback\r\n\t\t\t * function makes it trivial to send extra information to the server. The\r\n\t\t\t * passed in parameter is the data set that has been constructed by\r\n\t\t\t * DataTables, and you can add to this or modify it as you require.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {array} data Data array (array of objects which are name/value\r\n\t\t\t *    pairs) that has been constructed by DataTables and will be sent to the\r\n\t\t\t *    server. In the case of Ajax sourced data with server-side processing\r\n\t\t\t *    this will be an empty array, for server-side processing there will be a\r\n\t\t\t *    significant number of parameters!\r\n\t\t\t *  @returns {undefined} Ensure that you modify the data array passed in,\r\n\t\t\t *    as this is passed by reference.\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @dtopt Server-side\r\n\t\t\t *  @name DataTable.defaults.serverParams\r\n\t\t\t *\r\n\t\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n\t\t\t */\r\n\t\t\t\"fnServerParams\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Load the table state. With this function you can define from where, and how, the\r\n\t\t\t * state of a table is loaded. By default DataTables will load from `localStorage`\r\n\t\t\t * but you might wish to use a server-side database or cookies.\r\n\t\t\t *  @type function\r\n\t\t\t *  @member\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @param {object} callback Callback that can be executed when done. It\r\n\t\t\t *    should be passed the loaded state object.\r\n\t\t\t *  @return {object} The DataTables state object to be loaded\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.stateLoadCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true,\r\n\t\t\t *        \"stateLoadCallback\": function (settings, callback) {\r\n\t\t\t *          $.ajax( {\r\n\t\t\t *            \"url\": \"/state_load\",\r\n\t\t\t *            \"dataType\": \"json\",\r\n\t\t\t *            \"success\": function (json) {\r\n\t\t\t *              callback( json );\r\n\t\t\t *            }\r\n\t\t\t *          } );\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnStateLoadCallback\": function ( settings ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\treturn JSON.parse(\r\n\t\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\r\n\t\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treturn {};\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback which allows modification of the saved state prior to loading that state.\r\n\t\t\t * This callback is called when the table is loading state from the stored data, but\r\n\t\t\t * prior to the settings object being modified by the saved state. Note that for\r\n\t\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\r\n\t\t\t * a plug-in.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @param {object} data The state object that is to be loaded\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.stateLoadParams\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Remove a saved filter, so filtering is never loaded\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true,\r\n\t\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Disallow state loading by returning false\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true,\r\n\t\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t\t *          return false;\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnStateLoadParams\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback that is called when the state has been loaded from the state saving method\r\n\t\t\t * and the DataTables settings object has been modified as a result of the loaded state.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @param {object} data The state object that was loaded\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.stateLoaded\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Show an alert with the filtering value that was saved\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true,\r\n\t\t\t *        \"stateLoaded\": function (settings, data) {\r\n\t\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnStateLoaded\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Save the table state. This function allows you to define where and how the state\r\n\t\t\t * information for the table is stored By default DataTables will use `localStorage`\r\n\t\t\t * but you might wish to use a server-side database or cookies.\r\n\t\t\t *  @type function\r\n\t\t\t *  @member\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @param {object} data The state object to be saved\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.stateSaveCallback\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true,\r\n\t\t\t *        \"stateSaveCallback\": function (settings, data) {\r\n\t\t\t *          // Send an Ajax request to the server with the state object\r\n\t\t\t *          $.ajax( {\r\n\t\t\t *            \"url\": \"/state_save\",\r\n\t\t\t *            \"data\": data,\r\n\t\t\t *            \"dataType\": \"json\",\r\n\t\t\t *            \"method\": \"POST\"\r\n\t\t\t *            \"success\": function () {}\r\n\t\t\t *          } );\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnStateSaveCallback\": function ( settings, data ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\r\n\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,\r\n\t\t\t\t\t\tJSON.stringify( data )\r\n\t\t\t\t\t);\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback which allows modification of the state to be saved. Called when the table\r\n\t\t\t * has changed state a new state save is required. This method allows modification of\r\n\t\t\t * the state saving object prior to actually doing the save, including addition or\r\n\t\t\t * other state properties or modification. Note that for plug-in authors, you should\r\n\t\t\t * use the `stateSaveParams` event to save parameters for a plug-in.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {object} settings DataTables settings object\r\n\t\t\t *  @param {object} data The state object to be saved\r\n\t\t\t *\r\n\t\t\t *  @dtopt Callbacks\r\n\t\t\t *  @name DataTable.defaults.stateSaveParams\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Remove a saved filter, so filtering is never saved\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateSave\": true,\r\n\t\t\t *        \"stateSaveParams\": function (settings, data) {\r\n\t\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnStateSaveParams\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Duration for which the saved state information is considered valid. After this period\r\n\t\t\t * has elapsed the state will be returned to the default.\r\n\t\t\t * Value is given in seconds.\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 7200 <i>(2 hours)</i>\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.stateDuration\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"stateDuration\": 60*60*24; // 1 day\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"iStateDuration\": 7200,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When enabled DataTables will not make a request to the server for the first\r\n\t\t\t * page draw - rather it will use the data already on the page (no sorting etc\r\n\t\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`\r\n\t\t\t * is used to indicate that deferred loading is required, but it is also used\r\n\t\t\t * to tell DataTables how many records there are in the full table (allowing\r\n\t\t\t * the information element and pagination to be displayed correctly). In the case\r\n\t\t\t * where a filtering is applied to the table on initial load, this can be\r\n\t\t\t * indicated by giving the parameter as an array, where the first element is\r\n\t\t\t * the number of records available after filtering and the second element is the\r\n\t\t\t * number of records without filtering (allowing the table information element\r\n\t\t\t * to be shown correctly).\r\n\t\t\t *  @type int | array\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.deferLoading\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // 57 records available in the table, no filtering applied\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"serverSide\": true,\r\n\t\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t\t *        \"deferLoading\": 57\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"serverSide\": true,\r\n\t\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t\t *        \"deferLoading\": [ 57, 100 ],\r\n\t\t\t *        \"search\": {\r\n\t\t\t *          \"search\": \"my_filter\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"iDeferLoading\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Number of rows to display on a single page when using pagination. If\r\n\t\t\t * feature enabled (`lengthChange`) then the end user will be able to override\r\n\t\t\t * this to a custom setting using a pop-up menu.\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 10\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.pageLength\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"pageLength\": 50\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"iDisplayLength\": 10,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Define the starting point for data display when using DataTables with\r\n\t\t\t * pagination. Note that this parameter is the number of records, rather than\r\n\t\t\t * the page number, so if you have 10 records per page and want to start on\r\n\t\t\t * the third page, it should be \"20\".\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.displayStart\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"displayStart\": 20\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"iDisplayStart\": 0,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\r\n\t\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This\r\n\t\t\t * allows you to tab through the controls and press the enter key to activate them.\r\n\t\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\r\n\t\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to\r\n\t\t\t * disable built-in keyboard navigation.\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.tabIndex\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"tabIndex\": 1\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"iTabIndex\": 0,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Classes that DataTables assigns to the various components and features\r\n\t\t\t * that it adds to the HTML table. This allows classes to be configured\r\n\t\t\t * during initialisation in addition to through the static\r\n\t\t\t * {@link DataTable.ext.oStdClasses} object).\r\n\t\t\t *  @namespace\r\n\t\t\t *  @name DataTable.defaults.classes\r\n\t\t\t */\r\n\t\t\t\"oClasses\": {},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * All strings that DataTables uses in the user interface that it creates\r\n\t\t\t * are defined in this object, allowing you to modified them individually or\r\n\t\t\t * completely replace them all as required.\r\n\t\t\t *  @namespace\r\n\t\t\t *  @name DataTable.defaults.language\r\n\t\t\t */\r\n\t\t\t\"oLanguage\": {\r\n\t\t\t\t/**\r\n\t\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\r\n\t\t\t\t * actually visible on the page, but will be read by screenreaders, and thus\r\n\t\t\t\t * must be internationalised as well).\r\n\t\t\t\t *  @namespace\r\n\t\t\t\t *  @name DataTable.defaults.language.aria\r\n\t\t\t\t */\r\n\t\t\t\t\"oAria\": {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * ARIA label that is added to the table headers when the column may be\r\n\t\t\t\t\t * sorted ascending by activing the column (click or return when focused).\r\n\t\t\t\t\t * Note that the column header is prefixed to this string.\r\n\t\t\t\t\t *  @type string\r\n\t\t\t\t\t *  @default : activate to sort column ascending\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @dtopt Language\r\n\t\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @example\r\n\t\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t\t *        \"language\": {\r\n\t\t\t\t\t *          \"aria\": {\r\n\t\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\r\n\t\t\t\t\t *          }\r\n\t\t\t\t\t *        }\r\n\t\t\t\t\t *      } );\r\n\t\t\t\t\t *    } );\r\n\t\t\t\t\t */\r\n\t\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",\r\n\t\t\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * ARIA label that is added to the table headers when the column may be\r\n\t\t\t\t\t * sorted descending by activing the column (click or return when focused).\r\n\t\t\t\t\t * Note that the column header is prefixed to this string.\r\n\t\t\t\t\t *  @type string\r\n\t\t\t\t\t *  @default : activate to sort column ascending\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @dtopt Language\r\n\t\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @example\r\n\t\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t\t *        \"language\": {\r\n\t\t\t\t\t *          \"aria\": {\r\n\t\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\r\n\t\t\t\t\t *          }\r\n\t\t\t\t\t *        }\r\n\t\t\t\t\t *      } );\r\n\t\t\t\t\t *    } );\r\n\t\t\t\t\t */\r\n\t\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"\r\n\t\t\t\t},\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Pagination string used by DataTables for the built-in pagination\r\n\t\t\t\t * control types.\r\n\t\t\t\t *  @namespace\r\n\t\t\t\t *  @name DataTable.defaults.language.paginate\r\n\t\t\t\t */\r\n\t\t\t\t\"oPaginate\": {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\r\n\t\t\t\t\t * button to take the user to the first page.\r\n\t\t\t\t\t *  @type string\r\n\t\t\t\t\t *  @default First\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @dtopt Language\r\n\t\t\t\t\t *  @name DataTable.defaults.language.paginate.first\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @example\r\n\t\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t\t *        \"language\": {\r\n\t\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t\t *            \"first\": \"First page\"\r\n\t\t\t\t\t *          }\r\n\t\t\t\t\t *        }\r\n\t\t\t\t\t *      } );\r\n\t\t\t\t\t *    } );\r\n\t\t\t\t\t */\r\n\t\t\t\t\t\"sFirst\": \"First\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\r\n\t\t\t\t\t * button to take the user to the last page.\r\n\t\t\t\t\t *  @type string\r\n\t\t\t\t\t *  @default Last\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @dtopt Language\r\n\t\t\t\t\t *  @name DataTable.defaults.language.paginate.last\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @example\r\n\t\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t\t *        \"language\": {\r\n\t\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t\t *            \"last\": \"Last page\"\r\n\t\t\t\t\t *          }\r\n\t\t\t\t\t *        }\r\n\t\t\t\t\t *      } );\r\n\t\t\t\t\t *    } );\r\n\t\t\t\t\t */\r\n\t\t\t\t\t\"sLast\": \"Last\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the\r\n\t\t\t\t\t * next page).\r\n\t\t\t\t\t *  @type string\r\n\t\t\t\t\t *  @default Next\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @dtopt Language\r\n\t\t\t\t\t *  @name DataTable.defaults.language.paginate.next\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @example\r\n\t\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t\t *        \"language\": {\r\n\t\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t\t *            \"next\": \"Next page\"\r\n\t\t\t\t\t *          }\r\n\t\t\t\t\t *        }\r\n\t\t\t\t\t *      } );\r\n\t\t\t\t\t *    } );\r\n\t\t\t\t\t */\r\n\t\t\t\t\t\"sNext\": \"Next\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to\r\n\t\t\t\t\t * the previous page).\r\n\t\t\t\t\t *  @type string\r\n\t\t\t\t\t *  @default Previous\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @dtopt Language\r\n\t\t\t\t\t *  @name DataTable.defaults.language.paginate.previous\r\n\t\t\t\t\t *\r\n\t\t\t\t\t *  @example\r\n\t\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t\t *        \"language\": {\r\n\t\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t\t *            \"previous\": \"Previous page\"\r\n\t\t\t\t\t *          }\r\n\t\t\t\t\t *        }\r\n\t\t\t\t\t *      } );\r\n\t\t\t\t\t *    } );\r\n\t\t\t\t\t */\r\n\t\t\t\t\t\"sPrevious\": \"Previous\"\r\n\t\t\t\t},\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * This string is shown in preference to `zeroRecords` when the table is\r\n\t\t\t\t * empty of data (regardless of filtering). Note that this is an optional\r\n\t\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\r\n\t\t\t\t * instead (either the default or given value).\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default No data available in table\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.emptyTable\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"emptyTable\": \"No data available in table\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sEmptyTable\": \"No data available in table\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * This string gives information to the end user about the information\r\n\t\t\t\t * that is current on display on the page. The following tokens can be\r\n\t\t\t\t * used in the string and will be dynamically replaced as the table\r\n\t\t\t\t * display updates. This tokens can be placed anywhere in the string, or\r\n\t\t\t\t * removed as needed by the language requires:\r\n\t\t\t\t *\r\n\t\t\t\t * * `\\_START\\_` - Display index of the first record on the current page\r\n\t\t\t\t * * `\\_END\\_` - Display index of the last record on the current page\r\n\t\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\r\n\t\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\r\n\t\t\t\t * * `\\_PAGE\\_` - Current page number\r\n\t\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\r\n\t\t\t\t *\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.info\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Display information string for when the table is empty. Typically the\r\n\t\t\t\t * format of this string should match `info`.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default Showing 0 to 0 of 0 entries\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.infoEmpty\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"infoEmpty\": \"No entries to show\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * When a user filters the information in a table, this string is appended\r\n\t\t\t\t * to the information (`info`) to give an idea of how strong the filtering\r\n\t\t\t\t * is. The variable _MAX_ is dynamically updated.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default (filtered from _MAX_ total entries)\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.infoFiltered\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * If can be useful to append extra information to the info string at times,\r\n\t\t\t\t * and this variable does exactly that. This information will be appended to\r\n\t\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\r\n\t\t\t\t * being used) at all times.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default <i>Empty string</i>\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.infoPostFix\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sInfoPostFix\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * This decimal place operator is a little different from the other\r\n\t\t\t\t * language options since DataTables doesn't output floating point\r\n\t\t\t\t * numbers, so it won't ever use this for display of a number. Rather,\r\n\t\t\t\t * what this parameter does is modify the sort methods of the table so\r\n\t\t\t\t * that numbers which are in a format which has a character other than\r\n\t\t\t\t * a period (`.`) as a decimal place will be sorted numerically.\r\n\t\t\t\t *\r\n\t\t\t\t * Note that numbers with different decimal places cannot be shown in\r\n\t\t\t\t * the same table and still be sortable, the table must be consistent.\r\n\t\t\t\t * However, multiple different tables on the page can use different\r\n\t\t\t\t * decimal place characters.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default \r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.decimal\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"decimal\": \",\"\r\n\t\t\t\t *          \"thousands\": \".\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sDecimal\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is\r\n\t\t\t\t * used to format large numbers that are used in the table information.\r\n\t\t\t\t * By default a comma is used, but this can be trivially changed to any\r\n\t\t\t\t * character you wish with this parameter.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default ,\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.thousands\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"thousands\": \"'\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sThousands\": \",\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Detail the action that will be taken when the drop down menu for the\r\n\t\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced\r\n\t\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\r\n\t\t\t\t * with a custom select box if required.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default Show _MENU_ entries\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.lengthMenu\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Language change only\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Language and options change\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"lengthMenu\": 'Display <select>'+\r\n\t\t\t\t *            '<option value=\"10\">10</option>'+\r\n\t\t\t\t *            '<option value=\"20\">20</option>'+\r\n\t\t\t\t *            '<option value=\"30\">30</option>'+\r\n\t\t\t\t *            '<option value=\"40\">40</option>'+\r\n\t\t\t\t *            '<option value=\"50\">50</option>'+\r\n\t\t\t\t *            '<option value=\"-1\">All</option>'+\r\n\t\t\t\t *            '</select> records'\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * When using Ajax sourced data and during the first draw when DataTables is\r\n\t\t\t\t * gathering the data, this message is shown in an empty row in the table to\r\n\t\t\t\t * indicate to the end user the the data is being loaded. Note that this\r\n\t\t\t\t * parameter is not used when loading data by server-side processing, just\r\n\t\t\t\t * Ajax sourced data with client-side processing.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default Loading...\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.loadingRecords\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sLoadingRecords\": \"Loading...\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Text which is displayed when the table is processing a user action\r\n\t\t\t\t * (usually a sort command or similar).\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default Processing...\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.processing\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"processing\": \"DataTables is currently busy\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sProcessing\": \"Processing...\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Details the actions that will be taken when the user types into the\r\n\t\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\r\n\t\t\t\t * is replaced with the HTML text box for the filtering input allowing\r\n\t\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\r\n\t\t\t\t * then the input box is appended to the string automatically.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default Search:\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.search\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Input text box will be appended at the end automatically\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"search\": \"Filter records:\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Specify where the filter should appear\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sSearch\": \"Search:\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Assign a `placeholder` attribute to the search `input` element\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default \r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.searchPlaceholder\r\n\t\t\t\t */\r\n\t\t\t\t\"sSearchPlaceholder\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * All of the language information can be stored in a file on the\r\n\t\t\t\t * server-side, which DataTables will look up if this parameter is passed.\r\n\t\t\t\t * It must store the URL of the language file, which is in a JSON format,\r\n\t\t\t\t * and the object has the same properties as the oLanguage object in the\r\n\t\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of\r\n\t\t\t\t * the example language files to see how this works in action.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default <i>Empty string - i.e. disabled</i>\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.url\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sUrl\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Text shown inside the table records when the is no information to be\r\n\t\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\r\n\t\t\t\t * information in the table at all (regardless of filtering).\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @default No matching records found\r\n\t\t\t\t *\r\n\t\t\t\t *  @dtopt Language\r\n\t\t\t\t *  @name DataTable.defaults.language.zeroRecords\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"zeroRecords\": \"No records to display\"\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\t\"sZeroRecords\": \"No matching records found\"\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This parameter allows you to have define the global filtering state at\r\n\t\t\t * initialisation time. As an object the `search` parameter must be\r\n\t\t\t * defined, but all other parameters are optional. When `regex` is true,\r\n\t\t\t * the search string will be treated as a regular expression, when false\r\n\t\t\t * (default) it will be treated as a straight string. When `smart`\r\n\t\t\t * DataTables will use it's smart filtering methods (to word match at\r\n\t\t\t * any point in the data), when false this will not be done.\r\n\t\t\t *  @namespace\r\n\t\t\t *  @extends DataTable.models.oSearch\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.search\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"search\": {\"search\": \"Initial search\"}\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * __Deprecated__ The functionality provided by this parameter has now been\r\n\t\t\t * superseded by that provided through `ajax`, which should be used instead.\r\n\t\t\t *\r\n\t\t\t * By default DataTables will look for the property `data` (or `aaData` for\r\n\t\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax\r\n\t\t\t * source or for server-side processing - this parameter allows that\r\n\t\t\t * property to be changed. You can use Javascript dotted object notation to\r\n\t\t\t * get a data source for multiple levels of nesting.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default data\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @dtopt Server-side\r\n\t\t\t *  @name DataTable.defaults.ajaxDataProp\r\n\t\t\t *\r\n\t\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n\t\t\t */\r\n\t\t\t\"sAjaxDataProp\": \"data\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * __Deprecated__ The functionality provided by this parameter has now been\r\n\t\t\t * superseded by that provided through `ajax`, which should be used instead.\r\n\t\t\t *\r\n\t\t\t * You can instruct DataTables to load data from an external\r\n\t\t\t * source using this parameter (use aData if you want to pass data in you\r\n\t\t\t * already have). Simply provide a url a JSON object can be obtained from.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @dtopt Server-side\r\n\t\t\t *  @name DataTable.defaults.ajaxSource\r\n\t\t\t *\r\n\t\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n\t\t\t */\r\n\t\t\t\"sAjaxSource\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This initialisation variable allows you to specify exactly where in the\r\n\t\t\t * DOM you want DataTables to inject the various controls it adds to the page\r\n\t\t\t * (for example you might want the pagination controls at the top of the\r\n\t\t\t * table). DIV elements (with or without a custom class) can also be added to\r\n\t\t\t * aid styling. The follow syntax is used:\r\n\t\t\t *   <ul>\r\n\t\t\t *     <li>The following options are allowed:\r\n\t\t\t *       <ul>\r\n\t\t\t *         <li>'l' - Length changing</li>\r\n\t\t\t *         <li>'f' - Filtering input</li>\r\n\t\t\t *         <li>'t' - The table!</li>\r\n\t\t\t *         <li>'i' - Information</li>\r\n\t\t\t *         <li>'p' - Pagination</li>\r\n\t\t\t *         <li>'r' - pRocessing</li>\r\n\t\t\t *       </ul>\r\n\t\t\t *     </li>\r\n\t\t\t *     <li>The following constants are allowed:\r\n\t\t\t *       <ul>\r\n\t\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\r\n\t\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\r\n\t\t\t *       </ul>\r\n\t\t\t *     </li>\r\n\t\t\t *     <li>The following syntax is expected:\r\n\t\t\t *       <ul>\r\n\t\t\t *         <li>'&lt;' and '&gt;' - div elements</li>\r\n\t\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\r\n\t\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\r\n\t\t\t *       </ul>\r\n\t\t\t *     </li>\r\n\t\t\t *     <li>Examples:\r\n\t\t\t *       <ul>\r\n\t\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\r\n\t\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\r\n\t\t\t *       </ul>\r\n\t\t\t *     </li>\r\n\t\t\t *   </ul>\r\n\t\t\t *  @type string\r\n\t\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\r\n\t\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.dom\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sDom\": \"lfrtip\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Search delay option. This will throttle full table searches that use the\r\n\t\t\t * DataTables provided search input element (it does not effect calls to\r\n\t\t\t * `dt-api search()`, providing a delay before the search is made.\r\n\t\t\t *  @type integer\r\n\t\t\t *  @default 0\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.searchDelay\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"searchDelay\": 200\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"searchDelay\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * DataTables features six different built-in options for the buttons to\r\n\t\t\t * display for pagination control:\r\n\t\t\t *\r\n\t\t\t * * `numbers` - Page number buttons only\r\n\t\t\t * * `simple` - 'Previous' and 'Next' buttons only\r\n\t\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\r\n\t\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\r\n\t\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\r\n\t\t\t * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\r\n\t\t\t *  \r\n\t\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default simple_numbers\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.pagingType\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"pagingType\": \"full_numbers\"\r\n\t\t\t *      } );\r\n\t\t\t *    } )\r\n\t\t\t */\r\n\t\t\t\"sPaginationType\": \"simple_numbers\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable horizontal scrolling. When a table is too wide to fit into a\r\n\t\t\t * certain layout, or you have a large number of columns in the table, you\r\n\t\t\t * can enable x-scrolling to show the table in a viewport, which can be\r\n\t\t\t * scrolled. This property can be `true` which will allow the table to\r\n\t\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which\r\n\t\t\t * case it will be treated as a pixel measurement). Setting as simply `true`\r\n\t\t\t * is recommended.\r\n\t\t\t *  @type boolean|string\r\n\t\t\t *  @default <i>blank string - i.e. disabled</i>\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.scrollX\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"scrollX\": true,\r\n\t\t\t *        \"scrollCollapse\": true\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sScrollX\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This property can be used to force a DataTable to use more width than it\r\n\t\t\t * might otherwise do when x-scrolling is enabled. For example if you have a\r\n\t\t\t * table which requires to be well spaced, this parameter is useful for\r\n\t\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\r\n\t\t\t * any CSS unit, or a number (in which case it will be treated as a pixel\r\n\t\t\t * measurement).\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>blank string - i.e. disabled</i>\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @name DataTable.defaults.scrollXInner\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"scrollX\": \"100%\",\r\n\t\t\t *        \"scrollXInner\": \"110%\"\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sScrollXInner\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\r\n\t\t\t * to the given height, and enable scrolling for any data which overflows the\r\n\t\t\t * current viewport. This can be used as an alternative to paging to display\r\n\t\t\t * a lot of data in a small area (although paging and scrolling can both be\r\n\t\t\t * enabled at the same time). This property can be any CSS unit, or a number\r\n\t\t\t * (in which case it will be treated as a pixel measurement).\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>blank string - i.e. disabled</i>\r\n\t\t\t *\r\n\t\t\t *  @dtopt Features\r\n\t\t\t *  @name DataTable.defaults.scrollY\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"scrollY\": \"200px\",\r\n\t\t\t *        \"paginate\": false\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sScrollY\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * __Deprecated__ The functionality provided by this parameter has now been\r\n\t\t\t * superseded by that provided through `ajax`, which should be used instead.\r\n\t\t\t *\r\n\t\t\t * Set the HTTP method that is used to make the Ajax call for server-side\r\n\t\t\t * processing or Ajax sourced data.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default GET\r\n\t\t\t *\r\n\t\t\t *  @dtopt Options\r\n\t\t\t *  @dtopt Server-side\r\n\t\t\t *  @name DataTable.defaults.serverMethod\r\n\t\t\t *\r\n\t\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n\t\t\t */\r\n\t\t\t\"sServerMethod\": \"GET\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * DataTables makes use of renderers when displaying HTML elements for\r\n\t\t\t * a table. These renderers can be added or modified by plug-ins to\r\n\t\t\t * generate suitable mark-up for a site. For example the Bootstrap\r\n\t\t\t * integration plug-in for DataTables uses a paging button renderer to\r\n\t\t\t * display pagination buttons in the mark-up required by Bootstrap.\r\n\t\t\t *\r\n\t\t\t * For further information about the renderers available see\r\n\t\t\t * DataTable.ext.renderer\r\n\t\t\t *  @type string|object\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.renderer\r\n\t\t\t *\r\n\t\t\t */\r\n\t\t\t\"renderer\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Set the data property name that DataTables should use to get a row's id\r\n\t\t\t * to set as the `id` property in the node.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default DT_RowId\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.rowId\r\n\t\t\t */\r\n\t\t\t\"rowId\": \"DT_RowId\"\r\n\t\t};\r\n\t\t\r\n\t\t_fnHungarianMap( DataTable.defaults );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\t * Developer note - See note in model.defaults.js about the use of Hungarian\r\n\t\t * notation and camel case.\r\n\t\t */\r\n\t\t\r\n\t\t/**\r\n\t\t * Column options that can be given to DataTables at initialisation time.\r\n\t\t *  @namespace\r\n\t\t */\r\n\t\tDataTable.defaults.column = {\r\n\t\t\t/**\r\n\t\t\t * Define which column(s) an order will occur on for this column. This\r\n\t\t\t * allows a column's ordering to take multiple columns into account when\r\n\t\t\t * doing a sort or use the data from a different column. For example first\r\n\t\t\t * name / last name columns make sense to do a multi-column sort over the\r\n\t\t\t * two columns.\r\n\t\t\t *  @type array|int\r\n\t\t\t *  @default null <i>Takes the value of the column index automatically</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.orderData\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\r\n\t\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\r\n\t\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"orderData\": [ 0, 1 ] },\r\n\t\t\t *          { \"orderData\": [ 1, 0 ] },\r\n\t\t\t *          { \"orderData\": 2 },\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"aDataSort\": null,\r\n\t\t\t\"iDataSort\": -1,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * You can control the default ordering direction, and even alter the\r\n\t\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\r\n\t\t\t * using this parameter.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default [ 'asc', 'desc' ]\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.orderSequence\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\r\n\t\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\r\n\t\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          null,\r\n\t\t\t *          { \"orderSequence\": [ \"asc\" ] },\r\n\t\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\r\n\t\t\t *          { \"orderSequence\": [ \"desc\" ] },\r\n\t\t\t *          null\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"asSorting\": [ 'asc', 'desc' ],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable filtering on the data in this column.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.searchable\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\r\n\t\t\t *        ] } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"searchable\": false },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ] } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bSearchable\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable ordering on this column.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.orderable\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\r\n\t\t\t *        ] } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"orderable\": false },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ] } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bSortable\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Enable or disable the display of this column.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default true\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.visible\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\r\n\t\t\t *        ] } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"visible\": false },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ] } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"bVisible\": true,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\r\n\t\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n\t\t\t * allowing you to modify the DOM element (add background colour for example) when the\r\n\t\t\t * element is available.\r\n\t\t\t *  @type function\r\n\t\t\t *  @param {element} td The TD node that has been created\r\n\t\t\t *  @param {*} cellData The Data for the cell\r\n\t\t\t *  @param {array|object} rowData The data for the whole row\r\n\t\t\t *  @param {int} row The row index for the aoData data store\r\n\t\t\t *  @param {int} col The column index for aoColumns\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.createdCell\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [3],\r\n\t\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\r\n\t\t\t *            if ( cellData == \"1.7\" ) {\r\n\t\t\t *              $(td).css('color', 'blue')\r\n\t\t\t *            }\r\n\t\t\t *          }\r\n\t\t\t *        } ]\r\n\t\t\t *      });\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"fnCreatedCell\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This parameter has been replaced by `data` in DataTables to ensure naming\r\n\t\t\t * consistency. `dataProp` can still be used, as there is backwards\r\n\t\t\t * compatibility in DataTables for this option, but it is strongly\r\n\t\t\t * recommended that you use `data` in preference to `dataProp`.\r\n\t\t\t *  @name DataTable.defaults.column.dataProp\r\n\t\t\t */\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This property can be used to read data from any data source property,\r\n\t\t\t * including deeply nested objects / properties. `data` can be given in a\r\n\t\t\t * number of different ways which effect its behaviour:\r\n\t\t\t *\r\n\t\t\t * * `integer` - treated as an array index for the data source. This is the\r\n\t\t\t *   default that DataTables uses (incrementally increased for each column).\r\n\t\t\t * * `string` - read an object property from the data source. There are\r\n\t\t\t *   three 'special' options that can be used in the string to alter how\r\n\t\t\t *   DataTables reads the data from the source object:\r\n\t\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n\t\t\t *      Javascript to read from nested objects, so to can the options\r\n\t\t\t *      specified in `data`. For example: `browser.version` or\r\n\t\t\t *      `browser.name`. If your object parameter name contains a period, use\r\n\t\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n\t\t\t *    * `[]` - Array notation. DataTables can automatically combine data\r\n\t\t\t *      from and array source, joining the data with the characters provided\r\n\t\t\t *      between the two brackets. For example: `name[, ]` would provide a\r\n\t\t\t *      comma-space separated list from the source array. If no characters\r\n\t\t\t *      are provided between the brackets, the original array source is\r\n\t\t\t *      returned.\r\n\t\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n\t\t\t *      execute a function of the name given. For example: `browser()` for a\r\n\t\t\t *      simple function on the data source, `browser.version()` for a\r\n\t\t\t *      function in a nested property or even `browser().version` to get an\r\n\t\t\t *      object property if the function called returns an object. Note that\r\n\t\t\t *      function notation is recommended for use in `render` rather than\r\n\t\t\t *      `data` as it is much simpler to use as a renderer.\r\n\t\t\t * * `null` - use the original data source for the row rather than plucking\r\n\t\t\t *   data directly from it. This action has effects on two other\r\n\t\t\t *   initialisation options:\r\n\t\t\t *    * `defaultContent` - When null is given as the `data` option and\r\n\t\t\t *      `defaultContent` is specified for the column, the value defined by\r\n\t\t\t *      `defaultContent` will be used for the cell.\r\n\t\t\t *    * `render` - When null is used for the `data` option and the `render`\r\n\t\t\t *      option is specified for the column, the whole data source for the\r\n\t\t\t *      row is used for the renderer.\r\n\t\t\t * * `function` - the function given will be executed whenever DataTables\r\n\t\t\t *   needs to set or get the data for a cell in the column. The function\r\n\t\t\t *   takes three parameters:\r\n\t\t\t *    * Parameters:\r\n\t\t\t *      * `{array|object}` The data source for the row\r\n\t\t\t *      * `{string}` The type call data requested - this will be 'set' when\r\n\t\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\r\n\t\t\t *        when gathering data. Note that when `undefined` is given for the\r\n\t\t\t *        type DataTables expects to get the raw data for the object back<\r\n\t\t\t *      * `{*}` Data to set when the second parameter is 'set'.\r\n\t\t\t *    * Return:\r\n\t\t\t *      * The return value from the function is not required when 'set' is\r\n\t\t\t *        the type of call, but otherwise the return is what will be used\r\n\t\t\t *        for the data requested.\r\n\t\t\t *\r\n\t\t\t * Note that `data` is a getter and setter option. If you just require\r\n\t\t\t * formatting of data for output, you will likely want to use `render` which\r\n\t\t\t * is simply a getter and thus simpler to use.\r\n\t\t\t *\r\n\t\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\r\n\t\t\t * name change reflects the flexibility of this property and is consistent\r\n\t\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still\r\n\t\t\t * be used by DataTables, as it automatically maps the old name to the new\r\n\t\t\t * if required.\r\n\t\t\t *\r\n\t\t\t *  @type string|int|function|null\r\n\t\t\t *  @default null <i>Use automatically calculated column index</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.data\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Read table data from objects\r\n\t\t\t *    // JSON structure for each row:\r\n\t\t\t *    //   {\r\n\t\t\t *    //      \"engine\": {value},\r\n\t\t\t *    //      \"browser\": {value},\r\n\t\t\t *    //      \"platform\": {value},\r\n\t\t\t *    //      \"version\": {value},\r\n\t\t\t *    //      \"grade\": {value}\r\n\t\t\t *    //   }\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"ajaxSource\": \"sources/objects.txt\",\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"data\": \"engine\" },\r\n\t\t\t *          { \"data\": \"browser\" },\r\n\t\t\t *          { \"data\": \"platform\" },\r\n\t\t\t *          { \"data\": \"version\" },\r\n\t\t\t *          { \"data\": \"grade\" }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Read information from deeply nested objects\r\n\t\t\t *    // JSON structure for each row:\r\n\t\t\t *    //   {\r\n\t\t\t *    //      \"engine\": {value},\r\n\t\t\t *    //      \"browser\": {value},\r\n\t\t\t *    //      \"platform\": {\r\n\t\t\t *    //         \"inner\": {value}\r\n\t\t\t *    //      },\r\n\t\t\t *    //      \"details\": [\r\n\t\t\t *    //         {value}, {value}\r\n\t\t\t *    //      ]\r\n\t\t\t *    //   }\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"data\": \"engine\" },\r\n\t\t\t *          { \"data\": \"browser\" },\r\n\t\t\t *          { \"data\": \"platform.inner\" },\r\n\t\t\t *          { \"data\": \"details.0\" },\r\n\t\t\t *          { \"data\": \"details.1\" }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `data` as a function to provide different information for\r\n\t\t\t *    // sorting, filtering and display. In this case, currency (price)\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"data\": function ( source, type, val ) {\r\n\t\t\t *            if (type === 'set') {\r\n\t\t\t *              source.price = val;\r\n\t\t\t *              // Store the computed display and filter values for efficiency\r\n\t\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n\t\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n\t\t\t *              return;\r\n\t\t\t *            }\r\n\t\t\t *            else if (type === 'display') {\r\n\t\t\t *              return source.price_display;\r\n\t\t\t *            }\r\n\t\t\t *            else if (type === 'filter') {\r\n\t\t\t *              return source.price_filter;\r\n\t\t\t *            }\r\n\t\t\t *            // 'sort', 'type' and undefined all just use the integer\r\n\t\t\t *            return source.price;\r\n\t\t\t *          }\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using default content\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"data\": null,\r\n\t\t\t *          \"defaultContent\": \"Click to edit\"\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using array notation - outputting a list from an array\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"data\": \"name[, ]\"\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t */\r\n\t\t\t\"mData\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This property is the rendering partner to `data` and it is suggested that\r\n\t\t\t * when you want to manipulate data for display (including filtering,\r\n\t\t\t * sorting etc) without altering the underlying data for the table, use this\r\n\t\t\t * property. `render` can be considered to be the the read only companion to\r\n\t\t\t * `data` which is read / write (then as such more complex). Like `data`\r\n\t\t\t * this option can be given in a number of different ways to effect its\r\n\t\t\t * behaviour:\r\n\t\t\t *\r\n\t\t\t * * `integer` - treated as an array index for the data source. This is the\r\n\t\t\t *   default that DataTables uses (incrementally increased for each column).\r\n\t\t\t * * `string` - read an object property from the data source. There are\r\n\t\t\t *   three 'special' options that can be used in the string to alter how\r\n\t\t\t *   DataTables reads the data from the source object:\r\n\t\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n\t\t\t *      Javascript to read from nested objects, so to can the options\r\n\t\t\t *      specified in `data`. For example: `browser.version` or\r\n\t\t\t *      `browser.name`. If your object parameter name contains a period, use\r\n\t\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n\t\t\t *    * `[]` - Array notation. DataTables can automatically combine data\r\n\t\t\t *      from and array source, joining the data with the characters provided\r\n\t\t\t *      between the two brackets. For example: `name[, ]` would provide a\r\n\t\t\t *      comma-space separated list from the source array. If no characters\r\n\t\t\t *      are provided between the brackets, the original array source is\r\n\t\t\t *      returned.\r\n\t\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n\t\t\t *      execute a function of the name given. For example: `browser()` for a\r\n\t\t\t *      simple function on the data source, `browser.version()` for a\r\n\t\t\t *      function in a nested property or even `browser().version` to get an\r\n\t\t\t *      object property if the function called returns an object.\r\n\t\t\t * * `object` - use different data for the different data types requested by\r\n\t\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\r\n\t\t\t *   of the object is the data type the property refers to and the value can\r\n\t\t\t *   defined using an integer, string or function using the same rules as\r\n\t\t\t *   `render` normally does. Note that an `_` option _must_ be specified.\r\n\t\t\t *   This is the default value to use if you haven't specified a value for\r\n\t\t\t *   the data type requested by DataTables.\r\n\t\t\t * * `function` - the function given will be executed whenever DataTables\r\n\t\t\t *   needs to set or get the data for a cell in the column. The function\r\n\t\t\t *   takes three parameters:\r\n\t\t\t *    * Parameters:\r\n\t\t\t *      * {array|object} The data source for the row (based on `data`)\r\n\t\t\t *      * {string} The type call data requested - this will be 'filter',\r\n\t\t\t *        'display', 'type' or 'sort'.\r\n\t\t\t *      * {array|object} The full data source for the row (not based on\r\n\t\t\t *        `data`)\r\n\t\t\t *    * Return:\r\n\t\t\t *      * The return value from the function is what will be used for the\r\n\t\t\t *        data requested.\r\n\t\t\t *\r\n\t\t\t *  @type string|int|function|object|null\r\n\t\t\t *  @default null Use the data source value.\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.render\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Create a comma separated list from an array of objects\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"data\": \"engine\" },\r\n\t\t\t *          { \"data\": \"browser\" },\r\n\t\t\t *          {\r\n\t\t\t *            \"data\": \"platform\",\r\n\t\t\t *            \"render\": \"[, ].name\"\r\n\t\t\t *          }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Execute a function to obtain data\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t\t *          \"render\": \"browserName()\"\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // As an object, extracting different data for the different types\r\n\t\t\t *    // This would be used with a data source such as:\r\n\t\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\r\n\t\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n\t\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while\r\n\t\t\t *    // the formatted phone number is the one that is shown in the table.\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t\t *          \"render\": {\r\n\t\t\t *            \"_\": \"phone\",\r\n\t\t\t *            \"filter\": \"phone_filter\",\r\n\t\t\t *            \"display\": \"phone_display\"\r\n\t\t\t *          }\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Use as a function to create a link from the data source\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"data\": \"download_link\",\r\n\t\t\t *          \"render\": function ( data, type, full ) {\r\n\t\t\t *            return '<a href=\"'+data+'\">Download</a>';\r\n\t\t\t *          }\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"mRender\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Change the cell type created for the column - either TD cells or TH cells. This\r\n\t\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them\r\n\t\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\r\n\t\t\t *  @type string\r\n\t\t\t *  @default td\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.cellType\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Make the first column use TH cells\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [ {\r\n\t\t\t *          \"targets\": [ 0 ],\r\n\t\t\t *          \"cellType\": \"th\"\r\n\t\t\t *        } ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sCellType\": \"td\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Class to give to each cell in this column.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>Empty string</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.class\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"class\": \"my_class\" },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sClass\": \"\",\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When DataTables calculates the column widths to assign to each column,\r\n\t\t\t * it finds the longest string in each column and then constructs a\r\n\t\t\t * temporary table and reads the widths from that. The problem with this\r\n\t\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n\t\t\t * string - thus the calculation can go wrong (doing it properly and putting\r\n\t\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n\t\t\t * a \"work around\" we provide this option. It will append its value to the\r\n\t\t\t * text that is found to be the longest string for the column - i.e. padding.\r\n\t\t\t * Generally you shouldn't need this!\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>Empty string<i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.contentPadding\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          {\r\n\t\t\t *            \"contentPadding\": \"mmm\"\r\n\t\t\t *          }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sContentPadding\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Allows a default value to be given for a column's data, and will be used\r\n\t\t\t * whenever a null data source is encountered (this can be because `data`\r\n\t\t\t * is set to null, or because the data source itself is null).\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.defaultContent\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          {\r\n\t\t\t *            \"data\": null,\r\n\t\t\t *            \"defaultContent\": \"Edit\",\r\n\t\t\t *            \"targets\": [ -1 ]\r\n\t\t\t *          }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          {\r\n\t\t\t *            \"data\": null,\r\n\t\t\t *            \"defaultContent\": \"Edit\"\r\n\t\t\t *          }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sDefaultContent\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * This parameter is only used in DataTables' server-side processing. It can\r\n\t\t\t * be exceptionally useful to know what columns are being displayed on the\r\n\t\t\t * client side, and to map these to database fields. When defined, the names\r\n\t\t\t * also allow DataTables to reorder information from the server if it comes\r\n\t\t\t * back in an unexpected order (i.e. if you switch your columns around on the\r\n\t\t\t * client-side, your server-side code does not also need updating).\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>Empty string</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.name\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\r\n\t\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\r\n\t\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\r\n\t\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\r\n\t\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"name\": \"engine\" },\r\n\t\t\t *          { \"name\": \"browser\" },\r\n\t\t\t *          { \"name\": \"platform\" },\r\n\t\t\t *          { \"name\": \"version\" },\r\n\t\t\t *          { \"name\": \"grade\" }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sName\": \"\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Defines a data source type for the ordering which can be used to read\r\n\t\t\t * real-time information from the table (updating the internally cached\r\n\t\t\t * version) prior to ordering. This allows ordering to occur on user\r\n\t\t\t * editable elements such as form inputs.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default std\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.orderDataType\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\r\n\t\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\r\n\t\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\r\n\t\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          { \"orderDataType\": \"dom-text\" },\r\n\t\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\r\n\t\t\t *          { \"orderDataType\": \"dom-select\" },\r\n\t\t\t *          { \"orderDataType\": \"dom-checkbox\" }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sSortDataType\": \"std\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The title of this column.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null <i>Derived from the 'TH' value for this column in the\r\n\t\t\t *    original HTML table.</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.title\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"title\": \"My column title\" },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sTitle\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The type allows you to specify how the data for this column will be\r\n\t\t\t * ordered. Four types (string, numeric, date and html (which will strip\r\n\t\t\t * HTML tags before ordering)) are currently available. Note that only date\r\n\t\t\t * formats understood by Javascript's Date() object will be accepted as type\r\n\t\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\r\n\t\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\r\n\t\t\t * through plug-ins.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null <i>Auto-detected from raw data</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.type\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"type\": \"html\" },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sType\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Defining the width of the column, this parameter may take any CSS value\r\n\t\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\r\n\t\t\t * been given a specific width through this interface ensuring that the table\r\n\t\t\t * remains readable.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null <i>Automatic</i>\r\n\t\t\t *\r\n\t\t\t *  @name DataTable.defaults.column.width\r\n\t\t\t *  @dtopt Columns\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columnDefs`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columnDefs\": [\r\n\t\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Using `columns`\r\n\t\t\t *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"columns\": [\r\n\t\t\t *          { \"width\": \"20%\" },\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null,\r\n\t\t\t *          null\r\n\t\t\t *        ]\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\t\"sWidth\": null\r\n\t\t};\r\n\t\t\r\n\t\t_fnHungarianMap( DataTable.defaults.column );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * DataTables settings object - this holds all the information needed for a\r\n\t\t * given table, including configuration, data and current application of the\r\n\t\t * table options. DataTables does not have a single instance for each DataTable\r\n\t\t * with the settings attached to that instance, but rather instances of the\r\n\t\t * DataTable \"class\" are created on-the-fly as needed (typically by a\r\n\t\t * $().dataTable() call) and the settings object is then applied to that\r\n\t\t * instance.\r\n\t\t *\r\n\t\t * Note that this object is related to {@link DataTable.defaults} but this\r\n\t\t * one is the internal data store for DataTables's cache of columns. It should\r\n\t\t * NOT be manipulated outside of DataTables. Any configuration should be done\r\n\t\t * through the initialisation options.\r\n\t\t *  @namespace\r\n\t\t *  @todo Really should attach the settings object to individual instances so we\r\n\t\t *    don't need to create new instances on each $().dataTable() call (if the\r\n\t\t *    table already exists). It would also save passing oSettings around and\r\n\t\t *    into every single function. However, this is a very significant\r\n\t\t *    architecture change for DataTables and will almost certainly break\r\n\t\t *    backwards compatibility with older installations. This is something that\r\n\t\t *    will be done in 2.0.\r\n\t\t */\r\n\t\tDataTable.models.oSettings = {\r\n\t\t\t/**\r\n\t\t\t * Primary features of DataTables and their enablement state.\r\n\t\t\t *  @namespace\r\n\t\t\t */\r\n\t\t\t\"oFeatures\": {\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Flag to say if DataTables should automatically try to calculate the\r\n\t\t\t\t * optimum table and columns widths (true) or not (false).\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bAutoWidth\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Delay the creation of TR and TD elements until they are actually\r\n\t\t\t\t * needed by a driven page draw. This can give a significant speed\r\n\t\t\t\t * increase for Ajax source and Javascript source data, but makes no\r\n\t\t\t\t * difference at all for DOM and server-side processing tables.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bDeferRender\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Enable filtering on the table or not. Note that if this is disabled\r\n\t\t\t\t * then there is no filtering at all on the table, including fnFilter.\r\n\t\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bFilter\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Table information element (the 'Showing x of y records' div) enable\r\n\t\t\t\t * flag.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bInfo\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Present a user control allowing the end user to change the page size\r\n\t\t\t\t * when pagination is enabled.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bLengthChange\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Pagination enabled or not. Note that if this is disabled then length\r\n\t\t\t\t * changing must also be disabled.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bPaginate\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Processing indicator enable flag whenever DataTables is enacting a\r\n\t\t\t\t * user request - typically an Ajax request for server-side processing.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bProcessing\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Server-side processing enabled flag - when enabled DataTables will\r\n\t\t\t\t * get all data from the server for every draw - there is no filtering,\r\n\t\t\t\t * sorting or paging done on the client-side.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bServerSide\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Sorting enablement flag.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bSort\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Multi-column sorting\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bSortMulti\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Apply a class to the columns which are being sorted to provide a\r\n\t\t\t\t * visual highlight or not. This can slow things down when enabled since\r\n\t\t\t\t * there is a lot of DOM interaction.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bSortClasses\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * State saving enablement flag.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bStateSave\": null\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Scrolling settings for a table.\r\n\t\t\t *  @namespace\r\n\t\t\t */\r\n\t\t\t\"oScroll\": {\r\n\t\t\t\t/**\r\n\t\t\t\t * When the table is shorter in height than sScrollY, collapse the\r\n\t\t\t\t * table container down to the height of the table (when true).\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t */\r\n\t\t\t\t\"bCollapse\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated\r\n\t\t\t\t * during table initialisation.\r\n\t\t\t\t *  @type int\r\n\t\t\t\t *  @default 0\r\n\t\t\t\t */\r\n\t\t\t\t\"iBarWidth\": 0,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\r\n\t\t\t\t * disabled if an empty string.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t */\r\n\t\t\t\t\"sX\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Width to expand the table to when using x-scrolling. Typically you\r\n\t\t\t\t * should not need to use this.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t *  @deprecated\r\n\t\t\t\t */\r\n\t\t\t\t\"sXInner\": null,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\r\n\t\t\t\t * if an empty string.\r\n\t\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t\t *  @type string\r\n\t\t\t\t */\r\n\t\t\t\t\"sY\": null\r\n\t\t\t},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Language information for the table.\r\n\t\t\t *  @namespace\r\n\t\t\t *  @extends DataTable.defaults.oLanguage\r\n\t\t\t */\r\n\t\t\t\"oLanguage\": {\r\n\t\t\t\t/**\r\n\t\t\t\t * Information callback function. See\r\n\t\t\t\t * {@link DataTable.defaults.fnInfoCallback}\r\n\t\t\t\t *  @type function\r\n\t\t\t\t *  @default null\r\n\t\t\t\t */\r\n\t\t\t\t\"fnInfoCallback\": null\r\n\t\t\t},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Browser support parameters\r\n\t\t\t *  @namespace\r\n\t\t\t */\r\n\t\t\t\"oBrowser\": {\r\n\t\t\t\t/**\r\n\t\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a\r\n\t\t\t\t * scrolling element (IE6/7)\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t *  @default false\r\n\t\t\t\t */\r\n\t\t\t\t\"bScrollOversize\": false,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Determine if the vertical scrollbar is on the right or left of the\r\n\t\t\t\t * scrolling container - needed for rtl language layout, although not\r\n\t\t\t\t * all browsers move the scrollbar (Safari).\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t *  @default false\r\n\t\t\t\t */\r\n\t\t\t\t\"bScrollbarLeft\": false,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Flag for if `getBoundingClientRect` is fully supported or not\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t *  @default false\r\n\t\t\t\t */\r\n\t\t\t\t\"bBounding\": false,\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Browser scrollbar width\r\n\t\t\t\t *  @type integer\r\n\t\t\t\t *  @default 0\r\n\t\t\t\t */\r\n\t\t\t\t\"barWidth\": 0\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t\"ajax\": null,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array referencing the nodes which are used for the features. The\r\n\t\t\t * parameters of this object match what is allowed by sDom - i.e.\r\n\t\t\t *   <ul>\r\n\t\t\t *     <li>'l' - Length changing</li>\r\n\t\t\t *     <li>'f' - Filtering input</li>\r\n\t\t\t *     <li>'t' - The table!</li>\r\n\t\t\t *     <li>'i' - Information</li>\r\n\t\t\t *     <li>'p' - Pagination</li>\r\n\t\t\t *     <li>'r' - pRocessing</li>\r\n\t\t\t *   </ul>\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aanFeatures\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store data information - see {@link DataTable.models.oRow} for detailed\r\n\t\t\t * information.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoData\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of indexes which are in the current display (after filtering etc)\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aiDisplay\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of indexes for display - no filtering\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aiDisplayMaster\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Map of row ids to data indexes\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t */\r\n\t\t\t\"aIds\": {},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store information about each column that is in use\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoColumns\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store information about the table's header\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoHeader\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store information about the table's footer\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoFooter\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store the applied global search information in case we want to force a\r\n\t\t\t * research or compare the old search to a new one.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @namespace\r\n\t\t\t *  @extends DataTable.models.oSearch\r\n\t\t\t */\r\n\t\t\t\"oPreviousSearch\": {},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Store the applied search for each column - see\r\n\t\t\t * {@link DataTable.models.oSearch} for the format that is used for the\r\n\t\t\t * filtering information for each column.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoPreSearchCols\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Sorting that is applied to the table. Note that the inner arrays are\r\n\t\t\t * used in the following manner:\r\n\t\t\t * <ul>\r\n\t\t\t *   <li>Index 0 - column number</li>\r\n\t\t\t *   <li>Index 1 - current sorting direction</li>\r\n\t\t\t * </ul>\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type array\r\n\t\t\t *  @todo These inner arrays should really be objects\r\n\t\t\t */\r\n\t\t\t\"aaSorting\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Sorting that is always applied to the table (i.e. prefixed in front of\r\n\t\t\t * aaSorting).\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aaSortingFixed\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Classes to use for the striping of a table.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"asStripeClasses\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * If restoring a table - we should restore its striping classes as well\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"asDestroyStripes\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * If restoring a table - we should restore its width\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t */\r\n\t\t\t\"sDestroyWidth\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoRowCallback\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback functions for the header on each draw.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoHeaderCallback\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback function for the footer on each draw.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoFooterCallback\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of callback functions for draw callback functions\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoDrawCallback\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of callback functions for row created function\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoRowCreatedCallback\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback functions for just before the table is redrawn. A return of\r\n\t\t\t * false will be used to cancel the draw.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoPreDrawCallback\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callback functions for when the table has been initialised.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoInitComplete\": [],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callbacks for modifying the settings to be stored for state saving, prior to\r\n\t\t\t * saving state.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoStateSaveParams\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callbacks for modifying the settings that have been stored for state saving\r\n\t\t\t * prior to using the stored values to restore the state.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoStateLoadParams\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Callbacks for operating on the settings object once the saved state has been\r\n\t\t\t * loaded\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoStateLoaded\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Cache the table ID for quick access\r\n\t\t\t *  @type string\r\n\t\t\t *  @default <i>Empty string</i>\r\n\t\t\t */\r\n\t\t\t\"sTableId\": \"\",\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The TABLE node for the main table\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTable\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Permanent ref to the thead element\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTHead\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Permanent ref to the tfoot element - if it exists\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTFoot\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Permanent ref to the tbody element\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTBody\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Cache the wrapper node (contains all DataTables controlled elements)\r\n\t\t\t *  @type node\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"nTableWrapper\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicate if when using server-side processing the loading of data\r\n\t\t\t * should be deferred until the second draw.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t */\r\n\t\t\t\"bDeferLoading\": false,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicate if all required information has been read in\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t */\r\n\t\t\t\"bInitialised\": false,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Information about open rows. Each object in the array has the parameters\r\n\t\t\t * 'nTr' and 'nParent'\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoOpenRows\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Dictate the positioning of DataTables' control elements - see\r\n\t\t\t * {@link DataTable.model.oInit.sDom}.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sDom\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Search delay (in mS)\r\n\t\t\t *  @type integer\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"searchDelay\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Which type of pagination should be used.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default two_button\r\n\t\t\t */\r\n\t\t\t\"sPaginationType\": \"two_button\",\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The state duration (for `stateSave`) in seconds.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t */\r\n\t\t\t\"iStateDuration\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of callback functions for state saving. Each array element is an\r\n\t\t\t * object with the following parameters:\r\n\t\t\t *   <ul>\r\n\t\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n\t\t\t *       and the JSON string to save that has been thus far created. Returns\r\n\t\t\t *       a JSON string to be inserted into a json object\r\n\t\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\r\n\t\t\t *     <li>string:sName - name of callback</li>\r\n\t\t\t *   </ul>\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoStateSave\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Array of callback functions for state loading. Each array element is an\r\n\t\t\t * object with the following parameters:\r\n\t\t\t *   <ul>\r\n\t\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n\t\t\t *       and the object stored. May return false to cancel state loading</li>\r\n\t\t\t *     <li>string:sName - name of callback</li>\r\n\t\t\t *   </ul>\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoStateLoad\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * State that was saved. Useful for back reference\r\n\t\t\t *  @type object\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"oSavedState\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * State that was loaded. Useful for back reference\r\n\t\t\t *  @type object\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"oLoadedState\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Source url for AJAX data for the table.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sAjaxSource\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Property from a given object from which to read the table data from. This\r\n\t\t\t * can be an empty string (when not server-side processing), in which case\r\n\t\t\t * it is  assumed an an array is given directly.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type string\r\n\t\t\t */\r\n\t\t\t\"sAjaxDataProp\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The last jQuery XHR object that was used for server-side data gathering.\r\n\t\t\t * This can be used for working with the XHR information in one of the\r\n\t\t\t * callbacks\r\n\t\t\t *  @type object\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"jqXHR\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * JSON returned from the server in the last Ajax request\r\n\t\t\t *  @type object\r\n\t\t\t *  @default undefined\r\n\t\t\t */\r\n\t\t\t\"json\": undefined,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Data submitted as part of the last Ajax request\r\n\t\t\t *  @type object\r\n\t\t\t *  @default undefined\r\n\t\t\t */\r\n\t\t\t\"oAjaxData\": undefined,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Function to get the server-side data.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type function\r\n\t\t\t */\r\n\t\t\t\"fnServerData\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Functions which are called prior to sending an Ajax request so extra\r\n\t\t\t * parameters can easily be sent to the server\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoServerParams\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\r\n\t\t\t * required).\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type string\r\n\t\t\t */\r\n\t\t\t\"sServerMethod\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Format numbers for display.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type function\r\n\t\t\t */\r\n\t\t\t\"fnFormatNumber\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * List of options that can be used for the user selectable length menu.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aLengthMenu\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Counter for the draws that the table does. Also used as a tracker for\r\n\t\t\t * server-side processing\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t */\r\n\t\t\t\"iDraw\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicate if a redraw is being done - useful for Ajax\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t */\r\n\t\t\t\"bDrawing\": false,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Draw index (iDraw) of the last error when parsing the returned data\r\n\t\t\t *  @type int\r\n\t\t\t *  @default -1\r\n\t\t\t */\r\n\t\t\t\"iDrawError\": -1,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Paging display length\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 10\r\n\t\t\t */\r\n\t\t\t\"_iDisplayLength\": 10,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Paging start point - aiDisplay index\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t */\r\n\t\t\t\"_iDisplayStart\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Server-side processing - number of records in the result set\r\n\t\t\t * (i.e. before filtering), Use fnRecordsTotal rather than\r\n\t\t\t * this property to get the value of the number of records, regardless of\r\n\t\t\t * the server-side processing setting.\r\n\t\t\t *  @type int\r\n\t\t\t *  @default 0\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_iRecordsTotal\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Server-side processing - number of records in the current display set\r\n\t\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than\r\n\t\t\t * this property to get the value of the number of records, regardless of\r\n\t\t\t * the server-side processing setting.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default 0\r\n\t\t\t *  @private\r\n\t\t\t */\r\n\t\t\t\"_iRecordsDisplay\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The classes to use for the table\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t */\r\n\t\t\t\"oClasses\": {},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Flag attached to the settings object so you can check in the draw\r\n\t\t\t * callback if filtering has been done in the draw. Deprecated in favour of\r\n\t\t\t * events.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *  @deprecated\r\n\t\t\t */\r\n\t\t\t\"bFiltered\": false,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Flag attached to the settings object so you can check in the draw\r\n\t\t\t * callback if sorting has been done in the draw. Deprecated in favour of\r\n\t\t\t * events.\r\n\t\t\t *  @type boolean\r\n\t\t\t *  @default false\r\n\t\t\t *  @deprecated\r\n\t\t\t */\r\n\t\t\t\"bSorted\": false,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicate that if multiple rows are in the header and there is more than\r\n\t\t\t * one unique cell per column, if the top one (true) or bottom one (false)\r\n\t\t\t * should be used for sorting / title by DataTables.\r\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\r\n\t\t\t * set a default use {@link DataTable.defaults}.\r\n\t\t\t *  @type boolean\r\n\t\t\t */\r\n\t\t\t\"bSortCellsTop\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Initialisation object that is used for the table\r\n\t\t\t *  @type object\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"oInit\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Destroy callback functions - for plug-ins to attach themselves to the\r\n\t\t\t * destroy so they can clean up markup and events.\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aoDestroyCallback\": [],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Get the number of records in the current record set, before filtering\r\n\t\t\t *  @type function\r\n\t\t\t */\r\n\t\t\t\"fnRecordsTotal\": function ()\r\n\t\t\t{\r\n\t\t\t\treturn _fnDataSource( this ) == 'ssp' ?\r\n\t\t\t\t\tthis._iRecordsTotal * 1 :\r\n\t\t\t\t\tthis.aiDisplayMaster.length;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Get the number of records in the current record set, after filtering\r\n\t\t\t *  @type function\r\n\t\t\t */\r\n\t\t\t\"fnRecordsDisplay\": function ()\r\n\t\t\t{\r\n\t\t\t\treturn _fnDataSource( this ) == 'ssp' ?\r\n\t\t\t\t\tthis._iRecordsDisplay * 1 :\r\n\t\t\t\t\tthis.aiDisplay.length;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Get the display end point - aiDisplay index\r\n\t\t\t *  @type function\r\n\t\t\t */\r\n\t\t\t\"fnDisplayEnd\": function ()\r\n\t\t\t{\r\n\t\t\t\tvar\r\n\t\t\t\t\tlen      = this._iDisplayLength,\r\n\t\t\t\t\tstart    = this._iDisplayStart,\r\n\t\t\t\t\tcalc     = start + len,\r\n\t\t\t\t\trecords  = this.aiDisplay.length,\r\n\t\t\t\t\tfeatures = this.oFeatures,\r\n\t\t\t\t\tpaginate = features.bPaginate;\r\n\t\t\r\n\t\t\t\tif ( features.bServerSide ) {\r\n\t\t\t\t\treturn paginate === false || len === -1 ?\r\n\t\t\t\t\t\tstart + records :\r\n\t\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn ! paginate || calc>records || len===-1 ?\r\n\t\t\t\t\t\trecords :\r\n\t\t\t\t\t\tcalc;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * The DataTables object for this table\r\n\t\t\t *  @type object\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"oInstance\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Unique identifier for each instance of the DataTables object. If there\r\n\t\t\t * is an ID on the table node, then it takes that value, otherwise an\r\n\t\t\t * incrementing internal counter is used.\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"sInstance\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * tabindex attribute value that is added to DataTables control elements, allowing\r\n\t\t\t * keyboard navigation of the table and its controls.\r\n\t\t\t */\r\n\t\t\t\"iTabIndex\": 0,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * DIV container for the footer scrolling table if scrolling\r\n\t\t\t */\r\n\t\t\t\"nScrollHead\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * DIV container for the footer scrolling table if scrolling\r\n\t\t\t */\r\n\t\t\t\"nScrollFoot\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Last applied sort\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t */\r\n\t\t\t\"aLastSort\": [],\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Stored plug-in instances\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t */\r\n\t\t\t\"oPlugins\": {},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Function used to get a row's id from the row's data\r\n\t\t\t *  @type function\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"rowIdFn\": null,\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Data location where to store a row's id\r\n\t\t\t *  @type string\r\n\t\t\t *  @default null\r\n\t\t\t */\r\n\t\t\t\"rowId\": null\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * Extension object for DataTables that is used to provide all extension\r\n\t\t * options.\r\n\t\t *\r\n\t\t * Note that the `DataTable.ext` object is available through\r\n\t\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\r\n\t\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\r\n\t\t *  @namespace\r\n\t\t *  @extends DataTable.models.ext\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * DataTables extensions\r\n\t\t * \r\n\t\t * This namespace acts as a collection area for plug-ins that can be used to\r\n\t\t * extend DataTables capabilities. Indeed many of the build in methods\r\n\t\t * use this method to provide their own capabilities (sorting methods for\r\n\t\t * example).\r\n\t\t *\r\n\t\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\r\n\t\t * reasons\r\n\t\t *\r\n\t\t *  @namespace\r\n\t\t */\r\n\t\tDataTable.ext = _ext = {\r\n\t\t\t/**\r\n\t\t\t * Buttons. For use with the Buttons extension for DataTables. This is\r\n\t\t\t * defined here so other extensions can define buttons regardless of load\r\n\t\t\t * order. It is _not_ used by DataTables core.\r\n\t\t\t *\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t */\r\n\t\t\tbuttons: {},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Element class names\r\n\t\t\t *\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t */\r\n\t\t\tclasses: {},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * DataTables build type (expanded by the download builder)\r\n\t\t\t *\r\n\t\t\t *  @type string\r\n\t\t\t */\r\n\t\t\tbuilder: \"-source-\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Error reporting.\r\n\t\t\t * \r\n\t\t\t * How should DataTables report an error. Can take the value 'alert',\r\n\t\t\t * 'throw', 'none' or a function.\r\n\t\t\t *\r\n\t\t\t *  @type string|function\r\n\t\t\t *  @default alert\r\n\t\t\t */\r\n\t\t\terrMode: \"alert\",\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Feature plug-ins.\r\n\t\t\t * \r\n\t\t\t * This is an array of objects which describe the feature plug-ins that are\r\n\t\t\t * available to DataTables. These feature plug-ins are then available for\r\n\t\t\t * use through the `dom` initialisation option.\r\n\t\t\t * \r\n\t\t\t * Each feature plug-in is described by an object which must have the\r\n\t\t\t * following properties:\r\n\t\t\t * \r\n\t\t\t * * `fnInit` - function that is used to initialise the plug-in,\r\n\t\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`\r\n\t\t\t *   instillation option. This is case sensitive.\r\n\t\t\t *\r\n\t\t\t * The `fnInit` function has the following input parameters:\r\n\t\t\t *\r\n\t\t\t * 1. `{object}` DataTables settings object: see\r\n\t\t\t *    {@link DataTable.models.oSettings}\r\n\t\t\t *\r\n\t\t\t * And the following return is expected:\r\n\t\t\t * \r\n\t\t\t * * {node|null} The element which contains your feature. Note that the\r\n\t\t\t *   return may also be void if your plug-in does not require to inject any\r\n\t\t\t *   DOM elements into DataTables control (`dom`) - for example this might\r\n\t\t\t *   be useful when developing a plug-in which allows table control via\r\n\t\t\t *   keyboard entry\r\n\t\t\t *\r\n\t\t\t *  @type array\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    $.fn.dataTable.ext.features.push( {\r\n\t\t\t *      \"fnInit\": function( oSettings ) {\r\n\t\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\r\n\t\t\t *      },\r\n\t\t\t *      \"cFeature\": \"T\"\r\n\t\t\t *    } );\r\n\t\t\t */\r\n\t\t\tfeature: [],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Row searching.\r\n\t\t\t * \r\n\t\t\t * This method of searching is complimentary to the default type based\r\n\t\t\t * searching, and a lot more comprehensive as it allows you complete control\r\n\t\t\t * over the searching logic. Each element in this array is a function\r\n\t\t\t * (parameters described below) that is called for every row in the table,\r\n\t\t\t * and your logic decides if it should be included in the searching data set\r\n\t\t\t * or not.\r\n\t\t\t *\r\n\t\t\t * Searching functions have the following input parameters:\r\n\t\t\t *\r\n\t\t\t * 1. `{object}` DataTables settings object: see\r\n\t\t\t *    {@link DataTable.models.oSettings}\r\n\t\t\t * 2. `{array|object}` Data for the row to be processed (same as the\r\n\t\t\t *    original format that was passed in as the data source, or an array\r\n\t\t\t *    from a DOM data source\r\n\t\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\r\n\t\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\r\n\t\t\t *\r\n\t\t\t * And the following return is expected:\r\n\t\t\t *\r\n\t\t\t * * {boolean} Include the row in the searched result set (true) or not\r\n\t\t\t *   (false)\r\n\t\t\t *\r\n\t\t\t * Note that as with the main search ability in DataTables, technically this\r\n\t\t\t * is \"filtering\", since it is subtractive. However, for consistency in\r\n\t\t\t * naming we call it searching here.\r\n\t\t\t *\r\n\t\t\t *  @type array\r\n\t\t\t *  @default []\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // The following example shows custom search being applied to the\r\n\t\t\t *    // fourth column (i.e. the data[3] index) based on two input values\r\n\t\t\t *    // from the end-user, matching the data in a certain range.\r\n\t\t\t *    $.fn.dataTable.ext.search.push(\r\n\t\t\t *      function( settings, data, dataIndex ) {\r\n\t\t\t *        var min = document.getElementById('min').value * 1;\r\n\t\t\t *        var max = document.getElementById('max').value * 1;\r\n\t\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\r\n\t\t\t *\r\n\t\t\t *        if ( min == \"\" && max == \"\" ) {\r\n\t\t\t *          return true;\r\n\t\t\t *        }\r\n\t\t\t *        else if ( min == \"\" && version < max ) {\r\n\t\t\t *          return true;\r\n\t\t\t *        }\r\n\t\t\t *        else if ( min < version && \"\" == max ) {\r\n\t\t\t *          return true;\r\n\t\t\t *        }\r\n\t\t\t *        else if ( min < version && version < max ) {\r\n\t\t\t *          return true;\r\n\t\t\t *        }\r\n\t\t\t *        return false;\r\n\t\t\t *      }\r\n\t\t\t *    );\r\n\t\t\t */\r\n\t\t\tsearch: [],\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Selector extensions\r\n\t\t\t *\r\n\t\t\t * The `selector` option can be used to extend the options available for the\r\n\t\t\t * selector modifier options (`selector-modifier` object data type) that\r\n\t\t\t * each of the three built in selector types offer (row, column and cell +\r\n\t\t\t * their plural counterparts). For example the Select extension uses this\r\n\t\t\t * mechanism to provide an option to select only rows, columns and cells\r\n\t\t\t * that have been marked as selected by the end user (`{selected: true}`),\r\n\t\t\t * which can be used in conjunction with the existing built in selector\r\n\t\t\t * options.\r\n\t\t\t *\r\n\t\t\t * Each property is an array to which functions can be pushed. The functions\r\n\t\t\t * take three attributes:\r\n\t\t\t *\r\n\t\t\t * * Settings object for the host table\r\n\t\t\t * * Options object (`selector-modifier` object type)\r\n\t\t\t * * Array of selected item indexes\r\n\t\t\t *\r\n\t\t\t * The return is an array of the resulting item indexes after the custom\r\n\t\t\t * selector has been applied.\r\n\t\t\t *\r\n\t\t\t *  @type object\r\n\t\t\t */\r\n\t\t\tselector: {\r\n\t\t\t\tcell: [],\r\n\t\t\t\tcolumn: [],\r\n\t\t\t\trow: []\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Internal functions, exposed for used in plug-ins.\r\n\t\t\t * \r\n\t\t\t * Please note that you should not need to use the internal methods for\r\n\t\t\t * anything other than a plug-in (and even then, try to avoid if possible).\r\n\t\t\t * The internal function may change between releases.\r\n\t\t\t *\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t */\r\n\t\t\tinternal: {},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Legacy configuration options. Enable and disable legacy options that\r\n\t\t\t * are available in DataTables.\r\n\t\t\t *\r\n\t\t\t *  @type object\r\n\t\t\t */\r\n\t\t\tlegacy: {\r\n\t\t\t\t/**\r\n\t\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing\r\n\t\t\t\t * requests\r\n\t\t\t\t *\r\n\t\t\t\t *  @type boolean\r\n\t\t\t\t *  @default null\r\n\t\t\t\t */\r\n\t\t\t\tajax: null\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Pagination plug-in methods.\r\n\t\t\t * \r\n\t\t\t * Each entry in this object is a function and defines which buttons should\r\n\t\t\t * be shown by the pagination rendering method that is used for the table:\r\n\t\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\r\n\t\t\t * buttons are displayed in the document, while the functions here tell it\r\n\t\t\t * what buttons to display. This is done by returning an array of button\r\n\t\t\t * descriptions (what each button will do).\r\n\t\t\t *\r\n\t\t\t * Pagination types (the four built in options and any additional plug-in\r\n\t\t\t * options defined here) can be used through the `paginationType`\r\n\t\t\t * initialisation parameter.\r\n\t\t\t *\r\n\t\t\t * The functions defined take two parameters:\r\n\t\t\t *\r\n\t\t\t * 1. `{int} page` The current page index\r\n\t\t\t * 2. `{int} pages` The number of pages in the table\r\n\t\t\t *\r\n\t\t\t * Each function is expected to return an array where each element of the\r\n\t\t\t * array can be one of:\r\n\t\t\t *\r\n\t\t\t * * `first` - Jump to first page when activated\r\n\t\t\t * * `last` - Jump to last page when activated\r\n\t\t\t * * `previous` - Show previous page when activated\r\n\t\t\t * * `next` - Show next page when activated\r\n\t\t\t * * `{int}` - Show page of the index given\r\n\t\t\t * * `{array}` - A nested array containing the above elements to add a\r\n\t\t\t *   containing 'DIV' element (might be useful for styling).\r\n\t\t\t *\r\n\t\t\t * Note that DataTables v1.9- used this object slightly differently whereby\r\n\t\t\t * an object with two functions would be defined for each plug-in. That\r\n\t\t\t * ability is still supported by DataTables 1.10+ to provide backwards\r\n\t\t\t * compatibility, but this option of use is now decremented and no longer\r\n\t\t\t * documented in DataTables 1.10+.\r\n\t\t\t *\r\n\t\t\t *  @type object\r\n\t\t\t *  @default {}\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Show previous, next and current page buttons only\r\n\t\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\r\n\t\t\t *      return [ 'previous', page, 'next' ];\r\n\t\t\t *    };\r\n\t\t\t */\r\n\t\t\tpager: {},\r\n\t\t\r\n\t\t\r\n\t\t\trenderer: {\r\n\t\t\t\tpageButton: {},\r\n\t\t\t\theader: {}\r\n\t\t\t},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Ordering plug-ins - custom data source\r\n\t\t\t * \r\n\t\t\t * The extension options for ordering of data available here is complimentary\r\n\t\t\t * to the default type based ordering that DataTables typically uses. It\r\n\t\t\t * allows much greater control over the the data that is being used to\r\n\t\t\t * order a column, but is necessarily therefore more complex.\r\n\t\t\t * \r\n\t\t\t * This type of ordering is useful if you want to do ordering based on data\r\n\t\t\t * live from the DOM (for example the contents of an 'input' element) rather\r\n\t\t\t * than just the static string that DataTables knows of.\r\n\t\t\t * \r\n\t\t\t * The way these plug-ins work is that you create an array of the values you\r\n\t\t\t * wish to be ordering for the column in question and then return that\r\n\t\t\t * array. The data in the array much be in the index order of the rows in\r\n\t\t\t * the table (not the currently ordering order!). Which order data gathering\r\n\t\t\t * function is run here depends on the `dt-init columns.orderDataType`\r\n\t\t\t * parameter that is used for the column (if any).\r\n\t\t\t *\r\n\t\t\t * The functions defined take two parameters:\r\n\t\t\t *\r\n\t\t\t * 1. `{object}` DataTables settings object: see\r\n\t\t\t *    {@link DataTable.models.oSettings}\r\n\t\t\t * 2. `{int}` Target column index\r\n\t\t\t *\r\n\t\t\t * Each function is expected to return an array:\r\n\t\t\t *\r\n\t\t\t * * `{array}` Data for the column to be ordering upon\r\n\t\t\t *\r\n\t\t\t *  @type array\r\n\t\t\t *\r\n\t\t\t *  @example\r\n\t\t\t *    // Ordering using `input` node values\r\n\t\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\r\n\t\t\t *    {\r\n\t\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\r\n\t\t\t *        return $('input', td).val();\r\n\t\t\t *      } );\r\n\t\t\t *    }\r\n\t\t\t */\r\n\t\t\torder: {},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Type based plug-ins.\r\n\t\t\t *\r\n\t\t\t * Each column in DataTables has a type assigned to it, either by automatic\r\n\t\t\t * detection or by direct assignment using the `type` option for the column.\r\n\t\t\t * The type of a column will effect how it is ordering and search (plug-ins\r\n\t\t\t * can also make use of the column type if required).\r\n\t\t\t *\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\ttype: {\r\n\t\t\t\t/**\r\n\t\t\t\t * Type detection functions.\r\n\t\t\t\t *\r\n\t\t\t\t * The functions defined in this object are used to automatically detect\r\n\t\t\t\t * a column's type, making initialisation of DataTables super easy, even\r\n\t\t\t\t * when complex data is in the table.\r\n\t\t\t\t *\r\n\t\t\t\t * The functions defined take two parameters:\r\n\t\t\t\t *\r\n\t\t\t     *  1. `{*}` Data from the column cell to be analysed\r\n\t\t\t     *  2. `{settings}` DataTables settings object. This can be used to\r\n\t\t\t     *     perform context specific type detection - for example detection\r\n\t\t\t     *     based on language settings such as using a comma for a decimal\r\n\t\t\t     *     place. Generally speaking the options from the settings will not\r\n\t\t\t     *     be required\r\n\t\t\t\t *\r\n\t\t\t\t * Each function is expected to return:\r\n\t\t\t\t *\r\n\t\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\r\n\t\t\t\t *   pass it on to the other type detection functions.\r\n\t\t\t\t *\r\n\t\t\t\t *  @type array\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Currency type detection plug-in:\r\n\t\t\t\t *    $.fn.dataTable.ext.type.detect.push(\r\n\t\t\t\t *      function ( data, settings ) {\r\n\t\t\t\t *        // Check the numeric part\r\n\t\t\t\t *        if ( ! data.substring(1).match(/[0-9]/) ) {\r\n\t\t\t\t *          return null;\r\n\t\t\t\t *        }\r\n\t\t\t\t *\r\n\t\t\t\t *        // Check prefixed by currency\r\n\t\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\r\n\t\t\t\t *          return 'currency';\r\n\t\t\t\t *        }\r\n\t\t\t\t *        return null;\r\n\t\t\t\t *      }\r\n\t\t\t\t *    );\r\n\t\t\t\t */\r\n\t\t\t\tdetect: [],\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Type based search formatting.\r\n\t\t\t\t *\r\n\t\t\t\t * The type based searching functions can be used to pre-format the\r\n\t\t\t\t * data to be search on. For example, it can be used to strip HTML\r\n\t\t\t\t * tags or to de-format telephone numbers for numeric only searching.\r\n\t\t\t\t *\r\n\t\t\t\t * Note that is a search is not defined for a column of a given type,\r\n\t\t\t\t * no search formatting will be performed.\r\n\t\t\t\t * \r\n\t\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType\r\n\t\t\t\t * for a column (or have it automatically detected for you by DataTables\r\n\t\t\t\t * or a type detection plug-in), you will typically be using this for\r\n\t\t\t\t * custom sorting, but it can also be used to provide custom searching\r\n\t\t\t\t * by allowing you to pre-processing the data and returning the data in\r\n\t\t\t\t * the format that should be searched upon. This is done by adding\r\n\t\t\t\t * functions this object with a parameter name which matches the sType\r\n\t\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>\r\n\t\t\t\t * for searching data.\r\n\t\t\t\t *\r\n\t\t\t\t * The functions defined take a single parameter:\r\n\t\t\t\t *\r\n\t\t\t     *  1. `{*}` Data from the column cell to be prepared for searching\r\n\t\t\t\t *\r\n\t\t\t\t * Each function is expected to return:\r\n\t\t\t\t *\r\n\t\t\t\t * * `{string|null}` Formatted string that will be used for the searching.\r\n\t\t\t\t *\r\n\t\t\t\t *  @type object\r\n\t\t\t\t *  @default {}\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\r\n\t\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\r\n\t\t\t\t *    }\r\n\t\t\t\t */\r\n\t\t\t\tsearch: {},\r\n\t\t\r\n\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Type based ordering.\r\n\t\t\t\t *\r\n\t\t\t\t * The column type tells DataTables what ordering to apply to the table\r\n\t\t\t\t * when a column is sorted upon. The order for each type that is defined,\r\n\t\t\t\t * is defined by the functions available in this object.\r\n\t\t\t\t *\r\n\t\t\t\t * Each ordering option can be described by three properties added to\r\n\t\t\t\t * this object:\r\n\t\t\t\t *\r\n\t\t\t\t * * `{type}-pre` - Pre-formatting function\r\n\t\t\t\t * * `{type}-asc` - Ascending order function\r\n\t\t\t\t * * `{type}-desc` - Descending order function\r\n\t\t\t\t *\r\n\t\t\t\t * All three can be used together, only `{type}-pre` or only\r\n\t\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\r\n\t\t\t\t * that only `{type}-pre` is used, as this provides the optimal\r\n\t\t\t\t * implementation in terms of speed, although the others are provided\r\n\t\t\t\t * for compatibility with existing Javascript sort functions.\r\n\t\t\t\t *\r\n\t\t\t\t * `{type}-pre`: Functions defined take a single parameter:\r\n\t\t\t\t *\r\n\t\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering\r\n\t\t\t\t *\r\n\t\t\t\t * And return:\r\n\t\t\t\t *\r\n\t\t\t\t * * `{*}` Data to be sorted upon\r\n\t\t\t\t *\r\n\t\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\r\n\t\t\t\t * functions, taking two parameters:\r\n\t\t\t\t *\r\n\t\t\t     *  1. `{*}` Data to compare to the second parameter\r\n\t\t\t     *  2. `{*}` Data to compare to the first parameter\r\n\t\t\t\t *\r\n\t\t\t\t * And returning:\r\n\t\t\t\t *\r\n\t\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\r\n\t\t\t\t *   than the second parameter, ===0 if the two parameters are equal and\r\n\t\t\t\t *   >0 if the first parameter should be sorted height than the second\r\n\t\t\t\t *   parameter.\r\n\t\t\t\t * \r\n\t\t\t\t *  @type object\r\n\t\t\t\t *  @default {}\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\r\n\t\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\r\n\t\t\t\t *      \"string-pre\": function(x) {\r\n\t\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\r\n\t\t\t\t *        return parseFloat( a );\r\n\t\t\t\t *      }\r\n\t\t\t\t *    } );\r\n\t\t\t\t *\r\n\t\t\t\t *  @example\r\n\t\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method\r\n\t\t\t\t *    $.extend( $.fn.dataTable.ext.order, {\r\n\t\t\t\t *      \"string-case-asc\": function(x,y) {\r\n\t\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n\t\t\t\t *      },\r\n\t\t\t\t *      \"string-case-desc\": function(x,y) {\r\n\t\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n\t\t\t\t *      }\r\n\t\t\t\t *    } );\r\n\t\t\t\t */\r\n\t\t\t\torder: {}\r\n\t\t\t},\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Unique DataTables instance counter\r\n\t\t\t *\r\n\t\t\t * @type int\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_unique: 0,\r\n\t\t\r\n\t\t\r\n\t\t\t//\r\n\t\t\t// Depreciated\r\n\t\t\t// The following properties are retained for backwards compatibility only.\r\n\t\t\t// The should not be used in new projects and will be removed in a future\r\n\t\t\t// version\r\n\t\t\t//\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Version check function.\r\n\t\t\t *  @type function\r\n\t\t\t *  @depreciated Since 1.10\r\n\t\t\t */\r\n\t\t\tfnVersionCheck: DataTable.fnVersionCheck,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Index for what 'this' index API functions should use\r\n\t\t\t *  @type int\r\n\t\t\t *  @deprecated Since v1.10\r\n\t\t\t */\r\n\t\t\tiApiIndex: 0,\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * jQuery UI class container\r\n\t\t\t *  @type object\r\n\t\t\t *  @deprecated Since v1.10\r\n\t\t\t */\r\n\t\t\toJUIClasses: {},\r\n\t\t\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * Software version\r\n\t\t\t *  @type string\r\n\t\t\t *  @deprecated Since v1.10\r\n\t\t\t */\r\n\t\t\tsVersion: DataTable.version\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t//\r\n\t\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\r\n\t\t//\r\n\t\t$.extend( _ext, {\r\n\t\t\tafnFiltering: _ext.search,\r\n\t\t\taTypes:       _ext.type.detect,\r\n\t\t\tofnSearch:    _ext.type.search,\r\n\t\t\toSort:        _ext.type.order,\r\n\t\t\tafnSortData:  _ext.order,\r\n\t\t\taoFeatures:   _ext.feature,\r\n\t\t\toApi:         _ext.internal,\r\n\t\t\toStdClasses:  _ext.classes,\r\n\t\t\toPagination:  _ext.pager\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\t$.extend( DataTable.ext.classes, {\r\n\t\t\t\"sTable\": \"dataTable\",\r\n\t\t\t\"sNoFooter\": \"no-footer\",\r\n\t\t\r\n\t\t\t/* Paging buttons */\r\n\t\t\t\"sPageButton\": \"paginate_button\",\r\n\t\t\t\"sPageButtonActive\": \"current\",\r\n\t\t\t\"sPageButtonDisabled\": \"disabled\",\r\n\t\t\r\n\t\t\t/* Striping classes */\r\n\t\t\t\"sStripeOdd\": \"odd\",\r\n\t\t\t\"sStripeEven\": \"even\",\r\n\t\t\r\n\t\t\t/* Empty row */\r\n\t\t\t\"sRowEmpty\": \"dataTables_empty\",\r\n\t\t\r\n\t\t\t/* Features */\r\n\t\t\t\"sWrapper\": \"dataTables_wrapper\",\r\n\t\t\t\"sFilter\": \"dataTables_filter\",\r\n\t\t\t\"sInfo\": \"dataTables_info\",\r\n\t\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\r\n\t\t\t\"sLength\": \"dataTables_length\",\r\n\t\t\t\"sProcessing\": \"dataTables_processing\",\r\n\t\t\r\n\t\t\t/* Sorting */\r\n\t\t\t\"sSortAsc\": \"sorting_asc\",\r\n\t\t\t\"sSortDesc\": \"sorting_desc\",\r\n\t\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */\r\n\t\t\t\"sSortableAsc\": \"sorting_desc_disabled\",\r\n\t\t\t\"sSortableDesc\": \"sorting_asc_disabled\",\r\n\t\t\t\"sSortableNone\": \"sorting_disabled\",\r\n\t\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\r\n\t\t\r\n\t\t\t/* Filtering */\r\n\t\t\t\"sFilterInput\": \"\",\r\n\t\t\r\n\t\t\t/* Page length */\r\n\t\t\t\"sLengthSelect\": \"\",\r\n\t\t\r\n\t\t\t/* Scrolling */\r\n\t\t\t\"sScrollWrapper\": \"dataTables_scroll\",\r\n\t\t\t\"sScrollHead\": \"dataTables_scrollHead\",\r\n\t\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\r\n\t\t\t\"sScrollBody\": \"dataTables_scrollBody\",\r\n\t\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",\r\n\t\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",\r\n\t\t\r\n\t\t\t/* Misc */\r\n\t\t\t\"sHeaderTH\": \"\",\r\n\t\t\t\"sFooterTH\": \"\",\r\n\t\t\r\n\t\t\t// Deprecated\r\n\t\t\t\"sSortJUIAsc\": \"\",\r\n\t\t\t\"sSortJUIDesc\": \"\",\r\n\t\t\t\"sSortJUI\": \"\",\r\n\t\t\t\"sSortJUIAscAllowed\": \"\",\r\n\t\t\t\"sSortJUIDescAllowed\": \"\",\r\n\t\t\t\"sSortJUIWrapper\": \"\",\r\n\t\t\t\"sSortIcon\": \"\",\r\n\t\t\t\"sJUIHeader\": \"\",\r\n\t\t\t\"sJUIFooter\": \"\"\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\tvar extPagination = DataTable.ext.pager;\r\n\t\t\r\n\t\tfunction _numbers ( page, pages ) {\r\n\t\t\tvar\r\n\t\t\t\tnumbers = [],\r\n\t\t\t\tbuttons = extPagination.numbers_length,\r\n\t\t\t\thalf = Math.floor( buttons / 2 ),\r\n\t\t\t\ti = 1;\r\n\t\t\r\n\t\t\tif ( pages <= buttons ) {\r\n\t\t\t\tnumbers = _range( 0, pages );\r\n\t\t\t}\r\n\t\t\telse if ( page <= half ) {\r\n\t\t\t\tnumbers = _range( 0, buttons-2 );\r\n\t\t\t\tnumbers.push( 'ellipsis' );\r\n\t\t\t\tnumbers.push( pages-1 );\r\n\t\t\t}\r\n\t\t\telse if ( page >= pages - 1 - half ) {\r\n\t\t\t\tnumbers = _range( pages-(buttons-2), pages );\r\n\t\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\r\n\t\t\t\tnumbers.splice( 0, 0, 0 );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnumbers = _range( page-half+2, page+half-1 );\r\n\t\t\t\tnumbers.push( 'ellipsis' );\r\n\t\t\t\tnumbers.push( pages-1 );\r\n\t\t\t\tnumbers.splice( 0, 0, 'ellipsis' );\r\n\t\t\t\tnumbers.splice( 0, 0, 0 );\r\n\t\t\t}\r\n\t\t\r\n\t\t\tnumbers.DT_el = 'span';\r\n\t\t\treturn numbers;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t$.extend( extPagination, {\r\n\t\t\tsimple: function ( page, pages ) {\r\n\t\t\t\treturn [ 'previous', 'next' ];\r\n\t\t\t},\r\n\t\t\r\n\t\t\tfull: function ( page, pages ) {\r\n\t\t\t\treturn [  'first', 'previous', 'next', 'last' ];\r\n\t\t\t},\r\n\t\t\r\n\t\t\tnumbers: function ( page, pages ) {\r\n\t\t\t\treturn [ _numbers(page, pages) ];\r\n\t\t\t},\r\n\t\t\r\n\t\t\tsimple_numbers: function ( page, pages ) {\r\n\t\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];\r\n\t\t\t},\r\n\t\t\r\n\t\t\tfull_numbers: function ( page, pages ) {\r\n\t\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tfirst_last_numbers: function (page, pages) {\r\n\t\t \t\treturn ['first', _numbers(page, pages), 'last'];\r\n\t\t \t},\r\n\t\t\r\n\t\t\t// For testing and plug-ins to use\r\n\t\t\t_numbers: _numbers,\r\n\t\t\r\n\t\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_\r\n\t\t\tnumbers_length: 7\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\t$.extend( true, DataTable.ext.renderer, {\r\n\t\t\tpageButton: {\r\n\t\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {\r\n\t\t\t\t\tvar classes = settings.oClasses;\r\n\t\t\t\t\tvar lang = settings.oLanguage.oPaginate;\r\n\t\t\t\t\tvar aria = settings.oLanguage.oAria.paginate || {};\r\n\t\t\t\t\tvar btnDisplay, btnClass, counter=0;\r\n\t\t\r\n\t\t\t\t\tvar attach = function( container, buttons ) {\r\n\t\t\t\t\t\tvar i, ien, node, button, tabIndex;\r\n\t\t\t\t\t\tvar disabledClass = classes.sPageButtonDisabled;\r\n\t\t\t\t\t\tvar clickHandler = function ( e ) {\r\n\t\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );\r\n\t\t\t\t\t\t};\r\n\t\t\r\n\t\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n\t\t\t\t\t\t\tbutton = buttons[i];\r\n\t\t\r\n\t\t\t\t\t\t\tif ( Array.isArray( button ) ) {\r\n\t\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )\r\n\t\t\t\t\t\t\t\t\t.appendTo( container );\r\n\t\t\t\t\t\t\t\tattach( inner, button );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tbtnDisplay = null;\r\n\t\t\t\t\t\t\t\tbtnClass = button;\r\n\t\t\t\t\t\t\t\ttabIndex = settings.iTabIndex;\r\n\t\t\r\n\t\t\t\t\t\t\t\tswitch ( button ) {\r\n\t\t\t\t\t\t\t\t\tcase 'ellipsis':\r\n\t\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\tcase 'first':\r\n\t\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\t\tif ( page === 0 ) {\r\n\t\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\r\n\t\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\tcase 'previous':\r\n\t\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\t\tif ( page === 0 ) {\r\n\t\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\r\n\t\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\tcase 'next':\r\n\t\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {\r\n\t\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\r\n\t\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\tcase 'last':\r\n\t\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {\r\n\t\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\r\n\t\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\tbtnDisplay = settings.fnFormatNumber( button + 1 );\r\n\t\t\t\t\t\t\t\t\t\tbtnClass = page === button ?\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t\tif ( btnDisplay !== null ) {\r\n\t\t\t\t\t\t\t\t\tnode = $('<a>', {\r\n\t\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\r\n\t\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\r\n\t\t\t\t\t\t\t\t\t\t\t'aria-label': aria[ button ],\r\n\t\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,\r\n\t\t\t\t\t\t\t\t\t\t\t'tabindex': tabIndex,\r\n\t\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\r\n\t\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\r\n\t\t\t\t\t\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t\t\t\t\t.html( btnDisplay )\r\n\t\t\t\t\t\t\t\t\t\t.appendTo( container );\r\n\t\t\r\n\t\t\t\t\t\t\t\t\t_fnBindAction(\r\n\t\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\r\n\t\t\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\r\n\t\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\r\n\t\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for\r\n\t\t\t\t\t// accessibility, but neither are frames.\r\n\t\t\t\t\tvar activeEl;\r\n\t\t\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// Because this approach is destroying and recreating the paging\r\n\t\t\t\t\t\t// elements, focus is lost on the select button which is bad for\r\n\t\t\t\t\t\t// accessibility. So we want to restore focus once the draw has\r\n\t\t\t\t\t\t// completed\r\n\t\t\t\t\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (e) {}\r\n\t\t\r\n\t\t\t\t\tattach( $(host).empty(), buttons );\r\n\t\t\r\n\t\t\t\t\tif ( activeEl !== undefined ) {\r\n\t\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Built in type detection. See model.ext.aTypes for information about\r\n\t\t// what is required from this methods.\r\n\t\t$.extend( DataTable.ext.type.detect, [\r\n\t\t\t// Plain numbers - first since V8 detects some plain numbers as dates\r\n\t\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\r\n\t\t\tfunction ( d, settings )\r\n\t\t\t{\r\n\t\t\t\tvar decimal = settings.oLanguage.sDecimal;\r\n\t\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// Dates (only those recognised by the browser's Date.parse)\r\n\t\t\tfunction ( d, settings )\r\n\t\t\t{\r\n\t\t\t\t// V8 tries _very_ hard to make a string passed into `Date.parse()`\r\n\t\t\t\t// valid, so we need to use a regex to restrict date formats. Use a\r\n\t\t\t\t// plug-in for anything other than ISO8601 style strings\r\n\t\t\t\tif ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tvar parsed = Date.parse(d);\r\n\t\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// Formatted numbers\r\n\t\t\tfunction ( d, settings )\r\n\t\t\t{\r\n\t\t\t\tvar decimal = settings.oLanguage.sDecimal;\r\n\t\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// HTML numeric\r\n\t\t\tfunction ( d, settings )\r\n\t\t\t{\r\n\t\t\t\tvar decimal = settings.oLanguage.sDecimal;\r\n\t\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// HTML numeric, formatted\r\n\t\t\tfunction ( d, settings )\r\n\t\t\t{\r\n\t\t\t\tvar decimal = settings.oLanguage.sDecimal;\r\n\t\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// HTML (this is strict checking - there must be html)\r\n\t\t\tfunction ( d, settings )\r\n\t\t\t{\r\n\t\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\r\n\t\t\t\t\t'html' : null;\r\n\t\t\t}\r\n\t\t] );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Filter formatting functions. See model.ext.ofnSearch for information about\r\n\t\t// what is required from these methods.\r\n\t\t// \r\n\t\t// Note that additional search methods are added for the html numbers and\r\n\t\t// html formatted numbers by `_addNumericSort()` when we know what the decimal\r\n\t\t// place is\r\n\t\t\r\n\t\t\r\n\t\t$.extend( DataTable.ext.type.search, {\r\n\t\t\thtml: function ( data ) {\r\n\t\t\t\treturn _empty(data) ?\r\n\t\t\t\t\tdata :\r\n\t\t\t\t\ttypeof data === 'string' ?\r\n\t\t\t\t\t\tdata\r\n\t\t\t\t\t\t\t.replace( _re_new_lines, \" \" )\r\n\t\t\t\t\t\t\t.replace( _re_html, \"\" ) :\r\n\t\t\t\t\t\t'';\r\n\t\t\t},\r\n\t\t\r\n\t\t\tstring: function ( data ) {\r\n\t\t\t\treturn _empty(data) ?\r\n\t\t\t\t\tdata :\r\n\t\t\t\t\ttypeof data === 'string' ?\r\n\t\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :\r\n\t\t\t\t\t\tdata;\r\n\t\t\t}\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {\r\n\t\t\tif ( d !== 0 && (!d || d === '-') ) {\r\n\t\t\t\treturn -Infinity;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// If a decimal place other than `.` is used, it needs to be given to the\r\n\t\t\t// function so we can detect it and replace with a `.` which is the only\r\n\t\t\t// decimal place Javascript recognises - it is not locale aware.\r\n\t\t\tif ( decimalPlace ) {\r\n\t\t\t\td = _numToDecimal( d, decimalPlace );\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif ( d.replace ) {\r\n\t\t\t\tif ( re1 ) {\r\n\t\t\t\t\td = d.replace( re1, '' );\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif ( re2 ) {\r\n\t\t\t\t\td = d.replace( re2, '' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn d * 1;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t// Add the numeric 'deformatting' functions for sorting and search. This is done\r\n\t\t// in a function to provide an easy ability for the language options to add\r\n\t\t// additional methods if a non-period decimal place is used.\r\n\t\tfunction _addNumericSort ( decimalPlace ) {\r\n\t\t\t$.each(\r\n\t\t\t\t{\r\n\t\t\t\t\t// Plain numbers\r\n\t\t\t\t\t\"num\": function ( d ) {\r\n\t\t\t\t\t\treturn __numericReplace( d, decimalPlace );\r\n\t\t\t\t\t},\r\n\t\t\r\n\t\t\t\t\t// Formatted numbers\r\n\t\t\t\t\t\"num-fmt\": function ( d ) {\r\n\t\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );\r\n\t\t\t\t\t},\r\n\t\t\r\n\t\t\t\t\t// HTML numeric\r\n\t\t\t\t\t\"html-num\": function ( d ) {\r\n\t\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );\r\n\t\t\t\t\t},\r\n\t\t\r\n\t\t\t\t\t// HTML numeric, formatted\r\n\t\t\t\t\t\"html-num-fmt\": function ( d ) {\r\n\t\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfunction ( key, fn ) {\r\n\t\t\t\t\t// Add the ordering method\r\n\t\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;\r\n\t\t\r\n\t\t\t\t\t// For HTML types add a search formatter that will strip the HTML\r\n\t\t\t\t\tif ( key.match(/^html\\-/) ) {\r\n\t\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Default sort methods\r\n\t\t$.extend( _ext.type.order, {\r\n\t\t\t// Dates\r\n\t\t\t\"date-pre\": function ( d ) {\r\n\t\t\t\tvar ts = Date.parse( d );\r\n\t\t\t\treturn isNaN(ts) ? -Infinity : ts;\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// html\r\n\t\t\t\"html-pre\": function ( a ) {\r\n\t\t\t\treturn _empty(a) ?\r\n\t\t\t\t\t'' :\r\n\t\t\t\t\ta.replace ?\r\n\t\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :\r\n\t\t\t\t\t\ta+'';\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// string\r\n\t\t\t\"string-pre\": function ( a ) {\r\n\t\t\t\t// This is a little complex, but faster than always calling toString,\r\n\t\t\t\t// http://jsperf.com/tostring-v-check\r\n\t\t\t\treturn _empty(a) ?\r\n\t\t\t\t\t'' :\r\n\t\t\t\t\ttypeof a === 'string' ?\r\n\t\t\t\t\t\ta.toLowerCase() :\r\n\t\t\t\t\t\t! a.toString ?\r\n\t\t\t\t\t\t\t'' :\r\n\t\t\t\t\t\t\ta.toString();\r\n\t\t\t},\r\n\t\t\r\n\t\t\t// string-asc and -desc are retained only for compatibility with the old\r\n\t\t\t// sort methods\r\n\t\t\t\"string-asc\": function ( x, y ) {\r\n\t\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n\t\t\t},\r\n\t\t\r\n\t\t\t\"string-desc\": function ( x, y ) {\r\n\t\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n\t\t\t}\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\t// Numeric sorting types - order doesn't matter here\r\n\t\t_addNumericSort( '' );\r\n\t\t\r\n\t\t\r\n\t\t$.extend( true, DataTable.ext.renderer, {\r\n\t\t\theader: {\r\n\t\t\t\t_: function ( settings, cell, column, classes ) {\r\n\t\t\t\t\t// No additional mark-up required\r\n\t\t\t\t\t// Attach a sort listener to update on sort - note that using the\r\n\t\t\t\t\t// `DT` namespace will allow the event to be removed automatically\r\n\t\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are\r\n\t\t\t\t\t// listening for\r\n\t\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n\t\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host\r\n\t\t\t\t\t\t\treturn;               // table, not a nested one\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tvar colIdx = column.idx;\r\n\t\t\r\n\t\t\t\t\t\tcell\r\n\t\t\t\t\t\t\t.removeClass(\r\n\t\t\t\t\t\t\t\tclasses.sSortAsc +' '+\r\n\t\t\t\t\t\t\t\tclasses.sSortDesc\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\r\n\t\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n\t\t\t\t\t\t\t\t\tclasses.sSortDesc :\r\n\t\t\t\t\t\t\t\t\tcolumn.sSortingClass\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t} );\r\n\t\t\t\t},\r\n\t\t\r\n\t\t\t\tjqueryui: function ( settings, cell, column, classes ) {\r\n\t\t\t\t\t$('<div/>')\r\n\t\t\t\t\t\t.addClass( classes.sSortJUIWrapper )\r\n\t\t\t\t\t\t.append( cell.contents() )\r\n\t\t\t\t\t\t.append( $('<span/>')\r\n\t\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.appendTo( cell );\r\n\t\t\r\n\t\t\t\t\t// Attach a sort listener to update on sort\r\n\t\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n\t\t\t\t\t\tif ( settings !== ctx ) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tvar colIdx = column.idx;\r\n\t\t\r\n\t\t\t\t\t\tcell\r\n\t\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\r\n\t\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\r\n\t\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n\t\t\t\t\t\t\t\t\tclasses.sSortDesc :\r\n\t\t\t\t\t\t\t\t\tcolumn.sSortingClass\r\n\t\t\t\t\t\t\t);\r\n\t\t\r\n\t\t\t\t\t\tcell\r\n\t\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )\r\n\t\t\t\t\t\t\t.removeClass(\r\n\t\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+\r\n\t\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+\r\n\t\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+\r\n\t\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+\r\n\t\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\r\n\t\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\r\n\t\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :\r\n\t\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\t\r\n\t\t/*\r\n\t\t * Public helper functions. These aren't used internally by DataTables, or\r\n\t\t * called by any of the options passed into DataTables, but they can be used\r\n\t\t * externally by developers working with DataTables. They are helper functions\r\n\t\t * to make working with DataTables a little bit easier.\r\n\t\t */\r\n\t\t\r\n\t\tvar __htmlEscapeEntities = function ( d ) {\r\n\t\t\tif (Array.isArray(d)) {\r\n\t\t\t\td = d.join(',');\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn typeof d === 'string' ?\r\n\t\t\t\td\r\n\t\t\t\t\t.replace(/&/g, '&amp;')\r\n\t\t\t\t\t.replace(/</g, '&lt;')\r\n\t\t\t\t\t.replace(/>/g, '&gt;')\r\n\t\t\t\t\t.replace(/\"/g, '&quot;') :\r\n\t\t\t\td;\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * Helpers for `columns.render`.\r\n\t\t *\r\n\t\t * The options defined here can be used with the `columns.render` initialisation\r\n\t\t * option to provide a display renderer. The following functions are defined:\r\n\t\t *\r\n\t\t * * `number` - Will format numeric data (defined by `columns.data`) for\r\n\t\t *   display, retaining the original unformatted data for sorting and filtering.\r\n\t\t *   It takes 5 parameters:\r\n\t\t *   * `string` - Thousands grouping separator\r\n\t\t *   * `string` - Decimal point indicator\r\n\t\t *   * `integer` - Number of decimal points to show\r\n\t\t *   * `string` (optional) - Prefix.\r\n\t\t *   * `string` (optional) - Postfix (/suffix).\r\n\t\t * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\r\n\t\t *   parameters.\r\n\t\t *\r\n\t\t * @example\r\n\t\t *   // Column definition using the number renderer\r\n\t\t *   {\r\n\t\t *     data: \"salary\",\r\n\t\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\r\n\t\t *   }\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t */\r\n\t\tDataTable.render = {\r\n\t\t\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdisplay: function ( d ) {\r\n\t\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {\r\n\t\t\t\t\t\t\treturn d;\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tvar negative = d < 0 ? '-' : '';\r\n\t\t\t\t\t\tvar flo = parseFloat( d );\r\n\t\t\r\n\t\t\t\t\t\t// If NaN then there isn't much formatting that we can do - just\r\n\t\t\t\t\t\t// return immediately, escaping any HTML (this was supposed to\r\n\t\t\t\t\t\t// be a number after all)\r\n\t\t\t\t\t\tif ( isNaN( flo ) ) {\r\n\t\t\t\t\t\t\treturn __htmlEscapeEntities( d );\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tflo = flo.toFixed( precision );\r\n\t\t\t\t\t\td = Math.abs( flo );\r\n\t\t\r\n\t\t\t\t\t\tvar intPart = parseInt( d, 10 );\r\n\t\t\t\t\t\tvar floatPart = precision ?\r\n\t\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):\r\n\t\t\t\t\t\t\t'';\r\n\t\t\r\n\t\t\t\t\t\t// If zero, then can't have a negative prefix\r\n\t\t\t\t\t\tif (intPart === 0 && parseFloat(floatPart) === 0) {\r\n\t\t\t\t\t\t\tnegative = '';\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\treturn negative + (prefix||'') +\r\n\t\t\t\t\t\t\tintPart.toString().replace(\r\n\t\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands\r\n\t\t\t\t\t\t\t) +\r\n\t\t\t\t\t\t\tfloatPart +\r\n\t\t\t\t\t\t\t(postfix||'');\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\r\n\t\t\ttext: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdisplay: __htmlEscapeEntities,\r\n\t\t\t\t\tfilter: __htmlEscapeEntities\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\t * This is really a good bit rubbish this method of exposing the internal methods\r\n\t\t * publicly... - To be fixed in 2.0 using methods on the prototype\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Create a wrapper function for exporting an internal functions to an external API.\r\n\t\t *  @param {string} fn API function name\r\n\t\t *  @returns {function} wrapped function\r\n\t\t *  @memberof DataTable#internal\r\n\t\t */\r\n\t\tfunction _fnExternApiFunc (fn)\r\n\t\t{\r\n\t\t\treturn function() {\r\n\t\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\r\n\t\t\t\t\tArray.prototype.slice.call(arguments)\r\n\t\t\t\t);\r\n\t\t\t\treturn DataTable.ext.internal[fn].apply( this, args );\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Reference to internal functions for use by plug-in developers. Note that\r\n\t\t * these methods are references to internal functions and are considered to be\r\n\t\t * private. If you use these methods, be aware that they are liable to change\r\n\t\t * between versions.\r\n\t\t *  @namespace\r\n\t\t */\r\n\t\t$.extend( DataTable.ext.internal, {\r\n\t\t\t_fnExternApiFunc: _fnExternApiFunc,\r\n\t\t\t_fnBuildAjax: _fnBuildAjax,\r\n\t\t\t_fnAjaxUpdate: _fnAjaxUpdate,\r\n\t\t\t_fnAjaxParameters: _fnAjaxParameters,\r\n\t\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\r\n\t\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,\r\n\t\t\t_fnAddColumn: _fnAddColumn,\r\n\t\t\t_fnColumnOptions: _fnColumnOptions,\r\n\t\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,\r\n\t\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\r\n\t\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,\r\n\t\t\t_fnVisbleColumns: _fnVisbleColumns,\r\n\t\t\t_fnGetColumns: _fnGetColumns,\r\n\t\t\t_fnColumnTypes: _fnColumnTypes,\r\n\t\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,\r\n\t\t\t_fnHungarianMap: _fnHungarianMap,\r\n\t\t\t_fnCamelToHungarian: _fnCamelToHungarian,\r\n\t\t\t_fnLanguageCompat: _fnLanguageCompat,\r\n\t\t\t_fnBrowserDetect: _fnBrowserDetect,\r\n\t\t\t_fnAddData: _fnAddData,\r\n\t\t\t_fnAddTr: _fnAddTr,\r\n\t\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,\r\n\t\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,\r\n\t\t\t_fnGetCellData: _fnGetCellData,\r\n\t\t\t_fnSetCellData: _fnSetCellData,\r\n\t\t\t_fnSplitObjNotation: _fnSplitObjNotation,\r\n\t\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,\r\n\t\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,\r\n\t\t\t_fnGetDataMaster: _fnGetDataMaster,\r\n\t\t\t_fnClearTable: _fnClearTable,\r\n\t\t\t_fnDeleteIndex: _fnDeleteIndex,\r\n\t\t\t_fnInvalidate: _fnInvalidate,\r\n\t\t\t_fnGetRowElements: _fnGetRowElements,\r\n\t\t\t_fnCreateTr: _fnCreateTr,\r\n\t\t\t_fnBuildHead: _fnBuildHead,\r\n\t\t\t_fnDrawHead: _fnDrawHead,\r\n\t\t\t_fnDraw: _fnDraw,\r\n\t\t\t_fnReDraw: _fnReDraw,\r\n\t\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,\r\n\t\t\t_fnDetectHeader: _fnDetectHeader,\r\n\t\t\t_fnGetUniqueThs: _fnGetUniqueThs,\r\n\t\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\r\n\t\t\t_fnFilterComplete: _fnFilterComplete,\r\n\t\t\t_fnFilterCustom: _fnFilterCustom,\r\n\t\t\t_fnFilterColumn: _fnFilterColumn,\r\n\t\t\t_fnFilter: _fnFilter,\r\n\t\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,\r\n\t\t\t_fnEscapeRegex: _fnEscapeRegex,\r\n\t\t\t_fnFilterData: _fnFilterData,\r\n\t\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\r\n\t\t\t_fnUpdateInfo: _fnUpdateInfo,\r\n\t\t\t_fnInfoMacros: _fnInfoMacros,\r\n\t\t\t_fnInitialise: _fnInitialise,\r\n\t\t\t_fnInitComplete: _fnInitComplete,\r\n\t\t\t_fnLengthChange: _fnLengthChange,\r\n\t\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,\r\n\t\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\r\n\t\t\t_fnPageChange: _fnPageChange,\r\n\t\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\r\n\t\t\t_fnProcessingDisplay: _fnProcessingDisplay,\r\n\t\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,\r\n\t\t\t_fnScrollDraw: _fnScrollDraw,\r\n\t\t\t_fnApplyToChildren: _fnApplyToChildren,\r\n\t\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,\r\n\t\t\t_fnThrottle: _fnThrottle,\r\n\t\t\t_fnConvertToWidth: _fnConvertToWidth,\r\n\t\t\t_fnGetWidestNode: _fnGetWidestNode,\r\n\t\t\t_fnGetMaxLenString: _fnGetMaxLenString,\r\n\t\t\t_fnStringToCss: _fnStringToCss,\r\n\t\t\t_fnSortFlatten: _fnSortFlatten,\r\n\t\t\t_fnSort: _fnSort,\r\n\t\t\t_fnSortAria: _fnSortAria,\r\n\t\t\t_fnSortListener: _fnSortListener,\r\n\t\t\t_fnSortAttachListener: _fnSortAttachListener,\r\n\t\t\t_fnSortingClasses: _fnSortingClasses,\r\n\t\t\t_fnSortData: _fnSortData,\r\n\t\t\t_fnSaveState: _fnSaveState,\r\n\t\t\t_fnLoadState: _fnLoadState,\r\n\t\t\t_fnImplementState: _fnImplementState,\r\n\t\t\t_fnSettingsFromNode: _fnSettingsFromNode,\r\n\t\t\t_fnLog: _fnLog,\r\n\t\t\t_fnMap: _fnMap,\r\n\t\t\t_fnBindAction: _fnBindAction,\r\n\t\t\t_fnCallbackReg: _fnCallbackReg,\r\n\t\t\t_fnCallbackFire: _fnCallbackFire,\r\n\t\t\t_fnLengthOverflow: _fnLengthOverflow,\r\n\t\t\t_fnRenderer: _fnRenderer,\r\n\t\t\t_fnDataSource: _fnDataSource,\r\n\t\t\t_fnRowAttributes: _fnRowAttributes,\r\n\t\t\t_fnExtend: _fnExtend,\r\n\t\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\r\n\t\t\t                                // in 1.10, so this dead-end function is\r\n\t\t\t                                // added to prevent errors\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t\t// jQuery access\r\n\t\t$.fn.dataTable = DataTable;\r\n\t\t\r\n\t\t// Provide access to the host jQuery object (circular reference)\r\n\t\tDataTable.$ = $;\r\n\t\t\r\n\t\t// Legacy aliases\r\n\t\t$.fn.dataTableSettings = DataTable.settings;\r\n\t\t$.fn.dataTableExt = DataTable.ext;\r\n\t\t\r\n\t\t// With a capital `D` we return a DataTables API instance rather than a\r\n\t\t// jQuery object\r\n\t\t$.fn.DataTable = function ( opts ) {\r\n\t\t\treturn $(this).dataTable( opts ).api();\r\n\t\t};\r\n\t\t\r\n\t\t// All properties that are available to $.fn.dataTable should also be\r\n\t\t// available on $.fn.DataTable\r\n\t\t$.each( DataTable, function ( prop, val ) {\r\n\t\t\t$.fn.DataTable[ prop ] = val;\r\n\t\t} );\r\n\t\r\n\t\treturn DataTable;\r\n}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/datatables.net/js/jquery.dataTables.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * jQuery JavaScript Library v3.6.0\r\n * https://jquery.com/\r\n *\r\n * Includes Sizzle.js\r\n * https://sizzlejs.com/\r\n *\r\n * Copyright OpenJS Foundation and other contributors\r\n * Released under the MIT license\r\n * https://jquery.org/license\r\n *\r\n * Date: 2021-03-02T17:08Z\r\n */\r\n( function( global, factory ) {\r\n\r\n\t\"use strict\";\r\n\r\n\tif (  true && typeof module.exports === \"object\" ) {\r\n\r\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\r\n\t\t// is present, execute the factory and get jQuery.\r\n\t\t// For environments that do not have a `window` with a `document`\r\n\t\t// (such as Node.js), expose a factory as module.exports.\r\n\t\t// This accentuates the need for the creation of a real `window`.\r\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\r\n\t\t// See ticket #14549 for more info.\r\n\t\tmodule.exports = global.document ?\r\n\t\t\tfactory( global, true ) :\r\n\t\t\tfunction( w ) {\r\n\t\t\t\tif ( !w.document ) {\r\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\r\n\t\t\t\t}\r\n\t\t\t\treturn factory( w );\r\n\t\t\t};\r\n\t} else {\r\n\t\tfactory( global );\r\n\t}\r\n\r\n// Pass this if window is not defined yet\r\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\r\n\r\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\r\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\r\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\r\n// enough that all such attempts are guarded in a try block.\r\n\"use strict\";\r\n\r\nvar arr = [];\r\n\r\nvar getProto = Object.getPrototypeOf;\r\n\r\nvar slice = arr.slice;\r\n\r\nvar flat = arr.flat ? function( array ) {\r\n\treturn arr.flat.call( array );\r\n} : function( array ) {\r\n\treturn arr.concat.apply( [], array );\r\n};\r\n\r\n\r\nvar push = arr.push;\r\n\r\nvar indexOf = arr.indexOf;\r\n\r\nvar class2type = {};\r\n\r\nvar toString = class2type.toString;\r\n\r\nvar hasOwn = class2type.hasOwnProperty;\r\n\r\nvar fnToString = hasOwn.toString;\r\n\r\nvar ObjectFunctionString = fnToString.call( Object );\r\n\r\nvar support = {};\r\n\r\nvar isFunction = function isFunction( obj ) {\r\n\r\n\t\t// Support: Chrome <=57, Firefox <=52\r\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\r\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\r\n\t\t// We don't want to classify *any* DOM node as a function.\r\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\r\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\r\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\r\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\r\n\t\t\ttypeof obj.item !== \"function\";\r\n\t};\r\n\r\n\r\nvar isWindow = function isWindow( obj ) {\r\n\t\treturn obj != null && obj === obj.window;\r\n\t};\r\n\r\n\r\nvar document = window.document;\r\n\r\n\r\n\r\n\tvar preservedScriptAttributes = {\r\n\t\ttype: true,\r\n\t\tsrc: true,\r\n\t\tnonce: true,\r\n\t\tnoModule: true\r\n\t};\r\n\r\n\tfunction DOMEval( code, node, doc ) {\r\n\t\tdoc = doc || document;\r\n\r\n\t\tvar i, val,\r\n\t\t\tscript = doc.createElement( \"script\" );\r\n\r\n\t\tscript.text = code;\r\n\t\tif ( node ) {\r\n\t\t\tfor ( i in preservedScriptAttributes ) {\r\n\r\n\t\t\t\t// Support: Firefox 64+, Edge 18+\r\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\r\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\r\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\r\n\t\t\t\t// becomes browsing-context connected.\r\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\r\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\r\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\r\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\r\n\t\t\t\t// via an object.\r\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\r\n\t\t\t\tif ( val ) {\r\n\t\t\t\t\tscript.setAttribute( i, val );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\r\n\t}\r\n\r\n\r\nfunction toType( obj ) {\r\n\tif ( obj == null ) {\r\n\t\treturn obj + \"\";\r\n\t}\r\n\r\n\t// Support: Android <=2.3 only (functionish RegExp)\r\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\r\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\r\n\t\ttypeof obj;\r\n}\r\n/* global Symbol */\r\n// Defining this global in .eslintrc.json would create a danger of using the global\r\n// unguarded in another place, it seems safer to define global only for this module\r\n\r\n\r\n\r\nvar\r\n\tversion = \"3.6.0\",\r\n\r\n\t// Define a local copy of jQuery\r\n\tjQuery = function( selector, context ) {\r\n\r\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\r\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\r\n\t\treturn new jQuery.fn.init( selector, context );\r\n\t};\r\n\r\njQuery.fn = jQuery.prototype = {\r\n\r\n\t// The current version of jQuery being used\r\n\tjquery: version,\r\n\r\n\tconstructor: jQuery,\r\n\r\n\t// The default length of a jQuery object is 0\r\n\tlength: 0,\r\n\r\n\ttoArray: function() {\r\n\t\treturn slice.call( this );\r\n\t},\r\n\r\n\t// Get the Nth element in the matched element set OR\r\n\t// Get the whole matched element set as a clean array\r\n\tget: function( num ) {\r\n\r\n\t\t// Return all the elements in a clean array\r\n\t\tif ( num == null ) {\r\n\t\t\treturn slice.call( this );\r\n\t\t}\r\n\r\n\t\t// Return just the one element from the set\r\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\r\n\t},\r\n\r\n\t// Take an array of elements and push it onto the stack\r\n\t// (returning the new matched element set)\r\n\tpushStack: function( elems ) {\r\n\r\n\t\t// Build a new jQuery matched element set\r\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\r\n\r\n\t\t// Add the old object onto the stack (as a reference)\r\n\t\tret.prevObject = this;\r\n\r\n\t\t// Return the newly-formed element set\r\n\t\treturn ret;\r\n\t},\r\n\r\n\t// Execute a callback for every element in the matched set.\r\n\teach: function( callback ) {\r\n\t\treturn jQuery.each( this, callback );\r\n\t},\r\n\r\n\tmap: function( callback ) {\r\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\r\n\t\t\treturn callback.call( elem, i, elem );\r\n\t\t} ) );\r\n\t},\r\n\r\n\tslice: function() {\r\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\r\n\t},\r\n\r\n\tfirst: function() {\r\n\t\treturn this.eq( 0 );\r\n\t},\r\n\r\n\tlast: function() {\r\n\t\treturn this.eq( -1 );\r\n\t},\r\n\r\n\teven: function() {\r\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\r\n\t\t\treturn ( i + 1 ) % 2;\r\n\t\t} ) );\r\n\t},\r\n\r\n\todd: function() {\r\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\r\n\t\t\treturn i % 2;\r\n\t\t} ) );\r\n\t},\r\n\r\n\teq: function( i ) {\r\n\t\tvar len = this.length,\r\n\t\t\tj = +i + ( i < 0 ? len : 0 );\r\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\r\n\t},\r\n\r\n\tend: function() {\r\n\t\treturn this.prevObject || this.constructor();\r\n\t},\r\n\r\n\t// For internal use only.\r\n\t// Behaves like an Array's method, not like a jQuery method.\r\n\tpush: push,\r\n\tsort: arr.sort,\r\n\tsplice: arr.splice\r\n};\r\n\r\njQuery.extend = jQuery.fn.extend = function() {\r\n\tvar options, name, src, copy, copyIsArray, clone,\r\n\t\ttarget = arguments[ 0 ] || {},\r\n\t\ti = 1,\r\n\t\tlength = arguments.length,\r\n\t\tdeep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif ( typeof target === \"boolean\" ) {\r\n\t\tdeep = target;\r\n\r\n\t\t// Skip the boolean and the target\r\n\t\ttarget = arguments[ i ] || {};\r\n\t\ti++;\r\n\t}\r\n\r\n\t// Handle case when target is a string or something (possible in deep copy)\r\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\t// Extend jQuery itself if only one argument is passed\r\n\tif ( i === length ) {\r\n\t\ttarget = this;\r\n\t\ti--;\r\n\t}\r\n\r\n\tfor ( ; i < length; i++ ) {\r\n\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif ( ( options = arguments[ i ] ) != null ) {\r\n\r\n\t\t\t// Extend the base object\r\n\t\t\tfor ( name in options ) {\r\n\t\t\t\tcopy = options[ name ];\r\n\r\n\t\t\t\t// Prevent Object.prototype pollution\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\r\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\r\n\t\t\t\t\tsrc = target[ name ];\r\n\r\n\t\t\t\t\t// Ensure proper type for the source value\r\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\r\n\t\t\t\t\t\tclone = {};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclone = src;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcopyIsArray = false;\r\n\r\n\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\r\n\r\n\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t} else if ( copy !== undefined ) {\r\n\t\t\t\t\ttarget[ name ] = copy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n\r\njQuery.extend( {\r\n\r\n\t// Unique for each copy of jQuery on the page\r\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\r\n\r\n\t// Assume jQuery is ready without the ready module\r\n\tisReady: true,\r\n\r\n\terror: function( msg ) {\r\n\t\tthrow new Error( msg );\r\n\t},\r\n\r\n\tnoop: function() {},\r\n\r\n\tisPlainObject: function( obj ) {\r\n\t\tvar proto, Ctor;\r\n\r\n\t\t// Detect obvious negatives\r\n\t\t// Use toString instead of jQuery.type to catch host objects\r\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tproto = getProto( obj );\r\n\r\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\r\n\t\tif ( !proto ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\r\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\r\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\r\n\t},\r\n\r\n\tisEmptyObject: function( obj ) {\r\n\t\tvar name;\r\n\r\n\t\tfor ( name in obj ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\r\n\t// Evaluates a script in a provided context; falls back to the global one\r\n\t// if not specified.\r\n\tglobalEval: function( code, options, doc ) {\r\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\r\n\t},\r\n\r\n\teach: function( obj, callback ) {\r\n\t\tvar length, i = 0;\r\n\r\n\t\tif ( isArrayLike( obj ) ) {\r\n\t\t\tlength = obj.length;\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor ( i in obj ) {\r\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t},\r\n\r\n\t// results is for internal usage only\r\n\tmakeArray: function( arr, results ) {\r\n\t\tvar ret = results || [];\r\n\r\n\t\tif ( arr != null ) {\r\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\r\n\t\t\t\tjQuery.merge( ret,\r\n\t\t\t\t\ttypeof arr === \"string\" ?\r\n\t\t\t\t\t\t[ arr ] : arr\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tpush.call( ret, arr );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t},\r\n\r\n\tinArray: function( elem, arr, i ) {\r\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\r\n\t},\r\n\r\n\t// Support: Android <=4.0 only, PhantomJS 1 only\r\n\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\tmerge: function( first, second ) {\r\n\t\tvar len = +second.length,\r\n\t\t\tj = 0,\r\n\t\t\ti = first.length;\r\n\r\n\t\tfor ( ; j < len; j++ ) {\r\n\t\t\tfirst[ i++ ] = second[ j ];\r\n\t\t}\r\n\r\n\t\tfirst.length = i;\r\n\r\n\t\treturn first;\r\n\t},\r\n\r\n\tgrep: function( elems, callback, invert ) {\r\n\t\tvar callbackInverse,\r\n\t\t\tmatches = [],\r\n\t\t\ti = 0,\r\n\t\t\tlength = elems.length,\r\n\t\t\tcallbackExpect = !invert;\r\n\r\n\t\t// Go through the array, only saving the items\r\n\t\t// that pass the validator function\r\n\t\tfor ( ; i < length; i++ ) {\r\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\r\n\t\t\tif ( callbackInverse !== callbackExpect ) {\r\n\t\t\t\tmatches.push( elems[ i ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn matches;\r\n\t},\r\n\r\n\t// arg is for internal usage only\r\n\tmap: function( elems, callback, arg ) {\r\n\t\tvar length, value,\r\n\t\t\ti = 0,\r\n\t\t\tret = [];\r\n\r\n\t\t// Go through the array, translating each of the items to their new values\r\n\t\tif ( isArrayLike( elems ) ) {\r\n\t\t\tlength = elems.length;\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\r\n\r\n\t\t\t\tif ( value != null ) {\r\n\t\t\t\t\tret.push( value );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Go through every key on the object,\r\n\t\t} else {\r\n\t\t\tfor ( i in elems ) {\r\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\r\n\r\n\t\t\t\tif ( value != null ) {\r\n\t\t\t\t\tret.push( value );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Flatten any nested arrays\r\n\t\treturn flat( ret );\r\n\t},\r\n\r\n\t// A global GUID counter for objects\r\n\tguid: 1,\r\n\r\n\t// jQuery.support is not used in Core but other projects attach their\r\n\t// properties to it so it needs to exist.\r\n\tsupport: support\r\n} );\r\n\r\nif ( typeof Symbol === \"function\" ) {\r\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\r\n}\r\n\r\n// Populate the class2type map\r\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\r\n\tfunction( _i, name ) {\r\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\r\n\t} );\r\n\r\nfunction isArrayLike( obj ) {\r\n\r\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\r\n\t// `in` check used to prevent JIT error (gh-2145)\r\n\t// hasOwn isn't used here due to false negatives\r\n\t// regarding Nodelist length in IE\r\n\tvar length = !!obj && \"length\" in obj && obj.length,\r\n\t\ttype = toType( obj );\r\n\r\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn type === \"array\" || length === 0 ||\r\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\r\n}\r\nvar Sizzle =\r\n/*!\r\n * Sizzle CSS Selector Engine v2.3.6\r\n * https://sizzlejs.com/\r\n *\r\n * Copyright JS Foundation and other contributors\r\n * Released under the MIT license\r\n * https://js.foundation/\r\n *\r\n * Date: 2021-02-16\r\n */\r\n( function( window ) {\r\nvar i,\r\n\tsupport,\r\n\tExpr,\r\n\tgetText,\r\n\tisXML,\r\n\ttokenize,\r\n\tcompile,\r\n\tselect,\r\n\toutermostContext,\r\n\tsortInput,\r\n\thasDuplicate,\r\n\r\n\t// Local document vars\r\n\tsetDocument,\r\n\tdocument,\r\n\tdocElem,\r\n\tdocumentIsHTML,\r\n\trbuggyQSA,\r\n\trbuggyMatches,\r\n\tmatches,\r\n\tcontains,\r\n\r\n\t// Instance-specific data\r\n\texpando = \"sizzle\" + 1 * new Date(),\r\n\tpreferredDoc = window.document,\r\n\tdirruns = 0,\r\n\tdone = 0,\r\n\tclassCache = createCache(),\r\n\ttokenCache = createCache(),\r\n\tcompilerCache = createCache(),\r\n\tnonnativeSelectorCache = createCache(),\r\n\tsortOrder = function( a, b ) {\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\t// Instance methods\r\n\thasOwn = ( {} ).hasOwnProperty,\r\n\tarr = [],\r\n\tpop = arr.pop,\r\n\tpushNative = arr.push,\r\n\tpush = arr.push,\r\n\tslice = arr.slice,\r\n\r\n\t// Use a stripped-down indexOf as it's faster than native\r\n\t// https://jsperf.com/thor-indexof-vs-for/5\r\n\tindexOf = function( list, elem ) {\r\n\t\tvar i = 0,\r\n\t\t\tlen = list.length;\r\n\t\tfor ( ; i < len; i++ ) {\r\n\t\t\tif ( list[ i ] === elem ) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t},\r\n\r\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\r\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\r\n\r\n\t// Regular expressions\r\n\r\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\r\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\r\n\r\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\r\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\r\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\r\n\r\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\r\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\r\n\r\n\t\t// Operator (capture 2)\r\n\t\t\"*([*^$|!~]?=)\" + whitespace +\r\n\r\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\r\n\t\t// or strings [capture 3 or capture 4]\"\r\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\r\n\t\twhitespace + \"*\\\\]\",\r\n\r\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\r\n\r\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\r\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\r\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\r\n\r\n\t\t// 2. simple (capture 6)\r\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\r\n\r\n\t\t// 3. anything else (capture 2)\r\n\t\t\".*\" +\r\n\t\t\")\\\\)|)\",\r\n\r\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\r\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\r\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\r\n\t\twhitespace + \"+$\", \"g\" ),\r\n\r\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\r\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\r\n\t\t\"*\" ),\r\n\trdescend = new RegExp( whitespace + \"|>\" ),\r\n\r\n\trpseudo = new RegExp( pseudos ),\r\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\r\n\r\n\tmatchExpr = {\r\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\r\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\r\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\r\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\r\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\r\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\r\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\r\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\r\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\r\n\r\n\t\t// For use in libraries implementing .is()\r\n\t\t// We use this for POS matching in `select`\r\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\r\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\r\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\r\n\t},\r\n\r\n\trhtml = /HTML$/i,\r\n\trinputs = /^(?:input|select|textarea|button)$/i,\r\n\trheader = /^h\\d$/i,\r\n\r\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\r\n\r\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\r\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\r\n\r\n\trsibling = /[+~]/,\r\n\r\n\t// CSS escapes\r\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\r\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\r\n\tfunescape = function( escape, nonHex ) {\r\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\r\n\r\n\t\treturn nonHex ?\r\n\r\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\r\n\t\t\tnonHex :\r\n\r\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\r\n\t\t\t// Support: IE <=11+\r\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\r\n\t\t\t// surrogate pair\r\n\t\t\thigh < 0 ?\r\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\r\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\r\n\t},\r\n\r\n\t// CSS string/identifier serialization\r\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\r\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\r\n\tfcssescape = function( ch, asCodePoint ) {\r\n\t\tif ( asCodePoint ) {\r\n\r\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\r\n\t\t\tif ( ch === \"\\0\" ) {\r\n\t\t\t\treturn \"\\uFFFD\";\r\n\t\t\t}\r\n\r\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\r\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\r\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\r\n\t\t}\r\n\r\n\t\t// Other potentially-special ASCII characters get backslash-escaped\r\n\t\treturn \"\\\\\" + ch;\r\n\t},\r\n\r\n\t// Used for iframes\r\n\t// See setDocument()\r\n\t// Removing the function wrapper causes a \"Permission Denied\"\r\n\t// error in IE\r\n\tunloadHandler = function() {\r\n\t\tsetDocument();\r\n\t},\r\n\r\n\tinDisabledFieldset = addCombinator(\r\n\t\tfunction( elem ) {\r\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\r\n\t\t},\r\n\t\t{ dir: \"parentNode\", next: \"legend\" }\r\n\t);\r\n\r\n// Optimize for push.apply( _, NodeList )\r\ntry {\r\n\tpush.apply(\r\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\r\n\t\tpreferredDoc.childNodes\r\n\t);\r\n\r\n\t// Support: Android<4.0\r\n\t// Detect silently failing push.apply\r\n\t// eslint-disable-next-line no-unused-expressions\r\n\tarr[ preferredDoc.childNodes.length ].nodeType;\r\n} catch ( e ) {\r\n\tpush = { apply: arr.length ?\r\n\r\n\t\t// Leverage slice if possible\r\n\t\tfunction( target, els ) {\r\n\t\t\tpushNative.apply( target, slice.call( els ) );\r\n\t\t} :\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Otherwise append directly\r\n\t\tfunction( target, els ) {\r\n\t\t\tvar j = target.length,\r\n\t\t\t\ti = 0;\r\n\r\n\t\t\t// Can't trust NodeList.length\r\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\r\n\t\t\ttarget.length = j - 1;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction Sizzle( selector, context, results, seed ) {\r\n\tvar m, i, elem, nid, match, groups, newSelector,\r\n\t\tnewContext = context && context.ownerDocument,\r\n\r\n\t\t// nodeType defaults to 9, since context defaults to document\r\n\t\tnodeType = context ? context.nodeType : 9;\r\n\r\n\tresults = results || [];\r\n\r\n\t// Return early from calls with invalid selector or context\r\n\tif ( typeof selector !== \"string\" || !selector ||\r\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\r\n\r\n\t\treturn results;\r\n\t}\r\n\r\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\r\n\tif ( !seed ) {\r\n\t\tsetDocument( context );\r\n\t\tcontext = context || document;\r\n\r\n\t\tif ( documentIsHTML ) {\r\n\r\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\r\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\r\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\r\n\r\n\t\t\t\t// ID selector\r\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\r\n\r\n\t\t\t\t\t// Document context\r\n\t\t\t\t\tif ( nodeType === 9 ) {\r\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\r\n\r\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\r\n\t\t\t\t\t\t\t// TODO: identify versions\r\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\r\n\t\t\t\t\t\t\tif ( elem.id === m ) {\r\n\t\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Element context\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\r\n\t\t\t\t\t\t// TODO: identify versions\r\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\r\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\r\n\t\t\t\t\t\t\tcontains( context, elem ) &&\r\n\t\t\t\t\t\t\telem.id === m ) {\r\n\r\n\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// Type selector\r\n\t\t\t\t} else if ( match[ 2 ] ) {\r\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\r\n\t\t\t\t\treturn results;\r\n\r\n\t\t\t\t// Class selector\r\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\r\n\t\t\t\t\tcontext.getElementsByClassName ) {\r\n\r\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Take advantage of querySelectorAll\r\n\t\t\tif ( support.qsa &&\r\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\r\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\r\n\r\n\t\t\t\t// Support: IE 8 only\r\n\t\t\t\t// Exclude object elements\r\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\r\n\r\n\t\t\t\tnewSelector = selector;\r\n\t\t\t\tnewContext = context;\r\n\r\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\r\n\t\t\t\t// descendant combinators, which is not what we want.\r\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\r\n\t\t\t\t// list with an ID selector referencing the scope context.\r\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\r\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\r\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\r\n\t\t\t\tif ( nodeType === 1 &&\r\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\r\n\r\n\t\t\t\t\t// Expand context for sibling selectors\r\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\r\n\t\t\t\t\t\tcontext;\r\n\r\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\r\n\t\t\t\t\t// supports it & if we're not changing the context.\r\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\r\n\r\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\r\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\r\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prefix every selector in the list\r\n\t\t\t\t\tgroups = tokenize( selector );\r\n\t\t\t\t\ti = groups.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\r\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnewSelector = groups.join( \",\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tpush.apply( results,\r\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t} catch ( qsaError ) {\r\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tif ( nid === expando ) {\r\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// All others\r\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\r\n}\r\n\r\n/**\r\n * Create key-value caches of limited size\r\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\r\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\r\n *\tdeleting the oldest entry\r\n */\r\nfunction createCache() {\r\n\tvar keys = [];\r\n\r\n\tfunction cache( key, value ) {\r\n\r\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\r\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\r\n\r\n\t\t\t// Only keep the most recent entries\r\n\t\t\tdelete cache[ keys.shift() ];\r\n\t\t}\r\n\t\treturn ( cache[ key + \" \" ] = value );\r\n\t}\r\n\treturn cache;\r\n}\r\n\r\n/**\r\n * Mark a function for special use by Sizzle\r\n * @param {Function} fn The function to mark\r\n */\r\nfunction markFunction( fn ) {\r\n\tfn[ expando ] = true;\r\n\treturn fn;\r\n}\r\n\r\n/**\r\n * Support testing using an element\r\n * @param {Function} fn Passed the created element and returns a boolean result\r\n */\r\nfunction assert( fn ) {\r\n\tvar el = document.createElement( \"fieldset\" );\r\n\r\n\ttry {\r\n\t\treturn !!fn( el );\r\n\t} catch ( e ) {\r\n\t\treturn false;\r\n\t} finally {\r\n\r\n\t\t// Remove from its parent by default\r\n\t\tif ( el.parentNode ) {\r\n\t\t\tel.parentNode.removeChild( el );\r\n\t\t}\r\n\r\n\t\t// release memory in IE\r\n\t\tel = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Adds the same handler for all of the specified attrs\r\n * @param {String} attrs Pipe-separated list of attributes\r\n * @param {Function} handler The method that will be applied\r\n */\r\nfunction addHandle( attrs, handler ) {\r\n\tvar arr = attrs.split( \"|\" ),\r\n\t\ti = arr.length;\r\n\r\n\twhile ( i-- ) {\r\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks document order of two siblings\r\n * @param {Element} a\r\n * @param {Element} b\r\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\r\n */\r\nfunction siblingCheck( a, b ) {\r\n\tvar cur = b && a,\r\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\r\n\t\t\ta.sourceIndex - b.sourceIndex;\r\n\r\n\t// Use IE sourceIndex if available on both nodes\r\n\tif ( diff ) {\r\n\t\treturn diff;\r\n\t}\r\n\r\n\t// Check if b follows a\r\n\tif ( cur ) {\r\n\t\twhile ( ( cur = cur.nextSibling ) ) {\r\n\t\t\tif ( cur === b ) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn a ? 1 : -1;\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for input types\r\n * @param {String} type\r\n */\r\nfunction createInputPseudo( type ) {\r\n\treturn function( elem ) {\r\n\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\treturn name === \"input\" && elem.type === type;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for buttons\r\n * @param {String} type\r\n */\r\nfunction createButtonPseudo( type ) {\r\n\treturn function( elem ) {\r\n\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for :enabled/:disabled\r\n * @param {Boolean} disabled true for :disabled; false for :enabled\r\n */\r\nfunction createDisabledPseudo( disabled ) {\r\n\r\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\r\n\treturn function( elem ) {\r\n\r\n\t\t// Only certain elements can match :enabled or :disabled\r\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\r\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\r\n\t\tif ( \"form\" in elem ) {\r\n\r\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\r\n\t\t\t// * listed form-associated elements in a disabled fieldset\r\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\r\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\r\n\t\t\t// * option elements in a disabled optgroup\r\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\r\n\t\t\t// All such elements have a \"form\" property.\r\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\r\n\r\n\t\t\t\t// Option elements defer to a parent optgroup if present\r\n\t\t\t\tif ( \"label\" in elem ) {\r\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\r\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn elem.disabled === disabled;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Support: IE 6 - 11\r\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\r\n\t\t\t\treturn elem.isDisabled === disabled ||\r\n\r\n\t\t\t\t\t// Where there is no isDisabled, check manually\r\n\t\t\t\t\t/* jshint -W018 */\r\n\t\t\t\t\telem.isDisabled !== !disabled &&\r\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\r\n\t\t\t}\r\n\r\n\t\t\treturn elem.disabled === disabled;\r\n\r\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\r\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\r\n\t\t// even exist on them, let alone have a boolean value.\r\n\t\t} else if ( \"label\" in elem ) {\r\n\t\t\treturn elem.disabled === disabled;\r\n\t\t}\r\n\r\n\t\t// Remaining elements are neither :enabled nor :disabled\r\n\t\treturn false;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for positionals\r\n * @param {Function} fn\r\n */\r\nfunction createPositionalPseudo( fn ) {\r\n\treturn markFunction( function( argument ) {\r\n\t\targument = +argument;\r\n\t\treturn markFunction( function( seed, matches ) {\r\n\t\t\tvar j,\r\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\r\n\t\t\t\ti = matchIndexes.length;\r\n\r\n\t\t\t// Match elements found at the specified indexes\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\r\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t} );\r\n}\r\n\r\n/**\r\n * Checks a node for validity as a Sizzle context\r\n * @param {Element|Object=} context\r\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\r\n */\r\nfunction testContext( context ) {\r\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\r\n}\r\n\r\n// Expose support vars for convenience\r\nsupport = Sizzle.support = {};\r\n\r\n/**\r\n * Detects XML nodes\r\n * @param {Element|Object} elem An element or a document\r\n * @returns {Boolean} True iff elem is a non-HTML XML node\r\n */\r\nisXML = Sizzle.isXML = function( elem ) {\r\n\tvar namespace = elem && elem.namespaceURI,\r\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\r\n\r\n\t// Support: IE <=8\r\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\r\n\t// https://bugs.jquery.com/ticket/4833\r\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\r\n};\r\n\r\n/**\r\n * Sets document-related variables once based on the current document\r\n * @param {Element|Object} [doc] An element or document object to use to set the document\r\n * @returns {Object} Returns the current document\r\n */\r\nsetDocument = Sizzle.setDocument = function( node ) {\r\n\tvar hasCompare, subWindow,\r\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\r\n\r\n\t// Return early if doc is invalid or already selected\r\n\t// Support: IE 11+, Edge 17 - 18+\r\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t// two documents; shallow comparisons work.\r\n\t// eslint-disable-next-line eqeqeq\r\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\r\n\t\treturn document;\r\n\t}\r\n\r\n\t// Update global variables\r\n\tdocument = doc;\r\n\tdocElem = document.documentElement;\r\n\tdocumentIsHTML = !isXML( document );\r\n\r\n\t// Support: IE 9 - 11+, Edge 12 - 18+\r\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\r\n\t// Support: IE 11+, Edge 17 - 18+\r\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t// two documents; shallow comparisons work.\r\n\t// eslint-disable-next-line eqeqeq\r\n\tif ( preferredDoc != document &&\r\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\r\n\r\n\t\t// Support: IE 11, Edge\r\n\t\tif ( subWindow.addEventListener ) {\r\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\r\n\r\n\t\t// Support: IE 9 - 10 only\r\n\t\t} else if ( subWindow.attachEvent ) {\r\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\r\n\t\t}\r\n\t}\r\n\r\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\r\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\r\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\r\n\t// Support: Safari 6.0 only\r\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\r\n\tsupport.scope = assert( function( el ) {\r\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\r\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\r\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\r\n\t} );\r\n\r\n\t/* Attributes\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Support: IE<8\r\n\t// Verify that getAttribute really returns attributes and not properties\r\n\t// (excepting IE8 booleans)\r\n\tsupport.attributes = assert( function( el ) {\r\n\t\tel.className = \"i\";\r\n\t\treturn !el.getAttribute( \"className\" );\r\n\t} );\r\n\r\n\t/* getElement(s)By*\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Check if getElementsByTagName(\"*\") returns only elements\r\n\tsupport.getElementsByTagName = assert( function( el ) {\r\n\t\tel.appendChild( document.createComment( \"\" ) );\r\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\r\n\t} );\r\n\r\n\t// Support: IE<9\r\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\r\n\r\n\t// Support: IE<10\r\n\t// Check if getElementById returns elements by name\r\n\t// The broken getElementById methods don't pick up programmatically-set names,\r\n\t// so use a roundabout getElementsByName test\r\n\tsupport.getById = assert( function( el ) {\r\n\t\tdocElem.appendChild( el ).id = expando;\r\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\r\n\t} );\r\n\r\n\t// ID filter and find\r\n\tif ( support.getById ) {\r\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\r\n\t\t\tvar attrId = id.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\r\n\t\t\t};\r\n\t\t};\r\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\r\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\r\n\t\t\t\tvar elem = context.getElementById( id );\r\n\t\t\t\treturn elem ? [ elem ] : [];\r\n\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\r\n\t\t\tvar attrId = id.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\r\n\t\t\t\t\telem.getAttributeNode( \"id\" );\r\n\t\t\t\treturn node && node.value === attrId;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\t// Support: IE 6 - 7 only\r\n\t\t// getElementById is not reliable as a find shortcut\r\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\r\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\r\n\t\t\t\tvar node, i, elems,\r\n\t\t\t\t\telem = context.getElementById( id );\r\n\r\n\t\t\t\tif ( elem ) {\r\n\r\n\t\t\t\t\t// Verify the id attribute\r\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\r\n\t\t\t\t\tif ( node && node.value === id ) {\r\n\t\t\t\t\t\treturn [ elem ];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Fall back on getElementsByName\r\n\t\t\t\t\telems = context.getElementsByName( id );\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\r\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\r\n\t\t\t\t\t\tif ( node && node.value === id ) {\r\n\t\t\t\t\t\t\treturn [ elem ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// Tag\r\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\r\n\t\tfunction( tag, context ) {\r\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\r\n\t\t\t\treturn context.getElementsByTagName( tag );\r\n\r\n\t\t\t// DocumentFragment nodes don't have gEBTN\r\n\t\t\t} else if ( support.qsa ) {\r\n\t\t\t\treturn context.querySelectorAll( tag );\r\n\t\t\t}\r\n\t\t} :\r\n\r\n\t\tfunction( tag, context ) {\r\n\t\t\tvar elem,\r\n\t\t\t\ttmp = [],\r\n\t\t\t\ti = 0,\r\n\r\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\r\n\t\t\t\tresults = context.getElementsByTagName( tag );\r\n\r\n\t\t\t// Filter out possible comments\r\n\t\t\tif ( tag === \"*\" ) {\r\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\t\t\ttmp.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t};\r\n\r\n\t// Class\r\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\r\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\r\n\t\t\treturn context.getElementsByClassName( className );\r\n\t\t}\r\n\t};\r\n\r\n\t/* QSA/matchesSelector\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// QSA and matchesSelector support\r\n\r\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\r\n\trbuggyMatches = [];\r\n\r\n\t// qSa(:focus) reports false when true (Chrome 21)\r\n\t// We allow this because of a bug in IE8/9 that throws an error\r\n\t// whenever `document.activeElement` is accessed on an iframe\r\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\r\n\t// See https://bugs.jquery.com/ticket/13378\r\n\trbuggyQSA = [];\r\n\r\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\r\n\r\n\t\t// Build QSA regex\r\n\t\t// Regex strategy adopted from Diego Perini\r\n\t\tassert( function( el ) {\r\n\r\n\t\t\tvar input;\r\n\r\n\t\t\t// Select is set to empty string on purpose\r\n\t\t\t// This is to test IE's treatment of not explicitly\r\n\t\t\t// setting a boolean content attribute,\r\n\t\t\t// since its presence should be enough\r\n\t\t\t// https://bugs.jquery.com/ticket/12359\r\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\r\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\r\n\t\t\t\t\"<option selected=''></option></select>\";\r\n\r\n\t\t\t// Support: IE8, Opera 11-12.16\r\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\r\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\r\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\r\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE8\r\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\r\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\r\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \"~=\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE 11+, Edge 15 - 18+\r\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\r\n\t\t\t// Adding a temporary attribute to the document before the selection works\r\n\t\t\t// around the issue.\r\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\r\n\t\t\tinput = document.createElement( \"input\" );\r\n\t\t\tinput.setAttribute( \"name\", \"\" );\r\n\t\t\tel.appendChild( input );\r\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\r\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Webkit/Opera - :checked should return selected option elements\r\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n\t\t\t// IE8 throws error here and will not see later tests\r\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \":checked\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: Safari 8+, iOS 8+\r\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\r\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\r\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: Firefox <=3.6 - 5 only\r\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\r\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\r\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\r\n\t\t} );\r\n\r\n\t\tassert( function( el ) {\r\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\r\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\r\n\r\n\t\t\t// Support: Windows 8 Native Apps\r\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\r\n\t\t\tvar input = document.createElement( \"input\" );\r\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\r\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\r\n\r\n\t\t\t// Support: IE8\r\n\t\t\t// Enforce case-sensitivity of name attribute\r\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\r\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\r\n\t\t\t}\r\n\r\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\r\n\t\t\t// IE8 throws error here and will not see later tests\r\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\r\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE9-11+\r\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\r\n\t\t\tdocElem.appendChild( el ).disabled = true;\r\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\r\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: Opera 10 - 11 only\r\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\r\n\t\t\tel.querySelectorAll( \"*,:x\" );\r\n\t\t\trbuggyQSA.push( \",.*:\" );\r\n\t\t} );\r\n\t}\r\n\r\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\r\n\t\tdocElem.webkitMatchesSelector ||\r\n\t\tdocElem.mozMatchesSelector ||\r\n\t\tdocElem.oMatchesSelector ||\r\n\t\tdocElem.msMatchesSelector ) ) ) ) {\r\n\r\n\t\tassert( function( el ) {\r\n\r\n\t\t\t// Check to see if it's possible to do matchesSelector\r\n\t\t\t// on a disconnected node (IE 9)\r\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\r\n\r\n\t\t\t// This should fail with an exception\r\n\t\t\t// Gecko does not error, returns false instead\r\n\t\t\tmatches.call( el, \"[s!='']:x\" );\r\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\r\n\t\t} );\r\n\t}\r\n\r\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\r\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\r\n\r\n\t/* Contains\r\n\t---------------------------------------------------------------------- */\r\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\r\n\r\n\t// Element contains another\r\n\t// Purposefully self-exclusive\r\n\t// As in, an element does not contain itself\r\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\r\n\t\tfunction( a, b ) {\r\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\r\n\t\t\t\tbup = b && b.parentNode;\r\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\r\n\t\t\t\tadown.contains ?\r\n\t\t\t\t\tadown.contains( bup ) :\r\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\r\n\t\t\t) );\r\n\t\t} :\r\n\t\tfunction( a, b ) {\r\n\t\t\tif ( b ) {\r\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\r\n\t\t\t\t\tif ( b === a ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t/* Sorting\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Document order sorting\r\n\tsortOrder = hasCompare ?\r\n\tfunction( a, b ) {\r\n\r\n\t\t// Flag for duplicate removal\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Sort on method existence if only one input has compareDocumentPosition\r\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\r\n\t\tif ( compare ) {\r\n\t\t\treturn compare;\r\n\t\t}\r\n\r\n\t\t// Calculate position if both inputs belong to the same document\r\n\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t// two documents; shallow comparisons work.\r\n\t\t// eslint-disable-next-line eqeqeq\r\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\r\n\t\t\ta.compareDocumentPosition( b ) :\r\n\r\n\t\t\t// Otherwise we know they are disconnected\r\n\t\t\t1;\r\n\r\n\t\t// Disconnected nodes\r\n\t\tif ( compare & 1 ||\r\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\r\n\r\n\t\t\t// Choose the first element that is related to our preferred document\r\n\t\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t\t// two documents; shallow comparisons work.\r\n\t\t\t// eslint-disable-next-line eqeqeq\r\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\r\n\t\t\t\tcontains( preferredDoc, a ) ) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t\t// two documents; shallow comparisons work.\r\n\t\t\t// eslint-disable-next-line eqeqeq\r\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\r\n\t\t\t\tcontains( preferredDoc, b ) ) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Maintain original order\r\n\t\t\treturn sortInput ?\r\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\r\n\t\t\t\t0;\r\n\t\t}\r\n\r\n\t\treturn compare & 4 ? -1 : 1;\r\n\t} :\r\n\tfunction( a, b ) {\r\n\r\n\t\t// Exit early if the nodes are identical\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tvar cur,\r\n\t\t\ti = 0,\r\n\t\t\taup = a.parentNode,\r\n\t\t\tbup = b.parentNode,\r\n\t\t\tap = [ a ],\r\n\t\t\tbp = [ b ];\r\n\r\n\t\t// Parentless nodes are either documents or disconnected\r\n\t\tif ( !aup || !bup ) {\r\n\r\n\t\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t\t// two documents; shallow comparisons work.\r\n\t\t\t/* eslint-disable eqeqeq */\r\n\t\t\treturn a == document ? -1 :\r\n\t\t\t\tb == document ? 1 :\r\n\t\t\t\t/* eslint-enable eqeqeq */\r\n\t\t\t\taup ? -1 :\r\n\t\t\t\tbup ? 1 :\r\n\t\t\t\tsortInput ?\r\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\r\n\t\t\t\t0;\r\n\r\n\t\t// If the nodes are siblings, we can do a quick check\r\n\t\t} else if ( aup === bup ) {\r\n\t\t\treturn siblingCheck( a, b );\r\n\t\t}\r\n\r\n\t\t// Otherwise we need full lists of their ancestors for comparison\r\n\t\tcur = a;\r\n\t\twhile ( ( cur = cur.parentNode ) ) {\r\n\t\t\tap.unshift( cur );\r\n\t\t}\r\n\t\tcur = b;\r\n\t\twhile ( ( cur = cur.parentNode ) ) {\r\n\t\t\tbp.unshift( cur );\r\n\t\t}\r\n\r\n\t\t// Walk down the tree looking for a discrepancy\r\n\t\twhile ( ap[ i ] === bp[ i ] ) {\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\treturn i ?\r\n\r\n\t\t\t// Do a sibling check if the nodes have a common ancestor\r\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\r\n\r\n\t\t\t// Otherwise nodes in our document sort first\r\n\t\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t\t// two documents; shallow comparisons work.\r\n\t\t\t/* eslint-disable eqeqeq */\r\n\t\t\tap[ i ] == preferredDoc ? -1 :\r\n\t\t\tbp[ i ] == preferredDoc ? 1 :\r\n\t\t\t/* eslint-enable eqeqeq */\r\n\t\t\t0;\r\n\t};\r\n\r\n\treturn document;\r\n};\r\n\r\nSizzle.matches = function( expr, elements ) {\r\n\treturn Sizzle( expr, null, null, elements );\r\n};\r\n\r\nSizzle.matchesSelector = function( elem, expr ) {\r\n\tsetDocument( elem );\r\n\r\n\tif ( support.matchesSelector && documentIsHTML &&\r\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\r\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\r\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\r\n\r\n\t\ttry {\r\n\t\t\tvar ret = matches.call( elem, expr );\r\n\r\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\r\n\t\t\tif ( ret || support.disconnectedMatch ||\r\n\r\n\t\t\t\t// As well, disconnected nodes are said to be in a document\r\n\t\t\t\t// fragment in IE 9\r\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t} catch ( e ) {\r\n\t\t\tnonnativeSelectorCache( expr, true );\r\n\t\t}\r\n\t}\r\n\r\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\r\n};\r\n\r\nSizzle.contains = function( context, elem ) {\r\n\r\n\t// Set document vars if needed\r\n\t// Support: IE 11+, Edge 17 - 18+\r\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t// two documents; shallow comparisons work.\r\n\t// eslint-disable-next-line eqeqeq\r\n\tif ( ( context.ownerDocument || context ) != document ) {\r\n\t\tsetDocument( context );\r\n\t}\r\n\treturn contains( context, elem );\r\n};\r\n\r\nSizzle.attr = function( elem, name ) {\r\n\r\n\t// Set document vars if needed\r\n\t// Support: IE 11+, Edge 17 - 18+\r\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t// two documents; shallow comparisons work.\r\n\t// eslint-disable-next-line eqeqeq\r\n\tif ( ( elem.ownerDocument || elem ) != document ) {\r\n\t\tsetDocument( elem );\r\n\t}\r\n\r\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\r\n\r\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\r\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\r\n\t\t\tfn( elem, name, !documentIsHTML ) :\r\n\t\t\tundefined;\r\n\r\n\treturn val !== undefined ?\r\n\t\tval :\r\n\t\tsupport.attributes || !documentIsHTML ?\r\n\t\t\telem.getAttribute( name ) :\r\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\r\n\t\t\t\tval.value :\r\n\t\t\t\tnull;\r\n};\r\n\r\nSizzle.escape = function( sel ) {\r\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\r\n};\r\n\r\nSizzle.error = function( msg ) {\r\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\r\n};\r\n\r\n/**\r\n * Document sorting and removing duplicates\r\n * @param {ArrayLike} results\r\n */\r\nSizzle.uniqueSort = function( results ) {\r\n\tvar elem,\r\n\t\tduplicates = [],\r\n\t\tj = 0,\r\n\t\ti = 0;\r\n\r\n\t// Unless we *know* we can detect duplicates, assume their presence\r\n\thasDuplicate = !support.detectDuplicates;\r\n\tsortInput = !support.sortStable && results.slice( 0 );\r\n\tresults.sort( sortOrder );\r\n\r\n\tif ( hasDuplicate ) {\r\n\t\twhile ( ( elem = results[ i++ ] ) ) {\r\n\t\t\tif ( elem === results[ i ] ) {\r\n\t\t\t\tj = duplicates.push( i );\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile ( j-- ) {\r\n\t\t\tresults.splice( duplicates[ j ], 1 );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clear input after sorting to release objects\r\n\t// See https://github.com/jquery/sizzle/pull/225\r\n\tsortInput = null;\r\n\r\n\treturn results;\r\n};\r\n\r\n/**\r\n * Utility function for retrieving the text value of an array of DOM nodes\r\n * @param {Array|Element} elem\r\n */\r\ngetText = Sizzle.getText = function( elem ) {\r\n\tvar node,\r\n\t\tret = \"\",\r\n\t\ti = 0,\r\n\t\tnodeType = elem.nodeType;\r\n\r\n\tif ( !nodeType ) {\r\n\r\n\t\t// If no nodeType, this is expected to be an array\r\n\t\twhile ( ( node = elem[ i++ ] ) ) {\r\n\r\n\t\t\t// Do not traverse comment nodes\r\n\t\t\tret += getText( node );\r\n\t\t}\r\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\r\n\r\n\t\t// Use textContent for elements\r\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\r\n\t\tif ( typeof elem.textContent === \"string\" ) {\r\n\t\t\treturn elem.textContent;\r\n\t\t} else {\r\n\r\n\t\t\t// Traverse its children\r\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\r\n\t\t\t\tret += getText( elem );\r\n\t\t\t}\r\n\t\t}\r\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\r\n\t\treturn elem.nodeValue;\r\n\t}\r\n\r\n\t// Do not include comment or processing instruction nodes\r\n\r\n\treturn ret;\r\n};\r\n\r\nExpr = Sizzle.selectors = {\r\n\r\n\t// Can be adjusted by the user\r\n\tcacheLength: 50,\r\n\r\n\tcreatePseudo: markFunction,\r\n\r\n\tmatch: matchExpr,\r\n\r\n\tattrHandle: {},\r\n\r\n\tfind: {},\r\n\r\n\trelative: {\r\n\t\t\">\": { dir: \"parentNode\", first: true },\r\n\t\t\" \": { dir: \"parentNode\" },\r\n\t\t\"+\": { dir: \"previousSibling\", first: true },\r\n\t\t\"~\": { dir: \"previousSibling\" }\r\n\t},\r\n\r\n\tpreFilter: {\r\n\t\t\"ATTR\": function( match ) {\r\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\r\n\r\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\r\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\r\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\r\n\r\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\r\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\r\n\t\t\t}\r\n\r\n\t\t\treturn match.slice( 0, 4 );\r\n\t\t},\r\n\r\n\t\t\"CHILD\": function( match ) {\r\n\r\n\t\t\t/* matches from matchExpr[\"CHILD\"]\r\n\t\t\t\t1 type (only|nth|...)\r\n\t\t\t\t2 what (child|of-type)\r\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\r\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\r\n\t\t\t\t5 sign of xn-component\r\n\t\t\t\t6 x of xn-component\r\n\t\t\t\t7 sign of y-component\r\n\t\t\t\t8 y of y-component\r\n\t\t\t*/\r\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\r\n\r\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\r\n\r\n\t\t\t\t// nth-* requires argument\r\n\t\t\t\tif ( !match[ 3 ] ) {\r\n\t\t\t\t\tSizzle.error( match[ 0 ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\r\n\t\t\t\t// remember that false/true cast respectively to 0/1\r\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\r\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\r\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\r\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\r\n\r\n\t\t\t\t// other types prohibit arguments\r\n\t\t\t} else if ( match[ 3 ] ) {\r\n\t\t\t\tSizzle.error( match[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\treturn match;\r\n\t\t},\r\n\r\n\t\t\"PSEUDO\": function( match ) {\r\n\t\t\tvar excess,\r\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\r\n\r\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Accept quoted arguments as-is\r\n\t\t\tif ( match[ 3 ] ) {\r\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\r\n\r\n\t\t\t// Strip excess characters from unquoted arguments\r\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\r\n\r\n\t\t\t\t// Get excess from tokenize (recursively)\r\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\r\n\r\n\t\t\t\t// advance to the next closing parenthesis\r\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\r\n\r\n\t\t\t\t// excess is a negative index\r\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\r\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\r\n\t\t\t}\r\n\r\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\r\n\t\t\treturn match.slice( 0, 3 );\r\n\t\t}\r\n\t},\r\n\r\n\tfilter: {\r\n\r\n\t\t\"TAG\": function( nodeNameSelector ) {\r\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\r\n\t\t\treturn nodeNameSelector === \"*\" ?\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} :\r\n\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\r\n\t\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"CLASS\": function( className ) {\r\n\t\t\tvar pattern = classCache[ className + \" \" ];\r\n\r\n\t\t\treturn pattern ||\r\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\r\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\r\n\t\t\t\t\t\tclassName, function( elem ) {\r\n\t\t\t\t\t\t\treturn pattern.test(\r\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\r\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\r\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\r\n\t\t\t\t\t\t\t\t\"\"\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t} );\r\n\t\t},\r\n\r\n\t\t\"ATTR\": function( name, operator, check ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar result = Sizzle.attr( elem, name );\r\n\r\n\t\t\t\tif ( result == null ) {\r\n\t\t\t\t\treturn operator === \"!=\";\r\n\t\t\t\t}\r\n\t\t\t\tif ( !operator ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult += \"\";\r\n\r\n\t\t\t\t/* eslint-disable max-len */\r\n\r\n\t\t\t\treturn operator === \"=\" ? result === check :\r\n\t\t\t\t\toperator === \"!=\" ? result !== check :\r\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\r\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\r\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\r\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\r\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\r\n\t\t\t\t\tfalse;\r\n\t\t\t\t/* eslint-enable max-len */\r\n\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\r\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\r\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\r\n\t\t\t\tofType = what === \"of-type\";\r\n\r\n\t\t\treturn first === 1 && last === 0 ?\r\n\r\n\t\t\t\t// Shortcut for :nth-*(n)\r\n\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\treturn !!elem.parentNode;\r\n\t\t\t\t} :\r\n\r\n\t\t\t\tfunction( elem, _context, xml ) {\r\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\r\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\r\n\t\t\t\t\t\tparent = elem.parentNode,\r\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\r\n\t\t\t\t\t\tuseCache = !xml && !ofType,\r\n\t\t\t\t\t\tdiff = false;\r\n\r\n\t\t\t\t\tif ( parent ) {\r\n\r\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\r\n\t\t\t\t\t\tif ( simple ) {\r\n\t\t\t\t\t\t\twhile ( dir ) {\r\n\t\t\t\t\t\t\t\tnode = elem;\r\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\r\n\t\t\t\t\t\t\t\t\tif ( ofType ?\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\r\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\r\n\r\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\r\n\t\t\t\t\t\tif ( forward && useCache ) {\r\n\r\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\r\n\r\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\r\n\t\t\t\t\t\t\tnode = parent;\r\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\r\n\r\n\t\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\r\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\r\n\r\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\r\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\r\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\r\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\r\n\r\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\r\n\r\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\r\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\r\n\r\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\r\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\r\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// Use previously-cached element index if available\r\n\t\t\t\t\t\t\tif ( useCache ) {\r\n\r\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\r\n\t\t\t\t\t\t\t\tnode = elem;\r\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\r\n\r\n\t\t\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\r\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\r\n\r\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\r\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\r\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// xml :nth-child(...)\r\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\r\n\t\t\t\t\t\t\tif ( diff === false ) {\r\n\r\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\r\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\r\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\r\n\t\t\t\t\t\t\t\t\t\t++diff ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\r\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\r\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\r\n\t\t\t\t\t\tdiff -= last;\r\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"PSEUDO\": function( pseudo, argument ) {\r\n\r\n\t\t\t// pseudo-class names are case-insensitive\r\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\r\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\r\n\t\t\t// Remember that setFilters inherits from pseudos\r\n\t\t\tvar args,\r\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\r\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\r\n\r\n\t\t\t// The user may use createPseudo to indicate that\r\n\t\t\t// arguments are needed to create the filter function\r\n\t\t\t// just as Sizzle does\r\n\t\t\tif ( fn[ expando ] ) {\r\n\t\t\t\treturn fn( argument );\r\n\t\t\t}\r\n\r\n\t\t\t// But maintain support for old signatures\r\n\t\t\tif ( fn.length > 1 ) {\r\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\r\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\r\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\r\n\t\t\t\t\t\tvar idx,\r\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\r\n\t\t\t\t\t\t\ti = matched.length;\r\n\t\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\r\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} ) :\r\n\t\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\t\treturn fn( elem, 0, args );\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn fn;\r\n\t\t}\r\n\t},\r\n\r\n\tpseudos: {\r\n\r\n\t\t// Potentially complex pseudos\r\n\t\t\"not\": markFunction( function( selector ) {\r\n\r\n\t\t\t// Trim the selector passed to compile\r\n\t\t\t// to avoid treating leading and trailing\r\n\t\t\t// spaces as combinators\r\n\t\t\tvar input = [],\r\n\t\t\t\tresults = [],\r\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\r\n\r\n\t\t\treturn matcher[ expando ] ?\r\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\r\n\t\t\t\t\tvar elem,\r\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\r\n\t\t\t\t\t\ti = seed.length;\r\n\r\n\t\t\t\t\t// Match elements unmatched by `matcher`\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\r\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} ) :\r\n\t\t\t\tfunction( elem, _context, xml ) {\r\n\t\t\t\t\tinput[ 0 ] = elem;\r\n\t\t\t\t\tmatcher( input, null, xml, results );\r\n\r\n\t\t\t\t\t// Don't keep the element (issue #299)\r\n\t\t\t\t\tinput[ 0 ] = null;\r\n\t\t\t\t\treturn !results.pop();\r\n\t\t\t\t};\r\n\t\t} ),\r\n\r\n\t\t\"has\": markFunction( function( selector ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\r\n\t\t\t};\r\n\t\t} ),\r\n\r\n\t\t\"contains\": markFunction( function( text ) {\r\n\t\t\ttext = text.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\r\n\t\t\t};\r\n\t\t} ),\r\n\r\n\t\t// \"Whether an element is represented by a :lang() selector\r\n\t\t// is based solely on the element's language value\r\n\t\t// being equal to the identifier C,\r\n\t\t// or beginning with the identifier C immediately followed by \"-\".\r\n\t\t// The matching of C against the element's language value is performed case-insensitively.\r\n\t\t// The identifier C does not have to be a valid language name.\"\r\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\r\n\t\t\"lang\": markFunction( function( lang ) {\r\n\r\n\t\t\t// lang value must be a valid identifier\r\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\r\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\r\n\t\t\t}\r\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar elemLang;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\r\n\t\t\t\t\t\telem.lang :\r\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\r\n\r\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\r\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\r\n\t\t\t\treturn false;\r\n\t\t\t};\r\n\t\t} ),\r\n\r\n\t\t// Miscellaneous\r\n\t\t\"target\": function( elem ) {\r\n\t\t\tvar hash = window.location && window.location.hash;\r\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\r\n\t\t},\r\n\r\n\t\t\"root\": function( elem ) {\r\n\t\t\treturn elem === docElem;\r\n\t\t},\r\n\r\n\t\t\"focus\": function( elem ) {\r\n\t\t\treturn elem === document.activeElement &&\r\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\r\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\r\n\t\t},\r\n\r\n\t\t// Boolean properties\r\n\t\t\"enabled\": createDisabledPseudo( false ),\r\n\t\t\"disabled\": createDisabledPseudo( true ),\r\n\r\n\t\t\"checked\": function( elem ) {\r\n\r\n\t\t\t// In CSS3, :checked should return both checked and selected elements\r\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\r\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\r\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\r\n\t\t},\r\n\r\n\t\t\"selected\": function( elem ) {\r\n\r\n\t\t\t// Accessing this property makes selected-by-default\r\n\t\t\t// options in Safari work properly\r\n\t\t\tif ( elem.parentNode ) {\r\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\r\n\t\t\t\telem.parentNode.selectedIndex;\r\n\t\t\t}\r\n\r\n\t\t\treturn elem.selected === true;\r\n\t\t},\r\n\r\n\t\t// Contents\r\n\t\t\"empty\": function( elem ) {\r\n\r\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\r\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\r\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\r\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\r\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\r\n\t\t\t\tif ( elem.nodeType < 6 ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t\"parent\": function( elem ) {\r\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\r\n\t\t},\r\n\r\n\t\t// Element/input types\r\n\t\t\"header\": function( elem ) {\r\n\t\t\treturn rheader.test( elem.nodeName );\r\n\t\t},\r\n\r\n\t\t\"input\": function( elem ) {\r\n\t\t\treturn rinputs.test( elem.nodeName );\r\n\t\t},\r\n\r\n\t\t\"button\": function( elem ) {\r\n\t\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\r\n\t\t},\r\n\r\n\t\t\"text\": function( elem ) {\r\n\t\t\tvar attr;\r\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\r\n\t\t\t\telem.type === \"text\" &&\r\n\r\n\t\t\t\t// Support: IE<8\r\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\r\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\r\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\r\n\t\t},\r\n\r\n\t\t// Position-in-collection\r\n\t\t\"first\": createPositionalPseudo( function() {\r\n\t\t\treturn [ 0 ];\r\n\t\t} ),\r\n\r\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\r\n\t\t\treturn [ length - 1 ];\r\n\t\t} ),\r\n\r\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\r\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\r\n\t\t} ),\r\n\r\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\r\n\t\t\tvar i = 0;\r\n\t\t\tfor ( ; i < length; i += 2 ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t} ),\r\n\r\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\r\n\t\t\tvar i = 1;\r\n\t\t\tfor ( ; i < length; i += 2 ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t} ),\r\n\r\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\r\n\t\t\tvar i = argument < 0 ?\r\n\t\t\t\targument + length :\r\n\t\t\t\targument > length ?\r\n\t\t\t\t\tlength :\r\n\t\t\t\t\targument;\r\n\t\t\tfor ( ; --i >= 0; ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t} ),\r\n\r\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\r\n\t\t\tvar i = argument < 0 ? argument + length : argument;\r\n\t\t\tfor ( ; ++i < length; ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t} )\r\n\t}\r\n};\r\n\r\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\r\n\r\n// Add button/input type pseudos\r\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\r\n\tExpr.pseudos[ i ] = createInputPseudo( i );\r\n}\r\nfor ( i in { submit: true, reset: true } ) {\r\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\r\n}\r\n\r\n// Easy API for creating new setFilters\r\nfunction setFilters() {}\r\nsetFilters.prototype = Expr.filters = Expr.pseudos;\r\nExpr.setFilters = new setFilters();\r\n\r\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\r\n\tvar matched, match, tokens, type,\r\n\t\tsoFar, groups, preFilters,\r\n\t\tcached = tokenCache[ selector + \" \" ];\r\n\r\n\tif ( cached ) {\r\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\r\n\t}\r\n\r\n\tsoFar = selector;\r\n\tgroups = [];\r\n\tpreFilters = Expr.preFilter;\r\n\r\n\twhile ( soFar ) {\r\n\r\n\t\t// Comma and first run\r\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\r\n\t\t\tif ( match ) {\r\n\r\n\t\t\t\t// Don't consume trailing commas as valid\r\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\r\n\t\t\t}\r\n\t\t\tgroups.push( ( tokens = [] ) );\r\n\t\t}\r\n\r\n\t\tmatched = false;\r\n\r\n\t\t// Combinators\r\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\r\n\t\t\tmatched = match.shift();\r\n\t\t\ttokens.push( {\r\n\t\t\t\tvalue: matched,\r\n\r\n\t\t\t\t// Cast descendant combinators to space\r\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\r\n\t\t\t} );\r\n\t\t\tsoFar = soFar.slice( matched.length );\r\n\t\t}\r\n\r\n\t\t// Filters\r\n\t\tfor ( type in Expr.filter ) {\r\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\r\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\r\n\t\t\t\tmatched = match.shift();\r\n\t\t\t\ttokens.push( {\r\n\t\t\t\t\tvalue: matched,\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tmatches: match\r\n\t\t\t\t} );\r\n\t\t\t\tsoFar = soFar.slice( matched.length );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( !matched ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the length of the invalid excess\r\n\t// if we're just parsing\r\n\t// Otherwise, throw an error or return tokens\r\n\treturn parseOnly ?\r\n\t\tsoFar.length :\r\n\t\tsoFar ?\r\n\t\t\tSizzle.error( selector ) :\r\n\r\n\t\t\t// Cache the tokens\r\n\t\t\ttokenCache( selector, groups ).slice( 0 );\r\n};\r\n\r\nfunction toSelector( tokens ) {\r\n\tvar i = 0,\r\n\t\tlen = tokens.length,\r\n\t\tselector = \"\";\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tselector += tokens[ i ].value;\r\n\t}\r\n\treturn selector;\r\n}\r\n\r\nfunction addCombinator( matcher, combinator, base ) {\r\n\tvar dir = combinator.dir,\r\n\t\tskip = combinator.next,\r\n\t\tkey = skip || dir,\r\n\t\tcheckNonElements = base && key === \"parentNode\",\r\n\t\tdoneName = done++;\r\n\r\n\treturn combinator.first ?\r\n\r\n\t\t// Check against closest ancestor/preceding element\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\r\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\treturn matcher( elem, context, xml );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t} :\r\n\r\n\t\t// Check against all ancestor/preceding elements\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\tvar oldCache, uniqueCache, outerCache,\r\n\t\t\t\tnewCache = [ dirruns, doneName ];\r\n\r\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\r\n\t\t\tif ( xml ) {\r\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\r\n\r\n\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\r\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\r\n\r\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\r\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\r\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\r\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\r\n\r\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\r\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\r\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\r\n\r\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\r\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n}\r\n\r\nfunction elementMatcher( matchers ) {\r\n\treturn matchers.length > 1 ?\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\tvar i = matchers.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} :\r\n\t\tmatchers[ 0 ];\r\n}\r\n\r\nfunction multipleContexts( selector, contexts, results ) {\r\n\tvar i = 0,\r\n\t\tlen = contexts.length;\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tSizzle( selector, contexts[ i ], results );\r\n\t}\r\n\treturn results;\r\n}\r\n\r\nfunction condense( unmatched, map, filter, context, xml ) {\r\n\tvar elem,\r\n\t\tnewUnmatched = [],\r\n\t\ti = 0,\r\n\t\tlen = unmatched.length,\r\n\t\tmapped = map != null;\r\n\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tif ( ( elem = unmatched[ i ] ) ) {\r\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\r\n\t\t\t\tnewUnmatched.push( elem );\r\n\t\t\t\tif ( mapped ) {\r\n\t\t\t\t\tmap.push( i );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn newUnmatched;\r\n}\r\n\r\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\r\n\tif ( postFilter && !postFilter[ expando ] ) {\r\n\t\tpostFilter = setMatcher( postFilter );\r\n\t}\r\n\tif ( postFinder && !postFinder[ expando ] ) {\r\n\t\tpostFinder = setMatcher( postFinder, postSelector );\r\n\t}\r\n\treturn markFunction( function( seed, results, context, xml ) {\r\n\t\tvar temp, i, elem,\r\n\t\t\tpreMap = [],\r\n\t\t\tpostMap = [],\r\n\t\t\tpreexisting = results.length,\r\n\r\n\t\t\t// Get initial elements from seed or context\r\n\t\t\telems = seed || multipleContexts(\r\n\t\t\t\tselector || \"*\",\r\n\t\t\t\tcontext.nodeType ? [ context ] : context,\r\n\t\t\t\t[]\r\n\t\t\t),\r\n\r\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\r\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\r\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\r\n\t\t\t\telems,\r\n\r\n\t\t\tmatcherOut = matcher ?\r\n\r\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\r\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\r\n\r\n\t\t\t\t\t// ...intermediate processing is necessary\r\n\t\t\t\t\t[] :\r\n\r\n\t\t\t\t\t// ...otherwise use results directly\r\n\t\t\t\t\tresults :\r\n\t\t\t\tmatcherIn;\r\n\r\n\t\t// Find primary matches\r\n\t\tif ( matcher ) {\r\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\r\n\t\t}\r\n\r\n\t\t// Apply postFilter\r\n\t\tif ( postFilter ) {\r\n\t\t\ttemp = condense( matcherOut, postMap );\r\n\t\t\tpostFilter( temp, [], context, xml );\r\n\r\n\t\t\t// Un-match failing elements by moving them back to matcherIn\r\n\t\t\ti = temp.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\r\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( seed ) {\r\n\t\t\tif ( postFinder || preFilter ) {\r\n\t\t\t\tif ( postFinder ) {\r\n\r\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\r\n\t\t\t\t\ttemp = [];\r\n\t\t\t\t\ti = matcherOut.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\r\n\r\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\r\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\r\n\t\t\t\ti = matcherOut.length;\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\r\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\r\n\r\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Add elements to results, through postFinder if defined\r\n\t\t} else {\r\n\t\t\tmatcherOut = condense(\r\n\t\t\t\tmatcherOut === results ?\r\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\r\n\t\t\t\t\tmatcherOut\r\n\t\t\t);\r\n\t\t\tif ( postFinder ) {\r\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\r\n\t\t\t} else {\r\n\t\t\t\tpush.apply( results, matcherOut );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n}\r\n\r\nfunction matcherFromTokens( tokens ) {\r\n\tvar checkContext, matcher, j,\r\n\t\tlen = tokens.length,\r\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\r\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\r\n\t\ti = leadingRelative ? 1 : 0,\r\n\r\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\r\n\t\tmatchContext = addCombinator( function( elem ) {\r\n\t\t\treturn elem === checkContext;\r\n\t\t}, implicitRelative, true ),\r\n\t\tmatchAnyContext = addCombinator( function( elem ) {\r\n\t\t\treturn indexOf( checkContext, elem ) > -1;\r\n\t\t}, implicitRelative, true ),\r\n\t\tmatchers = [ function( elem, context, xml ) {\r\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\r\n\t\t\t\t( checkContext = context ).nodeType ?\r\n\t\t\t\t\tmatchContext( elem, context, xml ) :\r\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\r\n\r\n\t\t\t// Avoid hanging onto element (issue #299)\r\n\t\t\tcheckContext = null;\r\n\t\t\treturn ret;\r\n\t\t} ];\r\n\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\r\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\r\n\t\t} else {\r\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\r\n\r\n\t\t\t// Return special upon seeing a positional matcher\r\n\t\t\tif ( matcher[ expando ] ) {\r\n\r\n\t\t\t\t// Find the next relative operator (if any) for proper handling\r\n\t\t\t\tj = ++i;\r\n\t\t\t\tfor ( ; j < len; j++ ) {\r\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn setMatcher(\r\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\r\n\t\t\t\t\ti > 1 && toSelector(\r\n\r\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\r\n\t\t\t\t\ttokens\r\n\t\t\t\t\t\t.slice( 0, i - 1 )\r\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\r\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\r\n\t\t\t\t\tmatcher,\r\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\r\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\r\n\t\t\t\t\tj < len && toSelector( tokens )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tmatchers.push( matcher );\r\n\t\t}\r\n\t}\r\n\r\n\treturn elementMatcher( matchers );\r\n}\r\n\r\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\r\n\tvar bySet = setMatchers.length > 0,\r\n\t\tbyElement = elementMatchers.length > 0,\r\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\r\n\t\t\tvar elem, j, matcher,\r\n\t\t\t\tmatchedCount = 0,\r\n\t\t\t\ti = \"0\",\r\n\t\t\t\tunmatched = seed && [],\r\n\t\t\t\tsetMatched = [],\r\n\t\t\t\tcontextBackup = outermostContext,\r\n\r\n\t\t\t\t// We must always have either seed elements or outermost context\r\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\r\n\r\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\r\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\r\n\t\t\t\tlen = elems.length;\r\n\r\n\t\t\tif ( outermost ) {\r\n\r\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t\t\t// two documents; shallow comparisons work.\r\n\t\t\t\t// eslint-disable-next-line eqeqeq\r\n\t\t\t\toutermostContext = context == document || context || outermost;\r\n\t\t\t}\r\n\r\n\t\t\t// Add elements passing elementMatchers directly to results\r\n\t\t\t// Support: IE<9, Safari\r\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\r\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\r\n\t\t\t\tif ( byElement && elem ) {\r\n\t\t\t\t\tj = 0;\r\n\r\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\r\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n\t\t\t\t\t// two documents; shallow comparisons work.\r\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\r\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\r\n\t\t\t\t\t\tsetDocument( elem );\r\n\t\t\t\t\t\txml = !documentIsHTML;\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\r\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\r\n\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( outermost ) {\r\n\t\t\t\t\t\tdirruns = dirrunsUnique;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Track unmatched elements for set filters\r\n\t\t\t\tif ( bySet ) {\r\n\r\n\t\t\t\t\t// They will have gone through all possible matchers\r\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\r\n\t\t\t\t\t\tmatchedCount--;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Lengthen the array for every element, matched or not\r\n\t\t\t\t\tif ( seed ) {\r\n\t\t\t\t\t\tunmatched.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\r\n\t\t\t// makes the latter nonnegative.\r\n\t\t\tmatchedCount += i;\r\n\r\n\t\t\t// Apply set filters to unmatched elements\r\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\r\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\r\n\t\t\t// no element matchers and no seed.\r\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\r\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\r\n\t\t\t// numerically zero.\r\n\t\t\tif ( bySet && i !== matchedCount ) {\r\n\t\t\t\tj = 0;\r\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\r\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( seed ) {\r\n\r\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\r\n\t\t\t\t\tif ( matchedCount > 0 ) {\r\n\t\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\r\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\r\n\t\t\t\t\tsetMatched = condense( setMatched );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add matches to results\r\n\t\t\t\tpush.apply( results, setMatched );\r\n\r\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\r\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\r\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\r\n\r\n\t\t\t\t\tSizzle.uniqueSort( results );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Override manipulation of globals by nested matchers\r\n\t\t\tif ( outermost ) {\r\n\t\t\t\tdirruns = dirrunsUnique;\r\n\t\t\t\toutermostContext = contextBackup;\r\n\t\t\t}\r\n\r\n\t\t\treturn unmatched;\r\n\t\t};\r\n\r\n\treturn bySet ?\r\n\t\tmarkFunction( superMatcher ) :\r\n\t\tsuperMatcher;\r\n}\r\n\r\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\r\n\tvar i,\r\n\t\tsetMatchers = [],\r\n\t\telementMatchers = [],\r\n\t\tcached = compilerCache[ selector + \" \" ];\r\n\r\n\tif ( !cached ) {\r\n\r\n\t\t// Generate a function of recursive functions that can be used to check each element\r\n\t\tif ( !match ) {\r\n\t\t\tmatch = tokenize( selector );\r\n\t\t}\r\n\t\ti = match.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\tcached = matcherFromTokens( match[ i ] );\r\n\t\t\tif ( cached[ expando ] ) {\r\n\t\t\t\tsetMatchers.push( cached );\r\n\t\t\t} else {\r\n\t\t\t\telementMatchers.push( cached );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Cache the compiled function\r\n\t\tcached = compilerCache(\r\n\t\t\tselector,\r\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\r\n\t\t);\r\n\r\n\t\t// Save selector and tokenization\r\n\t\tcached.selector = selector;\r\n\t}\r\n\treturn cached;\r\n};\r\n\r\n/**\r\n * A low-level selection function that works with Sizzle's compiled\r\n *  selector functions\r\n * @param {String|Function} selector A selector or a pre-compiled\r\n *  selector function built with Sizzle.compile\r\n * @param {Element} context\r\n * @param {Array} [results]\r\n * @param {Array} [seed] A set of elements to match against\r\n */\r\nselect = Sizzle.select = function( selector, context, results, seed ) {\r\n\tvar i, tokens, token, type, find,\r\n\t\tcompiled = typeof selector === \"function\" && selector,\r\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\r\n\r\n\tresults = results || [];\r\n\r\n\t// Try to minimize operations if there is only one selector in the list and no seed\r\n\t// (the latter of which guarantees us context)\r\n\tif ( match.length === 1 ) {\r\n\r\n\t\t// Reduce context if the leading compound selector is an ID\r\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\r\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\r\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\r\n\r\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\r\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\r\n\t\t\tif ( !context ) {\r\n\t\t\t\treturn results;\r\n\r\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\r\n\t\t\t} else if ( compiled ) {\r\n\t\t\t\tcontext = context.parentNode;\r\n\t\t\t}\r\n\r\n\t\t\tselector = selector.slice( tokens.shift().value.length );\r\n\t\t}\r\n\r\n\t\t// Fetch a seed set for right-to-left matching\r\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\ttoken = tokens[ i ];\r\n\r\n\t\t\t// Abort if we hit a combinator\r\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\r\n\r\n\t\t\t\t// Search, expanding context for leading sibling combinators\r\n\t\t\t\tif ( ( seed = find(\r\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\r\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\r\n\t\t\t\t\t\tcontext\r\n\t\t\t\t) ) ) {\r\n\r\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\r\n\t\t\t\t\ttokens.splice( i, 1 );\r\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\r\n\t\t\t\t\tif ( !selector ) {\r\n\t\t\t\t\t\tpush.apply( results, seed );\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Compile and execute a filtering function if one is not provided\r\n\t// Provide `match` to avoid retokenization if we modified the selector above\r\n\t( compiled || compile( selector, match ) )(\r\n\t\tseed,\r\n\t\tcontext,\r\n\t\t!documentIsHTML,\r\n\t\tresults,\r\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\r\n\t);\r\n\treturn results;\r\n};\r\n\r\n// One-time assignments\r\n\r\n// Sort stability\r\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\r\n\r\n// Support: Chrome 14-35+\r\n// Always assume duplicates if they aren't passed to the comparison function\r\nsupport.detectDuplicates = !!hasDuplicate;\r\n\r\n// Initialize against the default document\r\nsetDocument();\r\n\r\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\r\n// Detached nodes confoundingly follow *each other*\r\nsupport.sortDetached = assert( function( el ) {\r\n\r\n\t// Should return 1, but returns 4 (following)\r\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\r\n} );\r\n\r\n// Support: IE<8\r\n// Prevent attribute/property \"interpolation\"\r\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\r\nif ( !assert( function( el ) {\r\n\tel.innerHTML = \"<a href='#'></a>\";\r\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\r\n} ) ) {\r\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\r\n\t\tif ( !isXML ) {\r\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n// Support: IE<9\r\n// Use defaultValue in place of getAttribute(\"value\")\r\nif ( !support.attributes || !assert( function( el ) {\r\n\tel.innerHTML = \"<input/>\";\r\n\tel.firstChild.setAttribute( \"value\", \"\" );\r\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\r\n} ) ) {\r\n\taddHandle( \"value\", function( elem, _name, isXML ) {\r\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\r\n\t\t\treturn elem.defaultValue;\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n// Support: IE<9\r\n// Use getAttributeNode to fetch booleans when getAttribute lies\r\nif ( !assert( function( el ) {\r\n\treturn el.getAttribute( \"disabled\" ) == null;\r\n} ) ) {\r\n\taddHandle( booleans, function( elem, name, isXML ) {\r\n\t\tvar val;\r\n\t\tif ( !isXML ) {\r\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\r\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\r\n\t\t\t\t\tval.value :\r\n\t\t\t\t\tnull;\r\n\t\t}\r\n\t} );\r\n}\r\n\r\nreturn Sizzle;\r\n\r\n} )( window );\r\n\r\n\r\n\r\njQuery.find = Sizzle;\r\njQuery.expr = Sizzle.selectors;\r\n\r\n// Deprecated\r\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\r\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\r\njQuery.text = Sizzle.getText;\r\njQuery.isXMLDoc = Sizzle.isXML;\r\njQuery.contains = Sizzle.contains;\r\njQuery.escapeSelector = Sizzle.escape;\r\n\r\n\r\n\r\n\r\nvar dir = function( elem, dir, until ) {\r\n\tvar matched = [],\r\n\t\ttruncate = until !== undefined;\r\n\r\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\r\n\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tmatched.push( elem );\r\n\t\t}\r\n\t}\r\n\treturn matched;\r\n};\r\n\r\n\r\nvar siblings = function( n, elem ) {\r\n\tvar matched = [];\r\n\r\n\tfor ( ; n; n = n.nextSibling ) {\r\n\t\tif ( n.nodeType === 1 && n !== elem ) {\r\n\t\t\tmatched.push( n );\r\n\t\t}\r\n\t}\r\n\r\n\treturn matched;\r\n};\r\n\r\n\r\nvar rneedsContext = jQuery.expr.match.needsContext;\r\n\r\n\r\n\r\nfunction nodeName( elem, name ) {\r\n\r\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\r\n\r\n}\r\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\r\n\r\n\r\n\r\n// Implement the identical functionality for filter and not\r\nfunction winnow( elements, qualifier, not ) {\r\n\tif ( isFunction( qualifier ) ) {\r\n\t\treturn jQuery.grep( elements, function( elem, i ) {\r\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\r\n\t\t} );\r\n\t}\r\n\r\n\t// Single element\r\n\tif ( qualifier.nodeType ) {\r\n\t\treturn jQuery.grep( elements, function( elem ) {\r\n\t\t\treturn ( elem === qualifier ) !== not;\r\n\t\t} );\r\n\t}\r\n\r\n\t// Arraylike of elements (jQuery, arguments, Array)\r\n\tif ( typeof qualifier !== \"string\" ) {\r\n\t\treturn jQuery.grep( elements, function( elem ) {\r\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\r\n\t\t} );\r\n\t}\r\n\r\n\t// Filtered directly for both simple and complex selectors\r\n\treturn jQuery.filter( qualifier, elements, not );\r\n}\r\n\r\njQuery.filter = function( expr, elems, not ) {\r\n\tvar elem = elems[ 0 ];\r\n\r\n\tif ( not ) {\r\n\t\texpr = \":not(\" + expr + \")\";\r\n\t}\r\n\r\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\r\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\r\n\t}\r\n\r\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\r\n\t\treturn elem.nodeType === 1;\r\n\t} ) );\r\n};\r\n\r\njQuery.fn.extend( {\r\n\tfind: function( selector ) {\r\n\t\tvar i, ret,\r\n\t\t\tlen = this.length,\r\n\t\t\tself = this;\r\n\r\n\t\tif ( typeof selector !== \"string\" ) {\r\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\r\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} ) );\r\n\t\t}\r\n\r\n\t\tret = this.pushStack( [] );\r\n\r\n\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\tjQuery.find( selector, self[ i ], ret );\r\n\t\t}\r\n\r\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\r\n\t},\r\n\tfilter: function( selector ) {\r\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\r\n\t},\r\n\tnot: function( selector ) {\r\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\r\n\t},\r\n\tis: function( selector ) {\r\n\t\treturn !!winnow(\r\n\t\t\tthis,\r\n\r\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\r\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\r\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\r\n\t\t\t\tjQuery( selector ) :\r\n\t\t\t\tselector || [],\r\n\t\t\tfalse\r\n\t\t).length;\r\n\t}\r\n} );\r\n\r\n\r\n// Initialize a jQuery object\r\n\r\n\r\n// A central reference to the root jQuery(document)\r\nvar rootjQuery,\r\n\r\n\t// A simple way to check for HTML strings\r\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\r\n\t// Strict HTML recognition (#11290: must start with <)\r\n\t// Shortcut simple #id case for speed\r\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\r\n\r\n\tinit = jQuery.fn.init = function( selector, context, root ) {\r\n\t\tvar match, elem;\r\n\r\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\r\n\t\tif ( !selector ) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// Method init() accepts an alternate rootjQuery\r\n\t\t// so migrate can support jQuery.sub (gh-2101)\r\n\t\troot = root || rootjQuery;\r\n\r\n\t\t// Handle HTML strings\r\n\t\tif ( typeof selector === \"string\" ) {\r\n\t\t\tif ( selector[ 0 ] === \"<\" &&\r\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\r\n\t\t\t\tselector.length >= 3 ) {\r\n\r\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\r\n\t\t\t\tmatch = [ null, selector, null ];\r\n\r\n\t\t\t} else {\r\n\t\t\t\tmatch = rquickExpr.exec( selector );\r\n\t\t\t}\r\n\r\n\t\t\t// Match html or make sure no context is specified for #id\r\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\r\n\r\n\t\t\t\t// HANDLE: $(html) -> $(array)\r\n\t\t\t\tif ( match[ 1 ] ) {\r\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\r\n\r\n\t\t\t\t\t// Option to run scripts is true for back-compat\r\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\r\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\r\n\t\t\t\t\t\tmatch[ 1 ],\r\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\r\n\t\t\t\t\t\ttrue\r\n\t\t\t\t\t) );\r\n\r\n\t\t\t\t\t// HANDLE: $(html, props)\r\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\r\n\t\t\t\t\t\tfor ( match in context ) {\r\n\r\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\r\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\r\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\r\n\r\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t// HANDLE: $(#id)\r\n\t\t\t\t} else {\r\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\r\n\r\n\t\t\t\t\tif ( elem ) {\r\n\r\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\r\n\t\t\t\t\t\tthis[ 0 ] = elem;\r\n\t\t\t\t\t\tthis.length = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\r\n\t\t\t// HANDLE: $(expr, $(...))\r\n\t\t\t} else if ( !context || context.jquery ) {\r\n\t\t\t\treturn ( context || root ).find( selector );\r\n\r\n\t\t\t// HANDLE: $(expr, context)\r\n\t\t\t// (which is just equivalent to: $(context).find(expr)\r\n\t\t\t} else {\r\n\t\t\t\treturn this.constructor( context ).find( selector );\r\n\t\t\t}\r\n\r\n\t\t// HANDLE: $(DOMElement)\r\n\t\t} else if ( selector.nodeType ) {\r\n\t\t\tthis[ 0 ] = selector;\r\n\t\t\tthis.length = 1;\r\n\t\t\treturn this;\r\n\r\n\t\t// HANDLE: $(function)\r\n\t\t// Shortcut for document ready\r\n\t\t} else if ( isFunction( selector ) ) {\r\n\t\t\treturn root.ready !== undefined ?\r\n\t\t\t\troot.ready( selector ) :\r\n\r\n\t\t\t\t// Execute immediately if ready is not present\r\n\t\t\t\tselector( jQuery );\r\n\t\t}\r\n\r\n\t\treturn jQuery.makeArray( selector, this );\r\n\t};\r\n\r\n// Give the init function the jQuery prototype for later instantiation\r\ninit.prototype = jQuery.fn;\r\n\r\n// Initialize central reference\r\nrootjQuery = jQuery( document );\r\n\r\n\r\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\r\n\r\n\t// Methods guaranteed to produce a unique set when starting from a unique set\r\n\tguaranteedUnique = {\r\n\t\tchildren: true,\r\n\t\tcontents: true,\r\n\t\tnext: true,\r\n\t\tprev: true\r\n\t};\r\n\r\njQuery.fn.extend( {\r\n\thas: function( target ) {\r\n\t\tvar targets = jQuery( target, this ),\r\n\t\t\tl = targets.length;\r\n\r\n\t\treturn this.filter( function() {\r\n\t\t\tvar i = 0;\r\n\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tclosest: function( selectors, context ) {\r\n\t\tvar cur,\r\n\t\t\ti = 0,\r\n\t\t\tl = this.length,\r\n\t\t\tmatched = [],\r\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\r\n\r\n\t\t// Positional selectors never match, since there's no _selection_ context\r\n\t\tif ( !rneedsContext.test( selectors ) ) {\r\n\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\r\n\r\n\t\t\t\t\t// Always skip document fragments\r\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\r\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\r\n\r\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\r\n\t\t\t\t\t\tcur.nodeType === 1 &&\r\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\r\n\r\n\t\t\t\t\t\tmatched.push( cur );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\r\n\t},\r\n\r\n\t// Determine the position of an element within the set\r\n\tindex: function( elem ) {\r\n\r\n\t\t// No argument, return index in parent\r\n\t\tif ( !elem ) {\r\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\r\n\t\t}\r\n\r\n\t\t// Index in selector\r\n\t\tif ( typeof elem === \"string\" ) {\r\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\r\n\t\t}\r\n\r\n\t\t// Locate the position of the desired element\r\n\t\treturn indexOf.call( this,\r\n\r\n\t\t\t// If it receives a jQuery object, the first element is used\r\n\t\t\telem.jquery ? elem[ 0 ] : elem\r\n\t\t);\r\n\t},\r\n\r\n\tadd: function( selector, context ) {\r\n\t\treturn this.pushStack(\r\n\t\t\tjQuery.uniqueSort(\r\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\r\n\t\t\t)\r\n\t\t);\r\n\t},\r\n\r\n\taddBack: function( selector ) {\r\n\t\treturn this.add( selector == null ?\r\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\r\n\t\t);\r\n\t}\r\n} );\r\n\r\nfunction sibling( cur, dir ) {\r\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\r\n\treturn cur;\r\n}\r\n\r\njQuery.each( {\r\n\tparent: function( elem ) {\r\n\t\tvar parent = elem.parentNode;\r\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\r\n\t},\r\n\tparents: function( elem ) {\r\n\t\treturn dir( elem, \"parentNode\" );\r\n\t},\r\n\tparentsUntil: function( elem, _i, until ) {\r\n\t\treturn dir( elem, \"parentNode\", until );\r\n\t},\r\n\tnext: function( elem ) {\r\n\t\treturn sibling( elem, \"nextSibling\" );\r\n\t},\r\n\tprev: function( elem ) {\r\n\t\treturn sibling( elem, \"previousSibling\" );\r\n\t},\r\n\tnextAll: function( elem ) {\r\n\t\treturn dir( elem, \"nextSibling\" );\r\n\t},\r\n\tprevAll: function( elem ) {\r\n\t\treturn dir( elem, \"previousSibling\" );\r\n\t},\r\n\tnextUntil: function( elem, _i, until ) {\r\n\t\treturn dir( elem, \"nextSibling\", until );\r\n\t},\r\n\tprevUntil: function( elem, _i, until ) {\r\n\t\treturn dir( elem, \"previousSibling\", until );\r\n\t},\r\n\tsiblings: function( elem ) {\r\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\r\n\t},\r\n\tchildren: function( elem ) {\r\n\t\treturn siblings( elem.firstChild );\r\n\t},\r\n\tcontents: function( elem ) {\r\n\t\tif ( elem.contentDocument != null &&\r\n\r\n\t\t\t// Support: IE 11+\r\n\t\t\t// <object> elements with no `data` attribute has an object\r\n\t\t\t// `contentDocument` with a `null` prototype.\r\n\t\t\tgetProto( elem.contentDocument ) ) {\r\n\r\n\t\t\treturn elem.contentDocument;\r\n\t\t}\r\n\r\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\r\n\t\t// Treat the template element as a regular one in browsers that\r\n\t\t// don't support it.\r\n\t\tif ( nodeName( elem, \"template\" ) ) {\r\n\t\t\telem = elem.content || elem;\r\n\t\t}\r\n\r\n\t\treturn jQuery.merge( [], elem.childNodes );\r\n\t}\r\n}, function( name, fn ) {\r\n\tjQuery.fn[ name ] = function( until, selector ) {\r\n\t\tvar matched = jQuery.map( this, fn, until );\r\n\r\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\r\n\t\t\tselector = until;\r\n\t\t}\r\n\r\n\t\tif ( selector && typeof selector === \"string\" ) {\r\n\t\t\tmatched = jQuery.filter( selector, matched );\r\n\t\t}\r\n\r\n\t\tif ( this.length > 1 ) {\r\n\r\n\t\t\t// Remove duplicates\r\n\t\t\tif ( !guaranteedUnique[ name ] ) {\r\n\t\t\t\tjQuery.uniqueSort( matched );\r\n\t\t\t}\r\n\r\n\t\t\t// Reverse order for parents* and prev-derivatives\r\n\t\t\tif ( rparentsprev.test( name ) ) {\r\n\t\t\t\tmatched.reverse();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( matched );\r\n\t};\r\n} );\r\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\r\n\r\n\r\n\r\n// Convert String-formatted options into Object-formatted ones\r\nfunction createOptions( options ) {\r\n\tvar object = {};\r\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\r\n\t\tobject[ flag ] = true;\r\n\t} );\r\n\treturn object;\r\n}\r\n\r\n/*\r\n * Create a callback list using the following parameters:\r\n *\r\n *\toptions: an optional list of space-separated options that will change how\r\n *\t\t\tthe callback list behaves or a more traditional option object\r\n *\r\n * By default a callback list will act like an event callback list and can be\r\n * \"fired\" multiple times.\r\n *\r\n * Possible options:\r\n *\r\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n *\r\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n *\t\t\t\t\tvalues (like a Deferred)\r\n *\r\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n *\r\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n *\r\n */\r\njQuery.Callbacks = function( options ) {\r\n\r\n\t// Convert options from String-formatted to Object-formatted if needed\r\n\t// (we check in cache first)\r\n\toptions = typeof options === \"string\" ?\r\n\t\tcreateOptions( options ) :\r\n\t\tjQuery.extend( {}, options );\r\n\r\n\tvar // Flag to know if list is currently firing\r\n\t\tfiring,\r\n\r\n\t\t// Last fire value for non-forgettable lists\r\n\t\tmemory,\r\n\r\n\t\t// Flag to know if list was already fired\r\n\t\tfired,\r\n\r\n\t\t// Flag to prevent firing\r\n\t\tlocked,\r\n\r\n\t\t// Actual callback list\r\n\t\tlist = [],\r\n\r\n\t\t// Queue of execution data for repeatable lists\r\n\t\tqueue = [],\r\n\r\n\t\t// Index of currently firing callback (modified by add/remove as needed)\r\n\t\tfiringIndex = -1,\r\n\r\n\t\t// Fire callbacks\r\n\t\tfire = function() {\r\n\r\n\t\t\t// Enforce single-firing\r\n\t\t\tlocked = locked || options.once;\r\n\r\n\t\t\t// Execute callbacks for all pending executions,\r\n\t\t\t// respecting firingIndex overrides and runtime changes\r\n\t\t\tfired = firing = true;\r\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\r\n\t\t\t\tmemory = queue.shift();\r\n\t\t\t\twhile ( ++firingIndex < list.length ) {\r\n\r\n\t\t\t\t\t// Run callback and check for early termination\r\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\r\n\t\t\t\t\t\toptions.stopOnFalse ) {\r\n\r\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\r\n\t\t\t\t\t\tfiringIndex = list.length;\r\n\t\t\t\t\t\tmemory = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Forget the data if we're done with it\r\n\t\t\tif ( !options.memory ) {\r\n\t\t\t\tmemory = false;\r\n\t\t\t}\r\n\r\n\t\t\tfiring = false;\r\n\r\n\t\t\t// Clean up if we're done firing for good\r\n\t\t\tif ( locked ) {\r\n\r\n\t\t\t\t// Keep an empty list if we have data for future add calls\r\n\t\t\t\tif ( memory ) {\r\n\t\t\t\t\tlist = [];\r\n\r\n\t\t\t\t// Otherwise, this object is spent\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlist = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Actual Callbacks object\r\n\t\tself = {\r\n\r\n\t\t\t// Add a callback or a collection of callbacks to the list\r\n\t\t\tadd: function() {\r\n\t\t\t\tif ( list ) {\r\n\r\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\r\n\t\t\t\t\tif ( memory && !firing ) {\r\n\t\t\t\t\t\tfiringIndex = list.length - 1;\r\n\t\t\t\t\t\tqueue.push( memory );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t( function add( args ) {\r\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\r\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\r\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\r\n\t\t\t\t\t\t\t\t\tlist.push( arg );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\r\n\r\n\t\t\t\t\t\t\t\t// Inspect recursively\r\n\t\t\t\t\t\t\t\tadd( arg );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} )( arguments );\r\n\r\n\t\t\t\t\tif ( memory && !firing ) {\r\n\t\t\t\t\t\tfire();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Remove a callback from the list\r\n\t\t\tremove: function() {\r\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\r\n\t\t\t\t\tvar index;\r\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\r\n\t\t\t\t\t\tlist.splice( index, 1 );\r\n\r\n\t\t\t\t\t\t// Handle firing indexes\r\n\t\t\t\t\t\tif ( index <= firingIndex ) {\r\n\t\t\t\t\t\t\tfiringIndex--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Check if a given callback is in the list.\r\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\r\n\t\t\thas: function( fn ) {\r\n\t\t\t\treturn fn ?\r\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\r\n\t\t\t\t\tlist.length > 0;\r\n\t\t\t},\r\n\r\n\t\t\t// Remove all callbacks from the list\r\n\t\t\tempty: function() {\r\n\t\t\t\tif ( list ) {\r\n\t\t\t\t\tlist = [];\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Disable .fire and .add\r\n\t\t\t// Abort any current/pending executions\r\n\t\t\t// Clear all callbacks and values\r\n\t\t\tdisable: function() {\r\n\t\t\t\tlocked = queue = [];\r\n\t\t\t\tlist = memory = \"\";\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tdisabled: function() {\r\n\t\t\t\treturn !list;\r\n\t\t\t},\r\n\r\n\t\t\t// Disable .fire\r\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\r\n\t\t\t// Abort any pending executions\r\n\t\t\tlock: function() {\r\n\t\t\t\tlocked = queue = [];\r\n\t\t\t\tif ( !memory && !firing ) {\r\n\t\t\t\t\tlist = memory = \"\";\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tlocked: function() {\r\n\t\t\t\treturn !!locked;\r\n\t\t\t},\r\n\r\n\t\t\t// Call all callbacks with the given context and arguments\r\n\t\t\tfireWith: function( context, args ) {\r\n\t\t\t\tif ( !locked ) {\r\n\t\t\t\t\targs = args || [];\r\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\r\n\t\t\t\t\tqueue.push( args );\r\n\t\t\t\t\tif ( !firing ) {\r\n\t\t\t\t\t\tfire();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Call all the callbacks with the given arguments\r\n\t\t\tfire: function() {\r\n\t\t\t\tself.fireWith( this, arguments );\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// To know if the callbacks have already been called at least once\r\n\t\t\tfired: function() {\r\n\t\t\t\treturn !!fired;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\treturn self;\r\n};\r\n\r\n\r\nfunction Identity( v ) {\r\n\treturn v;\r\n}\r\nfunction Thrower( ex ) {\r\n\tthrow ex;\r\n}\r\n\r\nfunction adoptValue( value, resolve, reject, noValue ) {\r\n\tvar method;\r\n\r\n\ttry {\r\n\r\n\t\t// Check for promise aspect first to privilege synchronous behavior\r\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\r\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\r\n\r\n\t\t// Other thenables\r\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\r\n\t\t\tmethod.call( value, resolve, reject );\r\n\r\n\t\t// Other non-thenables\r\n\t\t} else {\r\n\r\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\r\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\r\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\r\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\r\n\t\t}\r\n\r\n\t// For Promises/A+, convert exceptions into rejections\r\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\r\n\t// Deferred#then to conditionally suppress rejection.\r\n\t} catch ( value ) {\r\n\r\n\t\t// Support: Android 4.0 only\r\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\r\n\t\treject.apply( undefined, [ value ] );\r\n\t}\r\n}\r\n\r\njQuery.extend( {\r\n\r\n\tDeferred: function( func ) {\r\n\t\tvar tuples = [\r\n\r\n\t\t\t\t// action, add listener, callbacks,\r\n\t\t\t\t// ... .then handlers, argument index, [final state]\r\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\r\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\r\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\r\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\r\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\r\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\r\n\t\t\t],\r\n\t\t\tstate = \"pending\",\r\n\t\t\tpromise = {\r\n\t\t\t\tstate: function() {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t},\r\n\t\t\t\talways: function() {\r\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\t\t\t\t\"catch\": function( fn ) {\r\n\t\t\t\t\treturn promise.then( null, fn );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Keep pipe for back-compat\r\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\r\n\t\t\t\t\tvar fns = arguments;\r\n\r\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\r\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\r\n\r\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\r\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\r\n\r\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\r\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\r\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\r\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\r\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\r\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\r\n\t\t\t\t\t\t\t\t\treturned.promise()\r\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\r\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\r\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\r\n\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tfns = null;\r\n\t\t\t\t\t} ).promise();\r\n\t\t\t\t},\r\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\r\n\t\t\t\t\tvar maxDepth = 0;\r\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\r\n\t\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\t\tvar that = this,\r\n\t\t\t\t\t\t\t\targs = arguments,\r\n\t\t\t\t\t\t\t\tmightThrow = function() {\r\n\t\t\t\t\t\t\t\t\tvar returned, then;\r\n\r\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\r\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\r\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\r\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\r\n\r\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\r\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\r\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\r\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\r\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\r\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\r\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\r\n\t\t\t\t\t\t\t\t\tthen = returned &&\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\r\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\r\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\r\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\r\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\r\n\t\t\t\t\t\t\t\t\t\treturned.then;\r\n\r\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\r\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\r\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\r\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\r\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\r\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\r\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\r\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\r\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\r\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\r\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\r\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\r\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\r\n\t\t\t\t\t\t\t\tprocess = special ?\r\n\t\t\t\t\t\t\t\t\tmightThrow :\r\n\t\t\t\t\t\t\t\t\tfunction() {\r\n\t\t\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\r\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\r\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\r\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\r\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\r\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\r\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\r\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\r\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\r\n\t\t\t\t\t\t\t// subsequent errors\r\n\t\t\t\t\t\t\tif ( depth ) {\r\n\t\t\t\t\t\t\t\tprocess();\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\r\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\r\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\r\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\r\n\r\n\t\t\t\t\t\t// progress_handlers.add( ... )\r\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\r\n\t\t\t\t\t\t\tresolve(\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\tnewDefer,\r\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\r\n\t\t\t\t\t\t\t\t\tonProgress :\r\n\t\t\t\t\t\t\t\t\tIdentity,\r\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\r\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\r\n\t\t\t\t\t\t\tresolve(\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\tnewDefer,\r\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\r\n\t\t\t\t\t\t\t\t\tonFulfilled :\r\n\t\t\t\t\t\t\t\t\tIdentity\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// rejected_handlers.add( ... )\r\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\r\n\t\t\t\t\t\t\tresolve(\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\tnewDefer,\r\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\r\n\t\t\t\t\t\t\t\t\tonRejected :\r\n\t\t\t\t\t\t\t\t\tThrower\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} ).promise();\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Get a promise for this deferred\r\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\r\n\t\t\t\tpromise: function( obj ) {\r\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdeferred = {};\r\n\r\n\t\t// Add list-specific methods\r\n\t\tjQuery.each( tuples, function( i, tuple ) {\r\n\t\t\tvar list = tuple[ 2 ],\r\n\t\t\t\tstateString = tuple[ 5 ];\r\n\r\n\t\t\t// promise.progress = list.add\r\n\t\t\t// promise.done = list.add\r\n\t\t\t// promise.fail = list.add\r\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\r\n\r\n\t\t\t// Handle state\r\n\t\t\tif ( stateString ) {\r\n\t\t\t\tlist.add(\r\n\t\t\t\t\tfunction() {\r\n\r\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\r\n\t\t\t\t\t\t// state = \"rejected\"\r\n\t\t\t\t\t\tstate = stateString;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t// rejected_callbacks.disable\r\n\t\t\t\t\t// fulfilled_callbacks.disable\r\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\r\n\r\n\t\t\t\t\t// rejected_handlers.disable\r\n\t\t\t\t\t// fulfilled_handlers.disable\r\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\r\n\r\n\t\t\t\t\t// progress_callbacks.lock\r\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\r\n\r\n\t\t\t\t\t// progress_handlers.lock\r\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// progress_handlers.fire\r\n\t\t\t// fulfilled_handlers.fire\r\n\t\t\t// rejected_handlers.fire\r\n\t\t\tlist.add( tuple[ 3 ].fire );\r\n\r\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\r\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\r\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\r\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\r\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t// deferred.notifyWith = list.fireWith\r\n\t\t\t// deferred.resolveWith = list.fireWith\r\n\t\t\t// deferred.rejectWith = list.fireWith\r\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\r\n\t\t} );\r\n\r\n\t\t// Make the deferred a promise\r\n\t\tpromise.promise( deferred );\r\n\r\n\t\t// Call given func if any\r\n\t\tif ( func ) {\r\n\t\t\tfunc.call( deferred, deferred );\r\n\t\t}\r\n\r\n\t\t// All done!\r\n\t\treturn deferred;\r\n\t},\r\n\r\n\t// Deferred helper\r\n\twhen: function( singleValue ) {\r\n\t\tvar\r\n\r\n\t\t\t// count of uncompleted subordinates\r\n\t\t\tremaining = arguments.length,\r\n\r\n\t\t\t// count of unprocessed arguments\r\n\t\t\ti = remaining,\r\n\r\n\t\t\t// subordinate fulfillment data\r\n\t\t\tresolveContexts = Array( i ),\r\n\t\t\tresolveValues = slice.call( arguments ),\r\n\r\n\t\t\t// the primary Deferred\r\n\t\t\tprimary = jQuery.Deferred(),\r\n\r\n\t\t\t// subordinate callback factory\r\n\t\t\tupdateFunc = function( i ) {\r\n\t\t\t\treturn function( value ) {\r\n\t\t\t\t\tresolveContexts[ i ] = this;\r\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\r\n\t\t\t\t\tif ( !( --remaining ) ) {\r\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t// Single- and empty arguments are adopted like Promise.resolve\r\n\t\tif ( remaining <= 1 ) {\r\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\r\n\t\t\t\t!remaining );\r\n\r\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\r\n\t\t\tif ( primary.state() === \"pending\" ||\r\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\r\n\r\n\t\t\t\treturn primary.then();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Multiple arguments are aggregated like Promise.all array elements\r\n\t\twhile ( i-- ) {\r\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\r\n\t\t}\r\n\r\n\t\treturn primary.promise();\r\n\t}\r\n} );\r\n\r\n\r\n// These usually indicate a programmer mistake during development,\r\n// warn about them ASAP rather than swallowing them by default.\r\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\r\n\r\njQuery.Deferred.exceptionHook = function( error, stack ) {\r\n\r\n\t// Support: IE 8 - 9 only\r\n\t// Console exists when dev tools are open, which can happen at any time\r\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\r\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\njQuery.readyException = function( error ) {\r\n\twindow.setTimeout( function() {\r\n\t\tthrow error;\r\n\t} );\r\n};\r\n\r\n\r\n\r\n\r\n// The deferred used on DOM ready\r\nvar readyList = jQuery.Deferred();\r\n\r\njQuery.fn.ready = function( fn ) {\r\n\r\n\treadyList\r\n\t\t.then( fn )\r\n\r\n\t\t// Wrap jQuery.readyException in a function so that the lookup\r\n\t\t// happens at the time of error handling instead of callback\r\n\t\t// registration.\r\n\t\t.catch( function( error ) {\r\n\t\t\tjQuery.readyException( error );\r\n\t\t} );\r\n\r\n\treturn this;\r\n};\r\n\r\njQuery.extend( {\r\n\r\n\t// Is the DOM ready to be used? Set to true once it occurs.\r\n\tisReady: false,\r\n\r\n\t// A counter to track how many items to wait for before\r\n\t// the ready event fires. See #6781\r\n\treadyWait: 1,\r\n\r\n\t// Handle when the DOM is ready\r\n\tready: function( wait ) {\r\n\r\n\t\t// Abort if there are pending holds or we're already ready\r\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remember that the DOM is ready\r\n\t\tjQuery.isReady = true;\r\n\r\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\r\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If there are functions bound, to execute\r\n\t\treadyList.resolveWith( document, [ jQuery ] );\r\n\t}\r\n} );\r\n\r\njQuery.ready.then = readyList.then;\r\n\r\n// The ready event handler and self cleanup method\r\nfunction completed() {\r\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\r\n\twindow.removeEventListener( \"load\", completed );\r\n\tjQuery.ready();\r\n}\r\n\r\n// Catch cases where $(document).ready() is called\r\n// after the browser event has already occurred.\r\n// Support: IE <=9 - 10 only\r\n// Older IE sometimes signals \"interactive\" too soon\r\nif ( document.readyState === \"complete\" ||\r\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\r\n\r\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\r\n\twindow.setTimeout( jQuery.ready );\r\n\r\n} else {\r\n\r\n\t// Use the handy event callback\r\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\r\n\r\n\t// A fallback to window.onload, that will always work\r\n\twindow.addEventListener( \"load\", completed );\r\n}\r\n\r\n\r\n\r\n\r\n// Multifunctional method to get and set values of a collection\r\n// The value/s can optionally be executed if it's a function\r\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\r\n\tvar i = 0,\r\n\t\tlen = elems.length,\r\n\t\tbulk = key == null;\r\n\r\n\t// Sets many values\r\n\tif ( toType( key ) === \"object\" ) {\r\n\t\tchainable = true;\r\n\t\tfor ( i in key ) {\r\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\r\n\t\t}\r\n\r\n\t// Sets one value\r\n\t} else if ( value !== undefined ) {\r\n\t\tchainable = true;\r\n\r\n\t\tif ( !isFunction( value ) ) {\r\n\t\t\traw = true;\r\n\t\t}\r\n\r\n\t\tif ( bulk ) {\r\n\r\n\t\t\t// Bulk operations run against the entire set\r\n\t\t\tif ( raw ) {\r\n\t\t\t\tfn.call( elems, value );\r\n\t\t\t\tfn = null;\r\n\r\n\t\t\t// ...except when executing function values\r\n\t\t\t} else {\r\n\t\t\t\tbulk = fn;\r\n\t\t\t\tfn = function( elem, _key, value ) {\r\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( fn ) {\r\n\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\tfn(\r\n\t\t\t\t\telems[ i ], key, raw ?\r\n\t\t\t\t\t\tvalue :\r\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif ( chainable ) {\r\n\t\treturn elems;\r\n\t}\r\n\r\n\t// Gets\r\n\tif ( bulk ) {\r\n\t\treturn fn.call( elems );\r\n\t}\r\n\r\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\r\n};\r\n\r\n\r\n// Matches dashed string for camelizing\r\nvar rmsPrefix = /^-ms-/,\r\n\trdashAlpha = /-([a-z])/g;\r\n\r\n// Used by camelCase as callback to replace()\r\nfunction fcamelCase( _all, letter ) {\r\n\treturn letter.toUpperCase();\r\n}\r\n\r\n// Convert dashed to camelCase; used by the css and data modules\r\n// Support: IE <=9 - 11, Edge 12 - 15\r\n// Microsoft forgot to hump their vendor prefix (#9572)\r\nfunction camelCase( string ) {\r\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\r\n}\r\nvar acceptData = function( owner ) {\r\n\r\n\t// Accepts only:\r\n\t//  - Node\r\n\t//    - Node.ELEMENT_NODE\r\n\t//    - Node.DOCUMENT_NODE\r\n\t//  - Object\r\n\t//    - Any\r\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\r\n};\r\n\r\n\r\n\r\n\r\nfunction Data() {\r\n\tthis.expando = jQuery.expando + Data.uid++;\r\n}\r\n\r\nData.uid = 1;\r\n\r\nData.prototype = {\r\n\r\n\tcache: function( owner ) {\r\n\r\n\t\t// Check if the owner object already has a cache\r\n\t\tvar value = owner[ this.expando ];\r\n\r\n\t\t// If not, create one\r\n\t\tif ( !value ) {\r\n\t\t\tvalue = {};\r\n\r\n\t\t\t// We can accept data for non-element nodes in modern browsers,\r\n\t\t\t// but we should not, see #8335.\r\n\t\t\t// Always return an empty object.\r\n\t\t\tif ( acceptData( owner ) ) {\r\n\r\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\r\n\t\t\t\t// use plain assignment\r\n\t\t\t\tif ( owner.nodeType ) {\r\n\t\t\t\t\towner[ this.expando ] = value;\r\n\r\n\t\t\t\t// Otherwise secure it in a non-enumerable property\r\n\t\t\t\t// configurable must be true to allow the property to be\r\n\t\t\t\t// deleted when data is removed\r\n\t\t\t\t} else {\r\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t},\r\n\tset: function( owner, data, value ) {\r\n\t\tvar prop,\r\n\t\t\tcache = this.cache( owner );\r\n\r\n\t\t// Handle: [ owner, key, value ] args\r\n\t\t// Always use camelCase key (gh-2257)\r\n\t\tif ( typeof data === \"string\" ) {\r\n\t\t\tcache[ camelCase( data ) ] = value;\r\n\r\n\t\t// Handle: [ owner, { properties } ] args\r\n\t\t} else {\r\n\r\n\t\t\t// Copy the properties one-by-one to the cache object\r\n\t\t\tfor ( prop in data ) {\r\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cache;\r\n\t},\r\n\tget: function( owner, key ) {\r\n\t\treturn key === undefined ?\r\n\t\t\tthis.cache( owner ) :\r\n\r\n\t\t\t// Always use camelCase key (gh-2257)\r\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\r\n\t},\r\n\taccess: function( owner, key, value ) {\r\n\r\n\t\t// In cases where either:\r\n\t\t//\r\n\t\t//   1. No key was specified\r\n\t\t//   2. A string key was specified, but no value provided\r\n\t\t//\r\n\t\t// Take the \"read\" path and allow the get method to determine\r\n\t\t// which value to return, respectively either:\r\n\t\t//\r\n\t\t//   1. The entire cache object\r\n\t\t//   2. The data stored at the key\r\n\t\t//\r\n\t\tif ( key === undefined ||\r\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\r\n\r\n\t\t\treturn this.get( owner, key );\r\n\t\t}\r\n\r\n\t\t// When the key is not a string, or both a key and value\r\n\t\t// are specified, set or extend (existing objects) with either:\r\n\t\t//\r\n\t\t//   1. An object of properties\r\n\t\t//   2. A key and value\r\n\t\t//\r\n\t\tthis.set( owner, key, value );\r\n\r\n\t\t// Since the \"set\" path can have two possible entry points\r\n\t\t// return the expected data based on which path was taken[*]\r\n\t\treturn value !== undefined ? value : key;\r\n\t},\r\n\tremove: function( owner, key ) {\r\n\t\tvar i,\r\n\t\t\tcache = owner[ this.expando ];\r\n\r\n\t\tif ( cache === undefined ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( key !== undefined ) {\r\n\r\n\t\t\t// Support array or space separated string of keys\r\n\t\t\tif ( Array.isArray( key ) ) {\r\n\r\n\t\t\t\t// If key is an array of keys...\r\n\t\t\t\t// We always set camelCase keys, so remove that.\r\n\t\t\t\tkey = key.map( camelCase );\r\n\t\t\t} else {\r\n\t\t\t\tkey = camelCase( key );\r\n\r\n\t\t\t\t// If a key with the spaces exists, use it.\r\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\r\n\t\t\t\tkey = key in cache ?\r\n\t\t\t\t\t[ key ] :\r\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\r\n\t\t\t}\r\n\r\n\t\t\ti = key.length;\r\n\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tdelete cache[ key[ i ] ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove the expando if there's no more data\r\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\r\n\r\n\t\t\t// Support: Chrome <=35 - 45\r\n\t\t\t// Webkit & Blink performance suffers when deleting properties\r\n\t\t\t// from DOM nodes, so set to undefined instead\r\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\r\n\t\t\tif ( owner.nodeType ) {\r\n\t\t\t\towner[ this.expando ] = undefined;\r\n\t\t\t} else {\r\n\t\t\t\tdelete owner[ this.expando ];\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\thasData: function( owner ) {\r\n\t\tvar cache = owner[ this.expando ];\r\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\r\n\t}\r\n};\r\nvar dataPriv = new Data();\r\n\r\nvar dataUser = new Data();\r\n\r\n\r\n\r\n//\tImplementation Summary\r\n//\r\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\r\n//\t2. Improve the module's maintainability by reducing the storage\r\n//\t\tpaths to a single mechanism.\r\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\r\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\r\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\r\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\r\n\r\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\r\n\trmultiDash = /[A-Z]/g;\r\n\r\nfunction getData( data ) {\r\n\tif ( data === \"true\" ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif ( data === \"false\" ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ( data === \"null\" ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Only convert to a number if it doesn't change the string\r\n\tif ( data === +data + \"\" ) {\r\n\t\treturn +data;\r\n\t}\r\n\r\n\tif ( rbrace.test( data ) ) {\r\n\t\treturn JSON.parse( data );\r\n\t}\r\n\r\n\treturn data;\r\n}\r\n\r\nfunction dataAttr( elem, key, data ) {\r\n\tvar name;\r\n\r\n\t// If nothing was found internally, try to fetch any\r\n\t// data from the HTML5 data-* attribute\r\n\tif ( data === undefined && elem.nodeType === 1 ) {\r\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\r\n\t\tdata = elem.getAttribute( name );\r\n\r\n\t\tif ( typeof data === \"string\" ) {\r\n\t\t\ttry {\r\n\t\t\t\tdata = getData( data );\r\n\t\t\t} catch ( e ) {}\r\n\r\n\t\t\t// Make sure we set the data so it isn't changed later\r\n\t\t\tdataUser.set( elem, key, data );\r\n\t\t} else {\r\n\t\t\tdata = undefined;\r\n\t\t}\r\n\t}\r\n\treturn data;\r\n}\r\n\r\njQuery.extend( {\r\n\thasData: function( elem ) {\r\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\r\n\t},\r\n\r\n\tdata: function( elem, name, data ) {\r\n\t\treturn dataUser.access( elem, name, data );\r\n\t},\r\n\r\n\tremoveData: function( elem, name ) {\r\n\t\tdataUser.remove( elem, name );\r\n\t},\r\n\r\n\t// TODO: Now that all calls to _data and _removeData have been replaced\r\n\t// with direct calls to dataPriv methods, these can be deprecated.\r\n\t_data: function( elem, name, data ) {\r\n\t\treturn dataPriv.access( elem, name, data );\r\n\t},\r\n\r\n\t_removeData: function( elem, name ) {\r\n\t\tdataPriv.remove( elem, name );\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tdata: function( key, value ) {\r\n\t\tvar i, name, data,\r\n\t\t\telem = this[ 0 ],\r\n\t\t\tattrs = elem && elem.attributes;\r\n\r\n\t\t// Gets all values\r\n\t\tif ( key === undefined ) {\r\n\t\t\tif ( this.length ) {\r\n\t\t\t\tdata = dataUser.get( elem );\r\n\r\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\r\n\t\t\t\t\ti = attrs.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\r\n\t\t\t\t\t\t// Support: IE 11 only\r\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\r\n\t\t\t\t\t\tif ( attrs[ i ] ) {\r\n\t\t\t\t\t\t\tname = attrs[ i ].name;\r\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\r\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\r\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\t// Sets multiple values\r\n\t\tif ( typeof key === \"object\" ) {\r\n\t\t\treturn this.each( function() {\r\n\t\t\t\tdataUser.set( this, key );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn access( this, function( value ) {\r\n\t\t\tvar data;\r\n\r\n\t\t\t// The calling jQuery object (element matches) is not empty\r\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\r\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\r\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\r\n\t\t\t// throw an exception if an attempt to read a data cache is made.\r\n\t\t\tif ( elem && value === undefined ) {\r\n\r\n\t\t\t\t// Attempt to get data from the cache\r\n\t\t\t\t// The key will always be camelCased in Data\r\n\t\t\t\tdata = dataUser.get( elem, key );\r\n\t\t\t\tif ( data !== undefined ) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Attempt to \"discover\" the data in\r\n\t\t\t\t// HTML5 custom data-* attrs\r\n\t\t\t\tdata = dataAttr( elem, key );\r\n\t\t\t\tif ( data !== undefined ) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We tried really hard, but the data doesn't exist.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Set the data...\r\n\t\t\tthis.each( function() {\r\n\r\n\t\t\t\t// We always store the camelCased key\r\n\t\t\t\tdataUser.set( this, key, value );\r\n\t\t\t} );\r\n\t\t}, null, value, arguments.length > 1, null, true );\r\n\t},\r\n\r\n\tremoveData: function( key ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tdataUser.remove( this, key );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n\r\njQuery.extend( {\r\n\tqueue: function( elem, type, data ) {\r\n\t\tvar queue;\r\n\r\n\t\tif ( elem ) {\r\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\r\n\t\t\tqueue = dataPriv.get( elem, type );\r\n\r\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\r\n\t\t\tif ( data ) {\r\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\r\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tqueue.push( data );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn queue || [];\r\n\t\t}\r\n\t},\r\n\r\n\tdequeue: function( elem, type ) {\r\n\t\ttype = type || \"fx\";\r\n\r\n\t\tvar queue = jQuery.queue( elem, type ),\r\n\t\t\tstartLength = queue.length,\r\n\t\t\tfn = queue.shift(),\r\n\t\t\thooks = jQuery._queueHooks( elem, type ),\r\n\t\t\tnext = function() {\r\n\t\t\t\tjQuery.dequeue( elem, type );\r\n\t\t\t};\r\n\r\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\r\n\t\tif ( fn === \"inprogress\" ) {\r\n\t\t\tfn = queue.shift();\r\n\t\t\tstartLength--;\r\n\t\t}\r\n\r\n\t\tif ( fn ) {\r\n\r\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\r\n\t\t\t// automatically dequeued\r\n\t\t\tif ( type === \"fx\" ) {\r\n\t\t\t\tqueue.unshift( \"inprogress\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Clear up the last queue stop function\r\n\t\t\tdelete hooks.stop;\r\n\t\t\tfn.call( elem, next, hooks );\r\n\t\t}\r\n\r\n\t\tif ( !startLength && hooks ) {\r\n\t\t\thooks.empty.fire();\r\n\t\t}\r\n\t},\r\n\r\n\t// Not public - generate a queueHooks object, or return the current one\r\n\t_queueHooks: function( elem, type ) {\r\n\t\tvar key = type + \"queueHooks\";\r\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\r\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\r\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\r\n\t\t\t} )\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tqueue: function( type, data ) {\r\n\t\tvar setter = 2;\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tdata = type;\r\n\t\t\ttype = \"fx\";\r\n\t\t\tsetter--;\r\n\t\t}\r\n\r\n\t\tif ( arguments.length < setter ) {\r\n\t\t\treturn jQuery.queue( this[ 0 ], type );\r\n\t\t}\r\n\r\n\t\treturn data === undefined ?\r\n\t\t\tthis :\r\n\t\t\tthis.each( function() {\r\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\r\n\r\n\t\t\t\t// Ensure a hooks for this queue\r\n\t\t\t\tjQuery._queueHooks( this, type );\r\n\r\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\r\n\t\t\t\t\tjQuery.dequeue( this, type );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t},\r\n\tdequeue: function( type ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.dequeue( this, type );\r\n\t\t} );\r\n\t},\r\n\tclearQueue: function( type ) {\r\n\t\treturn this.queue( type || \"fx\", [] );\r\n\t},\r\n\r\n\t// Get a promise resolved when queues of a certain type\r\n\t// are emptied (fx is the type by default)\r\n\tpromise: function( type, obj ) {\r\n\t\tvar tmp,\r\n\t\t\tcount = 1,\r\n\t\t\tdefer = jQuery.Deferred(),\r\n\t\t\telements = this,\r\n\t\t\ti = this.length,\r\n\t\t\tresolve = function() {\r\n\t\t\t\tif ( !( --count ) ) {\r\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tobj = type;\r\n\t\t\ttype = undefined;\r\n\t\t}\r\n\t\ttype = type || \"fx\";\r\n\r\n\t\twhile ( i-- ) {\r\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\r\n\t\t\tif ( tmp && tmp.empty ) {\r\n\t\t\t\tcount++;\r\n\t\t\t\ttmp.empty.add( resolve );\r\n\t\t\t}\r\n\t\t}\r\n\t\tresolve();\r\n\t\treturn defer.promise( obj );\r\n\t}\r\n} );\r\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\r\n\r\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\r\n\r\n\r\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\r\n\r\nvar documentElement = document.documentElement;\r\n\r\n\r\n\r\n\tvar isAttached = function( elem ) {\r\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\r\n\t\t},\r\n\t\tcomposed = { composed: true };\r\n\r\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\r\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\r\n\t// Support: iOS 10.0-10.2 only\r\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\r\n\t// leading to errors. We need to check for `getRootNode`.\r\n\tif ( documentElement.getRootNode ) {\r\n\t\tisAttached = function( elem ) {\r\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\r\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\r\n\t\t};\r\n\t}\r\nvar isHiddenWithinTree = function( elem, el ) {\r\n\r\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\r\n\t\t// in that case, element will be second argument\r\n\t\telem = el || elem;\r\n\r\n\t\t// Inline style trumps all\r\n\t\treturn elem.style.display === \"none\" ||\r\n\t\t\telem.style.display === \"\" &&\r\n\r\n\t\t\t// Otherwise, check computed style\r\n\t\t\t// Support: Firefox <=43 - 45\r\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\r\n\t\t\t// in the document.\r\n\t\t\tisAttached( elem ) &&\r\n\r\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\r\n\t};\r\n\r\n\r\n\r\nfunction adjustCSS( elem, prop, valueParts, tween ) {\r\n\tvar adjusted, scale,\r\n\t\tmaxIterations = 20,\r\n\t\tcurrentValue = tween ?\r\n\t\t\tfunction() {\r\n\t\t\t\treturn tween.cur();\r\n\t\t\t} :\r\n\t\t\tfunction() {\r\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\r\n\t\t\t},\r\n\t\tinitial = currentValue(),\r\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\r\n\r\n\t\t// Starting value computation is required for potential unit mismatches\r\n\t\tinitialInUnit = elem.nodeType &&\r\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\r\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\r\n\r\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\r\n\r\n\t\t// Support: Firefox <=54\r\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\r\n\t\tinitial = initial / 2;\r\n\r\n\t\t// Trust units reported by jQuery.css\r\n\t\tunit = unit || initialInUnit[ 3 ];\r\n\r\n\t\t// Iteratively approximate from a nonzero starting point\r\n\t\tinitialInUnit = +initial || 1;\r\n\r\n\t\twhile ( maxIterations-- ) {\r\n\r\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\r\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\r\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\r\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\r\n\t\t\t\tmaxIterations = 0;\r\n\t\t\t}\r\n\t\t\tinitialInUnit = initialInUnit / scale;\r\n\r\n\t\t}\r\n\r\n\t\tinitialInUnit = initialInUnit * 2;\r\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\r\n\r\n\t\t// Make sure we update the tween properties later on\r\n\t\tvalueParts = valueParts || [];\r\n\t}\r\n\r\n\tif ( valueParts ) {\r\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\r\n\r\n\t\t// Apply relative offset (+=/-=) if specified\r\n\t\tadjusted = valueParts[ 1 ] ?\r\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\r\n\t\t\t+valueParts[ 2 ];\r\n\t\tif ( tween ) {\r\n\t\t\ttween.unit = unit;\r\n\t\t\ttween.start = initialInUnit;\r\n\t\t\ttween.end = adjusted;\r\n\t\t}\r\n\t}\r\n\treturn adjusted;\r\n}\r\n\r\n\r\nvar defaultDisplayMap = {};\r\n\r\nfunction getDefaultDisplay( elem ) {\r\n\tvar temp,\r\n\t\tdoc = elem.ownerDocument,\r\n\t\tnodeName = elem.nodeName,\r\n\t\tdisplay = defaultDisplayMap[ nodeName ];\r\n\r\n\tif ( display ) {\r\n\t\treturn display;\r\n\t}\r\n\r\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\r\n\tdisplay = jQuery.css( temp, \"display\" );\r\n\r\n\ttemp.parentNode.removeChild( temp );\r\n\r\n\tif ( display === \"none\" ) {\r\n\t\tdisplay = \"block\";\r\n\t}\r\n\tdefaultDisplayMap[ nodeName ] = display;\r\n\r\n\treturn display;\r\n}\r\n\r\nfunction showHide( elements, show ) {\r\n\tvar display, elem,\r\n\t\tvalues = [],\r\n\t\tindex = 0,\r\n\t\tlength = elements.length;\r\n\r\n\t// Determine new display value for elements that need to change\r\n\tfor ( ; index < length; index++ ) {\r\n\t\telem = elements[ index ];\r\n\t\tif ( !elem.style ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tdisplay = elem.style.display;\r\n\t\tif ( show ) {\r\n\r\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\r\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\r\n\t\t\t// inline or about-to-be-restored)\r\n\t\t\tif ( display === \"none\" ) {\r\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\r\n\t\t\t\tif ( !values[ index ] ) {\r\n\t\t\t\t\telem.style.display = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\r\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif ( display !== \"none\" ) {\r\n\t\t\t\tvalues[ index ] = \"none\";\r\n\r\n\t\t\t\t// Remember what we're overwriting\r\n\t\t\t\tdataPriv.set( elem, \"display\", display );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the display of the elements in a second loop to avoid constant reflow\r\n\tfor ( index = 0; index < length; index++ ) {\r\n\t\tif ( values[ index ] != null ) {\r\n\t\t\telements[ index ].style.display = values[ index ];\r\n\t\t}\r\n\t}\r\n\r\n\treturn elements;\r\n}\r\n\r\njQuery.fn.extend( {\r\n\tshow: function() {\r\n\t\treturn showHide( this, true );\r\n\t},\r\n\thide: function() {\r\n\t\treturn showHide( this );\r\n\t},\r\n\ttoggle: function( state ) {\r\n\t\tif ( typeof state === \"boolean\" ) {\r\n\t\t\treturn state ? this.show() : this.hide();\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tif ( isHiddenWithinTree( this ) ) {\r\n\t\t\t\tjQuery( this ).show();\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this ).hide();\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n} );\r\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\r\n\r\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\r\n\r\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\r\n\r\n\r\n\r\n( function() {\r\n\tvar fragment = document.createDocumentFragment(),\r\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\r\n\t\tinput = document.createElement( \"input\" );\r\n\r\n\t// Support: Android 4.0 - 4.3 only\r\n\t// Check state lost if the name is set (#11217)\r\n\t// Support: Windows Web Apps (WWA)\r\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\r\n\tinput.setAttribute( \"type\", \"radio\" );\r\n\tinput.setAttribute( \"checked\", \"checked\" );\r\n\tinput.setAttribute( \"name\", \"t\" );\r\n\r\n\tdiv.appendChild( input );\r\n\r\n\t// Support: Android <=4.1 only\r\n\t// Older WebKit doesn't clone checked state correctly in fragments\r\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\r\n\r\n\t// Support: IE <=11 only\r\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\r\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\r\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\r\n\r\n\t// Support: IE <=9 only\r\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\r\n\t// the select element.\r\n\tdiv.innerHTML = \"<option></option>\";\r\n\tsupport.option = !!div.lastChild;\r\n} )();\r\n\r\n\r\n// We have to close these tags to support XHTML (#13200)\r\nvar wrapMap = {\r\n\r\n\t// XHTML parsers do not magically insert elements in the\r\n\t// same way that tag soup parsers do. So we cannot shorten\r\n\t// this by omitting <tbody> or other required elements.\r\n\tthead: [ 1, \"<table>\", \"</table>\" ],\r\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\r\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\r\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\r\n\r\n\t_default: [ 0, \"\", \"\" ]\r\n};\r\n\r\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\r\nwrapMap.th = wrapMap.td;\r\n\r\n// Support: IE <=9 only\r\nif ( !support.option ) {\r\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\r\n}\r\n\r\n\r\nfunction getAll( context, tag ) {\r\n\r\n\t// Support: IE <=9 - 11 only\r\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\r\n\tvar ret;\r\n\r\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\r\n\t\tret = context.getElementsByTagName( tag || \"*\" );\r\n\r\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\r\n\t\tret = context.querySelectorAll( tag || \"*\" );\r\n\r\n\t} else {\r\n\t\tret = [];\r\n\t}\r\n\r\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\r\n\t\treturn jQuery.merge( [ context ], ret );\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n\r\n\r\n// Mark scripts as having already been evaluated\r\nfunction setGlobalEval( elems, refElements ) {\r\n\tvar i = 0,\r\n\t\tl = elems.length;\r\n\r\n\tfor ( ; i < l; i++ ) {\r\n\t\tdataPriv.set(\r\n\t\t\telems[ i ],\r\n\t\t\t\"globalEval\",\r\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nvar rhtml = /<|&#?\\w+;/;\r\n\r\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\r\n\tvar elem, tmp, tag, wrap, attached, j,\r\n\t\tfragment = context.createDocumentFragment(),\r\n\t\tnodes = [],\r\n\t\ti = 0,\r\n\t\tl = elems.length;\r\n\r\n\tfor ( ; i < l; i++ ) {\r\n\t\telem = elems[ i ];\r\n\r\n\t\tif ( elem || elem === 0 ) {\r\n\r\n\t\t\t// Add nodes directly\r\n\t\t\tif ( toType( elem ) === \"object\" ) {\r\n\r\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\r\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\r\n\r\n\t\t\t// Convert non-html into a text node\r\n\t\t\t} else if ( !rhtml.test( elem ) ) {\r\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\r\n\r\n\t\t\t// Convert html into DOM nodes\r\n\t\t\t} else {\r\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\r\n\r\n\t\t\t\t// Deserialize a standard representation\r\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\r\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\r\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\r\n\r\n\t\t\t\t// Descend through wrappers to the right content\r\n\t\t\t\tj = wrap[ 0 ];\r\n\t\t\t\twhile ( j-- ) {\r\n\t\t\t\t\ttmp = tmp.lastChild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\r\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\r\n\r\n\t\t\t\t// Remember the top-level container\r\n\t\t\t\ttmp = fragment.firstChild;\r\n\r\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\r\n\t\t\t\ttmp.textContent = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove wrapper from fragment\r\n\tfragment.textContent = \"\";\r\n\r\n\ti = 0;\r\n\twhile ( ( elem = nodes[ i++ ] ) ) {\r\n\r\n\t\t// Skip elements already in the context collection (trac-4087)\r\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\r\n\t\t\tif ( ignored ) {\r\n\t\t\t\tignored.push( elem );\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tattached = isAttached( elem );\r\n\r\n\t\t// Append to fragment\r\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\r\n\r\n\t\t// Preserve script evaluation history\r\n\t\tif ( attached ) {\r\n\t\t\tsetGlobalEval( tmp );\r\n\t\t}\r\n\r\n\t\t// Capture executables\r\n\t\tif ( scripts ) {\r\n\t\t\tj = 0;\r\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\r\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\r\n\t\t\t\t\tscripts.push( elem );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn fragment;\r\n}\r\n\r\n\r\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\r\n\r\nfunction returnTrue() {\r\n\treturn true;\r\n}\r\n\r\nfunction returnFalse() {\r\n\treturn false;\r\n}\r\n\r\n// Support: IE <=9 - 11+\r\n// focus() and blur() are asynchronous, except when they are no-op.\r\n// So expect focus to be synchronous when the element is already active,\r\n// and blur to be synchronous when the element is not already active.\r\n// (focus and blur are always synchronous in other supported browsers,\r\n// this just defines when we can count on it).\r\nfunction expectSync( elem, type ) {\r\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\r\n}\r\n\r\n// Support: IE <=9 only\r\n// Accessing document.activeElement can throw unexpectedly\r\n// https://bugs.jquery.com/ticket/13393\r\nfunction safeActiveElement() {\r\n\ttry {\r\n\t\treturn document.activeElement;\r\n\t} catch ( err ) { }\r\n}\r\n\r\nfunction on( elem, types, selector, data, fn, one ) {\r\n\tvar origFn, type;\r\n\r\n\t// Types can be a map of types/handlers\r\n\tif ( typeof types === \"object\" ) {\r\n\r\n\t\t// ( types-Object, selector, data )\r\n\t\tif ( typeof selector !== \"string\" ) {\r\n\r\n\t\t\t// ( types-Object, data )\r\n\t\t\tdata = data || selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t\tfor ( type in types ) {\r\n\t\t\ton( elem, type, selector, data, types[ type ], one );\r\n\t\t}\r\n\t\treturn elem;\r\n\t}\r\n\r\n\tif ( data == null && fn == null ) {\r\n\r\n\t\t// ( types, fn )\r\n\t\tfn = selector;\r\n\t\tdata = selector = undefined;\r\n\t} else if ( fn == null ) {\r\n\t\tif ( typeof selector === \"string\" ) {\r\n\r\n\t\t\t// ( types, selector, fn )\r\n\t\t\tfn = data;\r\n\t\t\tdata = undefined;\r\n\t\t} else {\r\n\r\n\t\t\t// ( types, data, fn )\r\n\t\t\tfn = data;\r\n\t\t\tdata = selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t}\r\n\tif ( fn === false ) {\r\n\t\tfn = returnFalse;\r\n\t} else if ( !fn ) {\r\n\t\treturn elem;\r\n\t}\r\n\r\n\tif ( one === 1 ) {\r\n\t\torigFn = fn;\r\n\t\tfn = function( event ) {\r\n\r\n\t\t\t// Can use an empty set, since event contains the info\r\n\t\t\tjQuery().off( event );\r\n\t\t\treturn origFn.apply( this, arguments );\r\n\t\t};\r\n\r\n\t\t// Use same guid so caller can remove using origFn\r\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\r\n\t}\r\n\treturn elem.each( function() {\r\n\t\tjQuery.event.add( this, types, fn, data, selector );\r\n\t} );\r\n}\r\n\r\n/*\r\n * Helper functions for managing events -- not part of the public interface.\r\n * Props to Dean Edwards' addEvent library for many of the ideas.\r\n */\r\njQuery.event = {\r\n\r\n\tglobal: {},\r\n\r\n\tadd: function( elem, types, handler, data, selector ) {\r\n\r\n\t\tvar handleObjIn, eventHandle, tmp,\r\n\t\t\tevents, t, handleObj,\r\n\t\t\tspecial, handlers, type, namespaces, origType,\r\n\t\t\telemData = dataPriv.get( elem );\r\n\r\n\t\t// Only attach events to objects that accept data\r\n\t\tif ( !acceptData( elem ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Caller can pass in an object of custom data in lieu of the handler\r\n\t\tif ( handler.handler ) {\r\n\t\t\thandleObjIn = handler;\r\n\t\t\thandler = handleObjIn.handler;\r\n\t\t\tselector = handleObjIn.selector;\r\n\t\t}\r\n\r\n\t\t// Ensure that invalid selectors throw exceptions at attach time\r\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\r\n\t\tif ( selector ) {\r\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\r\n\t\t}\r\n\r\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\r\n\t\tif ( !handler.guid ) {\r\n\t\t\thandler.guid = jQuery.guid++;\r\n\t\t}\r\n\r\n\t\t// Init the element's event structure and main handler, if this is the first\r\n\t\tif ( !( events = elemData.events ) ) {\r\n\t\t\tevents = elemData.events = Object.create( null );\r\n\t\t}\r\n\t\tif ( !( eventHandle = elemData.handle ) ) {\r\n\t\t\teventHandle = elemData.handle = function( e ) {\r\n\r\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\r\n\t\t\t\t// when an event is called after a page has unloaded\r\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\r\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Handle multiple events separated by a space\r\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\r\n\t\tt = types.length;\r\n\t\twhile ( t-- ) {\r\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\r\n\t\t\ttype = origType = tmp[ 1 ];\r\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\r\n\r\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\r\n\t\t\tif ( !type ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// If event changes its type, use the special event handlers for the changed type\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\r\n\t\t\t// If selector defined, determine special event api type, otherwise given type\r\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\r\n\r\n\t\t\t// Update special based on newly reset type\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\r\n\t\t\t// handleObj is passed to all event handlers\r\n\t\t\thandleObj = jQuery.extend( {\r\n\t\t\t\ttype: type,\r\n\t\t\t\torigType: origType,\r\n\t\t\t\tdata: data,\r\n\t\t\t\thandler: handler,\r\n\t\t\t\tguid: handler.guid,\r\n\t\t\t\tselector: selector,\r\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\r\n\t\t\t\tnamespace: namespaces.join( \".\" )\r\n\t\t\t}, handleObjIn );\r\n\r\n\t\t\t// Init the event handler queue if we're the first\r\n\t\t\tif ( !( handlers = events[ type ] ) ) {\r\n\t\t\t\thandlers = events[ type ] = [];\r\n\t\t\t\thandlers.delegateCount = 0;\r\n\r\n\t\t\t\t// Only use addEventListener if the special events handler returns false\r\n\t\t\t\tif ( !special.setup ||\r\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\r\n\r\n\t\t\t\t\tif ( elem.addEventListener ) {\r\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( special.add ) {\r\n\t\t\t\tspecial.add.call( elem, handleObj );\r\n\r\n\t\t\t\tif ( !handleObj.handler.guid ) {\r\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Add to the element's handler list, delegates in front\r\n\t\t\tif ( selector ) {\r\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\r\n\t\t\t} else {\r\n\t\t\t\thandlers.push( handleObj );\r\n\t\t\t}\r\n\r\n\t\t\t// Keep track of which events have ever been used, for event optimization\r\n\t\t\tjQuery.event.global[ type ] = true;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Detach an event or set of events from an element\r\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\r\n\r\n\t\tvar j, origCount, tmp,\r\n\t\t\tevents, t, handleObj,\r\n\t\t\tspecial, handlers, type, namespaces, origType,\r\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\r\n\r\n\t\tif ( !elemData || !( events = elemData.events ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Once for each type.namespace in types; type may be omitted\r\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\r\n\t\tt = types.length;\r\n\t\twhile ( t-- ) {\r\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\r\n\t\t\ttype = origType = tmp[ 1 ];\r\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\r\n\r\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\r\n\t\t\tif ( !type ) {\r\n\t\t\t\tfor ( type in events ) {\r\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\r\n\t\t\thandlers = events[ type ] || [];\r\n\t\t\ttmp = tmp[ 2 ] &&\r\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\r\n\r\n\t\t\t// Remove matching events\r\n\t\t\torigCount = j = handlers.length;\r\n\t\t\twhile ( j-- ) {\r\n\t\t\t\thandleObj = handlers[ j ];\r\n\r\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\r\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\r\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\r\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\r\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\r\n\t\t\t\t\thandlers.splice( j, 1 );\r\n\r\n\t\t\t\t\tif ( handleObj.selector ) {\r\n\t\t\t\t\t\thandlers.delegateCount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( special.remove ) {\r\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\r\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\r\n\t\t\tif ( origCount && !handlers.length ) {\r\n\t\t\t\tif ( !special.teardown ||\r\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\r\n\r\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete events[ type ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove data and the expando if it's no longer used\r\n\t\tif ( jQuery.isEmptyObject( events ) ) {\r\n\t\t\tdataPriv.remove( elem, \"handle events\" );\r\n\t\t}\r\n\t},\r\n\r\n\tdispatch: function( nativeEvent ) {\r\n\r\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\r\n\t\t\targs = new Array( arguments.length ),\r\n\r\n\t\t\t// Make a writable jQuery.Event from the native event object\r\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\r\n\r\n\t\t\thandlers = (\r\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\r\n\t\t\t)[ event.type ] || [],\r\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\r\n\r\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\r\n\t\targs[ 0 ] = event;\r\n\r\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\r\n\t\t\targs[ i ] = arguments[ i ];\r\n\t\t}\r\n\r\n\t\tevent.delegateTarget = this;\r\n\r\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\r\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Determine handlers\r\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\r\n\r\n\t\t// Run delegates first; they may want to stop propagation beneath us\r\n\t\ti = 0;\r\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\r\n\t\t\tevent.currentTarget = matched.elem;\r\n\r\n\t\t\tj = 0;\r\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\r\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\r\n\r\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\r\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\r\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\r\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\r\n\r\n\t\t\t\t\tevent.handleObj = handleObj;\r\n\t\t\t\t\tevent.data = handleObj.data;\r\n\r\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\r\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\r\n\r\n\t\t\t\t\tif ( ret !== undefined ) {\r\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Call the postDispatch hook for the mapped type\r\n\t\tif ( special.postDispatch ) {\r\n\t\t\tspecial.postDispatch.call( this, event );\r\n\t\t}\r\n\r\n\t\treturn event.result;\r\n\t},\r\n\r\n\thandlers: function( event, handlers ) {\r\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\r\n\t\t\thandlerQueue = [],\r\n\t\t\tdelegateCount = handlers.delegateCount,\r\n\t\t\tcur = event.target;\r\n\r\n\t\t// Find delegate handlers\r\n\t\tif ( delegateCount &&\r\n\r\n\t\t\t// Support: IE <=9\r\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\r\n\t\t\tcur.nodeType &&\r\n\r\n\t\t\t// Support: Firefox <=42\r\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\r\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\r\n\t\t\t// Support: IE 11 only\r\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\r\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\r\n\r\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\r\n\r\n\t\t\t\t// Don't check non-elements (#13208)\r\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\r\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\r\n\t\t\t\t\tmatchedHandlers = [];\r\n\t\t\t\t\tmatchedSelectors = {};\r\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\r\n\t\t\t\t\t\thandleObj = handlers[ i ];\r\n\r\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\r\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\r\n\r\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\r\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\r\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\r\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\r\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( matchedHandlers.length ) {\r\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add the remaining (directly-bound) handlers\r\n\t\tcur = this;\r\n\t\tif ( delegateCount < handlers.length ) {\r\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\r\n\t\t}\r\n\r\n\t\treturn handlerQueue;\r\n\t},\r\n\r\n\taddProp: function( name, hook ) {\r\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: true,\r\n\r\n\t\t\tget: isFunction( hook ) ?\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\tif ( this.originalEvent ) {\r\n\t\t\t\t\t\treturn hook( this.originalEvent );\r\n\t\t\t\t\t}\r\n\t\t\t\t} :\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\tif ( this.originalEvent ) {\r\n\t\t\t\t\t\treturn this.originalEvent[ name ];\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\tset: function( value ) {\r\n\t\t\t\tObject.defineProperty( this, name, {\r\n\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\tconfigurable: true,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tfix: function( originalEvent ) {\r\n\t\treturn originalEvent[ jQuery.expando ] ?\r\n\t\t\toriginalEvent :\r\n\t\t\tnew jQuery.Event( originalEvent );\r\n\t},\r\n\r\n\tspecial: {\r\n\t\tload: {\r\n\r\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\r\n\t\t\tnoBubble: true\r\n\t\t},\r\n\t\tclick: {\r\n\r\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\r\n\t\t\tsetup: function( data ) {\r\n\r\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\r\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\r\n\t\t\t\tvar el = this || data;\r\n\r\n\t\t\t\t// Claim the first handler\r\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\r\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\r\n\r\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\r\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Return false to allow normal processing in the caller\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\ttrigger: function( data ) {\r\n\r\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\r\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\r\n\t\t\t\tvar el = this || data;\r\n\r\n\t\t\t\t// Force setup before triggering a click\r\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\r\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\r\n\r\n\t\t\t\t\tleverageNative( el, \"click\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Return non-false to allow normal event-path propagation\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\r\n\t\t\t// For cross-browser consistency, suppress native .click() on links\r\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\r\n\t\t\t_default: function( event ) {\r\n\t\t\t\tvar target = event.target;\r\n\t\t\t\treturn rcheckableType.test( target.type ) &&\r\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\r\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\r\n\t\t\t\t\tnodeName( target, \"a\" );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tbeforeunload: {\r\n\t\t\tpostDispatch: function( event ) {\r\n\r\n\t\t\t\t// Support: Firefox 20+\r\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\r\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\r\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Ensure the presence of an event listener that handles manually-triggered\r\n// synthetic events by interrupting progress until reinvoked in response to\r\n// *native* events that it fires directly, ensuring that state changes have\r\n// already occurred before other listeners are invoked.\r\nfunction leverageNative( el, type, expectSync ) {\r\n\r\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\r\n\tif ( !expectSync ) {\r\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\r\n\t\t\tjQuery.event.add( el, type, returnTrue );\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Register the controller as a special universal handler for all event namespaces\r\n\tdataPriv.set( el, type, false );\r\n\tjQuery.event.add( el, type, {\r\n\t\tnamespace: false,\r\n\t\thandler: function( event ) {\r\n\t\t\tvar notAsync, result,\r\n\t\t\t\tsaved = dataPriv.get( this, type );\r\n\r\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\r\n\r\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\r\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\r\n\t\t\t\t// from an async native handler (gh-4350)\r\n\t\t\t\tif ( !saved.length ) {\r\n\r\n\t\t\t\t\t// Store arguments for use when handling the inner native event\r\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\r\n\t\t\t\t\t// will not be confused with a leftover capture object.\r\n\t\t\t\t\tsaved = slice.call( arguments );\r\n\t\t\t\t\tdataPriv.set( this, type, saved );\r\n\r\n\t\t\t\t\t// Trigger the native event and capture its result\r\n\t\t\t\t\t// Support: IE <=9 - 11+\r\n\t\t\t\t\t// focus() and blur() are asynchronous\r\n\t\t\t\t\tnotAsync = expectSync( this, type );\r\n\t\t\t\t\tthis[ type ]();\r\n\t\t\t\t\tresult = dataPriv.get( this, type );\r\n\t\t\t\t\tif ( saved !== result || notAsync ) {\r\n\t\t\t\t\t\tdataPriv.set( this, type, false );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( saved !== result ) {\r\n\r\n\t\t\t\t\t\t// Cancel the outer synthetic event\r\n\t\t\t\t\t\tevent.stopImmediatePropagation();\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\r\n\t\t\t\t\t\t// Support: Chrome 86+\r\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\r\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\r\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\r\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\r\n\t\t\t\t\t\treturn result && result.value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\r\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\r\n\t\t\t\t// native event and prevent that from happening again here.\r\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\r\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\r\n\t\t\t\t// less bad than duplication.\r\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\r\n\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t}\r\n\r\n\t\t\t// If this is a native event triggered above, everything is now in order\r\n\t\t\t// Fire an inner synthetic event with the original arguments\r\n\t\t\t} else if ( saved.length ) {\r\n\r\n\t\t\t\t// ...and capture the result\r\n\t\t\t\tdataPriv.set( this, type, {\r\n\t\t\t\t\tvalue: jQuery.event.trigger(\r\n\r\n\t\t\t\t\t\t// Support: IE <=9 - 11+\r\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\r\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\r\n\t\t\t\t\t\tsaved.slice( 1 ),\r\n\t\t\t\t\t\tthis\r\n\t\t\t\t\t)\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// Abort handling of the native event\r\n\t\t\t\tevent.stopImmediatePropagation();\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n}\r\n\r\njQuery.removeEvent = function( elem, type, handle ) {\r\n\r\n\t// This \"if\" is needed for plain objects\r\n\tif ( elem.removeEventListener ) {\r\n\t\telem.removeEventListener( type, handle );\r\n\t}\r\n};\r\n\r\njQuery.Event = function( src, props ) {\r\n\r\n\t// Allow instantiation without the 'new' keyword\r\n\tif ( !( this instanceof jQuery.Event ) ) {\r\n\t\treturn new jQuery.Event( src, props );\r\n\t}\r\n\r\n\t// Event object\r\n\tif ( src && src.type ) {\r\n\t\tthis.originalEvent = src;\r\n\t\tthis.type = src.type;\r\n\r\n\t\t// Events bubbling up the document may have been marked as prevented\r\n\t\t// by a handler lower down the tree; reflect the correct value.\r\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\r\n\t\t\t\tsrc.defaultPrevented === undefined &&\r\n\r\n\t\t\t\t// Support: Android <=2.3 only\r\n\t\t\t\tsrc.returnValue === false ?\r\n\t\t\treturnTrue :\r\n\t\t\treturnFalse;\r\n\r\n\t\t// Create target properties\r\n\t\t// Support: Safari <=6 - 7 only\r\n\t\t// Target should not be a text node (#504, #13143)\r\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\r\n\t\t\tsrc.target.parentNode :\r\n\t\t\tsrc.target;\r\n\r\n\t\tthis.currentTarget = src.currentTarget;\r\n\t\tthis.relatedTarget = src.relatedTarget;\r\n\r\n\t// Event type\r\n\t} else {\r\n\t\tthis.type = src;\r\n\t}\r\n\r\n\t// Put explicitly provided properties onto the event object\r\n\tif ( props ) {\r\n\t\tjQuery.extend( this, props );\r\n\t}\r\n\r\n\t// Create a timestamp if incoming event doesn't have one\r\n\tthis.timeStamp = src && src.timeStamp || Date.now();\r\n\r\n\t// Mark it as fixed\r\n\tthis[ jQuery.expando ] = true;\r\n};\r\n\r\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\r\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\r\njQuery.Event.prototype = {\r\n\tconstructor: jQuery.Event,\r\n\tisDefaultPrevented: returnFalse,\r\n\tisPropagationStopped: returnFalse,\r\n\tisImmediatePropagationStopped: returnFalse,\r\n\tisSimulated: false,\r\n\r\n\tpreventDefault: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isDefaultPrevented = returnTrue;\r\n\r\n\t\tif ( e && !this.isSimulated ) {\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\t},\r\n\tstopPropagation: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isPropagationStopped = returnTrue;\r\n\r\n\t\tif ( e && !this.isSimulated ) {\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\t},\r\n\tstopImmediatePropagation: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isImmediatePropagationStopped = returnTrue;\r\n\r\n\t\tif ( e && !this.isSimulated ) {\r\n\t\t\te.stopImmediatePropagation();\r\n\t\t}\r\n\r\n\t\tthis.stopPropagation();\r\n\t}\r\n};\r\n\r\n// Includes all common event props including KeyEvent and MouseEvent specific props\r\njQuery.each( {\r\n\taltKey: true,\r\n\tbubbles: true,\r\n\tcancelable: true,\r\n\tchangedTouches: true,\r\n\tctrlKey: true,\r\n\tdetail: true,\r\n\teventPhase: true,\r\n\tmetaKey: true,\r\n\tpageX: true,\r\n\tpageY: true,\r\n\tshiftKey: true,\r\n\tview: true,\r\n\t\"char\": true,\r\n\tcode: true,\r\n\tcharCode: true,\r\n\tkey: true,\r\n\tkeyCode: true,\r\n\tbutton: true,\r\n\tbuttons: true,\r\n\tclientX: true,\r\n\tclientY: true,\r\n\toffsetX: true,\r\n\toffsetY: true,\r\n\tpointerId: true,\r\n\tpointerType: true,\r\n\tscreenX: true,\r\n\tscreenY: true,\r\n\ttargetTouches: true,\r\n\ttoElement: true,\r\n\ttouches: true,\r\n\twhich: true\r\n}, jQuery.event.addProp );\r\n\r\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\r\n\tjQuery.event.special[ type ] = {\r\n\r\n\t\t// Utilize native event if possible so blur/focus sequence is correct\r\n\t\tsetup: function() {\r\n\r\n\t\t\t// Claim the first handler\r\n\t\t\t// dataPriv.set( this, \"focus\", ... )\r\n\t\t\t// dataPriv.set( this, \"blur\", ... )\r\n\t\t\tleverageNative( this, type, expectSync );\r\n\r\n\t\t\t// Return false to allow normal processing in the caller\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\ttrigger: function() {\r\n\r\n\t\t\t// Force setup before trigger\r\n\t\t\tleverageNative( this, type );\r\n\r\n\t\t\t// Return non-false to allow normal event-path propagation\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t// Suppress native focus or blur as it's already being fired\r\n\t\t// in leverageNative.\r\n\t\t_default: function() {\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tdelegateType: delegateType\r\n\t};\r\n} );\r\n\r\n// Create mouseenter/leave events using mouseover/out and event-time checks\r\n// so that event delegation works in jQuery.\r\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\r\n//\r\n// Support: Safari 7 only\r\n// Safari sends mouseenter too often; see:\r\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\r\n// for the description of the bug (it existed in older Chrome versions as well).\r\njQuery.each( {\r\n\tmouseenter: \"mouseover\",\r\n\tmouseleave: \"mouseout\",\r\n\tpointerenter: \"pointerover\",\r\n\tpointerleave: \"pointerout\"\r\n}, function( orig, fix ) {\r\n\tjQuery.event.special[ orig ] = {\r\n\t\tdelegateType: fix,\r\n\t\tbindType: fix,\r\n\r\n\t\thandle: function( event ) {\r\n\t\t\tvar ret,\r\n\t\t\t\ttarget = this,\r\n\t\t\t\trelated = event.relatedTarget,\r\n\t\t\t\thandleObj = event.handleObj;\r\n\r\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\r\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\r\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\r\n\t\t\t\tevent.type = handleObj.origType;\r\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\r\n\t\t\t\tevent.type = fix;\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t};\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\r\n\ton: function( types, selector, data, fn ) {\r\n\t\treturn on( this, types, selector, data, fn );\r\n\t},\r\n\tone: function( types, selector, data, fn ) {\r\n\t\treturn on( this, types, selector, data, fn, 1 );\r\n\t},\r\n\toff: function( types, selector, fn ) {\r\n\t\tvar handleObj, type;\r\n\t\tif ( types && types.preventDefault && types.handleObj ) {\r\n\r\n\t\t\t// ( event )  dispatched jQuery.Event\r\n\t\t\thandleObj = types.handleObj;\r\n\t\t\tjQuery( types.delegateTarget ).off(\r\n\t\t\t\thandleObj.namespace ?\r\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\r\n\t\t\t\t\thandleObj.origType,\r\n\t\t\t\thandleObj.selector,\r\n\t\t\t\thandleObj.handler\r\n\t\t\t);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif ( typeof types === \"object\" ) {\r\n\r\n\t\t\t// ( types-object [, selector] )\r\n\t\t\tfor ( type in types ) {\r\n\t\t\t\tthis.off( type, selector, types[ type ] );\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif ( selector === false || typeof selector === \"function\" ) {\r\n\r\n\t\t\t// ( types [, fn] )\r\n\t\t\tfn = selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t\tif ( fn === false ) {\r\n\t\t\tfn = returnFalse;\r\n\t\t}\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.event.remove( this, types, fn, selector );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n\r\nvar\r\n\r\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\r\n\t// In IE/Edge using regex groups here causes severe slowdowns.\r\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\r\n\trnoInnerhtml = /<script|<style|<link/i,\r\n\r\n\t// checked=\"checked\" or checked\r\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\r\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\r\n\r\n// Prefer a tbody over its parent table for containing new rows\r\nfunction manipulationTarget( elem, content ) {\r\n\tif ( nodeName( elem, \"table\" ) &&\r\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\r\n\r\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\r\n\t}\r\n\r\n\treturn elem;\r\n}\r\n\r\n// Replace/restore the type attribute of script elements for safe DOM manipulation\r\nfunction disableScript( elem ) {\r\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\r\n\treturn elem;\r\n}\r\nfunction restoreScript( elem ) {\r\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\r\n\t\telem.type = elem.type.slice( 5 );\r\n\t} else {\r\n\t\telem.removeAttribute( \"type\" );\r\n\t}\r\n\r\n\treturn elem;\r\n}\r\n\r\nfunction cloneCopyEvent( src, dest ) {\r\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\r\n\r\n\tif ( dest.nodeType !== 1 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// 1. Copy private data: events, handlers, etc.\r\n\tif ( dataPriv.hasData( src ) ) {\r\n\t\tpdataOld = dataPriv.get( src );\r\n\t\tevents = pdataOld.events;\r\n\r\n\t\tif ( events ) {\r\n\t\t\tdataPriv.remove( dest, \"handle events\" );\r\n\r\n\t\t\tfor ( type in events ) {\r\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\r\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// 2. Copy user data\r\n\tif ( dataUser.hasData( src ) ) {\r\n\t\tudataOld = dataUser.access( src );\r\n\t\tudataCur = jQuery.extend( {}, udataOld );\r\n\r\n\t\tdataUser.set( dest, udataCur );\r\n\t}\r\n}\r\n\r\n// Fix IE bugs, see support tests\r\nfunction fixInput( src, dest ) {\r\n\tvar nodeName = dest.nodeName.toLowerCase();\r\n\r\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\r\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\r\n\t\tdest.checked = src.checked;\r\n\r\n\t// Fails to return the selected option to the default selected state when cloning options\r\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\r\n\t\tdest.defaultValue = src.defaultValue;\r\n\t}\r\n}\r\n\r\nfunction domManip( collection, args, callback, ignored ) {\r\n\r\n\t// Flatten any nested arrays\r\n\targs = flat( args );\r\n\r\n\tvar fragment, first, scripts, hasScripts, node, doc,\r\n\t\ti = 0,\r\n\t\tl = collection.length,\r\n\t\tiNoClone = l - 1,\r\n\t\tvalue = args[ 0 ],\r\n\t\tvalueIsFunction = isFunction( value );\r\n\r\n\t// We can't cloneNode fragments that contain checked, in WebKit\r\n\tif ( valueIsFunction ||\r\n\t\t\t( l > 1 && typeof value === \"string\" &&\r\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\r\n\t\treturn collection.each( function( index ) {\r\n\t\t\tvar self = collection.eq( index );\r\n\t\t\tif ( valueIsFunction ) {\r\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\r\n\t\t\t}\r\n\t\t\tdomManip( self, args, callback, ignored );\r\n\t\t} );\r\n\t}\r\n\r\n\tif ( l ) {\r\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\r\n\t\tfirst = fragment.firstChild;\r\n\r\n\t\tif ( fragment.childNodes.length === 1 ) {\r\n\t\t\tfragment = first;\r\n\t\t}\r\n\r\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\r\n\t\tif ( first || ignored ) {\r\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\r\n\t\t\thasScripts = scripts.length;\r\n\r\n\t\t\t// Use the original fragment for the last item\r\n\t\t\t// instead of the first because it can end up\r\n\t\t\t// being emptied incorrectly in certain situations (#8070).\r\n\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\tnode = fragment;\r\n\r\n\t\t\t\tif ( i !== iNoClone ) {\r\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\r\n\r\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\r\n\t\t\t\t\tif ( hasScripts ) {\r\n\r\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\r\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback.call( collection[ i ], node, i );\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasScripts ) {\r\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\r\n\r\n\t\t\t\t// Reenable scripts\r\n\t\t\t\tjQuery.map( scripts, restoreScript );\r\n\r\n\t\t\t\t// Evaluate executable scripts on first document insertion\r\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\r\n\t\t\t\t\tnode = scripts[ i ];\r\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\r\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\r\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\r\n\r\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\r\n\r\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\r\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\r\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\r\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\r\n\t\t\t\t\t\t\t\t}, doc );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn collection;\r\n}\r\n\r\nfunction remove( elem, selector, keepData ) {\r\n\tvar node,\r\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\r\n\t\ti = 0;\r\n\r\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\r\n\t\tif ( !keepData && node.nodeType === 1 ) {\r\n\t\t\tjQuery.cleanData( getAll( node ) );\r\n\t\t}\r\n\r\n\t\tif ( node.parentNode ) {\r\n\t\t\tif ( keepData && isAttached( node ) ) {\r\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\r\n\t\t\t}\r\n\t\t\tnode.parentNode.removeChild( node );\r\n\t\t}\r\n\t}\r\n\r\n\treturn elem;\r\n}\r\n\r\njQuery.extend( {\r\n\thtmlPrefilter: function( html ) {\r\n\t\treturn html;\r\n\t},\r\n\r\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\r\n\t\tvar i, l, srcElements, destElements,\r\n\t\t\tclone = elem.cloneNode( true ),\r\n\t\t\tinPage = isAttached( elem );\r\n\r\n\t\t// Fix IE cloning issues\r\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\r\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\r\n\r\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\r\n\t\t\tdestElements = getAll( clone );\r\n\t\t\tsrcElements = getAll( elem );\r\n\r\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\r\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy the events from the original to the clone\r\n\t\tif ( dataAndEvents ) {\r\n\t\t\tif ( deepDataAndEvents ) {\r\n\t\t\t\tsrcElements = srcElements || getAll( elem );\r\n\t\t\t\tdestElements = destElements || getAll( clone );\r\n\r\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\r\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcloneCopyEvent( elem, clone );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Preserve script evaluation history\r\n\t\tdestElements = getAll( clone, \"script\" );\r\n\t\tif ( destElements.length > 0 ) {\r\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\r\n\t\t}\r\n\r\n\t\t// Return the cloned set\r\n\t\treturn clone;\r\n\t},\r\n\r\n\tcleanData: function( elems ) {\r\n\t\tvar data, elem, type,\r\n\t\t\tspecial = jQuery.event.special,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\r\n\t\t\tif ( acceptData( elem ) ) {\r\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\r\n\t\t\t\t\tif ( data.events ) {\r\n\t\t\t\t\t\tfor ( type in data.events ) {\r\n\t\t\t\t\t\t\tif ( special[ type ] ) {\r\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\r\n\r\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Support: Chrome <=35 - 45+\r\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\r\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\r\n\r\n\t\t\t\t\t// Support: Chrome <=35 - 45+\r\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\r\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tdetach: function( selector ) {\r\n\t\treturn remove( this, selector, true );\r\n\t},\r\n\r\n\tremove: function( selector ) {\r\n\t\treturn remove( this, selector );\r\n\t},\r\n\r\n\ttext: function( value ) {\r\n\t\treturn access( this, function( value ) {\r\n\t\t\treturn value === undefined ?\r\n\t\t\t\tjQuery.text( this ) :\r\n\t\t\t\tthis.empty().each( function() {\r\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\t\t\tthis.textContent = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t}, null, value, arguments.length );\r\n\t},\r\n\r\n\tappend: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\tvar target = manipulationTarget( this, elem );\r\n\t\t\t\ttarget.appendChild( elem );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tprepend: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\tvar target = manipulationTarget( this, elem );\r\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tbefore: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.parentNode ) {\r\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tafter: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.parentNode ) {\r\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tempty: function() {\r\n\t\tvar elem,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\r\n\t\t\tif ( elem.nodeType === 1 ) {\r\n\r\n\t\t\t\t// Prevent memory leaks\r\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\r\n\r\n\t\t\t\t// Remove any remaining nodes\r\n\t\t\t\telem.textContent = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\r\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\r\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\r\n\r\n\t\treturn this.map( function() {\r\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\r\n\t\t} );\r\n\t},\r\n\r\n\thtml: function( value ) {\r\n\t\treturn access( this, function( value ) {\r\n\t\t\tvar elem = this[ 0 ] || {},\r\n\t\t\t\ti = 0,\r\n\t\t\t\tl = this.length;\r\n\r\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\r\n\t\t\t\treturn elem.innerHTML;\r\n\t\t\t}\r\n\r\n\t\t\t// See if we can take a shortcut and just use innerHTML\r\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\r\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\r\n\r\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\t\t\telem = this[ i ] || {};\r\n\r\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\r\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\r\n\t\t\t\t\t\t\telem.innerHTML = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telem = 0;\r\n\r\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\r\n\t\t\t\t} catch ( e ) {}\r\n\t\t\t}\r\n\r\n\t\t\tif ( elem ) {\r\n\t\t\t\tthis.empty().append( value );\r\n\t\t\t}\r\n\t\t}, null, value, arguments.length );\r\n\t},\r\n\r\n\treplaceWith: function() {\r\n\t\tvar ignored = [];\r\n\r\n\t\t// Make the changes, replacing each non-ignored context element with the new content\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tvar parent = this.parentNode;\r\n\r\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\r\n\t\t\t\tjQuery.cleanData( getAll( this ) );\r\n\t\t\t\tif ( parent ) {\r\n\t\t\t\t\tparent.replaceChild( elem, this );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Force callback invocation\r\n\t\t}, ignored );\r\n\t}\r\n} );\r\n\r\njQuery.each( {\r\n\tappendTo: \"append\",\r\n\tprependTo: \"prepend\",\r\n\tinsertBefore: \"before\",\r\n\tinsertAfter: \"after\",\r\n\treplaceAll: \"replaceWith\"\r\n}, function( name, original ) {\r\n\tjQuery.fn[ name ] = function( selector ) {\r\n\t\tvar elems,\r\n\t\t\tret = [],\r\n\t\t\tinsert = jQuery( selector ),\r\n\t\t\tlast = insert.length - 1,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; i <= last; i++ ) {\r\n\t\t\telems = i === last ? this : this.clone( true );\r\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\r\n\r\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\r\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\tpush.apply( ret, elems.get() );\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( ret );\r\n\t};\r\n} );\r\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\r\n\r\nvar getStyles = function( elem ) {\r\n\r\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\r\n\t\t// IE throws on elements created in popups\r\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\r\n\t\tvar view = elem.ownerDocument.defaultView;\r\n\r\n\t\tif ( !view || !view.opener ) {\r\n\t\t\tview = window;\r\n\t\t}\r\n\r\n\t\treturn view.getComputedStyle( elem );\r\n\t};\r\n\r\nvar swap = function( elem, options, callback ) {\r\n\tvar ret, name,\r\n\t\told = {};\r\n\r\n\t// Remember the old values, and insert the new ones\r\n\tfor ( name in options ) {\r\n\t\told[ name ] = elem.style[ name ];\r\n\t\telem.style[ name ] = options[ name ];\r\n\t}\r\n\r\n\tret = callback.call( elem );\r\n\r\n\t// Revert the old values\r\n\tfor ( name in options ) {\r\n\t\telem.style[ name ] = old[ name ];\r\n\t}\r\n\r\n\treturn ret;\r\n};\r\n\r\n\r\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\r\n\r\n\r\n\r\n( function() {\r\n\r\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\r\n\t// so they're executed at the same time to save the second computation.\r\n\tfunction computeStyleTests() {\r\n\r\n\t\t// This is a singleton, we need to execute it only once\r\n\t\tif ( !div ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\r\n\t\t\t\"margin-top:1px;padding:0;border:0\";\r\n\t\tdiv.style.cssText =\r\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\r\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\r\n\t\t\t\"width:60%;top:1%\";\r\n\t\tdocumentElement.appendChild( container ).appendChild( div );\r\n\r\n\t\tvar divStyle = window.getComputedStyle( div );\r\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\r\n\r\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\r\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\r\n\r\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\r\n\t\t// Some styles come back with percentage values, even though they shouldn't\r\n\t\tdiv.style.right = \"60%\";\r\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\r\n\r\n\t\t// Support: IE 9 - 11 only\r\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\r\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\r\n\r\n\t\t// Support: IE 9 only\r\n\t\t// Detect overflow:scroll screwiness (gh-3699)\r\n\t\t// Support: Chrome <=64\r\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\r\n\t\tdiv.style.position = \"absolute\";\r\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\r\n\r\n\t\tdocumentElement.removeChild( container );\r\n\r\n\t\t// Nullify the div so it wouldn't be stored in the memory and\r\n\t\t// it will also be a sign that checks already performed\r\n\t\tdiv = null;\r\n\t}\r\n\r\n\tfunction roundPixelMeasures( measure ) {\r\n\t\treturn Math.round( parseFloat( measure ) );\r\n\t}\r\n\r\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\r\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\r\n\t\tcontainer = document.createElement( \"div\" ),\r\n\t\tdiv = document.createElement( \"div\" );\r\n\r\n\t// Finish early in limited (non-browser) environments\r\n\tif ( !div.style ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Support: IE <=9 - 11 only\r\n\t// Style of cloned element affects source element cloned (#8908)\r\n\tdiv.style.backgroundClip = \"content-box\";\r\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\r\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\r\n\r\n\tjQuery.extend( support, {\r\n\t\tboxSizingReliable: function() {\r\n\t\t\tcomputeStyleTests();\r\n\t\t\treturn boxSizingReliableVal;\r\n\t\t},\r\n\t\tpixelBoxStyles: function() {\r\n\t\t\tcomputeStyleTests();\r\n\t\t\treturn pixelBoxStylesVal;\r\n\t\t},\r\n\t\tpixelPosition: function() {\r\n\t\t\tcomputeStyleTests();\r\n\t\t\treturn pixelPositionVal;\r\n\t\t},\r\n\t\treliableMarginLeft: function() {\r\n\t\t\tcomputeStyleTests();\r\n\t\t\treturn reliableMarginLeftVal;\r\n\t\t},\r\n\t\tscrollboxSize: function() {\r\n\t\t\tcomputeStyleTests();\r\n\t\t\treturn scrollboxSizeVal;\r\n\t\t},\r\n\r\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\r\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\r\n\t\t// set in CSS while `offset*` properties report correct values.\r\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\r\n\t\t// some versions of this test; make sure not to make it pass there!\r\n\t\t//\r\n\t\t// Support: Firefox 70+\r\n\t\t// Only Firefox includes border widths\r\n\t\t// in computed dimensions. (gh-4529)\r\n\t\treliableTrDimensions: function() {\r\n\t\t\tvar table, tr, trChild, trStyle;\r\n\t\t\tif ( reliableTrDimensionsVal == null ) {\r\n\t\t\t\ttable = document.createElement( \"table\" );\r\n\t\t\t\ttr = document.createElement( \"tr\" );\r\n\t\t\t\ttrChild = document.createElement( \"div\" );\r\n\r\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\r\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\r\n\r\n\t\t\t\t// Support: Chrome 86+\r\n\t\t\t\t// Height set through cssText does not get applied.\r\n\t\t\t\t// Computed height then comes back as 0.\r\n\t\t\t\ttr.style.height = \"1px\";\r\n\t\t\t\ttrChild.style.height = \"9px\";\r\n\r\n\t\t\t\t// Support: Android 8 Chrome 86+\r\n\t\t\t\t// In our bodyBackground.html iframe,\r\n\t\t\t\t// display for all div elements is set to \"inline\",\r\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\r\n\t\t\t\t// Ensuring the div is display: block\r\n\t\t\t\t// gets around this issue.\r\n\t\t\t\ttrChild.style.display = \"block\";\r\n\r\n\t\t\t\tdocumentElement\r\n\t\t\t\t\t.appendChild( table )\r\n\t\t\t\t\t.appendChild( tr )\r\n\t\t\t\t\t.appendChild( trChild );\r\n\r\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\r\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\r\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\r\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\r\n\r\n\t\t\t\tdocumentElement.removeChild( table );\r\n\t\t\t}\r\n\t\t\treturn reliableTrDimensionsVal;\r\n\t\t}\r\n\t} );\r\n} )();\r\n\r\n\r\nfunction curCSS( elem, name, computed ) {\r\n\tvar width, minWidth, maxWidth, ret,\r\n\r\n\t\t// Support: Firefox 51+\r\n\t\t// Retrieving style before computed somehow\r\n\t\t// fixes an issue with getting wrong values\r\n\t\t// on detached elements\r\n\t\tstyle = elem.style;\r\n\r\n\tcomputed = computed || getStyles( elem );\r\n\r\n\t// getPropertyValue is needed for:\r\n\t//   .css('filter') (IE 9 only, #12537)\r\n\t//   .css('--customProperty) (#3144)\r\n\tif ( computed ) {\r\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\r\n\r\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\r\n\t\t\tret = jQuery.style( elem, name );\r\n\t\t}\r\n\r\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\r\n\t\t// Android Browser returns percentage for some values,\r\n\t\t// but width seems to be reliably pixels.\r\n\t\t// This is against the CSSOM draft spec:\r\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\r\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\r\n\r\n\t\t\t// Remember the original values\r\n\t\t\twidth = style.width;\r\n\t\t\tminWidth = style.minWidth;\r\n\t\t\tmaxWidth = style.maxWidth;\r\n\r\n\t\t\t// Put in the new values to get a computed value out\r\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\r\n\t\t\tret = computed.width;\r\n\r\n\t\t\t// Revert the changed values\r\n\t\t\tstyle.width = width;\r\n\t\t\tstyle.minWidth = minWidth;\r\n\t\t\tstyle.maxWidth = maxWidth;\r\n\t\t}\r\n\t}\r\n\r\n\treturn ret !== undefined ?\r\n\r\n\t\t// Support: IE <=9 - 11 only\r\n\t\t// IE returns zIndex value as an integer.\r\n\t\tret + \"\" :\r\n\t\tret;\r\n}\r\n\r\n\r\nfunction addGetHookIf( conditionFn, hookFn ) {\r\n\r\n\t// Define the hook, we'll check on the first run if it's really needed.\r\n\treturn {\r\n\t\tget: function() {\r\n\t\t\tif ( conditionFn() ) {\r\n\r\n\t\t\t\t// Hook not needed (or it's not possible to use it due\r\n\t\t\t\t// to missing dependency), remove it.\r\n\t\t\t\tdelete this.get;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\r\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\r\n\temptyStyle = document.createElement( \"div\" ).style,\r\n\tvendorProps = {};\r\n\r\n// Return a vendor-prefixed property or undefined\r\nfunction vendorPropName( name ) {\r\n\r\n\t// Check for vendor prefixed names\r\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\r\n\t\ti = cssPrefixes.length;\r\n\r\n\twhile ( i-- ) {\r\n\t\tname = cssPrefixes[ i ] + capName;\r\n\t\tif ( name in emptyStyle ) {\r\n\t\t\treturn name;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\r\nfunction finalPropName( name ) {\r\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\r\n\r\n\tif ( final ) {\r\n\t\treturn final;\r\n\t}\r\n\tif ( name in emptyStyle ) {\r\n\t\treturn name;\r\n\t}\r\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\r\n}\r\n\r\n\r\nvar\r\n\r\n\t// Swappable if display is none or starts with table\r\n\t// except \"table\", \"table-cell\", or \"table-caption\"\r\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\r\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\r\n\trcustomProp = /^--/,\r\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\r\n\tcssNormalTransform = {\r\n\t\tletterSpacing: \"0\",\r\n\t\tfontWeight: \"400\"\r\n\t};\r\n\r\nfunction setPositiveNumber( _elem, value, subtract ) {\r\n\r\n\t// Any relative (+/-) values have already been\r\n\t// normalized at this point\r\n\tvar matches = rcssNum.exec( value );\r\n\treturn matches ?\r\n\r\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\r\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\r\n\t\tvalue;\r\n}\r\n\r\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\r\n\tvar i = dimension === \"width\" ? 1 : 0,\r\n\t\textra = 0,\r\n\t\tdelta = 0;\r\n\r\n\t// Adjustment may not be necessary\r\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfor ( ; i < 4; i += 2 ) {\r\n\r\n\t\t// Both box models exclude margin\r\n\t\tif ( box === \"margin\" ) {\r\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\r\n\t\t}\r\n\r\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\r\n\t\tif ( !isBorderBox ) {\r\n\r\n\t\t\t// Add padding\r\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\r\n\r\n\t\t\t// For \"border\" or \"margin\", add border\r\n\t\t\tif ( box !== \"padding\" ) {\r\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\r\n\t\t\t// But still keep track of it otherwise\r\n\t\t\t} else {\r\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\t\t\t}\r\n\r\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\r\n\t\t// \"padding\" or \"margin\"\r\n\t\t} else {\r\n\r\n\t\t\t// For \"content\", subtract padding\r\n\t\t\tif ( box === \"content\" ) {\r\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\r\n\t\t\t}\r\n\r\n\t\t\t// For \"content\" or \"padding\", subtract border\r\n\t\t\tif ( box !== \"margin\" ) {\r\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\r\n\tif ( !isBorderBox && computedVal >= 0 ) {\r\n\r\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\r\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\r\n\t\tdelta += Math.max( 0, Math.ceil(\r\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\r\n\t\t\tcomputedVal -\r\n\t\t\tdelta -\r\n\t\t\textra -\r\n\t\t\t0.5\r\n\r\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\r\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\r\n\t\t) ) || 0;\r\n\t}\r\n\r\n\treturn delta;\r\n}\r\n\r\nfunction getWidthOrHeight( elem, dimension, extra ) {\r\n\r\n\t// Start with computed style\r\n\tvar styles = getStyles( elem ),\r\n\r\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\r\n\t\t// Fake content-box until we know it's needed to know the true value.\r\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\r\n\t\tisBorderBox = boxSizingNeeded &&\r\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\r\n\t\tvalueIsBorderBox = isBorderBox,\r\n\r\n\t\tval = curCSS( elem, dimension, styles ),\r\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\r\n\r\n\t// Support: Firefox <=54\r\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\r\n\tif ( rnumnonpx.test( val ) ) {\r\n\t\tif ( !extra ) {\r\n\t\t\treturn val;\r\n\t\t}\r\n\t\tval = \"auto\";\r\n\t}\r\n\r\n\r\n\t// Support: IE 9 - 11 only\r\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\r\n\t// In those cases, the computed value can be trusted to be border-box.\r\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\r\n\r\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\r\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\r\n\t\t// set in CSS while `offset*` properties report correct values.\r\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\r\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\r\n\r\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\r\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\r\n\t\tval === \"auto\" ||\r\n\r\n\t\t// Support: Android <=4.1 - 4.3 only\r\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\r\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\r\n\r\n\t\t// Make sure the element is visible & connected\r\n\t\telem.getClientRects().length ) {\r\n\r\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\r\n\r\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\r\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\r\n\t\t// retrieved value as a content box dimension.\r\n\t\tvalueIsBorderBox = offsetProp in elem;\r\n\t\tif ( valueIsBorderBox ) {\r\n\t\t\tval = elem[ offsetProp ];\r\n\t\t}\r\n\t}\r\n\r\n\t// Normalize \"\" and auto\r\n\tval = parseFloat( val ) || 0;\r\n\r\n\t// Adjust for the element's box model\r\n\treturn ( val +\r\n\t\tboxModelAdjustment(\r\n\t\t\telem,\r\n\t\t\tdimension,\r\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\r\n\t\t\tvalueIsBorderBox,\r\n\t\t\tstyles,\r\n\r\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\r\n\t\t\tval\r\n\t\t)\r\n\t) + \"px\";\r\n}\r\n\r\njQuery.extend( {\r\n\r\n\t// Add in style property hooks for overriding the default\r\n\t// behavior of getting and setting a style property\r\n\tcssHooks: {\r\n\t\topacity: {\r\n\t\t\tget: function( elem, computed ) {\r\n\t\t\t\tif ( computed ) {\r\n\r\n\t\t\t\t\t// We should always get a number back from opacity\r\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\r\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Don't automatically add \"px\" to these possibly-unitless properties\r\n\tcssNumber: {\r\n\t\t\"animationIterationCount\": true,\r\n\t\t\"columnCount\": true,\r\n\t\t\"fillOpacity\": true,\r\n\t\t\"flexGrow\": true,\r\n\t\t\"flexShrink\": true,\r\n\t\t\"fontWeight\": true,\r\n\t\t\"gridArea\": true,\r\n\t\t\"gridColumn\": true,\r\n\t\t\"gridColumnEnd\": true,\r\n\t\t\"gridColumnStart\": true,\r\n\t\t\"gridRow\": true,\r\n\t\t\"gridRowEnd\": true,\r\n\t\t\"gridRowStart\": true,\r\n\t\t\"lineHeight\": true,\r\n\t\t\"opacity\": true,\r\n\t\t\"order\": true,\r\n\t\t\"orphans\": true,\r\n\t\t\"widows\": true,\r\n\t\t\"zIndex\": true,\r\n\t\t\"zoom\": true\r\n\t},\r\n\r\n\t// Add in properties whose names you wish to fix before\r\n\t// setting or getting the value\r\n\tcssProps: {},\r\n\r\n\t// Get and set the style property on a DOM Node\r\n\tstyle: function( elem, name, value, extra ) {\r\n\r\n\t\t// Don't set styles on text and comment nodes\r\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Make sure that we're working with the right name\r\n\t\tvar ret, type, hooks,\r\n\t\t\torigName = camelCase( name ),\r\n\t\t\tisCustomProp = rcustomProp.test( name ),\r\n\t\t\tstyle = elem.style;\r\n\r\n\t\t// Make sure that we're working with the right name. We don't\r\n\t\t// want to query the value if it is a CSS custom property\r\n\t\t// since they are user-defined.\r\n\t\tif ( !isCustomProp ) {\r\n\t\t\tname = finalPropName( origName );\r\n\t\t}\r\n\r\n\t\t// Gets hook for the prefixed version, then unprefixed version\r\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\r\n\r\n\t\t// Check if we're setting a value\r\n\t\tif ( value !== undefined ) {\r\n\t\t\ttype = typeof value;\r\n\r\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\r\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\r\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\r\n\r\n\t\t\t\t// Fixes bug #9237\r\n\t\t\t\ttype = \"number\";\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\r\n\t\t\tif ( value == null || value !== value ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\r\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\r\n\t\t\t// \"px\" to a few hardcoded values.\r\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\r\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\r\n\t\t\t}\r\n\r\n\t\t\t// background-* props affect original clone's values\r\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\r\n\t\t\t\tstyle[ name ] = \"inherit\";\r\n\t\t\t}\r\n\r\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\r\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\r\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\r\n\r\n\t\t\t\tif ( isCustomProp ) {\r\n\t\t\t\t\tstyle.setProperty( name, value );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstyle[ name ] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// If a hook was provided get the non-computed value from there\r\n\t\t\tif ( hooks && \"get\" in hooks &&\r\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\r\n\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise just get the value from the style object\r\n\t\t\treturn style[ name ];\r\n\t\t}\r\n\t},\r\n\r\n\tcss: function( elem, name, extra, styles ) {\r\n\t\tvar val, num, hooks,\r\n\t\t\torigName = camelCase( name ),\r\n\t\t\tisCustomProp = rcustomProp.test( name );\r\n\r\n\t\t// Make sure that we're working with the right name. We don't\r\n\t\t// want to modify the value if it is a CSS custom property\r\n\t\t// since they are user-defined.\r\n\t\tif ( !isCustomProp ) {\r\n\t\t\tname = finalPropName( origName );\r\n\t\t}\r\n\r\n\t\t// Try prefixed name followed by the unprefixed name\r\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\r\n\r\n\t\t// If a hook was provided get the computed value from there\r\n\t\tif ( hooks && \"get\" in hooks ) {\r\n\t\t\tval = hooks.get( elem, true, extra );\r\n\t\t}\r\n\r\n\t\t// Otherwise, if a way to get the computed value exists, use that\r\n\t\tif ( val === undefined ) {\r\n\t\t\tval = curCSS( elem, name, styles );\r\n\t\t}\r\n\r\n\t\t// Convert \"normal\" to computed value\r\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\r\n\t\t\tval = cssNormalTransform[ name ];\r\n\t\t}\r\n\r\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\r\n\t\tif ( extra === \"\" || extra ) {\r\n\t\t\tnum = parseFloat( val );\r\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\r\n\t\t}\r\n\r\n\t\treturn val;\r\n\t}\r\n} );\r\n\r\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\r\n\tjQuery.cssHooks[ dimension ] = {\r\n\t\tget: function( elem, computed, extra ) {\r\n\t\t\tif ( computed ) {\r\n\r\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\r\n\t\t\t\t// but it must have a current display style that would benefit\r\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\r\n\r\n\t\t\t\t\t// Support: Safari 8+\r\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\r\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\r\n\t\t\t\t\t// Support: IE <=11 only\r\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\r\n\t\t\t\t\t// in IE throws an error.\r\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\r\n\t\t\t\t\tswap( elem, cssShow, function() {\r\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\r\n\t\t\t\t\t} ) :\r\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tset: function( elem, value, extra ) {\r\n\t\t\tvar matches,\r\n\t\t\t\tstyles = getStyles( elem ),\r\n\r\n\t\t\t\t// Only read styles.position if the test has a chance to fail\r\n\t\t\t\t// to avoid forcing a reflow.\r\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\r\n\t\t\t\t\tstyles.position === \"absolute\",\r\n\r\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\r\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\r\n\t\t\t\tisBorderBox = boxSizingNeeded &&\r\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\r\n\t\t\t\tsubtract = extra ?\r\n\t\t\t\t\tboxModelAdjustment(\r\n\t\t\t\t\t\telem,\r\n\t\t\t\t\t\tdimension,\r\n\t\t\t\t\t\textra,\r\n\t\t\t\t\t\tisBorderBox,\r\n\t\t\t\t\t\tstyles\r\n\t\t\t\t\t) :\r\n\t\t\t\t\t0;\r\n\r\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\r\n\t\t\t// faking a content-box to get border and padding (gh-3699)\r\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\r\n\t\t\t\tsubtract -= Math.ceil(\r\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\r\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\r\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\r\n\t\t\t\t\t0.5\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Convert to pixels if value adjustment is needed\r\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\r\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\r\n\r\n\t\t\t\telem.style[ dimension ] = value;\r\n\t\t\t\tvalue = jQuery.css( elem, dimension );\r\n\t\t\t}\r\n\r\n\t\t\treturn setPositiveNumber( elem, value, subtract );\r\n\t\t}\r\n\t};\r\n} );\r\n\r\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\r\n\tfunction( elem, computed ) {\r\n\t\tif ( computed ) {\r\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\r\n\t\t\t\telem.getBoundingClientRect().left -\r\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\r\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\r\n\t\t\t\t\t} )\r\n\t\t\t) + \"px\";\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// These hooks are used by animate to expand properties\r\njQuery.each( {\r\n\tmargin: \"\",\r\n\tpadding: \"\",\r\n\tborder: \"Width\"\r\n}, function( prefix, suffix ) {\r\n\tjQuery.cssHooks[ prefix + suffix ] = {\r\n\t\texpand: function( value ) {\r\n\t\t\tvar i = 0,\r\n\t\t\t\texpanded = {},\r\n\r\n\t\t\t\t// Assumes a single number if not a string\r\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\r\n\r\n\t\t\tfor ( ; i < 4; i++ ) {\r\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\r\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\r\n\t\t\t}\r\n\r\n\t\t\treturn expanded;\r\n\t\t}\r\n\t};\r\n\r\n\tif ( prefix !== \"margin\" ) {\r\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tcss: function( name, value ) {\r\n\t\treturn access( this, function( elem, name, value ) {\r\n\t\t\tvar styles, len,\r\n\t\t\t\tmap = {},\r\n\t\t\t\ti = 0;\r\n\r\n\t\t\tif ( Array.isArray( name ) ) {\r\n\t\t\t\tstyles = getStyles( elem );\r\n\t\t\t\tlen = name.length;\r\n\r\n\t\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn map;\r\n\t\t\t}\r\n\r\n\t\t\treturn value !== undefined ?\r\n\t\t\t\tjQuery.style( elem, name, value ) :\r\n\t\t\t\tjQuery.css( elem, name );\r\n\t\t}, name, value, arguments.length > 1 );\r\n\t}\r\n} );\r\n\r\n\r\nfunction Tween( elem, options, prop, end, easing ) {\r\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\r\n}\r\njQuery.Tween = Tween;\r\n\r\nTween.prototype = {\r\n\tconstructor: Tween,\r\n\tinit: function( elem, options, prop, end, easing, unit ) {\r\n\t\tthis.elem = elem;\r\n\t\tthis.prop = prop;\r\n\t\tthis.easing = easing || jQuery.easing._default;\r\n\t\tthis.options = options;\r\n\t\tthis.start = this.now = this.cur();\r\n\t\tthis.end = end;\r\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\r\n\t},\r\n\tcur: function() {\r\n\t\tvar hooks = Tween.propHooks[ this.prop ];\r\n\r\n\t\treturn hooks && hooks.get ?\r\n\t\t\thooks.get( this ) :\r\n\t\t\tTween.propHooks._default.get( this );\r\n\t},\r\n\trun: function( percent ) {\r\n\t\tvar eased,\r\n\t\t\thooks = Tween.propHooks[ this.prop ];\r\n\r\n\t\tif ( this.options.duration ) {\r\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\r\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.pos = eased = percent;\r\n\t\t}\r\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\r\n\r\n\t\tif ( this.options.step ) {\r\n\t\t\tthis.options.step.call( this.elem, this.now, this );\r\n\t\t}\r\n\r\n\t\tif ( hooks && hooks.set ) {\r\n\t\t\thooks.set( this );\r\n\t\t} else {\r\n\t\t\tTween.propHooks._default.set( this );\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\nTween.prototype.init.prototype = Tween.prototype;\r\n\r\nTween.propHooks = {\r\n\t_default: {\r\n\t\tget: function( tween ) {\r\n\t\t\tvar result;\r\n\r\n\t\t\t// Use a property on the element directly when it is not a DOM element,\r\n\t\t\t// or when there is no matching style property that exists.\r\n\t\t\tif ( tween.elem.nodeType !== 1 ||\r\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\r\n\t\t\t\treturn tween.elem[ tween.prop ];\r\n\t\t\t}\r\n\r\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\r\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\r\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\r\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\r\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\r\n\r\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\r\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\r\n\t\t},\r\n\t\tset: function( tween ) {\r\n\r\n\t\t\t// Use step hook for back compat.\r\n\t\t\t// Use cssHook if its there.\r\n\t\t\t// Use .style if available and use plain properties where available.\r\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\r\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\r\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\r\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\r\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\r\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\r\n\t\t\t} else {\r\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Support: IE <=9 only\r\n// Panic based approach to setting things on disconnected nodes\r\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\r\n\tset: function( tween ) {\r\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\r\n\t\t\ttween.elem[ tween.prop ] = tween.now;\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.easing = {\r\n\tlinear: function( p ) {\r\n\t\treturn p;\r\n\t},\r\n\tswing: function( p ) {\r\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\r\n\t},\r\n\t_default: \"swing\"\r\n};\r\n\r\njQuery.fx = Tween.prototype.init;\r\n\r\n// Back compat <1.8 extension point\r\njQuery.fx.step = {};\r\n\r\n\r\n\r\n\r\nvar\r\n\tfxNow, inProgress,\r\n\trfxtypes = /^(?:toggle|show|hide)$/,\r\n\trrun = /queueHooks$/;\r\n\r\nfunction schedule() {\r\n\tif ( inProgress ) {\r\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\r\n\t\t\twindow.requestAnimationFrame( schedule );\r\n\t\t} else {\r\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\r\n\t\t}\r\n\r\n\t\tjQuery.fx.tick();\r\n\t}\r\n}\r\n\r\n// Animations created synchronously will run synchronously\r\nfunction createFxNow() {\r\n\twindow.setTimeout( function() {\r\n\t\tfxNow = undefined;\r\n\t} );\r\n\treturn ( fxNow = Date.now() );\r\n}\r\n\r\n// Generate parameters to create a standard animation\r\nfunction genFx( type, includeWidth ) {\r\n\tvar which,\r\n\t\ti = 0,\r\n\t\tattrs = { height: type };\r\n\r\n\t// If we include width, step value is 1 to do all cssExpand values,\r\n\t// otherwise step value is 2 to skip over Left and Right\r\n\tincludeWidth = includeWidth ? 1 : 0;\r\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\r\n\t\twhich = cssExpand[ i ];\r\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\r\n\t}\r\n\r\n\tif ( includeWidth ) {\r\n\t\tattrs.opacity = attrs.width = type;\r\n\t}\r\n\r\n\treturn attrs;\r\n}\r\n\r\nfunction createTween( value, prop, animation ) {\r\n\tvar tween,\r\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\r\n\t\tindex = 0,\r\n\t\tlength = collection.length;\r\n\tfor ( ; index < length; index++ ) {\r\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\r\n\r\n\t\t\t// We're done with this property\r\n\t\t\treturn tween;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction defaultPrefilter( elem, props, opts ) {\r\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\r\n\t\tisBox = \"width\" in props || \"height\" in props,\r\n\t\tanim = this,\r\n\t\torig = {},\r\n\t\tstyle = elem.style,\r\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\r\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\r\n\r\n\t// Queue-skipping animations hijack the fx hooks\r\n\tif ( !opts.queue ) {\r\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\r\n\t\tif ( hooks.unqueued == null ) {\r\n\t\t\thooks.unqueued = 0;\r\n\t\t\toldfire = hooks.empty.fire;\r\n\t\t\thooks.empty.fire = function() {\r\n\t\t\t\tif ( !hooks.unqueued ) {\r\n\t\t\t\t\toldfire();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\thooks.unqueued++;\r\n\r\n\t\tanim.always( function() {\r\n\r\n\t\t\t// Ensure the complete handler is called before this completes\r\n\t\t\tanim.always( function() {\r\n\t\t\t\thooks.unqueued--;\r\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\r\n\t\t\t\t\thooks.empty.fire();\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t// Detect show/hide animations\r\n\tfor ( prop in props ) {\r\n\t\tvalue = props[ prop ];\r\n\t\tif ( rfxtypes.test( value ) ) {\r\n\t\t\tdelete props[ prop ];\r\n\t\t\ttoggle = toggle || value === \"toggle\";\r\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\r\n\r\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\r\n\t\t\t\t// there is still data from a stopped show/hide\r\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\r\n\t\t\t\t\thidden = true;\r\n\r\n\t\t\t\t// Ignore all other no-op show/hide data\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\r\n\t\t}\r\n\t}\r\n\r\n\t// Bail out if this is a no-op like .hide().hide()\r\n\tpropTween = !jQuery.isEmptyObject( props );\r\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Restrict \"overflow\" and \"display\" styles during box animations\r\n\tif ( isBox && elem.nodeType === 1 ) {\r\n\r\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\r\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\r\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\r\n\t\t// the overflowX value there.\r\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\r\n\r\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\r\n\t\trestoreDisplay = dataShow && dataShow.display;\r\n\t\tif ( restoreDisplay == null ) {\r\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\r\n\t\t}\r\n\t\tdisplay = jQuery.css( elem, \"display\" );\r\n\t\tif ( display === \"none\" ) {\r\n\t\t\tif ( restoreDisplay ) {\r\n\t\t\t\tdisplay = restoreDisplay;\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\r\n\t\t\t\tshowHide( [ elem ], true );\r\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\r\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\r\n\t\t\t\tshowHide( [ elem ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Animate inline elements as inline-block\r\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\r\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\r\n\r\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\r\n\t\t\t\tif ( !propTween ) {\r\n\t\t\t\t\tanim.done( function() {\r\n\t\t\t\t\t\tstyle.display = restoreDisplay;\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tif ( restoreDisplay == null ) {\r\n\t\t\t\t\t\tdisplay = style.display;\r\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tstyle.display = \"inline-block\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif ( opts.overflow ) {\r\n\t\tstyle.overflow = \"hidden\";\r\n\t\tanim.always( function() {\r\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\r\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\r\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\r\n\t\t} );\r\n\t}\r\n\r\n\t// Implement show/hide animations\r\n\tpropTween = false;\r\n\tfor ( prop in orig ) {\r\n\r\n\t\t// General show/hide setup for this element animation\r\n\t\tif ( !propTween ) {\r\n\t\t\tif ( dataShow ) {\r\n\t\t\t\tif ( \"hidden\" in dataShow ) {\r\n\t\t\t\t\thidden = dataShow.hidden;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\r\n\t\t\t}\r\n\r\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\r\n\t\t\tif ( toggle ) {\r\n\t\t\t\tdataShow.hidden = !hidden;\r\n\t\t\t}\r\n\r\n\t\t\t// Show elements before animating them\r\n\t\t\tif ( hidden ) {\r\n\t\t\t\tshowHide( [ elem ], true );\r\n\t\t\t}\r\n\r\n\t\t\t/* eslint-disable no-loop-func */\r\n\r\n\t\t\tanim.done( function() {\r\n\r\n\t\t\t\t/* eslint-enable no-loop-func */\r\n\r\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\r\n\t\t\t\tif ( !hidden ) {\r\n\t\t\t\t\tshowHide( [ elem ] );\r\n\t\t\t\t}\r\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\r\n\t\t\t\tfor ( prop in orig ) {\r\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\t// Per-property setup\r\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\r\n\t\tif ( !( prop in dataShow ) ) {\r\n\t\t\tdataShow[ prop ] = propTween.start;\r\n\t\t\tif ( hidden ) {\r\n\t\t\t\tpropTween.end = propTween.start;\r\n\t\t\t\tpropTween.start = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction propFilter( props, specialEasing ) {\r\n\tvar index, name, easing, value, hooks;\r\n\r\n\t// camelCase, specialEasing and expand cssHook pass\r\n\tfor ( index in props ) {\r\n\t\tname = camelCase( index );\r\n\t\teasing = specialEasing[ name ];\r\n\t\tvalue = props[ index ];\r\n\t\tif ( Array.isArray( value ) ) {\r\n\t\t\teasing = value[ 1 ];\r\n\t\t\tvalue = props[ index ] = value[ 0 ];\r\n\t\t}\r\n\r\n\t\tif ( index !== name ) {\r\n\t\t\tprops[ name ] = value;\r\n\t\t\tdelete props[ index ];\r\n\t\t}\r\n\r\n\t\thooks = jQuery.cssHooks[ name ];\r\n\t\tif ( hooks && \"expand\" in hooks ) {\r\n\t\t\tvalue = hooks.expand( value );\r\n\t\t\tdelete props[ name ];\r\n\r\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\r\n\t\t\t// Reusing 'index' because we have the correct \"name\"\r\n\t\t\tfor ( index in value ) {\r\n\t\t\t\tif ( !( index in props ) ) {\r\n\t\t\t\t\tprops[ index ] = value[ index ];\r\n\t\t\t\t\tspecialEasing[ index ] = easing;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tspecialEasing[ name ] = easing;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction Animation( elem, properties, options ) {\r\n\tvar result,\r\n\t\tstopped,\r\n\t\tindex = 0,\r\n\t\tlength = Animation.prefilters.length,\r\n\t\tdeferred = jQuery.Deferred().always( function() {\r\n\r\n\t\t\t// Don't match elem in the :animated selector\r\n\t\t\tdelete tick.elem;\r\n\t\t} ),\r\n\t\ttick = function() {\r\n\t\t\tif ( stopped ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar currentTime = fxNow || createFxNow(),\r\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\r\n\r\n\t\t\t\t// Support: Android 2.3 only\r\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\r\n\t\t\t\ttemp = remaining / animation.duration || 0,\r\n\t\t\t\tpercent = 1 - temp,\r\n\t\t\t\tindex = 0,\r\n\t\t\t\tlength = animation.tweens.length;\r\n\r\n\t\t\tfor ( ; index < length; index++ ) {\r\n\t\t\t\tanimation.tweens[ index ].run( percent );\r\n\t\t\t}\r\n\r\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\r\n\r\n\t\t\t// If there's more to do, yield\r\n\t\t\tif ( percent < 1 && length ) {\r\n\t\t\t\treturn remaining;\r\n\t\t\t}\r\n\r\n\t\t\t// If this was an empty animation, synthesize a final progress notification\r\n\t\t\tif ( !length ) {\r\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Resolve the animation and report its conclusion\r\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tanimation = deferred.promise( {\r\n\t\t\telem: elem,\r\n\t\t\tprops: jQuery.extend( {}, properties ),\r\n\t\t\topts: jQuery.extend( true, {\r\n\t\t\t\tspecialEasing: {},\r\n\t\t\t\teasing: jQuery.easing._default\r\n\t\t\t}, options ),\r\n\t\t\toriginalProperties: properties,\r\n\t\t\toriginalOptions: options,\r\n\t\t\tstartTime: fxNow || createFxNow(),\r\n\t\t\tduration: options.duration,\r\n\t\t\ttweens: [],\r\n\t\t\tcreateTween: function( prop, end ) {\r\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\r\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\r\n\t\t\t\tanimation.tweens.push( tween );\r\n\t\t\t\treturn tween;\r\n\t\t\t},\r\n\t\t\tstop: function( gotoEnd ) {\r\n\t\t\t\tvar index = 0,\r\n\r\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\r\n\t\t\t\t\t// otherwise we skip this part\r\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\r\n\t\t\t\tif ( stopped ) {\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t\tstopped = true;\r\n\t\t\t\tfor ( ; index < length; index++ ) {\r\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\r\n\t\t\t\tif ( gotoEnd ) {\r\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\r\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t} ),\r\n\t\tprops = animation.props;\r\n\r\n\tpropFilter( props, animation.opts.specialEasing );\r\n\r\n\tfor ( ; index < length; index++ ) {\r\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\r\n\t\tif ( result ) {\r\n\t\t\tif ( isFunction( result.stop ) ) {\r\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\r\n\t\t\t\t\tresult.stop.bind( result );\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tjQuery.map( props, createTween, animation );\r\n\r\n\tif ( isFunction( animation.opts.start ) ) {\r\n\t\tanimation.opts.start.call( elem, animation );\r\n\t}\r\n\r\n\t// Attach callbacks from options\r\n\tanimation\r\n\t\t.progress( animation.opts.progress )\r\n\t\t.done( animation.opts.done, animation.opts.complete )\r\n\t\t.fail( animation.opts.fail )\r\n\t\t.always( animation.opts.always );\r\n\r\n\tjQuery.fx.timer(\r\n\t\tjQuery.extend( tick, {\r\n\t\t\telem: elem,\r\n\t\t\tanim: animation,\r\n\t\t\tqueue: animation.opts.queue\r\n\t\t} )\r\n\t);\r\n\r\n\treturn animation;\r\n}\r\n\r\njQuery.Animation = jQuery.extend( Animation, {\r\n\r\n\ttweeners: {\r\n\t\t\"*\": [ function( prop, value ) {\r\n\t\t\tvar tween = this.createTween( prop, value );\r\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\r\n\t\t\treturn tween;\r\n\t\t} ]\r\n\t},\r\n\r\n\ttweener: function( props, callback ) {\r\n\t\tif ( isFunction( props ) ) {\r\n\t\t\tcallback = props;\r\n\t\t\tprops = [ \"*\" ];\r\n\t\t} else {\r\n\t\t\tprops = props.match( rnothtmlwhite );\r\n\t\t}\r\n\r\n\t\tvar prop,\r\n\t\t\tindex = 0,\r\n\t\t\tlength = props.length;\r\n\r\n\t\tfor ( ; index < length; index++ ) {\r\n\t\t\tprop = props[ index ];\r\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\r\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\r\n\t\t}\r\n\t},\r\n\r\n\tprefilters: [ defaultPrefilter ],\r\n\r\n\tprefilter: function( callback, prepend ) {\r\n\t\tif ( prepend ) {\r\n\t\t\tAnimation.prefilters.unshift( callback );\r\n\t\t} else {\r\n\t\t\tAnimation.prefilters.push( callback );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\njQuery.speed = function( speed, easing, fn ) {\r\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\r\n\t\tcomplete: fn || !fn && easing ||\r\n\t\t\tisFunction( speed ) && speed,\r\n\t\tduration: speed,\r\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\r\n\t};\r\n\r\n\t// Go to the end state if fx are off\r\n\tif ( jQuery.fx.off ) {\r\n\t\topt.duration = 0;\r\n\r\n\t} else {\r\n\t\tif ( typeof opt.duration !== \"number\" ) {\r\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\r\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\r\n\r\n\t\t\t} else {\r\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\r\n\tif ( opt.queue == null || opt.queue === true ) {\r\n\t\topt.queue = \"fx\";\r\n\t}\r\n\r\n\t// Queueing\r\n\topt.old = opt.complete;\r\n\r\n\topt.complete = function() {\r\n\t\tif ( isFunction( opt.old ) ) {\r\n\t\t\topt.old.call( this );\r\n\t\t}\r\n\r\n\t\tif ( opt.queue ) {\r\n\t\t\tjQuery.dequeue( this, opt.queue );\r\n\t\t}\r\n\t};\r\n\r\n\treturn opt;\r\n};\r\n\r\njQuery.fn.extend( {\r\n\tfadeTo: function( speed, to, easing, callback ) {\r\n\r\n\t\t// Show any hidden elements after setting opacity to 0\r\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\r\n\r\n\t\t\t// Animate to the value specified\r\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\r\n\t},\r\n\tanimate: function( prop, speed, easing, callback ) {\r\n\t\tvar empty = jQuery.isEmptyObject( prop ),\r\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\r\n\t\t\tdoAnimation = function() {\r\n\r\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\r\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\r\n\r\n\t\t\t\t// Empty animations, or finishing resolves immediately\r\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\r\n\t\t\t\t\tanim.stop( true );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\tdoAnimation.finish = doAnimation;\r\n\r\n\t\treturn empty || optall.queue === false ?\r\n\t\t\tthis.each( doAnimation ) :\r\n\t\t\tthis.queue( optall.queue, doAnimation );\r\n\t},\r\n\tstop: function( type, clearQueue, gotoEnd ) {\r\n\t\tvar stopQueue = function( hooks ) {\r\n\t\t\tvar stop = hooks.stop;\r\n\t\t\tdelete hooks.stop;\r\n\t\t\tstop( gotoEnd );\r\n\t\t};\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tgotoEnd = clearQueue;\r\n\t\t\tclearQueue = type;\r\n\t\t\ttype = undefined;\r\n\t\t}\r\n\t\tif ( clearQueue ) {\r\n\t\t\tthis.queue( type || \"fx\", [] );\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tvar dequeue = true,\r\n\t\t\t\tindex = type != null && type + \"queueHooks\",\r\n\t\t\t\ttimers = jQuery.timers,\r\n\t\t\t\tdata = dataPriv.get( this );\r\n\r\n\t\t\tif ( index ) {\r\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\r\n\t\t\t\t\tstopQueue( data[ index ] );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ( index in data ) {\r\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\r\n\t\t\t\t\t\tstopQueue( data[ index ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor ( index = timers.length; index--; ) {\r\n\t\t\t\tif ( timers[ index ].elem === this &&\r\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\r\n\r\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\r\n\t\t\t\t\tdequeue = false;\r\n\t\t\t\t\ttimers.splice( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Start the next in the queue if the last step wasn't forced.\r\n\t\t\t// Timers currently will call their complete callbacks, which\r\n\t\t\t// will dequeue but only if they were gotoEnd.\r\n\t\t\tif ( dequeue || !gotoEnd ) {\r\n\t\t\t\tjQuery.dequeue( this, type );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\tfinish: function( type ) {\r\n\t\tif ( type !== false ) {\r\n\t\t\ttype = type || \"fx\";\r\n\t\t}\r\n\t\treturn this.each( function() {\r\n\t\t\tvar index,\r\n\t\t\t\tdata = dataPriv.get( this ),\r\n\t\t\t\tqueue = data[ type + \"queue\" ],\r\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\r\n\t\t\t\ttimers = jQuery.timers,\r\n\t\t\t\tlength = queue ? queue.length : 0;\r\n\r\n\t\t\t// Enable finishing flag on private data\r\n\t\t\tdata.finish = true;\r\n\r\n\t\t\t// Empty the queue first\r\n\t\t\tjQuery.queue( this, type, [] );\r\n\r\n\t\t\tif ( hooks && hooks.stop ) {\r\n\t\t\t\thooks.stop.call( this, true );\r\n\t\t\t}\r\n\r\n\t\t\t// Look for any active animations, and finish them\r\n\t\t\tfor ( index = timers.length; index--; ) {\r\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\r\n\t\t\t\t\ttimers[ index ].anim.stop( true );\r\n\t\t\t\t\ttimers.splice( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Look for any animations in the old queue and finish them\r\n\t\t\tfor ( index = 0; index < length; index++ ) {\r\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\r\n\t\t\t\t\tqueue[ index ].finish.call( this );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Turn off finishing flag\r\n\t\t\tdelete data.finish;\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\r\n\tvar cssFn = jQuery.fn[ name ];\r\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\r\n\t\treturn speed == null || typeof speed === \"boolean\" ?\r\n\t\t\tcssFn.apply( this, arguments ) :\r\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\r\n\t};\r\n} );\r\n\r\n// Generate shortcuts for custom animations\r\njQuery.each( {\r\n\tslideDown: genFx( \"show\" ),\r\n\tslideUp: genFx( \"hide\" ),\r\n\tslideToggle: genFx( \"toggle\" ),\r\n\tfadeIn: { opacity: \"show\" },\r\n\tfadeOut: { opacity: \"hide\" },\r\n\tfadeToggle: { opacity: \"toggle\" }\r\n}, function( name, props ) {\r\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\r\n\t\treturn this.animate( props, speed, easing, callback );\r\n\t};\r\n} );\r\n\r\njQuery.timers = [];\r\njQuery.fx.tick = function() {\r\n\tvar timer,\r\n\t\ti = 0,\r\n\t\ttimers = jQuery.timers;\r\n\r\n\tfxNow = Date.now();\r\n\r\n\tfor ( ; i < timers.length; i++ ) {\r\n\t\ttimer = timers[ i ];\r\n\r\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\r\n\t\tif ( !timer() && timers[ i ] === timer ) {\r\n\t\t\ttimers.splice( i--, 1 );\r\n\t\t}\r\n\t}\r\n\r\n\tif ( !timers.length ) {\r\n\t\tjQuery.fx.stop();\r\n\t}\r\n\tfxNow = undefined;\r\n};\r\n\r\njQuery.fx.timer = function( timer ) {\r\n\tjQuery.timers.push( timer );\r\n\tjQuery.fx.start();\r\n};\r\n\r\njQuery.fx.interval = 13;\r\njQuery.fx.start = function() {\r\n\tif ( inProgress ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tinProgress = true;\r\n\tschedule();\r\n};\r\n\r\njQuery.fx.stop = function() {\r\n\tinProgress = null;\r\n};\r\n\r\njQuery.fx.speeds = {\r\n\tslow: 600,\r\n\tfast: 200,\r\n\r\n\t// Default speed\r\n\t_default: 400\r\n};\r\n\r\n\r\n// Based off of the plugin by Clint Helfers, with permission.\r\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\r\njQuery.fn.delay = function( time, type ) {\r\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\r\n\ttype = type || \"fx\";\r\n\r\n\treturn this.queue( type, function( next, hooks ) {\r\n\t\tvar timeout = window.setTimeout( next, time );\r\n\t\thooks.stop = function() {\r\n\t\t\twindow.clearTimeout( timeout );\r\n\t\t};\r\n\t} );\r\n};\r\n\r\n\r\n( function() {\r\n\tvar input = document.createElement( \"input\" ),\r\n\t\tselect = document.createElement( \"select\" ),\r\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\r\n\r\n\tinput.type = \"checkbox\";\r\n\r\n\t// Support: Android <=4.3 only\r\n\t// Default value for a checkbox should be \"on\"\r\n\tsupport.checkOn = input.value !== \"\";\r\n\r\n\t// Support: IE <=11 only\r\n\t// Must access selectedIndex to make default options select\r\n\tsupport.optSelected = opt.selected;\r\n\r\n\t// Support: IE <=11 only\r\n\t// An input loses its value after becoming a radio\r\n\tinput = document.createElement( \"input\" );\r\n\tinput.value = \"t\";\r\n\tinput.type = \"radio\";\r\n\tsupport.radioValue = input.value === \"t\";\r\n} )();\r\n\r\n\r\nvar boolHook,\r\n\tattrHandle = jQuery.expr.attrHandle;\r\n\r\njQuery.fn.extend( {\r\n\tattr: function( name, value ) {\r\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\r\n\t},\r\n\r\n\tremoveAttr: function( name ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.removeAttr( this, name );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.extend( {\r\n\tattr: function( elem, name, value ) {\r\n\t\tvar ret, hooks,\r\n\t\t\tnType = elem.nodeType;\r\n\r\n\t\t// Don't get/set attributes on text, comment and attribute nodes\r\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Fallback to prop when attributes are not supported\r\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\r\n\t\t\treturn jQuery.prop( elem, name, value );\r\n\t\t}\r\n\r\n\t\t// Attribute hooks are determined by the lowercase version\r\n\t\t// Grab necessary hook if one is defined\r\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\r\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\r\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\r\n\t\t}\r\n\r\n\t\tif ( value !== undefined ) {\r\n\t\t\tif ( value === null ) {\r\n\t\t\t\tjQuery.removeAttr( elem, name );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( hooks && \"set\" in hooks &&\r\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\telem.setAttribute( name, value + \"\" );\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\r\n\t\t\treturn ret;\r\n\t\t}\r\n\r\n\t\tret = jQuery.find.attr( elem, name );\r\n\r\n\t\t// Non-existent attributes return null, we normalize to undefined\r\n\t\treturn ret == null ? undefined : ret;\r\n\t},\r\n\r\n\tattrHooks: {\r\n\t\ttype: {\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\r\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\r\n\t\t\t\t\tvar val = elem.value;\r\n\t\t\t\t\telem.setAttribute( \"type\", value );\r\n\t\t\t\t\tif ( val ) {\r\n\t\t\t\t\t\telem.value = val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremoveAttr: function( elem, value ) {\r\n\t\tvar name,\r\n\t\t\ti = 0,\r\n\r\n\t\t\t// Attribute names can contain non-HTML whitespace characters\r\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\r\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\r\n\r\n\t\tif ( attrNames && elem.nodeType === 1 ) {\r\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\r\n\t\t\t\telem.removeAttribute( name );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n// Hooks for boolean attributes\r\nboolHook = {\r\n\tset: function( elem, value, name ) {\r\n\t\tif ( value === false ) {\r\n\r\n\t\t\t// Remove boolean attributes when set to false\r\n\t\t\tjQuery.removeAttr( elem, name );\r\n\t\t} else {\r\n\t\t\telem.setAttribute( name, name );\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n};\r\n\r\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\r\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\r\n\r\n\tattrHandle[ name ] = function( elem, name, isXML ) {\r\n\t\tvar ret, handle,\r\n\t\t\tlowercaseName = name.toLowerCase();\r\n\r\n\t\tif ( !isXML ) {\r\n\r\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\r\n\t\t\thandle = attrHandle[ lowercaseName ];\r\n\t\t\tattrHandle[ lowercaseName ] = ret;\r\n\t\t\tret = getter( elem, name, isXML ) != null ?\r\n\t\t\t\tlowercaseName :\r\n\t\t\t\tnull;\r\n\t\t\tattrHandle[ lowercaseName ] = handle;\r\n\t\t}\r\n\t\treturn ret;\r\n\t};\r\n} );\r\n\r\n\r\n\r\n\r\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\r\n\trclickable = /^(?:a|area)$/i;\r\n\r\njQuery.fn.extend( {\r\n\tprop: function( name, value ) {\r\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\r\n\t},\r\n\r\n\tremoveProp: function( name ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.extend( {\r\n\tprop: function( elem, name, value ) {\r\n\t\tvar ret, hooks,\r\n\t\t\tnType = elem.nodeType;\r\n\r\n\t\t// Don't get/set properties on text, comment and attribute nodes\r\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\r\n\r\n\t\t\t// Fix name and attach hooks\r\n\t\t\tname = jQuery.propFix[ name ] || name;\r\n\t\t\thooks = jQuery.propHooks[ name ];\r\n\t\t}\r\n\r\n\t\tif ( value !== undefined ) {\r\n\t\t\tif ( hooks && \"set\" in hooks &&\r\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\treturn ( elem[ name ] = value );\r\n\t\t}\r\n\r\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\r\n\t\t\treturn ret;\r\n\t\t}\r\n\r\n\t\treturn elem[ name ];\r\n\t},\r\n\r\n\tpropHooks: {\r\n\t\ttabIndex: {\r\n\t\t\tget: function( elem ) {\r\n\r\n\t\t\t\t// Support: IE <=9 - 11 only\r\n\t\t\t\t// elem.tabIndex doesn't always return the\r\n\t\t\t\t// correct value when it hasn't been explicitly set\r\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\r\n\t\t\t\t// Use proper attribute retrieval(#12072)\r\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\r\n\r\n\t\t\t\tif ( tabindex ) {\r\n\t\t\t\t\treturn parseInt( tabindex, 10 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\r\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\r\n\t\t\t\t\telem.href\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tpropFix: {\r\n\t\t\"for\": \"htmlFor\",\r\n\t\t\"class\": \"className\"\r\n\t}\r\n} );\r\n\r\n// Support: IE <=11 only\r\n// Accessing the selectedIndex property\r\n// forces the browser to respect setting selected\r\n// on the option\r\n// The getter ensures a default option is selected\r\n// when in an optgroup\r\n// eslint rule \"no-unused-expressions\" is disabled for this code\r\n// since it considers such accessions noop\r\nif ( !support.optSelected ) {\r\n\tjQuery.propHooks.selected = {\r\n\t\tget: function( elem ) {\r\n\r\n\t\t\t/* eslint no-unused-expressions: \"off\" */\r\n\r\n\t\t\tvar parent = elem.parentNode;\r\n\t\t\tif ( parent && parent.parentNode ) {\r\n\t\t\t\tparent.parentNode.selectedIndex;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tset: function( elem ) {\r\n\r\n\t\t\t/* eslint no-unused-expressions: \"off\" */\r\n\r\n\t\t\tvar parent = elem.parentNode;\r\n\t\t\tif ( parent ) {\r\n\t\t\t\tparent.selectedIndex;\r\n\r\n\t\t\t\tif ( parent.parentNode ) {\r\n\t\t\t\t\tparent.parentNode.selectedIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\njQuery.each( [\r\n\t\"tabIndex\",\r\n\t\"readOnly\",\r\n\t\"maxLength\",\r\n\t\"cellSpacing\",\r\n\t\"cellPadding\",\r\n\t\"rowSpan\",\r\n\t\"colSpan\",\r\n\t\"useMap\",\r\n\t\"frameBorder\",\r\n\t\"contentEditable\"\r\n], function() {\r\n\tjQuery.propFix[ this.toLowerCase() ] = this;\r\n} );\r\n\r\n\r\n\r\n\r\n\t// Strip and collapse whitespace according to HTML spec\r\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\r\n\tfunction stripAndCollapse( value ) {\r\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\r\n\t\treturn tokens.join( \" \" );\r\n\t}\r\n\r\n\r\nfunction getClass( elem ) {\r\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\r\n}\r\n\r\nfunction classesToArray( value ) {\r\n\tif ( Array.isArray( value ) ) {\r\n\t\treturn value;\r\n\t}\r\n\tif ( typeof value === \"string\" ) {\r\n\t\treturn value.match( rnothtmlwhite ) || [];\r\n\t}\r\n\treturn [];\r\n}\r\n\r\njQuery.fn.extend( {\r\n\taddClass: function( value ) {\r\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\r\n\t\t\ti = 0;\r\n\r\n\t\tif ( isFunction( value ) ) {\r\n\t\t\treturn this.each( function( j ) {\r\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tclasses = classesToArray( value );\r\n\r\n\t\tif ( classes.length ) {\r\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\r\n\t\t\t\tcurValue = getClass( elem );\r\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\r\n\r\n\t\t\t\tif ( cur ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\r\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\r\n\t\t\t\t\t\t\tcur += clazz + \" \";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\r\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\r\n\t\t\t\t\tif ( curValue !== finalValue ) {\r\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tremoveClass: function( value ) {\r\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\r\n\t\t\ti = 0;\r\n\r\n\t\tif ( isFunction( value ) ) {\r\n\t\t\treturn this.each( function( j ) {\r\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tif ( !arguments.length ) {\r\n\t\t\treturn this.attr( \"class\", \"\" );\r\n\t\t}\r\n\r\n\t\tclasses = classesToArray( value );\r\n\r\n\t\tif ( classes.length ) {\r\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\r\n\t\t\t\tcurValue = getClass( elem );\r\n\r\n\t\t\t\t// This expression is here for better compressibility (see addClass)\r\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\r\n\r\n\t\t\t\tif ( cur ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\r\n\r\n\t\t\t\t\t\t// Remove *all* instances\r\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\r\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\r\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\r\n\t\t\t\t\tif ( curValue !== finalValue ) {\r\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoggleClass: function( value, stateVal ) {\r\n\t\tvar type = typeof value,\r\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\r\n\r\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\r\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\r\n\t\t}\r\n\r\n\t\tif ( isFunction( value ) ) {\r\n\t\t\treturn this.each( function( i ) {\r\n\t\t\t\tjQuery( this ).toggleClass(\r\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\r\n\t\t\t\t\tstateVal\r\n\t\t\t\t);\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tvar className, i, self, classNames;\r\n\r\n\t\t\tif ( isValidValue ) {\r\n\r\n\t\t\t\t// Toggle individual class names\r\n\t\t\t\ti = 0;\r\n\t\t\t\tself = jQuery( this );\r\n\t\t\t\tclassNames = classesToArray( value );\r\n\r\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\r\n\r\n\t\t\t\t\t// Check each className given, space separated list\r\n\t\t\t\t\tif ( self.hasClass( className ) ) {\r\n\t\t\t\t\t\tself.removeClass( className );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tself.addClass( className );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t// Toggle whole class name\r\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\r\n\t\t\t\tclassName = getClass( this );\r\n\t\t\t\tif ( className ) {\r\n\r\n\t\t\t\t\t// Store className if set\r\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the element has a class name or if we're passed `false`,\r\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\r\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\r\n\t\t\t\t// falling back to the empty string if nothing was stored.\r\n\t\t\t\tif ( this.setAttribute ) {\r\n\t\t\t\t\tthis.setAttribute( \"class\",\r\n\t\t\t\t\t\tclassName || value === false ?\r\n\t\t\t\t\t\t\t\"\" :\r\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\thasClass: function( selector ) {\r\n\t\tvar className, elem,\r\n\t\t\ti = 0;\r\n\r\n\t\tclassName = \" \" + selector + \" \";\r\n\t\twhile ( ( elem = this[ i++ ] ) ) {\r\n\t\t\tif ( elem.nodeType === 1 &&\r\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\nvar rreturn = /\\r/g;\r\n\r\njQuery.fn.extend( {\r\n\tval: function( value ) {\r\n\t\tvar hooks, ret, valueIsFunction,\r\n\t\t\telem = this[ 0 ];\r\n\r\n\t\tif ( !arguments.length ) {\r\n\t\t\tif ( elem ) {\r\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\r\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\r\n\r\n\t\t\t\tif ( hooks &&\r\n\t\t\t\t\t\"get\" in hooks &&\r\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tret = elem.value;\r\n\r\n\t\t\t\t// Handle most common string cases\r\n\t\t\t\tif ( typeof ret === \"string\" ) {\r\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle cases where value is null/undef or number\r\n\t\t\t\treturn ret == null ? \"\" : ret;\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvalueIsFunction = isFunction( value );\r\n\r\n\t\treturn this.each( function( i ) {\r\n\t\t\tvar val;\r\n\r\n\t\t\tif ( this.nodeType !== 1 ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( valueIsFunction ) {\r\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\r\n\t\t\t} else {\r\n\t\t\t\tval = value;\r\n\t\t\t}\r\n\r\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\r\n\t\t\tif ( val == null ) {\r\n\t\t\t\tval = \"\";\r\n\r\n\t\t\t} else if ( typeof val === \"number\" ) {\r\n\t\t\t\tval += \"\";\r\n\r\n\t\t\t} else if ( Array.isArray( val ) ) {\r\n\t\t\t\tval = jQuery.map( val, function( value ) {\r\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\r\n\r\n\t\t\t// If set returns undefined, fall back to normal setting\r\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\r\n\t\t\t\tthis.value = val;\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.extend( {\r\n\tvalHooks: {\r\n\t\toption: {\r\n\t\t\tget: function( elem ) {\r\n\r\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\r\n\t\t\t\treturn val != null ?\r\n\t\t\t\t\tval :\r\n\r\n\t\t\t\t\t// Support: IE <=10 - 11 only\r\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\r\n\t\t\t\t\t// Strip and collapse whitespace\r\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\r\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\r\n\t\t\t}\r\n\t\t},\r\n\t\tselect: {\r\n\t\t\tget: function( elem ) {\r\n\t\t\t\tvar value, option, i,\r\n\t\t\t\t\toptions = elem.options,\r\n\t\t\t\t\tindex = elem.selectedIndex,\r\n\t\t\t\t\tone = elem.type === \"select-one\",\r\n\t\t\t\t\tvalues = one ? null : [],\r\n\t\t\t\t\tmax = one ? index + 1 : options.length;\r\n\r\n\t\t\t\tif ( index < 0 ) {\r\n\t\t\t\t\ti = max;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\ti = one ? index : 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Loop through all the selected options\r\n\t\t\t\tfor ( ; i < max; i++ ) {\r\n\t\t\t\t\toption = options[ i ];\r\n\r\n\t\t\t\t\t// Support: IE <=9 only\r\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\r\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\r\n\r\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\r\n\t\t\t\t\t\t\t!option.disabled &&\r\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\r\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\r\n\r\n\t\t\t\t\t\t// Get the specific value for the option\r\n\t\t\t\t\t\tvalue = jQuery( option ).val();\r\n\r\n\t\t\t\t\t\t// We don't need an array for one selects\r\n\t\t\t\t\t\tif ( one ) {\r\n\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Multi-Selects return an array\r\n\t\t\t\t\t\tvalues.push( value );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\t\t\t},\r\n\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tvar optionSet, option,\r\n\t\t\t\t\toptions = elem.options,\r\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\r\n\t\t\t\t\ti = options.length;\r\n\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\toption = options[ i ];\r\n\r\n\t\t\t\t\t/* eslint-disable no-cond-assign */\r\n\r\n\t\t\t\t\tif ( option.selected =\r\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\toptionSet = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/* eslint-enable no-cond-assign */\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\r\n\t\t\t\tif ( !optionSet ) {\r\n\t\t\t\t\telem.selectedIndex = -1;\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n// Radios and checkboxes getter/setter\r\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\r\n\tjQuery.valHooks[ this ] = {\r\n\t\tset: function( elem, value ) {\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tif ( !support.checkOn ) {\r\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\r\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\n// Return jQuery for attributes-only inclusion\r\n\r\n\r\nsupport.focusin = \"onfocusin\" in window;\r\n\r\n\r\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\r\n\tstopPropagationCallback = function( e ) {\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\njQuery.extend( jQuery.event, {\r\n\r\n\ttrigger: function( event, data, elem, onlyHandlers ) {\r\n\r\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\r\n\t\t\teventPath = [ elem || document ],\r\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\r\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\r\n\r\n\t\tcur = lastElement = tmp = elem = elem || document;\r\n\r\n\t\t// Don't do events on text and comment nodes\r\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\r\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\r\n\r\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\r\n\t\t\tnamespaces = type.split( \".\" );\r\n\t\t\ttype = namespaces.shift();\r\n\t\t\tnamespaces.sort();\r\n\t\t}\r\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\r\n\r\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\r\n\t\tevent = event[ jQuery.expando ] ?\r\n\t\t\tevent :\r\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\r\n\r\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\r\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\r\n\t\tevent.namespace = namespaces.join( \".\" );\r\n\t\tevent.rnamespace = event.namespace ?\r\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\r\n\t\t\tnull;\r\n\r\n\t\t// Clean up the event in case it is being reused\r\n\t\tevent.result = undefined;\r\n\t\tif ( !event.target ) {\r\n\t\t\tevent.target = elem;\r\n\t\t}\r\n\r\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\r\n\t\tdata = data == null ?\r\n\t\t\t[ event ] :\r\n\t\t\tjQuery.makeArray( data, [ event ] );\r\n\r\n\t\t// Allow special events to draw outside the lines\r\n\t\tspecial = jQuery.event.special[ type ] || {};\r\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\r\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\r\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\r\n\r\n\t\t\tbubbleType = special.delegateType || type;\r\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\r\n\t\t\t\tcur = cur.parentNode;\r\n\t\t\t}\r\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\r\n\t\t\t\teventPath.push( cur );\r\n\t\t\t\ttmp = cur;\r\n\t\t\t}\r\n\r\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\r\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\r\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fire handlers on the event path\r\n\t\ti = 0;\r\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\r\n\t\t\tlastElement = cur;\r\n\t\t\tevent.type = i > 1 ?\r\n\t\t\t\tbubbleType :\r\n\t\t\t\tspecial.bindType || type;\r\n\r\n\t\t\t// jQuery handler\r\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\r\n\t\t\t\tdataPriv.get( cur, \"handle\" );\r\n\t\t\tif ( handle ) {\r\n\t\t\t\thandle.apply( cur, data );\r\n\t\t\t}\r\n\r\n\t\t\t// Native handler\r\n\t\t\thandle = ontype && cur[ ontype ];\r\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\r\n\t\t\t\tevent.result = handle.apply( cur, data );\r\n\t\t\t\tif ( event.result === false ) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tevent.type = type;\r\n\r\n\t\t// If nobody prevented the default action, do it now\r\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\r\n\r\n\t\t\tif ( ( !special._default ||\r\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\r\n\t\t\t\tacceptData( elem ) ) {\r\n\r\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\r\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\r\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\r\n\r\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\r\n\t\t\t\t\ttmp = elem[ ontype ];\r\n\r\n\t\t\t\t\tif ( tmp ) {\r\n\t\t\t\t\t\telem[ ontype ] = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\r\n\t\t\t\t\tjQuery.event.triggered = type;\r\n\r\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\r\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telem[ type ]();\r\n\r\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\r\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tjQuery.event.triggered = undefined;\r\n\r\n\t\t\t\t\tif ( tmp ) {\r\n\t\t\t\t\t\telem[ ontype ] = tmp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn event.result;\r\n\t},\r\n\r\n\t// Piggyback on a donor event to simulate a different one\r\n\t// Used only for `focus(in | out)` events\r\n\tsimulate: function( type, elem, event ) {\r\n\t\tvar e = jQuery.extend(\r\n\t\t\tnew jQuery.Event(),\r\n\t\t\tevent,\r\n\t\t\t{\r\n\t\t\t\ttype: type,\r\n\t\t\t\tisSimulated: true\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tjQuery.event.trigger( e, null, elem );\r\n\t}\r\n\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\r\n\ttrigger: function( type, data ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.event.trigger( type, data, this );\r\n\t\t} );\r\n\t},\r\n\ttriggerHandler: function( type, data ) {\r\n\t\tvar elem = this[ 0 ];\r\n\t\tif ( elem ) {\r\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n\r\n// Support: Firefox <=44\r\n// Firefox doesn't have focus(in | out) events\r\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\r\n//\r\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\r\n// focus(in | out) events fire after focus & blur events,\r\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\r\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\r\nif ( !support.focusin ) {\r\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\r\n\r\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\r\n\t\tvar handler = function( event ) {\r\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\r\n\t\t};\r\n\r\n\t\tjQuery.event.special[ fix ] = {\r\n\t\t\tsetup: function() {\r\n\r\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\r\n\t\t\t\t// (via `this.document`) & document (via `this`).\r\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\r\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\r\n\r\n\t\t\t\tif ( !attaches ) {\r\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\r\n\t\t\t\t}\r\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\r\n\t\t\t},\r\n\t\t\tteardown: function() {\r\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\r\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\r\n\r\n\t\t\t\tif ( !attaches ) {\r\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\r\n\t\t\t\t\tdataPriv.remove( doc, fix );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t} );\r\n}\r\nvar location = window.location;\r\n\r\nvar nonce = { guid: Date.now() };\r\n\r\nvar rquery = ( /\\?/ );\r\n\r\n\r\n\r\n// Cross-browser xml parsing\r\njQuery.parseXML = function( data ) {\r\n\tvar xml, parserErrorElem;\r\n\tif ( !data || typeof data !== \"string\" ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Support: IE 9 - 11 only\r\n\t// IE throws on parseFromString with invalid input.\r\n\ttry {\r\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\r\n\t} catch ( e ) {}\r\n\r\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\r\n\tif ( !xml || parserErrorElem ) {\r\n\t\tjQuery.error( \"Invalid XML: \" + (\r\n\t\t\tparserErrorElem ?\r\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\r\n\t\t\t\t\treturn el.textContent;\r\n\t\t\t\t} ).join( \"\\n\" ) :\r\n\t\t\t\tdata\r\n\t\t) );\r\n\t}\r\n\treturn xml;\r\n};\r\n\r\n\r\nvar\r\n\trbracket = /\\[\\]$/,\r\n\trCRLF = /\\r?\\n/g,\r\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\r\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\r\n\r\nfunction buildParams( prefix, obj, traditional, add ) {\r\n\tvar name;\r\n\r\n\tif ( Array.isArray( obj ) ) {\r\n\r\n\t\t// Serialize array item.\r\n\t\tjQuery.each( obj, function( i, v ) {\r\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\r\n\r\n\t\t\t\t// Treat each array item as a scalar.\r\n\t\t\t\tadd( prefix, v );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\r\n\t\t\t\tbuildParams(\r\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\r\n\t\t\t\t\tv,\r\n\t\t\t\t\ttraditional,\r\n\t\t\t\t\tadd\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\r\n\r\n\t\t// Serialize object item.\r\n\t\tfor ( name in obj ) {\r\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// Serialize scalar item.\r\n\t\tadd( prefix, obj );\r\n\t}\r\n}\r\n\r\n// Serialize an array of form elements or a set of\r\n// key/values into a query string\r\njQuery.param = function( a, traditional ) {\r\n\tvar prefix,\r\n\t\ts = [],\r\n\t\tadd = function( key, valueOrFunction ) {\r\n\r\n\t\t\t// If value is a function, invoke it and use its return value\r\n\t\t\tvar value = isFunction( valueOrFunction ) ?\r\n\t\t\t\tvalueOrFunction() :\r\n\t\t\t\tvalueOrFunction;\r\n\r\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\r\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\r\n\t\t};\r\n\r\n\tif ( a == null ) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t// If an array was passed in, assume that it is an array of form elements.\r\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\r\n\r\n\t\t// Serialize the form elements\r\n\t\tjQuery.each( a, function() {\r\n\t\t\tadd( this.name, this.value );\r\n\t\t} );\r\n\r\n\t} else {\r\n\r\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\r\n\t\t// did it), otherwise encode params recursively.\r\n\t\tfor ( prefix in a ) {\r\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the resulting serialization\r\n\treturn s.join( \"&\" );\r\n};\r\n\r\njQuery.fn.extend( {\r\n\tserialize: function() {\r\n\t\treturn jQuery.param( this.serializeArray() );\r\n\t},\r\n\tserializeArray: function() {\r\n\t\treturn this.map( function() {\r\n\r\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\r\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\r\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\r\n\t\t} ).filter( function() {\r\n\t\t\tvar type = this.type;\r\n\r\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\r\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\r\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\r\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\r\n\t\t} ).map( function( _i, elem ) {\r\n\t\t\tvar val = jQuery( this ).val();\r\n\r\n\t\t\tif ( val == null ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tif ( Array.isArray( val ) ) {\r\n\t\t\t\treturn jQuery.map( val, function( val ) {\r\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\r\n\t\t} ).get();\r\n\t}\r\n} );\r\n\r\n\r\nvar\r\n\tr20 = /%20/g,\r\n\trhash = /#.*$/,\r\n\trantiCache = /([?&])_=[^&]*/,\r\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\r\n\r\n\t// #7653, #8125, #8152: local protocol detection\r\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\r\n\trnoContent = /^(?:GET|HEAD)$/,\r\n\trprotocol = /^\\/\\//,\r\n\r\n\t/* Prefilters\r\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n\t * 2) These are called:\r\n\t *    - BEFORE asking for a transport\r\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n\t * 3) key is the dataType\r\n\t * 4) the catchall symbol \"*\" can be used\r\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n\t */\r\n\tprefilters = {},\r\n\r\n\t/* Transports bindings\r\n\t * 1) key is the dataType\r\n\t * 2) the catchall symbol \"*\" can be used\r\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n\t */\r\n\ttransports = {},\r\n\r\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\r\n\tallTypes = \"*/\".concat( \"*\" ),\r\n\r\n\t// Anchor tag for parsing the document origin\r\n\toriginAnchor = document.createElement( \"a\" );\r\n\r\noriginAnchor.href = location.href;\r\n\r\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\nfunction addToPrefiltersOrTransports( structure ) {\r\n\r\n\t// dataTypeExpression is optional and defaults to \"*\"\r\n\treturn function( dataTypeExpression, func ) {\r\n\r\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\r\n\t\t\tfunc = dataTypeExpression;\r\n\t\t\tdataTypeExpression = \"*\";\r\n\t\t}\r\n\r\n\t\tvar dataType,\r\n\t\t\ti = 0,\r\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\r\n\r\n\t\tif ( isFunction( func ) ) {\r\n\r\n\t\t\t// For each dataType in the dataTypeExpression\r\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\r\n\r\n\t\t\t\t// Prepend if requested\r\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\r\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\r\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\r\n\r\n\t\t\t\t// Otherwise append\r\n\t\t\t\t} else {\r\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Base inspection function for prefilters and transports\r\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\r\n\r\n\tvar inspected = {},\r\n\t\tseekingTransport = ( structure === transports );\r\n\r\n\tfunction inspect( dataType ) {\r\n\t\tvar selected;\r\n\t\tinspected[ dataType ] = true;\r\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\r\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\r\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\r\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\r\n\r\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\r\n\t\t\t\tinspect( dataTypeOrTransport );\r\n\t\t\t\treturn false;\r\n\t\t\t} else if ( seekingTransport ) {\r\n\t\t\t\treturn !( selected = dataTypeOrTransport );\r\n\t\t\t}\r\n\t\t} );\r\n\t\treturn selected;\r\n\t}\r\n\r\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\r\n}\r\n\r\n// A special extend for ajax options\r\n// that takes \"flat\" options (not to be deep extended)\r\n// Fixes #9887\r\nfunction ajaxExtend( target, src ) {\r\n\tvar key, deep,\r\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\r\n\r\n\tfor ( key in src ) {\r\n\t\tif ( src[ key ] !== undefined ) {\r\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\r\n\t\t}\r\n\t}\r\n\tif ( deep ) {\r\n\t\tjQuery.extend( true, target, deep );\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n\r\n/* Handles responses to an ajax request:\r\n * - finds the right dataType (mediates between content-type and expected dataType)\r\n * - returns the corresponding response\r\n */\r\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\r\n\r\n\tvar ct, type, finalDataType, firstDataType,\r\n\t\tcontents = s.contents,\r\n\t\tdataTypes = s.dataTypes;\r\n\r\n\t// Remove auto dataType and get content-type in the process\r\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\r\n\t\tdataTypes.shift();\r\n\t\tif ( ct === undefined ) {\r\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if we're dealing with a known content-type\r\n\tif ( ct ) {\r\n\t\tfor ( type in contents ) {\r\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\r\n\t\t\t\tdataTypes.unshift( type );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Check to see if we have a response for the expected dataType\r\n\tif ( dataTypes[ 0 ] in responses ) {\r\n\t\tfinalDataType = dataTypes[ 0 ];\r\n\t} else {\r\n\r\n\t\t// Try convertible dataTypes\r\n\t\tfor ( type in responses ) {\r\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\r\n\t\t\t\tfinalDataType = type;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif ( !firstDataType ) {\r\n\t\t\t\tfirstDataType = type;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Or just use first one\r\n\t\tfinalDataType = finalDataType || firstDataType;\r\n\t}\r\n\r\n\t// If we found a dataType\r\n\t// We add the dataType to the list if needed\r\n\t// and return the corresponding response\r\n\tif ( finalDataType ) {\r\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\r\n\t\t\tdataTypes.unshift( finalDataType );\r\n\t\t}\r\n\t\treturn responses[ finalDataType ];\r\n\t}\r\n}\r\n\r\n/* Chain conversions given the request and the original response\r\n * Also sets the responseXXX fields on the jqXHR instance\r\n */\r\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\r\n\tvar conv2, current, conv, tmp, prev,\r\n\t\tconverters = {},\r\n\r\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\r\n\t\tdataTypes = s.dataTypes.slice();\r\n\r\n\t// Create converters map with lowercased keys\r\n\tif ( dataTypes[ 1 ] ) {\r\n\t\tfor ( conv in s.converters ) {\r\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\r\n\t\t}\r\n\t}\r\n\r\n\tcurrent = dataTypes.shift();\r\n\r\n\t// Convert to each sequential dataType\r\n\twhile ( current ) {\r\n\r\n\t\tif ( s.responseFields[ current ] ) {\r\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\r\n\t\t}\r\n\r\n\t\t// Apply the dataFilter if provided\r\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\r\n\t\t\tresponse = s.dataFilter( response, s.dataType );\r\n\t\t}\r\n\r\n\t\tprev = current;\r\n\t\tcurrent = dataTypes.shift();\r\n\r\n\t\tif ( current ) {\r\n\r\n\t\t\t// There's only work to do if current dataType is non-auto\r\n\t\t\tif ( current === \"*\" ) {\r\n\r\n\t\t\t\tcurrent = prev;\r\n\r\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\r\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\r\n\r\n\t\t\t\t// Seek a direct converter\r\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\r\n\r\n\t\t\t\t// If none found, seek a pair\r\n\t\t\t\tif ( !conv ) {\r\n\t\t\t\t\tfor ( conv2 in converters ) {\r\n\r\n\t\t\t\t\t\t// If conv2 outputs current\r\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\r\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\r\n\r\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\r\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\r\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\r\n\t\t\t\t\t\t\tif ( conv ) {\r\n\r\n\t\t\t\t\t\t\t\t// Condense equivalence converters\r\n\t\t\t\t\t\t\t\tif ( conv === true ) {\r\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\r\n\r\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\r\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\r\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\r\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply converter (if not an equivalence)\r\n\t\t\t\tif ( conv !== true ) {\r\n\r\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\r\n\t\t\t\t\tif ( conv && s.throws ) {\r\n\t\t\t\t\t\tresponse = conv( response );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tresponse = conv( response );\r\n\t\t\t\t\t\t} catch ( e ) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\r\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { state: \"success\", data: response };\r\n}\r\n\r\njQuery.extend( {\r\n\r\n\t// Counter for holding the number of active queries\r\n\tactive: 0,\r\n\r\n\t// Last-Modified header cache for next request\r\n\tlastModified: {},\r\n\tetag: {},\r\n\r\n\tajaxSettings: {\r\n\t\turl: location.href,\r\n\t\ttype: \"GET\",\r\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\r\n\t\tglobal: true,\r\n\t\tprocessData: true,\r\n\t\tasync: true,\r\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n\r\n\t\t/*\r\n\t\ttimeout: 0,\r\n\t\tdata: null,\r\n\t\tdataType: null,\r\n\t\tusername: null,\r\n\t\tpassword: null,\r\n\t\tcache: null,\r\n\t\tthrows: false,\r\n\t\ttraditional: false,\r\n\t\theaders: {},\r\n\t\t*/\r\n\r\n\t\taccepts: {\r\n\t\t\t\"*\": allTypes,\r\n\t\t\ttext: \"text/plain\",\r\n\t\t\thtml: \"text/html\",\r\n\t\t\txml: \"application/xml, text/xml\",\r\n\t\t\tjson: \"application/json, text/javascript\"\r\n\t\t},\r\n\r\n\t\tcontents: {\r\n\t\t\txml: /\\bxml\\b/,\r\n\t\t\thtml: /\\bhtml/,\r\n\t\t\tjson: /\\bjson\\b/\r\n\t\t},\r\n\r\n\t\tresponseFields: {\r\n\t\t\txml: \"responseXML\",\r\n\t\t\ttext: \"responseText\",\r\n\t\t\tjson: \"responseJSON\"\r\n\t\t},\r\n\r\n\t\t// Data converters\r\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\r\n\t\tconverters: {\r\n\r\n\t\t\t// Convert anything to text\r\n\t\t\t\"* text\": String,\r\n\r\n\t\t\t// Text to html (true = no transformation)\r\n\t\t\t\"text html\": true,\r\n\r\n\t\t\t// Evaluate text as a json expression\r\n\t\t\t\"text json\": JSON.parse,\r\n\r\n\t\t\t// Parse text as xml\r\n\t\t\t\"text xml\": jQuery.parseXML\r\n\t\t},\r\n\r\n\t\t// For options that shouldn't be deep extended:\r\n\t\t// you can add your own custom options here if\r\n\t\t// and when you create one that shouldn't be\r\n\t\t// deep extended (see ajaxExtend)\r\n\t\tflatOptions: {\r\n\t\t\turl: true,\r\n\t\t\tcontext: true\r\n\t\t}\r\n\t},\r\n\r\n\t// Creates a full fledged settings object into target\r\n\t// with both ajaxSettings and settings fields.\r\n\t// If target is omitted, writes into ajaxSettings.\r\n\tajaxSetup: function( target, settings ) {\r\n\t\treturn settings ?\r\n\r\n\t\t\t// Building a settings object\r\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\r\n\r\n\t\t\t// Extending ajaxSettings\r\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\r\n\t},\r\n\r\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\r\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\r\n\r\n\t// Main method\r\n\tajax: function( url, options ) {\r\n\r\n\t\t// If url is an object, simulate pre-1.5 signature\r\n\t\tif ( typeof url === \"object\" ) {\r\n\t\t\toptions = url;\r\n\t\t\turl = undefined;\r\n\t\t}\r\n\r\n\t\t// Force options to be an object\r\n\t\toptions = options || {};\r\n\r\n\t\tvar transport,\r\n\r\n\t\t\t// URL without anti-cache param\r\n\t\t\tcacheURL,\r\n\r\n\t\t\t// Response headers\r\n\t\t\tresponseHeadersString,\r\n\t\t\tresponseHeaders,\r\n\r\n\t\t\t// timeout handle\r\n\t\t\ttimeoutTimer,\r\n\r\n\t\t\t// Url cleanup var\r\n\t\t\turlAnchor,\r\n\r\n\t\t\t// Request state (becomes false upon send and true upon completion)\r\n\t\t\tcompleted,\r\n\r\n\t\t\t// To know if global events are to be dispatched\r\n\t\t\tfireGlobals,\r\n\r\n\t\t\t// Loop variable\r\n\t\t\ti,\r\n\r\n\t\t\t// uncached part of the url\r\n\t\t\tuncached,\r\n\r\n\t\t\t// Create the final options object\r\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\r\n\r\n\t\t\t// Callbacks context\r\n\t\t\tcallbackContext = s.context || s,\r\n\r\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\r\n\t\t\tglobalEventContext = s.context &&\r\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\r\n\t\t\t\tjQuery( callbackContext ) :\r\n\t\t\t\tjQuery.event,\r\n\r\n\t\t\t// Deferreds\r\n\t\t\tdeferred = jQuery.Deferred(),\r\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\r\n\r\n\t\t\t// Status-dependent callbacks\r\n\t\t\tstatusCode = s.statusCode || {},\r\n\r\n\t\t\t// Headers (they are sent all at once)\r\n\t\t\trequestHeaders = {},\r\n\t\t\trequestHeadersNames = {},\r\n\r\n\t\t\t// Default abort message\r\n\t\t\tstrAbort = \"canceled\",\r\n\r\n\t\t\t// Fake xhr\r\n\t\t\tjqXHR = {\r\n\t\t\t\treadyState: 0,\r\n\r\n\t\t\t\t// Builds headers hashtable if needed\r\n\t\t\t\tgetResponseHeader: function( key ) {\r\n\t\t\t\t\tvar match;\r\n\t\t\t\t\tif ( completed ) {\r\n\t\t\t\t\t\tif ( !responseHeaders ) {\r\n\t\t\t\t\t\t\tresponseHeaders = {};\r\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\r\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\r\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\r\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Raw string\r\n\t\t\t\tgetAllResponseHeaders: function() {\r\n\t\t\t\t\treturn completed ? responseHeadersString : null;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Caches the header\r\n\t\t\t\tsetRequestHeader: function( name, value ) {\r\n\t\t\t\t\tif ( completed == null ) {\r\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\r\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\r\n\t\t\t\t\t\trequestHeaders[ name ] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Overrides response content-type header\r\n\t\t\t\toverrideMimeType: function( type ) {\r\n\t\t\t\t\tif ( completed == null ) {\r\n\t\t\t\t\t\ts.mimeType = type;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Status-dependent callbacks\r\n\t\t\t\tstatusCode: function( map ) {\r\n\t\t\t\t\tvar code;\r\n\t\t\t\t\tif ( map ) {\r\n\t\t\t\t\t\tif ( completed ) {\r\n\r\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\r\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\r\n\t\t\t\t\t\t\tfor ( code in map ) {\r\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Cancel the request\r\n\t\t\t\tabort: function( statusText ) {\r\n\t\t\t\t\tvar finalText = statusText || strAbort;\r\n\t\t\t\t\tif ( transport ) {\r\n\t\t\t\t\t\ttransport.abort( finalText );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdone( 0, finalText );\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t// Attach deferreds\r\n\t\tdeferred.promise( jqXHR );\r\n\r\n\t\t// Add protocol if not provided (prefilters might expect it)\r\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\r\n\t\t// We also use the url parameter if available\r\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\r\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\r\n\r\n\t\t// Alias method option to type as per ticket #12004\r\n\t\ts.type = options.method || options.type || s.method || s.type;\r\n\r\n\t\t// Extract dataTypes list\r\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\r\n\r\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\r\n\t\tif ( s.crossDomain == null ) {\r\n\t\t\turlAnchor = document.createElement( \"a\" );\r\n\r\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\r\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\r\n\t\t\t// e.g. http://example.com:80x/\r\n\t\t\ttry {\r\n\t\t\t\turlAnchor.href = s.url;\r\n\r\n\t\t\t\t// Support: IE <=8 - 11 only\r\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\r\n\t\t\t\turlAnchor.href = urlAnchor.href;\r\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\r\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\r\n\t\t\t\t// it can be rejected by the transport if it is invalid\r\n\t\t\t\ts.crossDomain = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert data if not already a string\r\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\r\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\r\n\t\t}\r\n\r\n\t\t// Apply prefilters\r\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\r\n\r\n\t\t// If request was aborted inside a prefilter, stop there\r\n\t\tif ( completed ) {\r\n\t\t\treturn jqXHR;\r\n\t\t}\r\n\r\n\t\t// We can fire global events as of now if asked to\r\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\r\n\t\tfireGlobals = jQuery.event && s.global;\r\n\r\n\t\t// Watch for a new set of requests\r\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\r\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\r\n\t\t}\r\n\r\n\t\t// Uppercase the type\r\n\t\ts.type = s.type.toUpperCase();\r\n\r\n\t\t// Determine if request has content\r\n\t\ts.hasContent = !rnoContent.test( s.type );\r\n\r\n\t\t// Save the URL in case we're toying with the If-Modified-Since\r\n\t\t// and/or If-None-Match header later on\r\n\t\t// Remove hash to simplify url manipulation\r\n\t\tcacheURL = s.url.replace( rhash, \"\" );\r\n\r\n\t\t// More options handling for requests with no content\r\n\t\tif ( !s.hasContent ) {\r\n\r\n\t\t\t// Remember the hash so we can put it back\r\n\t\t\tuncached = s.url.slice( cacheURL.length );\r\n\r\n\t\t\t// If data is available and should be processed, append data to url\r\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\r\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\r\n\r\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\r\n\t\t\t\tdelete s.data;\r\n\t\t\t}\r\n\r\n\t\t\t// Add or update anti-cache param if needed\r\n\t\t\tif ( s.cache === false ) {\r\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\r\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\r\n\t\t\t\t\tuncached;\r\n\t\t\t}\r\n\r\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\r\n\t\t\ts.url = cacheURL + uncached;\r\n\r\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\r\n\t\t} else if ( s.data && s.processData &&\r\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\r\n\t\t\ts.data = s.data.replace( r20, \"+\" );\r\n\t\t}\r\n\r\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n\t\tif ( s.ifModified ) {\r\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\r\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\r\n\t\t\t}\r\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\r\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set the correct header, if data is being sent\r\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\r\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\r\n\t\t}\r\n\r\n\t\t// Set the Accepts header for the server, depending on the dataType\r\n\t\tjqXHR.setRequestHeader(\r\n\t\t\t\"Accept\",\r\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\r\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\r\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\r\n\t\t\t\ts.accepts[ \"*\" ]\r\n\t\t);\r\n\r\n\t\t// Check for headers option\r\n\t\tfor ( i in s.headers ) {\r\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\r\n\t\t}\r\n\r\n\t\t// Allow custom headers/mimetypes and early abort\r\n\t\tif ( s.beforeSend &&\r\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\r\n\r\n\t\t\t// Abort if not done already and return\r\n\t\t\treturn jqXHR.abort();\r\n\t\t}\r\n\r\n\t\t// Aborting is no longer a cancellation\r\n\t\tstrAbort = \"abort\";\r\n\r\n\t\t// Install callbacks on deferreds\r\n\t\tcompleteDeferred.add( s.complete );\r\n\t\tjqXHR.done( s.success );\r\n\t\tjqXHR.fail( s.error );\r\n\r\n\t\t// Get transport\r\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\r\n\r\n\t\t// If no transport, we auto-abort\r\n\t\tif ( !transport ) {\r\n\t\t\tdone( -1, \"No Transport\" );\r\n\t\t} else {\r\n\t\t\tjqXHR.readyState = 1;\r\n\r\n\t\t\t// Send global event\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\r\n\t\t\t}\r\n\r\n\t\t\t// If request was aborted inside ajaxSend, stop there\r\n\t\t\tif ( completed ) {\r\n\t\t\t\treturn jqXHR;\r\n\t\t\t}\r\n\r\n\t\t\t// Timeout\r\n\t\t\tif ( s.async && s.timeout > 0 ) {\r\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\r\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\r\n\t\t\t\t}, s.timeout );\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcompleted = false;\r\n\t\t\t\ttransport.send( requestHeaders, done );\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t// Rethrow post-completion exceptions\r\n\t\t\t\tif ( completed ) {\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Propagate others as results\r\n\t\t\t\tdone( -1, e );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Callback for when everything is done\r\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\r\n\t\t\tvar isSuccess, success, error, response, modified,\r\n\t\t\t\tstatusText = nativeStatusText;\r\n\r\n\t\t\t// Ignore repeat invocations\r\n\t\t\tif ( completed ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tcompleted = true;\r\n\r\n\t\t\t// Clear timeout if it exists\r\n\t\t\tif ( timeoutTimer ) {\r\n\t\t\t\twindow.clearTimeout( timeoutTimer );\r\n\t\t\t}\r\n\r\n\t\t\t// Dereference transport for early garbage collection\r\n\t\t\t// (no matter how long the jqXHR object will be used)\r\n\t\t\ttransport = undefined;\r\n\r\n\t\t\t// Cache response headers\r\n\t\t\tresponseHeadersString = headers || \"\";\r\n\r\n\t\t\t// Set readyState\r\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\r\n\r\n\t\t\t// Determine if successful\r\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\r\n\r\n\t\t\t// Get response data\r\n\t\t\tif ( responses ) {\r\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\r\n\t\t\t}\r\n\r\n\t\t\t// Use a noop converter for missing script but not if jsonp\r\n\t\t\tif ( !isSuccess &&\r\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\r\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\r\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\r\n\t\t\t}\r\n\r\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\r\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\r\n\r\n\t\t\t// If successful, handle type chaining\r\n\t\t\tif ( isSuccess ) {\r\n\r\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n\t\t\t\tif ( s.ifModified ) {\r\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\r\n\t\t\t\t\tif ( modified ) {\r\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\r\n\t\t\t\t\tif ( modified ) {\r\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if no content\r\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\r\n\t\t\t\t\tstatusText = \"nocontent\";\r\n\r\n\t\t\t\t// if not modified\r\n\t\t\t\t} else if ( status === 304 ) {\r\n\t\t\t\t\tstatusText = \"notmodified\";\r\n\r\n\t\t\t\t// If we have data, let's convert it\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstatusText = response.state;\r\n\t\t\t\t\tsuccess = response.data;\r\n\t\t\t\t\terror = response.error;\r\n\t\t\t\t\tisSuccess = !error;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\r\n\t\t\t\terror = statusText;\r\n\t\t\t\tif ( status || !statusText ) {\r\n\t\t\t\t\tstatusText = \"error\";\r\n\t\t\t\t\tif ( status < 0 ) {\r\n\t\t\t\t\t\tstatus = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set data for the fake xhr object\r\n\t\t\tjqXHR.status = status;\r\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\r\n\r\n\t\t\t// Success/Error\r\n\t\t\tif ( isSuccess ) {\r\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Status-dependent callbacks\r\n\t\t\tjqXHR.statusCode( statusCode );\r\n\t\t\tstatusCode = undefined;\r\n\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\r\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Complete\r\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\r\n\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\r\n\r\n\t\t\t\t// Handle the global AJAX counter\r\n\t\t\t\tif ( !( --jQuery.active ) ) {\r\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn jqXHR;\r\n\t},\r\n\r\n\tgetJSON: function( url, data, callback ) {\r\n\t\treturn jQuery.get( url, data, callback, \"json\" );\r\n\t},\r\n\r\n\tgetScript: function( url, callback ) {\r\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\r\n\t}\r\n} );\r\n\r\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\r\n\tjQuery[ method ] = function( url, data, callback, type ) {\r\n\r\n\t\t// Shift arguments if data argument was omitted\r\n\t\tif ( isFunction( data ) ) {\r\n\t\t\ttype = type || callback;\r\n\t\t\tcallback = data;\r\n\t\t\tdata = undefined;\r\n\t\t}\r\n\r\n\t\t// The url can be an options object (which then must have .url)\r\n\t\treturn jQuery.ajax( jQuery.extend( {\r\n\t\t\turl: url,\r\n\t\t\ttype: method,\r\n\t\t\tdataType: type,\r\n\t\t\tdata: data,\r\n\t\t\tsuccess: callback\r\n\t\t}, jQuery.isPlainObject( url ) && url ) );\r\n\t};\r\n} );\r\n\r\njQuery.ajaxPrefilter( function( s ) {\r\n\tvar i;\r\n\tfor ( i in s.headers ) {\r\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\r\n\t\t\ts.contentType = s.headers[ i ] || \"\";\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n\r\njQuery._evalUrl = function( url, options, doc ) {\r\n\treturn jQuery.ajax( {\r\n\t\turl: url,\r\n\r\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\r\n\t\ttype: \"GET\",\r\n\t\tdataType: \"script\",\r\n\t\tcache: true,\r\n\t\tasync: false,\r\n\t\tglobal: false,\r\n\r\n\t\t// Only evaluate the response if it is successful (gh-4126)\r\n\t\t// dataFilter is not invoked for failure responses, so using it instead\r\n\t\t// of the default converter is kludgy but it works.\r\n\t\tconverters: {\r\n\t\t\t\"text script\": function() {}\r\n\t\t},\r\n\t\tdataFilter: function( response ) {\r\n\t\t\tjQuery.globalEval( response, options, doc );\r\n\t\t}\r\n\t} );\r\n};\r\n\r\n\r\njQuery.fn.extend( {\r\n\twrapAll: function( html ) {\r\n\t\tvar wrap;\r\n\r\n\t\tif ( this[ 0 ] ) {\r\n\t\t\tif ( isFunction( html ) ) {\r\n\t\t\t\thtml = html.call( this[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\t// The elements to wrap the target around\r\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\r\n\r\n\t\t\tif ( this[ 0 ].parentNode ) {\r\n\t\t\t\twrap.insertBefore( this[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\twrap.map( function() {\r\n\t\t\t\tvar elem = this;\r\n\r\n\t\t\t\twhile ( elem.firstElementChild ) {\r\n\t\t\t\t\telem = elem.firstElementChild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn elem;\r\n\t\t\t} ).append( this );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\twrapInner: function( html ) {\r\n\t\tif ( isFunction( html ) ) {\r\n\t\t\treturn this.each( function( i ) {\r\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tvar self = jQuery( this ),\r\n\t\t\t\tcontents = self.contents();\r\n\r\n\t\t\tif ( contents.length ) {\r\n\t\t\t\tcontents.wrapAll( html );\r\n\r\n\t\t\t} else {\r\n\t\t\t\tself.append( html );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\twrap: function( html ) {\r\n\t\tvar htmlIsFunction = isFunction( html );\r\n\r\n\t\treturn this.each( function( i ) {\r\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\r\n\t\t} );\r\n\t},\r\n\r\n\tunwrap: function( selector ) {\r\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\r\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\r\n\t\t} );\r\n\t\treturn this;\r\n\t}\r\n} );\r\n\r\n\r\njQuery.expr.pseudos.hidden = function( elem ) {\r\n\treturn !jQuery.expr.pseudos.visible( elem );\r\n};\r\njQuery.expr.pseudos.visible = function( elem ) {\r\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\r\n};\r\n\r\n\r\n\r\n\r\njQuery.ajaxSettings.xhr = function() {\r\n\ttry {\r\n\t\treturn new window.XMLHttpRequest();\r\n\t} catch ( e ) {}\r\n};\r\n\r\nvar xhrSuccessStatus = {\r\n\r\n\t\t// File protocol always yields status code 0, assume 200\r\n\t\t0: 200,\r\n\r\n\t\t// Support: IE <=9 only\r\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\r\n\t\t1223: 204\r\n\t},\r\n\txhrSupported = jQuery.ajaxSettings.xhr();\r\n\r\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\r\nsupport.ajax = xhrSupported = !!xhrSupported;\r\n\r\njQuery.ajaxTransport( function( options ) {\r\n\tvar callback, errorCallback;\r\n\r\n\t// Cross domain only allowed if supported through XMLHttpRequest\r\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\r\n\t\treturn {\r\n\t\t\tsend: function( headers, complete ) {\r\n\t\t\t\tvar i,\r\n\t\t\t\t\txhr = options.xhr();\r\n\r\n\t\t\t\txhr.open(\r\n\t\t\t\t\toptions.type,\r\n\t\t\t\t\toptions.url,\r\n\t\t\t\t\toptions.async,\r\n\t\t\t\t\toptions.username,\r\n\t\t\t\t\toptions.password\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Apply custom fields if provided\r\n\t\t\t\tif ( options.xhrFields ) {\r\n\t\t\t\t\tfor ( i in options.xhrFields ) {\r\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Override mime type if needed\r\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\r\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// X-Requested-With header\r\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\r\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\r\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\r\n\t\t\t\t// For same-domain requests, won't change header if already provided.\r\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\r\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set headers\r\n\t\t\t\tfor ( i in headers ) {\r\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Callback\r\n\t\t\t\tcallback = function( type ) {\r\n\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\r\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\r\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\r\n\r\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\r\n\t\t\t\t\t\t\t\txhr.abort();\r\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\r\n\r\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\r\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\r\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\r\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\r\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tcomplete(\r\n\r\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\r\n\t\t\t\t\t\t\t\t\t\txhr.status,\r\n\t\t\t\t\t\t\t\t\t\txhr.statusText\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcomplete(\r\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\r\n\t\t\t\t\t\t\t\t\txhr.statusText,\r\n\r\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\r\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\r\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\r\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\r\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\r\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\r\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\r\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Listen to events\r\n\t\t\t\txhr.onload = callback();\r\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\r\n\r\n\t\t\t\t// Support: IE 9 only\r\n\t\t\t\t// Use onreadystatechange to replace onabort\r\n\t\t\t\t// to handle uncaught aborts\r\n\t\t\t\tif ( xhr.onabort !== undefined ) {\r\n\t\t\t\t\txhr.onabort = errorCallback;\r\n\t\t\t\t} else {\r\n\t\t\t\t\txhr.onreadystatechange = function() {\r\n\r\n\t\t\t\t\t\t// Check readyState before timeout as it changes\r\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\r\n\r\n\t\t\t\t\t\t\t// Allow onerror to be called first,\r\n\t\t\t\t\t\t\t// but that will not handle a native abort\r\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\r\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\r\n\t\t\t\t\t\t\twindow.setTimeout( function() {\r\n\t\t\t\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\t\t\t\terrorCallback();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create the abort callback\r\n\t\t\t\tcallback = callback( \"abort\" );\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\t// Do send the request (this may raise an exception)\r\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\r\n\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( callback ) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\r\njQuery.ajaxPrefilter( function( s ) {\r\n\tif ( s.crossDomain ) {\r\n\t\ts.contents.script = false;\r\n\t}\r\n} );\r\n\r\n// Install script dataType\r\njQuery.ajaxSetup( {\r\n\taccepts: {\r\n\t\tscript: \"text/javascript, application/javascript, \" +\r\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\r\n\t},\r\n\tcontents: {\r\n\t\tscript: /\\b(?:java|ecma)script\\b/\r\n\t},\r\n\tconverters: {\r\n\t\t\"text script\": function( text ) {\r\n\t\t\tjQuery.globalEval( text );\r\n\t\t\treturn text;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n// Handle cache's special case and crossDomain\r\njQuery.ajaxPrefilter( \"script\", function( s ) {\r\n\tif ( s.cache === undefined ) {\r\n\t\ts.cache = false;\r\n\t}\r\n\tif ( s.crossDomain ) {\r\n\t\ts.type = \"GET\";\r\n\t}\r\n} );\r\n\r\n// Bind script tag hack transport\r\njQuery.ajaxTransport( \"script\", function( s ) {\r\n\r\n\t// This transport only deals with cross domain or forced-by-attrs requests\r\n\tif ( s.crossDomain || s.scriptAttrs ) {\r\n\t\tvar script, callback;\r\n\t\treturn {\r\n\t\t\tsend: function( _, complete ) {\r\n\t\t\t\tscript = jQuery( \"<script>\" )\r\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\r\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\r\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\r\n\t\t\t\t\t\tscript.remove();\r\n\t\t\t\t\t\tcallback = null;\r\n\t\t\t\t\t\tif ( evt ) {\r\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\r\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\r\n\t\t\t},\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( callback ) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\nvar oldCallbacks = [],\r\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\r\n\r\n// Default jsonp settings\r\njQuery.ajaxSetup( {\r\n\tjsonp: \"callback\",\r\n\tjsonpCallback: function() {\r\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\r\n\t\tthis[ callback ] = true;\r\n\t\treturn callback;\r\n\t}\r\n} );\r\n\r\n// Detect, normalize options and install callbacks for jsonp requests\r\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\r\n\r\n\tvar callbackName, overwritten, responseContainer,\r\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\r\n\t\t\t\"url\" :\r\n\t\t\ttypeof s.data === \"string\" &&\r\n\t\t\t\t( s.contentType || \"\" )\r\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\r\n\t\t\t\trjsonp.test( s.data ) && \"data\"\r\n\t\t);\r\n\r\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\r\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\r\n\r\n\t\t// Get callback name, remembering preexisting value associated with it\r\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\r\n\t\t\ts.jsonpCallback() :\r\n\t\t\ts.jsonpCallback;\r\n\r\n\t\t// Insert callback into url or form data\r\n\t\tif ( jsonProp ) {\r\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\r\n\t\t} else if ( s.jsonp !== false ) {\r\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\r\n\t\t}\r\n\r\n\t\t// Use data converter to retrieve json after script execution\r\n\t\ts.converters[ \"script json\" ] = function() {\r\n\t\t\tif ( !responseContainer ) {\r\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\r\n\t\t\t}\r\n\t\t\treturn responseContainer[ 0 ];\r\n\t\t};\r\n\r\n\t\t// Force json dataType\r\n\t\ts.dataTypes[ 0 ] = \"json\";\r\n\r\n\t\t// Install callback\r\n\t\toverwritten = window[ callbackName ];\r\n\t\twindow[ callbackName ] = function() {\r\n\t\t\tresponseContainer = arguments;\r\n\t\t};\r\n\r\n\t\t// Clean-up function (fires after converters)\r\n\t\tjqXHR.always( function() {\r\n\r\n\t\t\t// If previous value didn't exist - remove it\r\n\t\t\tif ( overwritten === undefined ) {\r\n\t\t\t\tjQuery( window ).removeProp( callbackName );\r\n\r\n\t\t\t// Otherwise restore preexisting value\r\n\t\t\t} else {\r\n\t\t\t\twindow[ callbackName ] = overwritten;\r\n\t\t\t}\r\n\r\n\t\t\t// Save back as free\r\n\t\t\tif ( s[ callbackName ] ) {\r\n\r\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\r\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\r\n\r\n\t\t\t\t// Save the callback name for future use\r\n\t\t\t\toldCallbacks.push( callbackName );\r\n\t\t\t}\r\n\r\n\t\t\t// Call if it was a function and we have a response\r\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\r\n\t\t\t\toverwritten( responseContainer[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\tresponseContainer = overwritten = undefined;\r\n\t\t} );\r\n\r\n\t\t// Delegate to script\r\n\t\treturn \"script\";\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\n// Support: Safari 8 only\r\n// In Safari 8 documents created via document.implementation.createHTMLDocument\r\n// collapse sibling forms: the second one becomes a child of the first one.\r\n// Because of that, this security measure has to be disabled in Safari 8.\r\n// https://bugs.webkit.org/show_bug.cgi?id=137337\r\nsupport.createHTMLDocument = ( function() {\r\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\r\n\tbody.innerHTML = \"<form></form><form></form>\";\r\n\treturn body.childNodes.length === 2;\r\n} )();\r\n\r\n\r\n// Argument \"data\" should be string of html\r\n// context (optional): If specified, the fragment will be created in this context,\r\n// defaults to document\r\n// keepScripts (optional): If true, will include scripts passed in the html string\r\njQuery.parseHTML = function( data, context, keepScripts ) {\r\n\tif ( typeof data !== \"string\" ) {\r\n\t\treturn [];\r\n\t}\r\n\tif ( typeof context === \"boolean\" ) {\r\n\t\tkeepScripts = context;\r\n\t\tcontext = false;\r\n\t}\r\n\r\n\tvar base, parsed, scripts;\r\n\r\n\tif ( !context ) {\r\n\r\n\t\t// Stop scripts or inline event handlers from being executed immediately\r\n\t\t// by using document.implementation\r\n\t\tif ( support.createHTMLDocument ) {\r\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\r\n\r\n\t\t\t// Set the base href for the created document\r\n\t\t\t// so any parsed elements with URLs\r\n\t\t\t// are based on the document's URL (gh-2965)\r\n\t\t\tbase = context.createElement( \"base\" );\r\n\t\t\tbase.href = document.location.href;\r\n\t\t\tcontext.head.appendChild( base );\r\n\t\t} else {\r\n\t\t\tcontext = document;\r\n\t\t}\r\n\t}\r\n\r\n\tparsed = rsingleTag.exec( data );\r\n\tscripts = !keepScripts && [];\r\n\r\n\t// Single tag\r\n\tif ( parsed ) {\r\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\r\n\t}\r\n\r\n\tparsed = buildFragment( [ data ], context, scripts );\r\n\r\n\tif ( scripts && scripts.length ) {\r\n\t\tjQuery( scripts ).remove();\r\n\t}\r\n\r\n\treturn jQuery.merge( [], parsed.childNodes );\r\n};\r\n\r\n\r\n/**\r\n * Load a url into a page\r\n */\r\njQuery.fn.load = function( url, params, callback ) {\r\n\tvar selector, type, response,\r\n\t\tself = this,\r\n\t\toff = url.indexOf( \" \" );\r\n\r\n\tif ( off > -1 ) {\r\n\t\tselector = stripAndCollapse( url.slice( off ) );\r\n\t\turl = url.slice( 0, off );\r\n\t}\r\n\r\n\t// If it's a function\r\n\tif ( isFunction( params ) ) {\r\n\r\n\t\t// We assume that it's the callback\r\n\t\tcallback = params;\r\n\t\tparams = undefined;\r\n\r\n\t// Otherwise, build a param string\r\n\t} else if ( params && typeof params === \"object\" ) {\r\n\t\ttype = \"POST\";\r\n\t}\r\n\r\n\t// If we have elements to modify, make the request\r\n\tif ( self.length > 0 ) {\r\n\t\tjQuery.ajax( {\r\n\t\t\turl: url,\r\n\r\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\r\n\t\t\t// Make value of this field explicit since\r\n\t\t\t// user can override it through ajaxSetup method\r\n\t\t\ttype: type || \"GET\",\r\n\t\t\tdataType: \"html\",\r\n\t\t\tdata: params\r\n\t\t} ).done( function( responseText ) {\r\n\r\n\t\t\t// Save response for use in complete callback\r\n\t\t\tresponse = arguments;\r\n\r\n\t\t\tself.html( selector ?\r\n\r\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\r\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\r\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\r\n\r\n\t\t\t\t// Otherwise use the full result\r\n\t\t\t\tresponseText );\r\n\r\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\r\n\t\t// but they are ignored because response was set above.\r\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\r\n\t\t} ).always( callback && function( jqXHR, status ) {\r\n\t\t\tself.each( function() {\r\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n\r\n\r\n\r\njQuery.expr.pseudos.animated = function( elem ) {\r\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\r\n\t\treturn elem === fn.elem;\r\n\t} ).length;\r\n};\r\n\r\n\r\n\r\n\r\njQuery.offset = {\r\n\tsetOffset: function( elem, options, i ) {\r\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\r\n\t\t\tposition = jQuery.css( elem, \"position\" ),\r\n\t\t\tcurElem = jQuery( elem ),\r\n\t\t\tprops = {};\r\n\r\n\t\t// Set position first, in-case top/left are set even on static elem\r\n\t\tif ( position === \"static\" ) {\r\n\t\t\telem.style.position = \"relative\";\r\n\t\t}\r\n\r\n\t\tcurOffset = curElem.offset();\r\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\r\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\r\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\r\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\r\n\r\n\t\t// Need to be able to calculate position if either\r\n\t\t// top or left is auto and position is either absolute or fixed\r\n\t\tif ( calculatePosition ) {\r\n\t\t\tcurPosition = curElem.position();\r\n\t\t\tcurTop = curPosition.top;\r\n\t\t\tcurLeft = curPosition.left;\r\n\r\n\t\t} else {\r\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\r\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\r\n\t\t}\r\n\r\n\t\tif ( isFunction( options ) ) {\r\n\r\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\r\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\r\n\t\t}\r\n\r\n\t\tif ( options.top != null ) {\r\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\r\n\t\t}\r\n\t\tif ( options.left != null ) {\r\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\r\n\t\t}\r\n\r\n\t\tif ( \"using\" in options ) {\r\n\t\t\toptions.using.call( elem, props );\r\n\r\n\t\t} else {\r\n\t\t\tcurElem.css( props );\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.fn.extend( {\r\n\r\n\t// offset() relates an element's border box to the document origin\r\n\toffset: function( options ) {\r\n\r\n\t\t// Preserve chaining for setter\r\n\t\tif ( arguments.length ) {\r\n\t\t\treturn options === undefined ?\r\n\t\t\t\tthis :\r\n\t\t\t\tthis.each( function( i ) {\r\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\r\n\t\t\t\t} );\r\n\t\t}\r\n\r\n\t\tvar rect, win,\r\n\t\t\telem = this[ 0 ];\r\n\r\n\t\tif ( !elem ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\r\n\t\t// Support: IE <=11 only\r\n\t\t// Running getBoundingClientRect on a\r\n\t\t// disconnected node in IE throws an error\r\n\t\tif ( !elem.getClientRects().length ) {\r\n\t\t\treturn { top: 0, left: 0 };\r\n\t\t}\r\n\r\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\r\n\t\trect = elem.getBoundingClientRect();\r\n\t\twin = elem.ownerDocument.defaultView;\r\n\t\treturn {\r\n\t\t\ttop: rect.top + win.pageYOffset,\r\n\t\t\tleft: rect.left + win.pageXOffset\r\n\t\t};\r\n\t},\r\n\r\n\t// position() relates an element's margin box to its offset parent's padding box\r\n\t// This corresponds to the behavior of CSS absolute positioning\r\n\tposition: function() {\r\n\t\tif ( !this[ 0 ] ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar offsetParent, offset, doc,\r\n\t\t\telem = this[ 0 ],\r\n\t\t\tparentOffset = { top: 0, left: 0 };\r\n\r\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\r\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\r\n\r\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\r\n\t\t\toffset = elem.getBoundingClientRect();\r\n\r\n\t\t} else {\r\n\t\t\toffset = this.offset();\r\n\r\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\r\n\t\t\t// when a statically positioned element is identified\r\n\t\t\tdoc = elem.ownerDocument;\r\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\r\n\t\t\twhile ( offsetParent &&\r\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\r\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\r\n\r\n\t\t\t\toffsetParent = offsetParent.parentNode;\r\n\t\t\t}\r\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\r\n\r\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\r\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\r\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\r\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Subtract parent offsets and element margins\r\n\t\treturn {\r\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\r\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\r\n\t\t};\r\n\t},\r\n\r\n\t// This method will return documentElement in the following cases:\r\n\t// 1) For the element inside the iframe without offsetParent, this method will return\r\n\t//    documentElement of the parent window\r\n\t// 2) For the hidden or detached element\r\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\r\n\t//\r\n\t// but those exceptions were never presented as a real life use-cases\r\n\t// and might be considered as more preferable results.\r\n\t//\r\n\t// This logic, however, is not guaranteed and can change at any point in the future\r\n\toffsetParent: function() {\r\n\t\treturn this.map( function() {\r\n\t\t\tvar offsetParent = this.offsetParent;\r\n\r\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\r\n\t\t\t\toffsetParent = offsetParent.offsetParent;\r\n\t\t\t}\r\n\r\n\t\t\treturn offsetParent || documentElement;\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n// Create scrollLeft and scrollTop methods\r\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\r\n\tvar top = \"pageYOffset\" === prop;\r\n\r\n\tjQuery.fn[ method ] = function( val ) {\r\n\t\treturn access( this, function( elem, method, val ) {\r\n\r\n\t\t\t// Coalesce documents and windows\r\n\t\t\tvar win;\r\n\t\t\tif ( isWindow( elem ) ) {\r\n\t\t\t\twin = elem;\r\n\t\t\t} else if ( elem.nodeType === 9 ) {\r\n\t\t\t\twin = elem.defaultView;\r\n\t\t\t}\r\n\r\n\t\t\tif ( val === undefined ) {\r\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\r\n\t\t\t}\r\n\r\n\t\t\tif ( win ) {\r\n\t\t\t\twin.scrollTo(\r\n\t\t\t\t\t!top ? val : win.pageXOffset,\r\n\t\t\t\t\ttop ? val : win.pageYOffset\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\t\t\t\telem[ method ] = val;\r\n\t\t\t}\r\n\t\t}, method, val, arguments.length );\r\n\t};\r\n} );\r\n\r\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\r\n// Add the top/left cssHooks using jQuery.fn.position\r\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\r\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\r\n// getComputedStyle returns percent when specified for top/left/bottom/right;\r\n// rather than make the css module depend on the offset module, just check for it here\r\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\r\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\r\n\t\tfunction( elem, computed ) {\r\n\t\t\tif ( computed ) {\r\n\t\t\t\tcomputed = curCSS( elem, prop );\r\n\r\n\t\t\t\t// If curCSS returns percentage, fallback to offset\r\n\t\t\t\treturn rnumnonpx.test( computed ) ?\r\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\r\n\t\t\t\t\tcomputed;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n} );\r\n\r\n\r\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\r\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\r\n\tjQuery.each( {\r\n\t\tpadding: \"inner\" + name,\r\n\t\tcontent: type,\r\n\t\t\"\": \"outer\" + name\r\n\t}, function( defaultExtra, funcName ) {\r\n\r\n\t\t// Margin is only for outerHeight, outerWidth\r\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\r\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\r\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\r\n\r\n\t\t\treturn access( this, function( elem, type, value ) {\r\n\t\t\t\tvar doc;\r\n\r\n\t\t\t\tif ( isWindow( elem ) ) {\r\n\r\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\r\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\r\n\t\t\t\t\t\telem[ \"inner\" + name ] :\r\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Get document width or height\r\n\t\t\t\tif ( elem.nodeType === 9 ) {\r\n\t\t\t\t\tdoc = elem.documentElement;\r\n\r\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\r\n\t\t\t\t\t// whichever is greatest\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\r\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\r\n\t\t\t\t\t\tdoc[ \"client\" + name ]\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn value === undefined ?\r\n\r\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\r\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\r\n\r\n\t\t\t\t\t// Set width or height on the element\r\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\r\n\t\t\t}, type, chainable ? margin : undefined, chainable );\r\n\t\t};\r\n\t} );\r\n} );\r\n\r\n\r\njQuery.each( [\r\n\t\"ajaxStart\",\r\n\t\"ajaxStop\",\r\n\t\"ajaxComplete\",\r\n\t\"ajaxError\",\r\n\t\"ajaxSuccess\",\r\n\t\"ajaxSend\"\r\n], function( _i, type ) {\r\n\tjQuery.fn[ type ] = function( fn ) {\r\n\t\treturn this.on( type, fn );\r\n\t};\r\n} );\r\n\r\n\r\n\r\n\r\njQuery.fn.extend( {\r\n\r\n\tbind: function( types, data, fn ) {\r\n\t\treturn this.on( types, null, data, fn );\r\n\t},\r\n\tunbind: function( types, fn ) {\r\n\t\treturn this.off( types, null, fn );\r\n\t},\r\n\r\n\tdelegate: function( selector, types, data, fn ) {\r\n\t\treturn this.on( types, selector, data, fn );\r\n\t},\r\n\tundelegate: function( selector, types, fn ) {\r\n\r\n\t\t// ( namespace ) or ( selector, types [, fn] )\r\n\t\treturn arguments.length === 1 ?\r\n\t\t\tthis.off( selector, \"**\" ) :\r\n\t\t\tthis.off( types, selector || \"**\", fn );\r\n\t},\r\n\r\n\thover: function( fnOver, fnOut ) {\r\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\r\n\t}\r\n} );\r\n\r\njQuery.each(\r\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\r\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\r\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\r\n\tfunction( _i, name ) {\r\n\r\n\t\t// Handle event binding\r\n\t\tjQuery.fn[ name ] = function( data, fn ) {\r\n\t\t\treturn arguments.length > 0 ?\r\n\t\t\t\tthis.on( name, null, data, fn ) :\r\n\t\t\t\tthis.trigger( name );\r\n\t\t};\r\n\t}\r\n);\r\n\r\n\r\n\r\n\r\n// Support: Android <=4.0 only\r\n// Make sure we trim BOM and NBSP\r\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\r\n\r\n// Bind a function to a context, optionally partially applying any\r\n// arguments.\r\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\r\n// However, it is not slated for removal any time soon\r\njQuery.proxy = function( fn, context ) {\r\n\tvar tmp, args, proxy;\r\n\r\n\tif ( typeof context === \"string\" ) {\r\n\t\ttmp = fn[ context ];\r\n\t\tcontext = fn;\r\n\t\tfn = tmp;\r\n\t}\r\n\r\n\t// Quick check to determine if target is callable, in the spec\r\n\t// this throws a TypeError, but we will just return undefined.\r\n\tif ( !isFunction( fn ) ) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t// Simulated bind\r\n\targs = slice.call( arguments, 2 );\r\n\tproxy = function() {\r\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\r\n\t};\r\n\r\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\r\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\r\n\r\n\treturn proxy;\r\n};\r\n\r\njQuery.holdReady = function( hold ) {\r\n\tif ( hold ) {\r\n\t\tjQuery.readyWait++;\r\n\t} else {\r\n\t\tjQuery.ready( true );\r\n\t}\r\n};\r\njQuery.isArray = Array.isArray;\r\njQuery.parseJSON = JSON.parse;\r\njQuery.nodeName = nodeName;\r\njQuery.isFunction = isFunction;\r\njQuery.isWindow = isWindow;\r\njQuery.camelCase = camelCase;\r\njQuery.type = toType;\r\n\r\njQuery.now = Date.now;\r\n\r\njQuery.isNumeric = function( obj ) {\r\n\r\n\t// As of jQuery 3.0, isNumeric is limited to\r\n\t// strings and numbers (primitives or objects)\r\n\t// that can be coerced to finite numbers (gh-2662)\r\n\tvar type = jQuery.type( obj );\r\n\treturn ( type === \"number\" || type === \"string\" ) &&\r\n\r\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\r\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n\t\t// subtraction forces infinities to NaN\r\n\t\t!isNaN( obj - parseFloat( obj ) );\r\n};\r\n\r\njQuery.trim = function( text ) {\r\n\treturn text == null ?\r\n\t\t\"\" :\r\n\t\t( text + \"\" ).replace( rtrim, \"\" );\r\n};\r\n\r\n\r\n\r\n// Register as a named AMD module, since jQuery can be concatenated with other\r\n// files that may use define, but not via a proper concatenation script that\r\n// understands anonymous AMD modules. A named AMD is safest and most robust\r\n// way to register. Lowercase jquery is used because AMD module names are\r\n// derived from file names, and jQuery is normally delivered in a lowercase\r\n// file name. Do this after creating the global so that if an AMD module wants\r\n// to call noConflict to hide this version of jQuery, it will work.\r\n\r\n// Note that for maximum portability, libraries that are not jQuery should\r\n// declare themselves as anonymous modules, and avoid setting a global if an\r\n// AMD loader is present. jQuery is a special case. For more information, see\r\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\r\n\r\nif ( true ) {\r\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\r\n\t\treturn jQuery;\r\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n}\r\n\r\n\r\n\r\n\r\nvar\r\n\r\n\t// Map over jQuery in case of overwrite\r\n\t_jQuery = window.jQuery,\r\n\r\n\t// Map over the $ in case of overwrite\r\n\t_$ = window.$;\r\n\r\njQuery.noConflict = function( deep ) {\r\n\tif ( window.$ === jQuery ) {\r\n\t\twindow.$ = _$;\r\n\t}\r\n\r\n\tif ( deep && window.jQuery === jQuery ) {\r\n\t\twindow.jQuery = _jQuery;\r\n\t}\r\n\r\n\treturn jQuery;\r\n};\r\n\r\n// Expose jQuery and $ identifiers, even in AMD\r\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\r\n// and CommonJS for browser emulators (#13566)\r\nif ( typeof noGlobal === \"undefined\" ) {\r\n\twindow.jQuery = window.$ = jQuery;\r\n}\r\n\r\n\r\n\r\n\r\nreturn jQuery;\r\n} );\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/extended/js/vendors/plugins/datatables.init.js");
/******/ 	
/******/ })()
;